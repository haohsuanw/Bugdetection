__label__1 ['pixmap.drawCircle'  '('  'x'  ' '  'y'  ' '  'radius'  ' '  'color'  ')'] 
__label__1 ['!'  'isClosed.get'  '('  ')'] 
__label__0 incomingEdges.containsKey ( dest ) 
__label__0 LOG.debug ( `` Getting synchronous method stub from channel '' ) 
__label__0 checkNotNull ( sink , '' The data sink must not be null . '' ) 
__label__0 executeJobExecutorForTime ( 10000,200 ) 
__label__0 ! uuid.equals ( NULL ) 
__label__1 ['type'  '=='  'TokenTypes.CLASS_DEF'] 
__label__1 ['resultEndpoint.setMinimumResultWaitTime'  '('  '1000'  ')'] 
__label__1 ['beans.add'  '('  '0'  ' '  'bean'  ')'] 
__label__1 ['sanitizedName'  '('  'name'  ')'] 
__label__0 connectionManager.markOwnerConnectionAsClosed ( ) 
__label__1 ['Arrays.asList'  '('  '``'  'Java'  "''"  ' '  "''"  'CSharp'  "''"  ' '  "''"  'Python2'  "''"  ' '  "''"  'Python3'  "''"  ' '  "''"  'Node'  "''"  ')'] 
__label__0 new ModelNode ( 512 ) 
__label__1 ['assertEquals'  '('  '10'  ' '  'events.size'  '('  ')'  ')'] 
__label__0 checkNotNull ( getPropDefFromClass ( superType , pname ) , '' getPropDefFromClass ( % s , % s ) returned null '' , superType , pname ) 
__label__0 request.getParams ( ) ! = null & & ! request.getParams ( ) .isEmpty ( ) 
__label__0 titleCache.setColors ( Color.tmp.set ( getColor ( ) ) .mul ( style.titleFontColor ) ) 
__label__1 ['localX2'  '*'  'cos'] 
__label__0 UnderFileSystemUtils.deleteFileIfExists ( mCheckpointPath ) 
__label__1 ['UserGroupInformation.getCurrentUser'  '('  ')'  '.reloginFromKeytab'  '('  ')'] 
__label__0 logger.warn ( `` '' , ex ) 
__label__0 public Builder setProxyPrincipal ( String principal ) { this.proxyPrincipal=principal ; return this ; } 
__label__0 report ( n , MISPLACED_ANNOTATION , '' @ abstract '' , '' only functions or methods can be abstract '' ) 
__label__0 amq.getConfiguration ( ) .getOrCreateConnectionFactory ( ) 
__label__0 UfsUtils.loadUfs ( new AlluxioURI ( AlluxioURI.SEPARATOR ) , new AlluxioURI ( mUfsRoot + AlluxioURI.SEPARATOR ) , new PrefixList ( `` alluxio ; exclusions '' , '' ; '' ) , mLocalAlluxioClusterResource.get ( ) .getMasterConf ( ) ) 
__label__1 ['cache.remove'  '('  'this'  ')'] 
__label__0 new GdxRuntimeException ( `` Error during Vorbis decoding . `` , e ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/user_timeline/ '' + id+ `` .json '' , null , paging.asPostParameterList ( ) , http.isAuthenticationEnabled ( ) ) ) 
__label__0 ALIASES.addOperationParameterDescription ( resources , '' infinispan.container '' , op ) 
__label__1 ['twitter1.getRetweeterIds'  '('  '18594701629l'  ' '  '-1'  ')'] 
__label__1 ['InputProcessor'  '['  ']'] 
__label__0 log.debug ( `` Received ping -- > { } '' , payload ) 
__label__0 System.currentTimeMillis ( ) + 10000 
__label__1 ['public'  'DerivedBuilder'  'setRealmScheme'  '('  'Realm.AuthScheme'  'scheme'  ')'  '{'  'realm'  '('  ')'  '.setScheme'  '('  'scheme'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['assertEquals'  '('  '8'  ' '  'lm.getFields'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__1 ['queryIdsSnapshot.remove'  '('  'deadQuery'  ')'] 
__label__1 ['cc.getPlan'  '('  'verticesPath'  ' '  'edgesPath'  ' '  'resultPath'  ' '  'maxIterations'  ')'] 
__label__1 ['endpoint.getConnectionFactory'  '('  ')'] 
__label__1 ['public'  'class'  'DefaultDynamicTransformerRegistry'  'implements'  'DynamicTrnasformerRegistry'  '{'  'private'  'final'  'Logger'  'logger=LoggerFactory.getLogger'  '('  'this.getClass'  '('  ')'  ')'  ';'  'private'  'final'  'ConcurrentMap'  '<'  'TransformerKey'  ' '  'ClassFileTransformer'  '>'  'transformerMap=new'  'ConcurrentHashMap'  '<'  'TransformerKey'  ' '  'ClassFileTransformer'  '>'  '('  ')'  ';'  '@'  'Override'  'public'  'void'  'onRetransformRequest'  '('  'Class'  '<'  '?'  '>'  'target'  ' '  'final'  'ClassFileTransformer'  'transformer'  ')'  '{'  'add'  '('  'target.getClassLoader'  '('  ')'  ' '  'target.getName'  '('  ')'  ' '  'transformer'  ')'  ';'  'if'  '('  'logger.isInfoEnabled'  '('  ')'  ')'  '{'  'logger.info'  '('  '``'  'added'  'retransformer'  'classLoader'  ':'  '{'  '}'  ' '  'class'  ':'  '{'  '}'  ' '  'registry'  'size'  ':'  '{'  '}'  "''"  ' '  'target.getClassLoader'  '('  ')'  ' '  'target.getName'  '('  ')'  ' '  'transformerMap.size'  '('  ')'  ')'  ';'  '}'  '}'  '@'  'Override'  'public'  'void'  'onTransformRequest'  '('  'ClassLoader'  'classLoader'  ' '  'String'  'targetClassName'  ' '  'ClassFileTransformer'  'transformer'  ')'  '{'  'add'  '('  'classLoader'  ' '  'targetClassName'  ' '  'transformer'  ')'  ';'  'if'  '('  'logger.isInfoEnabled'  '('  ')'  ')'  '{'  'logger.info'  '('  '``'  'added'  'dynamic'  'transformer'  'classLoader'  ':'  '{'  '}'  ' '  'className'  ':'  '{'  '}'  ' '  'registry'  'size'  ':'  '{'  '}'  "''"  ' '  'classLoader'  ' '  'targetClassName'  ' '  'transformerMap.size'  '('  ')'  ')'  ';'  '}'  '}'  'private'  'void'  'add'  '('  'ClassLoader'  'classLoader'  ' '  'String'  'targetClassName'  ' '  'ClassFileTransformer'  'transformer'  ')'  '{'  'ClassFileTransformer'  'prev=transformerMap.putIfAbsent'  '('  'new'  'TransformerKey'  '('  'classLoader'  ' '  'targetClassName.replace'  '('  "'"  '.'  "'"  ' '  "'/"  "'"  ')'  ')'  ' '  'transformer'  ')'  ';'  'if'  '('  'prev'  '!'  '='  'null'  ')'  '{'  'throw'  'new'  'ProfilerException'  '('  '``'  'Transformer'  'already'  'exists'  '.'  'classLoader'  ':'  '``'  '+'  'classLoader'  '+'  '``'  ' '  'target'  ':'  '``'  '+'  'targetClassName+'  '``'  ' '  'transformer'  ':'  '``'  '+'  'prev'  ')'  ';'  '}'  '}'  '@'  'Override'  'public'  'ClassFileTransformer'  'getTransformer'  '('  'ClassLoader'  'classLoader'  ' '  'String'  'targetClassName'  ')'  '{'  'if'  '('  'transformerMap.isEmpty'  '('  ')'  ')'  '{'  'return'  'null'  ';'  '}'  'ClassFileTransformer'  'transformer=transformerMap.remove'  '('  'new'  'TransformerKey'  '('  'classLoader'  ' '  'targetClassName'  ')'  ')'  ';'  'if'  '('  'logger.isDebugEnabled'  '('  ')'  ')'  '{'  'logger.info'  '('  '``'  'removed'  'dynamic'  'transformer'  'classLoader'  ':'  '{'  '}'  ' '  'className'  ':'  '{'  '}'  ' '  'registry'  'size'  ':'  '{'  '}'  "''"  ' '  'classLoader'  ' '  'targetClassName'  ' '  'transformerMap.size'  '('  ')'  ')'  ';'  '}'  'return'  'transformer'  ';'  '}'  'private'  'static'  'final'  'class'  'TransformerKey'  '{'  'private'  'final'  'ClassLoader'  'classLoader'  ';'  'private'  'final'  'String'  'targetClassName'  ';'  'public'  'TransformerKey'  '('  'ClassLoader'  'classLoader'  ' '  'String'  'targetClassName'  ')'  '{'  'this.classLoader=classLoader'  ';'  'this.targetClassName=targetClassName'  ';'  '}'  '@'  'Override'  'public'  'int'  'hashCode'  '('  ')'  '{'  'return'  'classLoader.hashCode'  '('  ')'  '*'  '31'  '+'  'targetClassName.hashCode'  '('  ')'  ';'  '}'  '@'  'Override'  'public'  'boolean'  'equals'  '('  'Object'  'obj'  ')'  '{'  'TransformerKey'  'other='  '('  'TransformerKey'  ')'  'obj'  ';'  'return'  'this.classLoader.equals'  '('  'other.classLoader'  ')'  '&'  '&'  'this.targetClassName.equals'  '('  'other.targetClassName'  ')'  ';'  '}'  '}'  '}'] 
__label__1 ['assertClusterSize'  '('  '2'  ' '  'nodes'  '['  '0'  ']'  ')'] 
__label__0 execution.getJobs ( ) .remove ( jobEntity ) 
__label__1 ['options.removeUnusedVars'] 
__label__1 ['getRegistry'  '('  ')'  '.put'  '('  '``'  'myFilter'  "''"  ' '  'new'  'NotificationFilter'  '('  ')'  '{'  'private'  'static'  'final'  'long'  'serialVersionUID=1L'  ';'  'public'  'boolean'  'isNotificationEnabled'  '('  'Notification'  'aNotification'  ')'  '{'  'boolean'  'enabled=aNotification.getSequenceNumber'  '('  ')'  '%'  '2'  '=='  '0'  ';'  'if'  '('  '!'  'enabled'  ')'  '{'  'mRejected.add'  '('  'aNotification'  ')'  ';'  '}'  'return'  'enabled'  ';'  '}'  '}'  ')'] 
__label__0 logger.fine ( `` Aliasing common strings '' ) 
__label__1 ['new'  'char'  '['  '128'  ']'] 
__label__0 result.expectedBodiesReceivedInAnyOrder ( `` A+C+E+G+I '' , '' B+D+F+H+J '' ) 
__label__1 ['ran.nextInt'  '('  '500'  ')'] 
__label__1 ['log.debug'  '('  '``'  'Error'  'while'  'closing'  'command'  'context'  "''"  ' '  'exception'  ')'] 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__0 factory.terminateAll ( ) 
__label__1 ['new'  'RuntimeException'  '('  'e'  ')'] 
__label__0 g.tool.errMgr.grammarError ( ErrorType.INVALID_RULE_PARAMETER_REF , g.fileName , y , y.getText ( ) , rref.name , expr ) 
__label__1 ['assertTrue'  '('  'found'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/user_timeline/'  "''"  '+'  'id+'  '``'  '.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'http.isAuthenticationEnabled'  '('  ')'  ')'  ')'] 
__label__0 ! config.isAutoRead ( ) 
__label__0 LoopContextStateRetrieval retrievalToAdapt 
__label__0 line.toString ( charset ) 
__label__1 ['new'  'StringBuilder'  '('  '239'  ')'] 
__label__1 ['setMinHeight'  '('  'minWidth'  ')'] 
__label__0 Type.LONG_TYPE.equals ( typeInStack ) || Type.DOUBLE_TYPE.equals ( typeInStack ) 
__label__0 new StringBuilder ( 245 ) 
__label__0 Context.hasPrivilege ( OpenmrsConstants.PRIV_EDIT_USERS ) 
__label__0 calendar.get ( HOUR_OF_DAY ) 
__label__1 ['endTrack'  '('  '``'  'main'  "''"  ')'] 
__label__1 ['new'  'CompilerException'  '('  'sourceName'  ' '  'e.line'  ' '  'e.getCause'  '('  ')'  ')'] 
__label__0 final Exception ignored 
__label__0 CHECK_TEXT.computeIfAbsent ( `` Properties '' , unused - > `` '' ) 
__label__0 new Exception ( `` Apparent connection leak detected '' ) 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['new'  'InetSocketAddress'  '('  '``'  'localhost'  "''"  ' 8888'  ')'] 
__label__1 ['invocation.logger.warning'  '('  '``'  "'is-executing"  "'"  ':'  '``'  '+'  'executing'  '+'  '``'  '-'  '>'  '``'  '+'  'invocation'  ')'] 
__label__0 serversByLoad.firstKey ( ) 
__label__1 ['assertEquals'  '('  'fc'  ' '  'fc2'  ')'] 
__label__0 invocation.logger.finest ( `` Asking if operation execution has been started : `` + invocation ) 
__label__0 from ( `` direct : a '' ) .delay ( 5000 ) 
__label__1 ['Integer.valueOf'  '('  '2'  ')'] 
__label__0 public class CourierNew extends BasicFontMetrics { { maxCharHeight=678 ; for ( int i=0 ; i < 128 ; i++ ) widths [ i ] =600 ; } } 
__label__0 new HazelcastProperty ( `` hazelcast.invalidation.min.reconciliation.interval.seconds '' ,30 , SECONDS ) 
__label__0 getOrCreateContainer ( ) .forceUnlock ( dataKey ) 
__label__1 ['ar.cause'  '('  ')'] 
__label__1 ['Arrays.asList'  '('  'RFXComValueSelector.RAW_DATA'  ' '  'RFXComValueSelector.SIGNAL_LEVEL'  ' '  'RFXComValueSelector.COMMAND'  ' '  'RFXComValueSelector.DIMMING_LEVEL'  ')'] 
__label__0 assertClusterSizeEventually ( 2 , nodes [ 0 ] ) 
__label__0 dis.readFully ( serializedData,0 , length ) 
__label__1 ['WebAppUtils.getResolvedRMWebAppURLWithoutScheme'  '('  'conf'  ')'] 
__label__1 ['atlasFile.path'  '('  ')'] 
__label__1 ['mock'  '('  'ExampleService.class'  ' '  'MockReset.before'  '('  ')'  ')'] 
__label__1 ['original.getScreenName'  '('  ')'  '.endsWith'  '('  '``'  'new'  "''"  ')'] 
__label__0 Foundation.log ( `` [ info ] `` + tag + `` : `` + message ) 
__label__1 ['volumes.toString'  '('  ')'] 
__label__0 Bukkit.getOperators ( ) 
__label__1 ['Optional.of'  '('  'resourceManagement.getStats'  '('  ')'  ')'] 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` db '' ) 
__label__1 ['method.invoke'  '('  'method'  ' '  'ByteBuffer.allocate'  '('  '1'  ')'  ')'] 
__label__0 Preconditions.checkNotNull ( uri , '' uri '' ) 
__label__1 ['log.debug'  '('  'message'  ' '  'exception'  ')'] 
__label__0 camera.setMatrices ( ) 
__label__1 ['reg.put'  '('  '``'  'localhost'  ':'  "''"  '+'  'port'  ' '  'ctx'  ')'] 
__label__1 ['isCancelled0'  '('  'result'  ')'] 
__label__1 ['findDelegate'  '('  'name'  ')'] 
__label__0 Character.toUpperCase ( ch ) 
__label__0 contact.getWorldManifold ( ) 
__label__0 endTracksTo ( `` main '' ) 
__label__1 ['assertEquals'  '('  '2'  ' '  'map.size'  '('  ')'  ')'] 
__label__0 logger.debug ( `` { } { } '' , errorCode , message ) 
__label__0 assertEquals ( `` [ ] '' , q.toString ( ) ) 
__label__0 totalBytesOnTiers.containsKey ( tierAlias ) & & totalBytesOnTiers.get ( tierAlias ) > 0 
__label__0 Integer.valueOf ( 1 ) 
__label__0 Context.getVisitService ( ) .getAllVisitTypes ( true ) 
__label__0 Validate.notEmpty ( name , '' Cookie name must not be empty '' ) 
__label__1 ['Integer.valueOf'  '('  'p.getProperty'  '('  'screenName'  '+'  '``'  '.id'  "''"  ')'  ')'] 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectory.java '' ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['configuration.addClientInterceptor'  '('  'method'  ' '  'factory'  ' '  'InterceptorOrder.View.COMPONENT_DISPATCHER'  ')'] 
__label__1 ['``'  'Stream'  '``'  '+'  'importer'] 
__label__0 logger.info ( `` Illegal argument in chart : { } '' , e ) 
__label__0 / * * * The exception thrown ( if any ) by the method called in { @ link # run ( ) } * / protected Exception exceptionThrown=null ; 
__label__1 ['Arrays.asList'  '('  '``'  'ls'  "''"  ' '  "''"  'pwd'  "''"  ')'] 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__1 ['HashMap'  '<'  'Object'  ' '  'AggregationStrategy'  '>'] 
__label__0 new JSONParseSpec ( new TimestampSpec ( `` timestamp '' , '' auto '' ) , new DimensionsSpec ( null , null , null ) ) 
__label__0 row == null || row.size ( ) == 0 
__label__1 ['LOG.info'  '('  '``'  'Table'  '{'  '}'  'is'  'disabled'  ' '  'give'  'up'  'reopening'  'its'  'regions'  "''"  ')'] 
__label__1 ['littleEndian.order'  '('  ')'] 
__label__0 new Box2DTestCollection ( ) 
__label__1 ['new'  'InputStreamReader'  '('  'bais'  ' '  'StandardCharsets.UTF_8'  ')'] 
__label__0 testSame ( `` asdf ; '' , '' var asdf ; '' , VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR ) 
__label__1 ['ppcY'  '/'  '2.54f'] 
__label__1 ['new'  'Argument'  '('  ')'  '.setIndex'  '('  '0'  ')'] 
__label__1 ['getBinaryTupledSet'  '('  ')'] 
__label__0 _emittedToOffset=e.startOffset 
__label__1 ['this.categoryWithApiModel=categoryWithApiModel'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweeted_by_me.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['op.get'  '('  'OPERATION_HEADERS'  ')'  '.get'  '('  'ALLOW_RESOURCE_SERVICE_RESTART'  ')'  '.set'  '('  'true'  ')'] 
__label__1 ['new'  'LogVersionMismatchRequest'  '('  ')'] 
__label__1 ['SimpleAttributeDefinitionBuilder.create'  '('  '``'  'max-inclusive'  "''"  ' '  'ModelType.BOOLEAN'  ')'] 
__label__0 Context.getEncounterService ( ) .saveEncounter ( encounter ) 
__label__1 ['config.getClass'  '('  ')'  '.toString'  '('  ')'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['parts.length'  '>'  '0'] 
__label__0 @ Override public Integer getValue ( ) { return getThreadCount ( state ) ; } 
__label__0 new StringBuilder ( 1024 ) 
__label__0 CompletableFuture < Void > 
__label__1 ['details.put'  '('  'CONFIG_HASH_KEY'  ' '  'currentConfigHash'  ')'] 
__label__0 out.writeInt ( this.connectionAddress.getPort ( ) ) 
__label__0 new EnumValidator < Mode > ( Mode.class , false , true ) 
__label__0 dataSource.setInitExceptionThrow ( false ) 
__label__0 p + `` . '' + M_GET_KEYS+ `` . `` + M_ITERATOR 
__label__1 ['jmsManager.destroyTopic'  '('  'name'  ')'] 
__label__1 ['model.getModelName'  '('  ')'] 
__label__1 ['('  'getSource'  '('  ')'  '.z'  '('  ')'  '+'  'getTarget'  '('  ')'  '.z'  '('  ')'  ')'  '/'  '2f'] 
__label__1 ['maxSize'  '>'  '('  'used'  '/'  '1024'  '/'  '1024'  ')'] 
__label__0 singletonComponentInstance == null 
__label__0 Status.createStatuseList ( http.get ( `` http : //yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json '' ) ) 
__label__1 ['logger.debug'  '('  '``'  'defineClass'  'pluginClass'  ':'  '{'  '}'  'cl'  ':'  '{'  '}'  "''"  ' '  'className'  ' '  'classLoader'  ')'] 
__label__1 ['String.format'  '('  '``'  '/subsystem=elytron/filesystem-realm='  '%'  's/identity='  '%'  's'  ':'  'add-attribute'  '('  'name=groups'  ' '  'value='  '['  '%'  's'  ']'  ')'  "''"  ' '  'name'  ' '  'user.getName'  '('  ')'  ' '  'user.getPassword'  '('  ')'  ' '  'String.join'  '('  '``'  ' '  "''"  ' '  'user.getRoles'  '('  ')'  ')'  ')'] 
__label__1 ['sourceEdgeTextData.getText'  '('  ')'  '.isEmpty'  '('  ')'] 
__label__0 mouseEvent.getModifiersEx ( ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/user_timeline/ '' + id+ `` .json '' , http.isAuthenticationEnabled ( ) ) ) 
__label__1 ['gradHidden3'  '['  'nodeIndex'  ']'] 
__label__1 ['Iterable'  '<'  'ObjectType'  '>'] 
__label__0 RequestBody.create ( ( File ) bodyContents , mediaType ) 
__label__1 ['!'  'mIsMessageReady'] 
__label__1 ['session.getMachineIdentifier'  '('  ')'  '.equals'  '('  'config.getMachineIdentifier'  '('  ')'  ')'] 
__label__0 ( offset > = start & & offset < = start + len ) || ( end > = start & & end < = start + len ) || ( offset < = start & & end > = start + len ) 
__label__1 ['new'  'HTable'  '('  'TABLE'  ')'] 
__label__0 assertThat ( this.context.getBean ( FilterChainProxy.class ) .getFilterChains ( ) ) .hasSize ( 6 ) 
__label__1 ['from'  '('  '``'  'direct'  ':'  'a'  "''"  ')'  '.delay'  '('  '3000'  ')'] 
__label__1 ['getConfiguration'  '('  ')'  '.getConnectionFactory'  '('  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Make'  'sure'  'we'  'do'  "n't"  'attempt'  'to'  'recover'  'inline'  ';'  'if'  'the'  'parser'  'successfully'  'recovers'  ' '  'it'  'wo'  "n't"  'throw'  'an'  'exception'  '.'  '*'  '/'  '@'  'Override'  'public'  'Symbol'  'recoverInline'  '('  'BaseRecognizer'  'recognizer'  ')'  'throws'  'RecognitionException'  '{'  'throw'  'new'  'RuntimeException'  '('  'new'  'InputMismatchException'  '('  'recognizer'  ')'  ')'  ';'  '}'] 
__label__1 ['``'  'Invalid'  'modules'  'directory'  ':'  '``'  '+'  'modulesDir'] 
__label__1 ['assertEquals'  '('  '1'  ' '  'historyService.createHistoricActivityInstanceQuery'  '('  ')'  '.executionId'  '('  'processInstance.getId'  '('  ')'  ')'  '.list'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__1 ['new'  'IOException'  '('  'ExceptionMessage.BLOCK_UNAVAILABLE.getMessage'  '('  'blockId'  ')'  ')'] 
__label__1 ['RestartStrategies.fixedDelayRestart'  '('  '3 0'  ')'] 
__label__0 hazelcastFactory.newHazelcastClient ( newClientConfig ( ) ) 
__label__0 log.debug ( `` Worker nodes % s do not have capacity to run any more tasks ! `` , zkWorkers.values ( ) ) 
__label__1 ['mapper.getJsonFactory'  '('  ')'] 
__label__1 ['node.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 graphModel.getUndirectedGraphVisible ( ) 
__label__1 ['hotRestartState'  '!'  '='  'null'] 
__label__0 statistics.addPutTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['{'  'MAGIC_HIGH'  ' '  'MAGIC_LOW 0x20 20 0 0 0 0 0 0 0 0 0 0 0 0'  '}'] 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'byte'  '['  ']'  'copy=new'  'byte'  '['  'this.length'  ']'  ';'  'ByteBufferUtils.copyFromBufferToArray'  '('  'copy'  ' '  'this.buf'  ' '  'this.offset 0'  ' '  'this.length'  ')'  ';'  'KeyValue'  'kv=new'  'KeyValue'  '('  'copy 0'  ' '  'copy.length'  ')'  ';'  'kv.setSequenceId'  '('  'this.getSequenceId'  '('  ')'  ')'  ';'  'return'  'kv'  ';'  '}'] 
__label__1 ['watch.stop'  '('  ')'] 
__label__0 component.setMaxThreads ( 20 ) 
__label__0 Map < String , Object > 
__label__0 getConnectTimeout ( ) 
__label__1 ['lock.lock'  '('  ')'] 
__label__0 ! isSdkLocationValid ( sdkLocation ) 
__label__0 DeleteOptions.defaults ( ) .setRecursive ( true ) .setAlluxioOnly ( false ) .setUnchecked ( true ) 
__label__0 new JmxEndpointProperties ( ) 
__label__1 ['HashMap'  '<'  'String'  ' '  'ASTNode'  '>'] 
__label__0 domainModel.execute ( ExecutionContextBuilder.Factory.create ( update ) .build ( ) , resultHandler ) 
__label__0 new StringBuilder ( 256 ) 
__label__0 callTimeoutMillis=3000 
__label__1 ['LOG.error'  '('  '``'  'Error'  'in'  'response'  'for'  'blockId'  ':'  '``'  '+'  'recvMsg.getBlockId'  '('  ')'  '+'  '``'  'message'  ':'  '``'  '+'  'recvMsg.getStatus'  '('  ')'  '.getMessage'  '('  ')'  ')'] 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'throw'  'new'  'UnsupportedOperationException'  '('  ')'  ';'  '}'] 
__label__1 ['assertAbout'  '('  'javaSources'  '('  ')'  ')'  '.that'  '('  'ImmutableList.of'  '('  'javaFileObject'  ' '  'nestedJavaFileObject'  ')'  ')'  '.withCompilerOptions'  '('  '``'  '-Xlint'  ':'  '-processing'  "''"  ')'] 
__label__0 actor.addListener ( listener ) 
__label__0 new IndexOutOfBoundsException ( fieldNum + `` for range [ 0 .. '' + ( this.numFields - 1 ) + `` ] '' ) 
__label__0 testWarning ( js , VariableReferenceCheck.REDECLARED_VARIABLE ) 
__label__1 ['Preconditions.checkState'  '('  'hasInstanceType'  '('  ')'  ')'] 
__label__1 ['getConnectionFactory'  '('  ')'] 
__label__1 ['config.getBroadcasterFactory'  '('  ')'  '.lookup'  '('  'm.broadcaster'  '('  ')'  ' '  'true'  ')'] 
__label__0 new ModelNode ( ) .set ( 1L ) 
__label__0 logger.trace ( `` attempting to login '' ) 
__label__1 ['GL20.glUniform4'  '('  'location'  ' '  'v'  ')'] 
__label__0 assertThat ( request.getBody ( ) .readUtf8 ( ) ) .isIn ( `` < my-object > < message > hello world < /message > < count > 10 < /count > < /my-object > '' , '' < my-object > < count > 10 < /count > < message > hello world < /message > < /my-object > '' ) 
__label__0 url.toServiceStringWithoutResolving ( ) 
__label__1 ['mock.expectedMessageCount'  '('  '1'  ')'] 
__label__1 ['injectionConfiguration.getSource'  '('  ')'  '.getResourceValue'  '('  'serviceBuilder'  ' '  'context'  ' '  'managedReferenceFactoryValue'  ')'] 
__label__1 ['getCamelContext'  '('  ')'  '.getTypeConverter'  '('  ')'  '.convertTo'  '('  'int.class'  ' '  'dataTimeout'  ')'] 
__label__1 ['suiteMethod.invoke'  '('  'null'  ' '  '('  'Object'  '['  ']'  ')'  'new'  'Class'  '['  '0'  ']'  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'TransactionalSetBasicLocalTest'  'extends'  'TransactionalSetBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '1'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__1 ['Foundation.NSLog'  '('  '``'  '['  'debug'  ']'  '``'  '+'  'tag'  '+'  '``'  ':'  '``'  '+'  'message'  ')'] 
__label__1 ['getJSDocTypeWithBraces'  '('  'operation'  ')'] 
__label__0 entity instanceof ProcessDefinitionEntity 
__label__0 LOG.info ( `` recovered from `` + StringUtils.stringifyException ( e ) ) 
__label__1 ['tblObj.getDataLocation'  '('  ')'] 
__label__0 twitter1.checkUserListSubscription ( id1.screenName , userList.getId ( ) , id2.id ) 
__label__1 ['assertEquals'  '('  'mock.getExchanges'  '('  ')'  '.get'  '('  '1'  ')'  '.getIn'  '('  ')'  '.getHeader'  '('  'ChronicleEngineConstants.OLD_VALUE'  ')'  ' '  "''"  'val-2'  "''"  ')'] 
__label__1 ['child.getParent'  '('  ')'] 
__label__1 ['ImmutableList.of'  '('  'listeners'  ')'] 
__label__0 exchange.getResponse ( ) .setComplete ( ) 
__label__1 ['getTimeout'  '('  ')'] 
__label__1 ['processor.open'  '('  'w'  ' '  'request'  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Building'  'gRPC'  'server'  'on'  '``'  '+'  'configuration.getHost'  '('  ')'  '+'  '``'  ':'  "''"  '+'  'configuration.getPort'  '('  ')'  ')'] 
__label__0 getRequestParameters ( ) 
__label__0 Wt.getSlice ( slice ) .plus ( Wt.getSlice ( slice ) .transpose ( ) ) 
__label__0 mTestStream.getFlushedBytes ( ) 
__label__0 ! mTFS.exists ( turi ) 
__label__1 ['Flux.create'  '('  'camelSink'  ':'  ':set'  ')'] 
__label__0 CalciteTests.createMockSystemSchema ( druidSchema , walker , plannerConfig ) 
__label__0 assertMockEndpointsSatisfied ( ) 
__label__0 entry ! = null & & ! DropboxUploadMode.force.equals ( mode ) 
__label__1 ['!'  'template.contains'  '('  'PATH_AUTO_NODE_INDEX'  ')'  '&'  '&'  '!'  'template.contains'  '('  'PATH_AUTO_RELATIONSHIP_INDEX'  ')'] 
__label__1 ['ImmutableSet.of'  '('  '``'  'testStringRepresentation'  "''"  ')'] 
__label__1 ['ShrinkWrap.create'  '('  'JavaArchive.class'  ')'  '.addClasses'  '('  'EmployeeBean.class'  ' '  'Employee.class'  ')'  '.addAsManifestResource'  '('  'EmptyAsset.INSTANCE'  ' '  "''"  'beans.xml'  "''"  ')'] 
__label__1 ['getTokenNames'  '('  ')'] 
__label__0 target.setField ( 1 , val2 ) 
__label__0 primitiveType == GL10.GL_POINTS 
__label__0 Arrays.asList ( RFXComValueSelector.RAW_DATA , RFXComValueSelector.SIGNAL_LEVEL , RFXComValueSelector.COMMAND , RFXComValueSelector.DIMMING_LEVEL , RFXComValueSelector.CONTACT ) 
__label__0 LOG.debug ( `` Terminating channel to the remote gRPC server '' ) 
__label__0 log.info ( message , exception ) 
__label__1 ['framework.getBroadcasterFactory'  '('  ')'  '.lookup'  '('  'm.broadcaster'  '('  ')'  ' '  'true'  ')'] 
__label__0 new DefaultAgentOption ( agentArgs , instrumentation , profilerConfig , pluginJars , bootStrapJarCorePath , serviceTypeRegistryService , annotationKeyRegistryService ) 
__label__1 ['('  '('  'StringLiteral'  ')'  'literal'  ')'  '.getSlice'  '('  ')'] 
__label__0 PositiveDurationValidator.class 
__label__1 ['exchange.addRequestHeader'  '('  'HttpHeaders.AUTHORIZATION'  ' '  "''"  'OAuth'  '``'  '+'  'accessToken'  ')'] 
__label__1 ['item'  '=='  'null'] 
__label__0 websocketComponent.setMaxThreads ( 20 ) 
__label__1 ['/'  '*'  '*'  '*'  'Signal'  'the'  'maps/reduces'  'to'  'start'  '.'  '*'  '/'  'static'  'void'  'signalTasks'  '('  'MiniDFSCluster'  'dfs'  ' '  'FileSystem'  'fileSys'  ' '  'String'  'mapSignalFile'  ' '  'String'  'reduceSignalFile'  ' '  'int'  'replication'  ')'  'throws'  'IOException'  '{'  'writeFile'  '('  'dfs.getNameNode'  '('  ')'  ' '  'fileSys.getConf'  '('  ')'  ' '  'new'  'Path'  '('  'mapSignalFile'  ')'  ' '  '('  'short'  ')'  'replication'  ')'  ';'  'writeFile'  '('  'dfs.getNameNode'  '('  ')'  ' '  'fileSys.getConf'  '('  ')'  ' '  'new'  'Path'  '('  'reduceSignalFile'  ')'  ' '  '('  'short'  ')'  'replication'  ')'  ';'  '}'] 
__label__1 ['new'  'byte'  '['  '10'  ']'] 
__label__0 x instanceof ISeq || x instanceof IPersistentList 
__label__1 ['to'  '('  '``'  'direct'  ':'  'foo'  "''"  ')'] 
__label__1 ['expectedCountsForADoc'  '('  'weights'  ' '  'ind'  ')'] 
__label__0 new FileInputStream ( aProps ) 
__label__1 ['attribute.getDefinition'  '('  ')'  '.getAttributeMarshaller'  '('  ')'] 
__label__1 ['IllegalArgumentException'  'e'] 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__0 this.thrown.expectMessage ( `` File must exist '' ) 
__label__1 ['Setting'  '<'  'Long'  '>'] 
__label__1 ['new'  'CustomChangeException'  '('  '``'  'Failed'  'to'  'insert'  'one'  'or'  'more'  'concept'  'map'  'types'  "''"  ')'] 
__label__0 new StringBuilder ( 253 ) 
__label__1 ['exchange.getPartitioningScheme'  '('  ')'  '.isReplicateNulls'  '('  ')'] 
__label__1 ['manager'  '!'  '='  'null'] 
__label__1 ['endpoint.getConnectionFactory'  '('  ')'] 
__label__1 ['resourceRegistration.registerAdditionalRuntimePackages'  '('  'RuntimePackageDependency.optional'  '('  '``'  'org.hibernate.search.orm'  "''"  ')'  ' '  'RuntimePackageDependency.required'  '('  '``'  'org.hibernate'  "''"  ')'  ')'] 
__label__0 mBlockRemovalService.shutdown ( ) 
__label__1 ['/'  '*'  '*'  '*'  'The'  'resource'  '.'  '*'  '/'  'private'  'T'  'mResource'  ';'] 
__label__0 assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { Collection < EventRegistration > regs1=eventService1.getRegistrations ( MapService.SERVICE_NAME , mapName ) ; Collection < EventRegistration > regs2=eventService2.getRegistrations ( MapService.SERVICE_NAME , mapName ) ; assertEquals ( `` there should be only one registration '' ,1 , regs1.size ( ) ) ; assertEquals ( `` there should be only one registration '' ,1 , regs2.size ( ) ) ; } } ) 
__label__1 ['new'  'ArrayList'  '<'  'Object'  '>'  '('  ')'] 
__label__1 ['json.toString'  '('  '1'  ')'] 
__label__1 ['uuid.equals'  '('  'NULL'  ')'] 
__label__1 ['TfsShell.convertMsToDate'  '('  'mTfs.getInfo'  '('  'mTfs.open'  '('  'tUri'  ')'  ')'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__0 assertEquals ( 504 , cause.getStatusCode ( ) ) 
__label__1 ['SortedMap'  '<'  'Integer'  ' '  'Integer'  '>'] 
__label__0 LOG.warn ( `` Ignoring duplicate class `` + className ) 
__label__1 ['JsonObject.createObjectMapper'  '('  ')'  '.getJsonFactory'  '('  ')'] 
__label__1 ['setComplete'  '('  'length'  ')'] 
__label__1 ['instance2.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 gradHidden [ nodeIndex ] 
__label__1 ['cache.setRecord'  '('  'key'  ' '  'record'  ')'] 
__label__1 ['cursor.retry'  '('  ')'] 
__label__0 typeConverter.convertTo ( XMLStreamReader.class , exchange , stream ) 
__label__0 wizardModel.databaseConnection.contains ( `` localhost '' ) || wizardModel.databaseConnection.contains ( `` 127.0.0.1 '' ) 
__label__0 endpoint.getCamelContext ( ) .getClassResolver ( ) .resolveMandatoryClass ( endpoint.getConfiguration ( ) .getTargetModel ( ) ) 
__label__0 response == null || response.value == null 
__label__0 channel.disconnect ( ) 
__label__0 new IllegalStateException ( String.format ( `` File \ '' % 1 $ s\ '' has inconsistent comment on line % 2 $ d '' , aFileName , lineNumber ) ) 
__label__1 ['person.getVoidReason'  '('  ')'] 
__label__1 ['ObjectTypeAttributeDefinition.Builder.of'  '('  'ModelKeys.REMOTE_SERVER'  ' '  'OUTBOUND_SOCKET_BINDING'  ')'  '.setAllowNull'  '('  'true'  ')'] 
__label__1 ['chooser.showSaveDialog'  '('  'null'  ')'] 
__label__0 JSError.make ( `` my/js.js '' , -1 , -1 , ModuleLoader.MODULE_CONFLICT , '' my/js.js '' ) 
__label__0 MessageSerializer.serializeServerFailure ( ctx.alloc ( ) , new RuntimeException ( msg ) ) 
__label__0 queueLength.asString ( ) 
__label__1 ['filteredData.addAccessRestrictedResource'  '('  'absoluteChildAddr'  ')'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__1 ['titleTextField.getText'  '('  ')'] 
__label__0 logger.trace ( `` myq securityToken : { } '' , securityToken ) 
__label__0 StringBuilder sb=new StringBuilder ( ) ; 
__label__0 ! template.contains ( PATH_AUTO_NODE_INDEX ) & & ! template.contains ( PATH_AUTO_RELATIONSHIP_INDEX ) & & ! template.contains ( `` _auto_ '' ) 
__label__0 proxyServer ! = null & & ! isSecure ( uri ) 
__label__1 ['cf.getCompressionType'  '('  ')'  '=='  'null'] 
__label__1 ['setLowHighExpected'  '('  'lowResults'  ' '  'highResults'  ' '  'expectedResults'  ' '  'CONLL_SCORE 53.75 54.00 54.01'  ')'] 
__label__0 GL20.glUniformMatrix3fv ( location , transpose , value ) 
__label__0 new GatherGetterAndSetterProperties ( compiler ) 
__label__1 ['Reflection.methodHandle'  '('  'type'  ' '  "''"  'sizeOf'  "''"  ' '  'null'  ')'] 
__label__1 ['getTimeout'  '('  ')'] 
__label__1 ['bindings.get'  '('  ')'] 
__label__1 ['new'  'byte'  '['  '17'  ']'] 
__label__0 log.error ( `` PID contains identifier with no assigning authority '' ) 
__label__0 new PairPongMsg ( getMessageCount ( ) , ( byte ) 0 , ( byte ) 0 , this.srcAddr , dstAddr ) 
__label__1 ['resultEndpoint.expectedMessageCount'  '('  '2'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'rapidRefreshFuture'  'scheduleing'  'for'  '{'  '}'  'millis'  "''"  ' '  'millis'  ')'] 
__label__1 ['new'  'ModelNode'  '('  ')'  '.set'  '('  '1L'  ')'] 
__label__1 ['propResource.get'  '('  'BOOT_TIME'  ')'  '.asBoolean'  '('  ')'] 
__label__0 assertEquals ( 4 , possibleOutcomes.size ( ) ) 
__label__1 ['grammar.getTokenNames'  '('  ')'] 
__label__1 ['bufferedBytes'  '>'  '='  'maxBufferedBytes'] 
__label__1 ['qp.getExclusiveMaximum'  '('  ')'] 
__label__1 ['item.getName'  '('  ')'  '.matches'  '('  'name'  ')'] 
__label__0 new SpringApplicationBuilder ( SampleSecureApplication.class ) .properties ( `` security.user.password=password '' ) 
__label__1 ['node.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 reservedWords.contains ( codegenProperty.datatypeWithEnum ) || name.equals ( codegenProperty.datatypeWithEnum ) 
__label__1 ['targetActor.addCaptureListener'  '('  'listener'  ')'] 
__label__0 registration.registerOperationHandler ( CommonAttributes.DISABLE , ModClusterDisable.INSTANCE , disable , false , runtimeOnlyFlags ) 
__label__0 config.getStrategyImpl ( ) 
__label__0 lowByte.equals ( `` '' ) 
__label__0 @ Path ( PATH_RELATIONSHIP_INDEX_ID ) 
__label__1 ['uri.getPath'  '('  ')'] 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'not'  'be'  'null'  "''"  ')'] 
__label__0 VertexAttribute.ColorPacked ( ) 
__label__1 ['Set'  '<'  'String'  '>'] 
__label__1 ['DiagnosticType.warning'  '('  '``'  'JSC_INVALID_MODULE_PATH'  "''"  ' '  "''"  'Invalid'  'module'  'path'  '\\'  "''"  '{'  '0'  '}'  '\\'  "''"  'for'  'resolution'  'mode'  '\\'  "''"  '{'  '1'  '}'  '\\'  "''"  "''"  ')'] 
__label__0 LOGGER.error ( `` { } - Failed to execute isValid ( ) for connection , configure connection test query . ( { } ) '' , poolName , e.getMessage ( ) ) 
__label__1 ['event.remove'  '('  'factory.getName'  '('  ')'  ')'] 
__label__1 ['assertClusterSize'  '('  '2'  ' '  'h2'  ')'] 
__label__0 globalSecurityDomain ! = null & & ! globalSecurityDomain.isEmpty ( ) 
__label__0 Integer.parseInt ( sessionTTL ) 
__label__1 ['type'  '!'  '='  'REPARTITION'] 
__label__0 getCurrCapacityUsed ( ) 
__label__0 LOG.debug ( `` Ignoring duplicate journal entry with SN { } when next SN is { } '' , newSN , mNextSequenceNumberToRead ) 
__label__1 ['option.getType'  '('  ')'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__0 getMockEndpoint ( `` mock : start '' ) .expectedMinimumMessageCount ( 5 ) 
__label__1 ['targetActor.addListener'  '('  'listener'  ')'] 
__label__0 Thread.currentThread ( ) .interrupted ( ) 
__label__0 LOG.warn ( `` Can not create the SAXParser XMLReader , due to { } '' , ex.getMessage ( ) , ex ) 
__label__1 ['logger.info'  '('  '``'  'Creating'  'Object'  '{'  '}'  "''"  ' '  'count.getAndIncrement'  '('  ')'  ')'] 
__label__0 locator.getRegionLocation ( regionName , true ) 
__label__1 ['incomingMessage.setTransActionCanceled'  '('  'true'  ')'] 
__label__0 holder.addCallback ( callback ) 
__label__0 LOG.trace ( `` The sequence id for { } is continuous , pass '' , entry ) 
__label__0 config.get ( CONFIG_KEY_LOCK_READ_TIMEOUT ) 
__label__1 ['ensureInChild'  '('  'parent'  ' '  'FooImpl.class'  ' '  'FooBar.class'  ' '  'Foo.class'  ')'] 
__label__1 ['Thread.sleep'  '('  '200'  ')'] 
__label__1 ['logger.error'  '('  '``'  'Error'  'connecting'  'to'  'Plex'  "''"  ' '  'e'  ')'] 
__label__1 ['types.get'  '('  'channel'  ')'] 
__label__1 ['stat.st_size.get'  '('  ')'] 
__label__0 DEFAULT_NUMBER_OF_READ_BUFFERS=256 
__label__1 ['ServiceAuthorizationManager.refresh'  '('  'conf'  ' '  'new'  'HBasePolicyProvider'  '('  ')'  ')'] 
__label__1 ['getHttpConnectionManager'  '('  ')'] 
__label__1 ['element.getNodeName'  '('  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['getConcept'  '('  ')'  '!'  '='  'null'  '||'  'getConcept'  '('  ')'  '.getDescription'  '('  ')'  '!'  '='  'null'] 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['assertEquals'  '('  '2'  ' '  'historyService.createHistoricActivityInstanceQuery'  '('  ')'  '.executionId'  '('  'processInstance.getId'  '('  ')'  ')'  '.list'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__0 incomingMessage.getMessagePayloadByte ( 1 ) 
__label__0 conceptToValidate.getUuid ( ) 
__label__0 routes.IndicesResource ( ) .delete ( index ) 
__label__1 ['terms.facetFilter'  '('  'standardFilters'  '('  'range'  ' '  'filter'  ')'  ')'] 
__label__0 assertEquals ( 2 , beanInfo.getAttributes ( ) .length ) 
__label__0 columnType.equalsIgnoreCase ( `` double '' ) || columnType.equalsIgnoreCase ( `` float '' ) 
__label__1 ['mock.expectedMessageCount'  '('  '2'  ')'] 
__label__0 tabAlias.equalsIgnoreCase ( tableAlias ) 
__label__0 ! key.equals ( OAuthConstants.SCOPE ) 
__label__1 ['public'  'DerivedBuilder'  'setDefaultThrowableHandler'  '('  'ThrowableHandler'  'throwableHandler'  ')'  '{'  'this.defaultThrowableHandler=throwableHandler'  ';'  'return'  'this'  ';'  '}'] 
__label__0 ArrayNodeBaseTest < LazyHeadArrayNode > 
__label__1 ['Wt.getSlice'  '('  'slice'  ')'  '.mult'  '('  'Wt.getSlice'  '('  'slice'  ')'  '.transpose'  '('  ')'  ')'] 
__label__1 ['operation.get'  '('  'OPERATION_HEADERS'  ' '  'ALLOW_RESOURCE_SERVICE_RESTART'  ')'  '.set'  '('  'true'  ')'] 
__label__1 ['to'  '('  '``'  'direct'  ':'  'foo'  "''"  ')'] 
__label__1 ['BroadcasterFactory.getDefault'  '('  ')'  '.get'  '('  'mapping'  ')'] 
__label__0 printLine ( `` Unable to connect due to unrecognised server certificate '' ) 
__label__0 Gdx.files.internal ( fileName ) .pathWithoutExtension ( ) 
__label__0 c.getDomain ( ) == null & & getDomain ( ) ! = null 
__label__1 ['cacheScaled5.setColor'  '('  'red'  ')'] 
__label__1 ['body.getData'  '('  ')'] 
__label__0 new StringBuilder ( 256 ) 
__label__1 ['hz1.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__1 ['CellUtil.estimatedHeapSizeOf'  '('  'c'  ')'] 
__label__0 ChronicleEngineEndpoint endpoint 
__label__1 ['Assert.assertNull'  '('  'ex.getCause'  '('  ')'  ')'] 
__label__1 ['getTimeout'  '('  ')'] 
__label__1 ['Dagger_AutoFactoryProcessorComponent.builder'  '('  ')'] 
__label__1 ['dimensionsSpec.getDimensions'  '('  ')'] 
__label__1 ['model.getCurrentResult'  '('  ')'  '!'  '='  'null'] 
__label__0 detailNode ! = null & & detailNode.getNodeType ( ) .equals ( JsonNodeType.OBJECT ) 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__1 ['latch.await'  '('  '1'  ' '  'TimeUnit.MINUTES'  ')'] 
__label__1 ['new'  'ClosedByInterruptException'  '('  '``'  'Interrupted'  'while'  'reading'  '.'  "''"  ')'] 
__label__1 ['emptyCheck.log'  '('  '0'  ' '  "''"  'msgKey'  "''"  ' '  'null'  ')'] 
__label__1 ['assertEquals'  '('  'model.getProperties'  '('  ')'  '.get'  '('  'COUNT'  ')'  '.getType'  '('  ')'  ' '  "''"  'integer'  "''"  ')'] 
__label__0 stopTimeNs - requestStartTimeNs 
__label__1 ['this.context.getLogAggregationStatusForApps'  '('  ')'  '.add'  '('  'report'  ')'] 
__label__0 assertEquals ( 11 , events.size ( ) ) 
__label__1 ['/'  '*'  '*'  '*'  'Changes'  'the'  'group'  'of'  'a'  'file'  'or'  'directory'  'specified'  'by'  'args'  '.'  '*'  '/'  'public'  'final'  'class'  'ChgrpCommand'  'extends'  'AbstractACLCommand'  '{'  'public'  'ChgrpCommand'  '('  'TachyonConf'  'conf'  ' '  'TachyonFileSystem'  'tfs'  ')'  '{'  'super'  '('  'conf'  ' '  'tfs'  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'getCommandName'  '('  ')'  '{'  'return'  '``'  'chgrp'  "''"  ';'  '}'  '@'  'Override'  'protected'  'int'  'getNumOfArgs'  '('  ')'  '{'  'return'  '2'  ';'  '}'  '@'  'Override'  'public'  'void'  'run'  '('  'String'  '...'  'args'  ')'  'throws'  'IOException'  '{'  'String'  'group=args'  '['  '0'  ']'  ';'  'TachyonURI'  'path=new'  'TachyonURI'  '('  'args'  '['  '1'  ']'  ')'  ';'  'chgrp'  '('  'path'  ' '  'group'  ' '  'false'  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'getUsage'  '('  ')'  '{'  'return'  '``'  'chgrp'  '<'  'group'  '>'  '<'  'path'  '>'  "''"  ';'  '}'  '}'] 
__label__0 edge.setDirection ( EdgeDirection.UNDIRECTED ) 
__label__0 ConversionException e 
__label__0 new HiveS3Config ( ) .setS3AwsAccessKey ( `` abc123 '' ) .setS3AwsSecretKey ( `` secret '' ) .setS3Endpoint ( `` endpoint.example.com '' ) .setS3SignerType ( PrestoS3SignerType.S3SignerType ) .setS3PathStyleAccess ( true ) .setS3UseInstanceCredentials ( false ) .setS3SslEnabled ( false ) .setS3SseEnabled ( true ) .setS3SseType ( PrestoS3SseType.KMS ) .setS3SseKmsKeyId ( `` KMS_KEY_ID '' ) .setS3EncryptionMaterialsProvider ( `` EMP_CLASS '' ) .setS3KmsKeyId ( `` KEY_ID '' ) .setS3MaxClientRetries ( 9 ) .setS3MaxErrorRetries ( 8 ) .setS3MaxBackoffTime ( new Duration ( 4 , TimeUnit.MINUTES ) ) .setS3MaxRetryTime ( new Duration ( 20 , TimeUnit.MINUTES ) ) .setS3ConnectTimeout ( new Duration ( 8 , TimeUnit.SECONDS ) ) .setS3SocketTimeout ( new Duration ( 4 , TimeUnit.MINUTES ) ) .setS3MultipartMinFileSize ( new DataSize ( 32 , Unit.MEGABYTE ) ) .setS3MultipartMinPartSize ( new DataSize ( 15 , Unit.MEGABYTE ) ) .setS3MaxConnections ( 77 ) .setS3StagingDirectory ( new File ( `` /s3-staging '' ) ) .setPinS3ClientToCurrentRegion ( true ) .setS3UserAgentPrefix ( `` user-agent-prefix '' ) .setS3AclType ( PrestoS3AclType.PUBLIC_READ ) .setSkipGlacierObjects ( true ) 
__label__1 ['lockForRegularUsage'  '('  ')'] 
__label__0 mock.expectedMinimumMessageCount ( 2 ) 
__label__1 ['!'  'segments.add'  '('  'segment'  ')'] 
__label__0 saveTaskDefinition ( taskDefinition ) 
__label__1 ['buffers'  '['  'offset'  ']'] 
__label__0 filteredMessage.addLast ( perRequestFilter ( r , new Entry ( o , r , f , o ) , false ) ) 
__label__0 clusterMap.set ( buildAttributeName ( entry.getKey ( ) ) , cacheEntry.value ) 
__label__0 DataStreamSink < OUT > 
__label__0 holder.addCallback ( callback ) 
__label__0 VertexAttribute.ColorPacked ( ) 
__label__1 ['stopwatch.elapsedMillis'  '('  ')'] 
__label__0 getConnectTimeout ( ) 
__label__0 initialCapacity > 1 < < 30 
__label__0 invoke ( agentInfo , payload , DEFAULT_FUTURE_TIMEOUT ) 
__label__0 getOrCreateConnectionFactory ( ) 
__label__1 ['context.registerSubsystem'  '('  'SUBSYSTEM_NAME 1 0'  ')'] 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__0 response.get ( ROLLED_BACK ) 
__label__0 ImmutableList.copyOf ( listeners ) 
__label__1 ['assertEquals'  '('  '13'  ' '  'lm.getFields'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__0 state.isTerminalState ( ) 
__label__1 ['obj.getAcceptableTokens'  '('  ')'] 
__label__1 ['log.error'  '('  'currentThread'  '('  ')'  '+'  'String.format'  '('  '``'  'Trying'  'to'  'recover'  'from'  'dead'  'Channel'  ':'  '%'  's'  '``'  ' '  'channel'  ')'  ')'] 
__label__1 ['final'  'Prototype'  'testedPrototype'] 
__label__1 ['ReferenceCountUtil.safeRelease'  '('  'holder'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Frequency'  'in'  'milliseconds'  'that'  'the'  'consumer'  'offsets'  'are'  'auto-committed'  'to'  'Kafka'  'if'  "'enable.auto.commit"  "'"  'true'  '.'  '*'  '/'  'private'  'Long'  'autoCommitInterval'  ';'] 
__label__0 compressedProto.length < 390200 
__label__1 ['public'  'DerivedBuilder'  'setRealmName'  '('  'String'  'realmName'  ')'  '{'  'realm'  '('  ')'  '.setRealmName'  '('  'realmName'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['HL7Constants.HL7_LOCAL_CONCEPT.equals'  '('  'codingSystem'  ')'] 
__label__1 ['indexOutURI.getPath'  '('  ')'] 
__label__0 retVal.setProperty ( entry.getKey ( ) , value ) 
__label__1 ['cSet.setConcept'  '('  'this'  ')'] 
__label__1 ['page.getSizeInBytes'  '('  ')'] 
__label__1 ['mTFS.exists'  '('  'turi'  ')'] 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__0 ! Arrays.equals ( oldVal , val ) 
__label__1 ['System.out.println'  '('  ')'] 
__label__1 ['peekNode'  '('  ')'] 
__label__0 msg.getType ( ) == Message.Type.error || msg.getBody ( ) == null 
__label__1 ['TestUtils.randomByte'  '('  ')'  '+'  '127'] 
__label__1 ['Assert.assertEquals'  '('  'result'  ' '  'expected'  ')'] 
__label__0 calendar.set ( Calendar.YEAR,2030 ) 
__label__1 ['logger.debug'  '('  'getName'  '('  ')'  '+'  '``'  'has'  'been'  'started'  "''"  ')'] 
__label__0 assertOpenEventually ( countDownLatch,300 ) 
__label__1 ['ch'  '=='  "'|"  "'"] 
__label__1 ['NIO_GROUP.shutdownGracefully'  '('  ')'] 
__label__1 ['SSOBaseCase.executeNoAuthSingleSignOnTest'  '('  'baseURLNoAuth'  ' '  'baseURLNoAuth'  ' '  'log'  ')'] 
__label__0 text.contentEquals ( ( ( TextButton ) button ) .getText ( ) ) 
__label__1 ['Bytes.toBytesBinary'  '('  'tableNameOrRegionName'  ')'] 
__label__0 ( outputFolder + File.separator + modelFolder ) .replace ( `` / '' , File.separator ) 
__label__1 ['32'  '*'  '1024'  '*'  '1024'] 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` mail '' ) 
__label__1 ['error'  '('  '``'  'Unable'  'to'  'connect'  'due'  'to'  'unrecognised'  'server'  'certificate'  "''"  ')'] 
__label__0 logger.warn ( `` Failed to enumerate network interfaces '' , e ) 
__label__0 ( ZWaveWakeUpCommandClass ) node.getCommandClass ( CommandClass.WAKE_UP ) 
__label__1 ['segmentsInCluster.get'  '('  'segment.getIdentifier'  '('  ')'  ' '  'server.getTier'  '('  ')'  ')'] 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__0 lookup= '' java : /ConnectionFactory '' 
__label__0 logger.trace ( `` rapidRefreshFuture scheduleing for { } millis '' , millis ) 
__label__1 ['twitter.getHomeTimeline'  '('  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 assertEquals ( 1 , failures.size ( ) ) 
__label__1 ['LOG.warn'  '('  'e.getMessage'  '('  ')'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweeted_by_me.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['ProcedureTestingUtility.waitNoProcedureRunning'  '('  'master.getMasterProcedureExecutor'  '('  ')'  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__0 LOG.info ( `` Unable to parse HTTP response content '' , e ) 
__label__0 ! ufsDeleter.delete ( alluxioUriToDel , delInode ) 
__label__0 logger.debug ( `` Calimero library version { } '' , Settings.getLibraryVersion ( ) ) 
__label__0 file.flushAndForce ( ) 
__label__1 ['new'  'ClusterConfiguration'  '('  'initialConfig.getName'  '('  ')'  ' '  'logging.getMessagesLog'  '('  'ClusterConfiguration.class'  ')'  ' '  'initialConfig.getMemberURIs'  '('  ')'  ')'] 
__label__1 ['meta.setContentEncoding'  '('  'Mimetypes.MIMETYPE_OCTET_STREAM'  ')'] 
__label__0 method.invoke ( checksum , ByteBuffer.allocate ( 1 ) ) 
__label__0 Long.parseLong ( args [ 2 ] ) 
__label__1 ['ctx.sendDownstream'  '('  'e'  ')'] 
__label__0 Assert.assertEquals ( 1 , configs.size ( ) ) 
__label__0 StatBuckets.prettyUptimeStr ( secs ) 
__label__1 ['incomingMessage.getMessagePayloadByte'  '('  '0'  ')'] 
__label__1 ['touchEventPool.free'  '('  'touchEvents'  ')'] 
__label__1 ['JedisClusterHashTagUtil.isClusterCompliantMatchPattern'  '('  'matchPattern'  ')'] 
__label__0 part.getPartitionPath ( ) 
__label__1 ['new'  'CommandFormatException'  '('  'result.toString'  '('  ')'  ')'] 
__label__1 ['person.getVoidReason'  '('  ')'] 
__label__0 new IndexOutOfBoundsException ( ) 
__label__1 ['1024'  '*'  '1024'  '*'  '14'] 
__label__1 ['child.tagName.equals'  '('  '``'  'base'  "''"  ')'  '||'  'child.tagName.equals'  '('  '``'  'script'  "''"  ')'  '||'  'child.tagName.equals'  '('  '``'  'link'  "''"  ')'  '||'  'child.tagName.equals'  '('  '``'  'meta'  "''"  ')'  '||'  'child.tagName.equals'  '('  '``'  'title'  "''"  ')'] 
__label__0 ConfigAssertions.recordDefaults ( FeaturesConfig.class ) .setExperimentalSyntaxEnabled ( false ) .setDistributedIndexJoinsEnabled ( false ) .setDistributedJoinsEnabled ( true ) .setRedistributeWrites ( true ) .setOptimizeMetadataQueries ( false ) .setOptimizeHashGeneration ( true ) .setOptimizeSingleDistinct ( true ) .setPushTableWriteThroughUnion ( true ) 
__label__1 ['mMountTable.resolve'  '('  'getPath'  '('  'lastInode'  ')'  ')'  '.getPath'  '('  ')'] 
__label__0 tfs.getFile ( fileId ) 
__label__1 ['logger.error'  '('  '``'  'Failed'  'to'  'enumerate'  'network'  'interfaces'  "''"  ' '  'e'  ')'] 
__label__1 ['InputProcessor'  '['  ']'] 
__label__1 ['textProto.charAt'  '('  '0'  ')'  '=='  'UTF8_BOM_CODE'] 
__label__0 EnglishUdLas=88.72648417258083 
__label__0 VertexAttribute.ColorPacked ( ) 
__label__0 cacheDirectory.mkdirs ( ) 
__label__1 ['edge.setType'  '('  'EdgeDirection.UNDIRECTED'  ')'] 
__label__1 ['Assert.assertEquals'  '('  'stringNumber 0'  ')'] 
__label__1 ['converter.convertTo'  '('  'leftValue.getClass'  '('  ')'  ' '  'rightValue'  ')'] 
__label__0 assertTrue ( user.isGeoEnabled ( ) ) 
__label__1 ['DirectMessage.constructDirectMessages'  '('  'http.get'  '('  '``'  'http'  ':'  '//yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json'  "''"  ')'  ')'] 
__label__0 Calendar.getInstance ( JSON.defaultTimeZone , JSON.defaultLocale ) 
__label__1 ['('  '('  'Number'  ')'  's.first'  '('  ')'  ')'  '.intValue'  '('  ')'] 
__label__0 GL20.glUniformMatrix3fv ( location , transpose , toFloatBuffer ( value , offset , count * 9 ) ) 
__label__1 ['KBP_MINIMUM_SCORE=.445'] 
__label__1 ['target.directory'  '('  '``'  'zk'  "''"  '+'  'id'  '+'  '``'  'data'  "''"  ')'] 
__label__0 ! Boolean.parseBoolean ( ac ) 
__label__0 callerPrincipalCallback ! = null 
__label__0 new S3DataSegmentMover ( mockS3Client , new S3DataSegmentPusherConfig ( ) ) 
__label__1 ['{'  '189084 192250.913 195456.774 198696.946 201977.762 205294.444 208651.754 212042.099 215472.269 218941.91 222443.912 225996.845 229568.199 233193.568 236844.457 240543.233 244279.475 248044.27 251854.588 255693.2 259583.619 263494.621 267445.385 271454.061 275468.769 279549.456 283646.446 287788.198 291966.099 296181.164 300431.469 304718.618 309024.004 313393.508 317760.803 322209.731 326675.061 331160.627 335654.47 340241.442 344841.833 349467.132 354130.629 358819.432 363574.626 368296.587 373118.482 377914.93 382782.301 387680.669 392601.981 397544.323 402529.115 407546.018 412593.658 417638.657 422762.865 427886.169 433017.167 438213.273 443441.254 448692.421 453937.533 459239.049 464529.569 469910.083 475274.03 480684.473 486070.26 491515.237 496995.651 502476.617 507973.609 513497.19 519083.233 524726.509 530305.505 535945.728 541584.404 547274.055 552967.236 558667.862 564360.216 570128.148 575965.08 581701.952 587532.523 593361.144 599246.128 605033.418 610958.779 616837.117 622772.818 628672.04 634675.369 640574.831 646585.739 652574.547 658611.217 664642.684 670713.914 676737.681 682797.313 688837.897 694917.874 701009.882 707173.648 713257.254 719415.392 725636.761 731710.697 737906.209 744103.074 750313.39 756504.185 762712.579 768876.985 775167.859 781359 787615.959 793863.597 800245.477 806464.582 812785.294 819005.925 825403.057 831676.197 837936.284 844266.968 850642.711 856959.756 863322.774 869699.931 876102.478 882355.787 888694.463 895159.952 901536.143 907872.631 914293.672 920615.14 927130.974 933409.404 939922.178 946331.47 952745.93 959209.264 965590.224 972077.284 978501.961 984953.19 991413.271 997817.479 1004222.658 1010725.676 1017177.138 1023612.529 1030098.236 1036493.719 1043112.207 1049537.036 1056008.096 062476.184 1068942.337 1075524.95 1081932.864 1088426.025 1094776.005 1101327.448 1107901.673 1114423.639 1120884.602 1127324.923 1133794.24 1140328.886 1146849.376 1153346.682 1159836.502 1166478.703 1172953.304 1179391.502 1185950.982 1192544.052 1198913.41 1205430.994 1212015.525 1218674.042 1225121.683 1231551.101 1238126.379 1244673.795 1251260.649 1257697.86 1264320.983 1270736.319 1277274.694 1283804.95 1290211.514 1296858.568 1303455.691'  '}'] 
__label__1 ['listeners'  '!'  '='  'null'] 
__label__1 ['sanitizedName'  '('  'name'  ')'] 
__label__1 ['new'  'Thread'  '('  ')'] 
__label__0 ! byteBuf.readable ( ) 
__label__0 dbCol.findOne ( filter ) 
__label__1 ['map.tryPut'  '('  'key'  ' '  'newValue 8'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__0 new Path ( bucketPath , '' test- '' + i + '-'+ j ) .getPath ( ) 
__label__1 ['registry.put'  '('  '``'  'myConfigurer'  "''"  ' '  'configurer'  ')'] 
__label__0 actor.addListener ( listener ) 
__label__1 ['batch.isEmpty'  '('  ')'] 
__label__1 ['LOG.error'  '('  '``'  'OpenTracing'  ':'  'Failed'  'to'  'capture'  'tracing'  'data'  "''"  ' '  't'  ')'] 
__label__0 Configuration.getMs ( PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS ) 
__label__0 mDownView ! = null & & mDownView instanceof ContextualUndoView 
__label__1 ['websocketComponent.setMaxThreads'  '('  '11'  ')'] 
__label__1 ['metaData.getColumnName'  '('  '1'  ')'] 
__label__0 LOG.warn ( `` Failed to find `` + baseDirectory.getAbsolutePath ( ) ) 
__label__0 Pattern.compile ( CURRENT_DIR , Pattern.LITERAL ) 
__label__1 ['public'  'DerivedBuilder'  'setRealmPassword'  '('  'String'  'password'  ')'  '{'  'realm'  '('  ')'  '.setPassword'  '('  'password'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['log.error'  '('  '``'  'Checking'  'bounds'  '['  '{'  '}'  ' '  '{'  '}'  ')'  '('  'expect'  '{'  '}'  'keys'  ')'  "''"  ' '  'new'  'Object'  '['  ']'  '{'  'startCol'  ' '  'endCol'  ' '  'expected.size'  '('  ')'  '}'  ')'] 
__label__1 ['millis'  '%'  'offset'  '=='  '0'] 
__label__0 new BindException ( newConcept , '' concept '' ) 
__label__1 ['from'  '('  'Constants.PARALLEL_LOANBROKER_URI'  ')'  '.process'  '('  'new'  'CreditScoreProcessor'  '('  'Constants.CREDITAGENCY_ADDRESS'  ')'  ')'  '.multicast'  '('  'new'  'BankResponseAggregationStrategy'  '('  ')'  ')'  '.setParallelProcessing'  '('  'true'  ')'] 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Processing'  'changes'  'for'  'pool'  '``'  '+'  'poolName'  '+'  '``'  ':'  '``'  '+'  'pools.get'  '('  'poolName'  ')'  ')'] 
__label__0 new DynamicAwareEntry ( `` http : //localhost:80/test '' , null , null , null ) 
__label__0 ImmutableSet.of ( `` testStringRepresentation '' , '' testDataTypeValidationOnProperties '' ) 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__0 Preconditions.checkNotNull ( object , '' object '' ) 
__label__1 ['AbstractBootstrap'  '<'  'ServerBootstrap'  ' '  'Channel'  '>'] 
__label__0 new String ( text.getBytes ( ) ,0 , text.getLength ( ) ) 
__label__1 ['GL.glTexSubImage2DEXT'  '('  'target'  ' '  'level'  ' '  'xoffset'  ' '  'yoffset'  ' '  'width'  ' '  'height'  ' '  'format'  ' '  'type'  ' '  'pixels'  ' '  'Memory.getPosition'  '('  'pixels'  ')'  ')'] 
__label__0 queueLength.asString ( ) 
__label__1 ['position'  '<'  'mSrcDragPos'] 
__label__1 ['new'  'Texture'  '('  'file'  ' '  'TextureFilter.isMipMap'  '('  'min'  ')'  '||'  'TextureFilter.isMipMap'  '('  'max'  ')'  '?'  'true'  ':'  'false'  ')'] 
__label__1 ['6'  '*'  'Bytes.SIZEOF_LONG'] 
__label__1 ['logger.error'  '('  '``'  'Can'  'not'  'retrieve'  'item'  '{'  '}'  'for'  'widget'  '{'  '}'  "''"  ' '  'itemName'  ' '  'w.eClass'  '('  ')'  '.getInstanceTypeName'  '('  ')'  ')'] 
__label__0 ConcurrentHashMap < String , Channel > 
__label__1 ['DefaultManagementAgent.class'] 
__label__0 resetTimeInSeconds * 1000L 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__0 pushExecutor.execute ( new NamedRunnable ( `` OkHttp % s Push Reset [ % s ] '' , hostName , streamId ) { @ Override public void execute ( ) { pushObserver.onReset ( streamId , errorCode ) ; synchronized ( SpdyConnection.this ) { currentPushRequests.remove ( streamId ) ; } } } ) 
__label__0 Context.getPersonService ( ) .getRelationshipsByPerson ( Context.getPersonService ( ) .getPerson ( personId ) ) 
__label__1 ['LOG.fatal'  '('  '``'  'Could'  'not'  'append'  '.'  'Requesting'  'close'  'of'  'wal'  "''"  ' '  'e'  ')'] 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'redis'  "''"  ')'] 
__label__0 Integer.getInteger ( `` org.neo4j.io.pagecache.impl.muninn.MuninnPagedFile.stripeFactor '' ,10 ) 
__label__0 type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF 
__label__0 new IntRangeValidator ( 0 , true , true ) 
__label__1 ['activeFrom.getTime'  '('  ')'] 
__label__1 ['new'  'MockResponse'  '('  ')'  '.setBody'  '('  '``'  'A'  "''"  ')'  '.setSocketPolicy'  '('  'SHUTDOWN_INPUT_AT_END'  ')'] 
__label__1 ['twitter.getHomeTimeline'  '('  ')'] 
__label__1 ['HashMap'  '<'  'String'  ' '  'HashMap'  '<'  'String'  ' '  'ASTNode'  '>'  '>'] 
__label__1 ['new'  'MultitouchTest'  '('  ')'] 
__label__0 incomingMessage.getMessagePayloadByte ( 1 ) 
__label__0 item == null || item.getStatus ( ) < 2 
__label__0 reg.bind ( LDAP_CONN_NAME , getWiredConnection ( ldapServer ) ) 
__label__1 ['fLines.add'  '('  'st.nextToken'  '('  ')'  ')'] 
__label__0 new StringBuilder ( 256 ) 
__label__0 logger.trace ( `` Invalid Account Credentials '' ) 
__label__1 ['Collection'  '<'  'String'  '>'] 
__label__1 ['file.getFileName'  '('  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__0 Assert.assertEquals ( new InetSocketAddress ( defaultHostname,10001 ) , workerAddress ) 
__label__1 ['/'  '*'  '*'  '*'  'Represents'  'black'  '*'  '/'  'BLACK'  '('  "'"  "0' 0x01"  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__0 setAttributeInternal ( tempInodePath , false , opTimeMs , options ) 
__label__0 modulePath.split ( File.pathSeparator ) [ 0 ] 
__label__0 Assert.assertEquals ( getNotAllowedExceptionMessage ( `` helloForNone '' ) , e.getCause ( ) .getMessage ( ) ) 
__label__0 Arrays.asList ( `` spring-boot-starter-jetty- '' , '' jetty-continuation '' , '' jetty-util- '' , '' javax.servlet- '' , '' jetty-io- '' , '' jetty-http- '' , '' jetty-server- '' , '' jetty-security- '' , '' jetty-servlet- '' , '' jetty-servlets '' , '' jetty-webapp- '' , '' websocket-api '' , '' javax.annotation-api '' , '' jetty-plus '' , '' javax-websocket-server-impl- '' , '' asm- '' , '' javax.websocket-api- '' , '' asm-tree- '' , '' asm-commons- '' , '' websocket-common- '' , '' jetty-annotations- '' , '' javax-websocket-client-impl- '' , '' websocket-client- '' , '' websocket-server- '' , '' jetty-xml- '' , '' websocket-servlet- '' ) 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__1 ['ssl.has'  '('  'CommonAttributes.PROTOCOL'  ')'] 
__label__0 ROOT_LOGGER.errorContextModuleNotFound ( consoleSlot == null ? `` main '' : consoleSlot ) 
__label__1 ['assertFalse'  '('  'jmsTemplate.isPubSubDomain'  '('  ')'  ')'] 
__label__1 ['SocketUtils.findAvailableTcpPort'  '('  '40000'  ')'] 
__label__1 ['c.admin'  '('  ')'  '.indices'  '('  ')'  '.existsAliases'  '('  'new'  'IndicesGetAliasesRequest'  '('  'alias'  ')'  ')'] 
__label__1 ['new'  'DefaultPropertyNamePatternsMatcher'  '('  'TARGET_NAME_DELIMETERS'  ' '  'this.targetName'  ')'] 
__label__1 ['pushExecutor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'Push'  'Data'  '['  '%'  's'  ']'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'boolean'  'cancel=pushObserver.onData'  '('  'streamId'  ' '  'buffer'  ' '  'byteCount'  ' '  'inFinished'  ')'  ';'  'if'  '('  'cancel'  ')'  'frameWriter.rstStream'  '('  'streamId'  ' '  'ErrorCode.CANCEL'  ')'  ';'  'if'  '('  'cancel'  '||'  'inFinished'  ')'  '{'  'synchronized'  '('  'SpdyConnection.this'  ')'  '{'  'currentPushRequests.remove'  '('  'streamId'  ')'  ';'  '}'  '}'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__0 assertEquals ( 3L , countDownLatch.getCount ( ) ) 
__label__1 ['getSrcPath'  '('  '``'  'checks/javadoc/Input_01.java'  "''"  ')'] 
__label__1 ['LOGGER.error'  '('  '``'  'no'  'property'  'for'  '``'  '+'  'type'  '+'  '``'  ' '  '``'  '+'  'format'  ')'] 
__label__0 ( outputFolder + File.separator + apiFolder ) .replace ( `` / '' , File.separator ) 
__label__1 ['Integer.MIN_VALUE'  '+'  '11'] 
__label__0 dictionary.put ( words [ 0 ] , words [ 2 ] ) 
__label__1 ['setExpectedMessageCount'  '('  'messageCount'  ')'] 
__label__0 defaults.jackson2JsonDecoder ( new Jackson2JsonDecoder ( objectMapper , EMPTY_MIME_TYPES ) ) 
__label__1 ['queryNotifyLatch.await'  '('  '25'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__0 saHooks ! = null & & ! saHooks.isEmpty ( ) 
__label__1 ['IllegalArgumentException'  'iae'] 
__label__0 Optional < ImmutableZkWorker > 
__label__0 TableNotFoundException e 
__label__1 ['{'  '189084 192250.913 195456.774 198696.946 201977.762 205294.444 208651.754 212042.099 215472.269 218941.91 222443.912 225996.845 229568.199 233193.568 236844.457 240543.233 244279.475 248044.27 251854.588 255693.2 259583.619 263494.621 267445.385 271454.061 275468.769 279549.456 283646.446 287788.198 291966.099 296181.164 300431.469 304718.618 309024.004 313393.508 317760.803 322209.731 326675.061 331160.627 335654.47 340241.442 344841.833 349467.132 354130.629 358819.432 363574.626 368296.587 373118.482 377914.93 382782.301 387680.669 392601.981 397544.323 402529.115 407546.018 412593.658 417638.657 422762.865 427886.169 433017.167 438213.273 443441.254 448692.421 453937.533 459239.049 464529.569 469910.083 475274.03 480684.473 486070.26 491515.237 496995.651 502476.617 507973.609 513497.19 519083.233 524726.509 530305.505 535945.728 541584.404 547274.055 552967.236 558667.862 564360.216 570128.148 575965.08 581701.952 587532.523 593361.144 599246.128 605033.418 610958.779 616837.117 622772.818 628672.04 634675.369 640574.831 646585.739 652574.547 658611.217 664642.684 670713.914 676737.681 682797.313 688837.897 694917.874 701009.882 707173.648 713257.254 719415.392 725636.761 731710.697 737906.209 744103.074 750313.39 756504.185 762712.579 768876.985 775167.859 781359 787615.959 793863.597 800245.477 806464.582 812785.294 819005.925 825403.057 831676.197 837936.284 844266.968 850642.711 856959.756 863322.774 869699.931 876102.478 882355.787 888694.463 895159.952 901536.143 907872.631 914293.672 920615.14 927130.974 933409.404 939922.178 946331.47 952745.93 959209.264 965590.224 972077.284 978501.961 984953.19 991413.271 997817.479 1004222.658 1010725.676 1017177.138 1023612.529 1030098.236 1036493.719 1043112.207 1049537.036 1056008.096 062476.184 1068942.337 1075524.95 1081932.864 1088426.025 1094776.005 1101327.448 1107901.673 1114423.639 1120884.602 1127324.923 1133794.24 1140328.886 1146849.376 1153346.682 1159836.502 1166478.703 1172953.304 1179391.502 1185950.982 1192544.052 1198913.41 1205430.994 1212015.525 1218674.042 1225121.683 1231551.101 1238126.379 1244673.795 1251260.649 1257697.86 1264320.983 1270736.319 1277274.694 1283804.95 1290211.514 1296858.568 1303455.691'  '}'] 
__label__1 ['assertEquals'  '('  '512f'  ' '  'i 10f'  ')'] 
__label__0 LOG.warn ( `` OpenTracing : Failed to capture tracing data '' , t ) 
__label__1 ['fileObject.hasExt'  '('  '``'  'zip'  "''"  ')'] 
__label__1 ['ConnectorRecordSetProvider.class'] 
__label__1 ['LOG.error'  '('  '``'  'OpenTracing'  ':'  'Failed'  'to'  'capture'  'tracing'  'data'  "''"  ' '  't'  ')'] 
__label__1 ['factory.get'  '('  'sResponseWildcard'  ' '  'NO_ANNOTATIONS'  ' '  'retrofit'  ')'] 
__label__0 views.html.search.noresults.render ( currentUser ( ) , q , searchResult , stream ) 
__label__1 ['HashMap'  '<'  'Object'  ' '  'AggregationStrategy'  '>'] 
__label__1 ['/'  '*'  '*'  '*'  'The'  'package'  'controller'  'for'  'the'  'current'  'file'  '.'  'Used'  'for'  'performance'  'optimisation'  '.'  '*'  '/'  'private'  'PkgControl'  'currentLeaf'  ';'] 
__label__1 ['report'  '('  'n'  ' '  'MISPLACED_ANNOTATION'  ')'] 
__label__0 Configuration.getMs ( PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS ) 
__label__0 IOUtils.closeQuietly ( is ) 
__label__0 ! plugin.isEnabled ( ) 
__label__0 CompletableFuture < Void > 
__label__1 ['hasNextChunk'  '('  ')'] 
__label__1 ['StringBuffer'  'text'] 
__label__0 new PrestoException ( HIVE_FILESYSTEM_ERROR , '' Failed to list directory : `` + path , e ) 
__label__0 yamlFactory.createParser ( input ) 
__label__0 model.getNodeTextColumns ( ) == null || model.getNodeTextColumns ( ) .length == 0 
__label__1 ['vindex'  '>'  '='  'Short.MAX_VALUE'] 
__label__1 ['registry.put'  '('  '``'  'myConf'  "''"  ' '  'new'  'XmlConfiguration'  '('  'getClass'  '('  ')'  '.getResource'  '('  '``'  '/ehcache/ehcache-file-config.xml'  "''"  ')'  ')'  ')'] 
__label__1 ['assertEquals'  '('  '2000'  ' '  'timeout'  ')'] 
__label__1 ['batteryVp'  '>'  '='  'low'] 
__label__1 ['createMessageConsumer'  '('  'session'  ' '  'destinationName'  ' '  'messageSelector'  ' '  'true'  ' '  'null'  ' '  'true'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'NODE'  '{'  '}'  ':'  'App'  'version'  'requested'  'but'  'version'  'is'  'unknown'  "''"  ' '  'this.getNodeId'  '('  ')'  ')'] 
__label__1 ['@'  'UriPath'  '('  'label='  "''"  'producer'  "''"  ' '  'defaultValue='  "''"  'true'  "''"  ')'] 
__label__1 ['assertThat'  '('  'cli.getErrorOutput'  '('  ')'  '.length'  '('  ')'  ' '  'equalTo'  '('  '0'  ')'  ')'] 
__label__0 serversByLoad.firstKey ( ) 
__label__0 public Builder setRealmDomain ( String domain ) { realm ( ) .setDomain ( domain ) ; return this ; } 
__label__1 ['addProperty'  '('  'firstNode'  ' '  "''"  'band'  "''"  ' '  "''"  'The'  'Clash'  "''"  ')'] 
__label__1 ['static'  'public'  'final'  'PowIn'  'fastSlow=pow2In'  ';'] 
__label__1 ['builder'  '('  'SingleSignOnDefinition.INSTANCE'  ')'  '.addAttributes'  '('  'SingleSignOnDefinition.DOMAIN'  ' '  'SingleSignOnDefinition.PATH'  ' '  'SingleSignOnDefinition.HTTP_ONLY'  ' '  'SingleSignOnDefinition.SECURE'  ')'] 
__label__0 calendar.getTimeZone ( ) .getRawOffset ( ) 
__label__1 ['new'  'Path'  '('  'testBucket.getParent'  '('  ')'  ' '  "''"  '.test-2.inprogress'  "''"  ')'  '.toString'  '('  ')'] 
__label__0 assertThat ( page4.pagination ( ) .getGlobalTotal ( ) ) .isEqualTo ( 5 ) 
__label__0 ServiceAnnouncingChatHandlerProvider.class 
__label__1 ['jniGetLocalAnchorA'  '('  'addr'  ' '  'tmp'  ')'] 
__label__0 proxy == null || proxy ! = view.getAnimation ( ) 
__label__1 ['Ordered.HIGHEST_PRECEDENCE'  '+'  '11'] 
__label__1 ['getRegistry'  '('  ')'  '.put'  '('  '``'  'myTable'  "''"  ' '  'ht'  ')'] 
__label__1 ['nodeEngine.getPartitionService'  '('  ')'] 
__label__1 ['statistics.addPutTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['Color.rgb888ToColor'  '('  'color'  ' '  'colorInt'  ')'] 
__label__1 ['assertOpenEventually'  '('  'countDownLatch 50'  ')'] 
__label__1 ['request.getLocalAddr'  '('  ')'] 
__label__1 ['('  'System.currentTimeMillis'  '('  ')'  '-'  'this.lastAccessedTime.getTime'  '('  ')'  ')'  '>'  'maxInactiveInterval'] 
__label__1 ['primitiveToWrappers.put'  '('  'wrapperType'  ' '  'primitiveType'  ')'] 
__label__1 ['writer.write'  '('  'line'  ')'] 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__1 ['private'  'static'  'final'  'Configuration'  'config=HBaseConfiguration.create'  '('  ')'  ';'] 
__label__1 ['new'  'RuntimeException'  '('  '``'  'should'  'execute'  'connector.connect'  '('  ')'  'first'  "''"  ')'] 
__label__1 ['b.getBroadcasterConfig'  '('  ')'  '.applyFilters'  '('  'r'  ' '  'cachedMessages'  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 LOG.warn ( `` Could not append . Requesting close of wal '' , e ) 
__label__0 http2c.setInitialStreamRecvWindow ( initialStreamSendWindow ) 
__label__1 ['logger.info'  '('  '``'  'Computing'  'Control'  'Flow'  'Graph'  "''"  ')'] 
__label__0 Color.fromRGB ( 0xF0F0F0 ) 
__label__1 ['getLog'  '('  ')'  '.error'  '('  '``'  'register'  'druid-driver'  'mbean'  'error'  "''"  ' '  'ex'  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  'manager'  ')'] 
__label__0 public class DefaultDynamicTransformerRegistry implements DynamicTransformerRegistry { private final Logger logger=LoggerFactory.getLogger ( this.getClass ( ) ) ; private final ConcurrentMap < TransformerKey , ClassFileTransformer > transformerMap=new ConcurrentHashMap < TransformerKey , ClassFileTransformer > ( ) ; @ Override public void onRetransformRequest ( Class < ? > target , final ClassFileTransformer transformer ) { add ( target.getClassLoader ( ) , target.getName ( ) , transformer ) ; if ( logger.isInfoEnabled ( ) ) { logger.info ( `` added retransformer classLoader : { } , class : { } , registry size : { } '' , target.getClassLoader ( ) , target.getName ( ) , transformerMap.size ( ) ) ; } } @ Override public void onTransformRequest ( ClassLoader classLoader , String targetClassName , ClassFileTransformer transformer ) { add ( classLoader , targetClassName , transformer ) ; if ( logger.isInfoEnabled ( ) ) { logger.info ( `` added dynamic transformer classLoader : { } , className : { } , registry size : { } '' , classLoader , targetClassName , transformerMap.size ( ) ) ; } } private void add ( ClassLoader classLoader , String targetClassName , ClassFileTransformer transformer ) { ClassFileTransformer prev=transformerMap.putIfAbsent ( new TransformerKey ( classLoader , targetClassName.replace ( ' . ' , '/ ' ) ) , transformer ) ; if ( prev ! = null ) { throw new ProfilerException ( `` Transformer already exists . classLoader : `` + classLoader + `` , target : `` + targetClassName+ `` , transformer : `` + prev ) ; } } @ Override public ClassFileTransformer getTransformer ( ClassLoader classLoader , String targetClassName ) { if ( transformerMap.isEmpty ( ) ) { return null ; } ClassFileTransformer transformer=transformerMap.remove ( new TransformerKey ( classLoader , targetClassName ) ) ; if ( logger.isDebugEnabled ( ) ) { logger.info ( `` removed dynamic transformer classLoader : { } , className : { } , registry size : { } '' , classLoader , targetClassName , transformerMap.size ( ) ) ; } return transformer ; } private static final class TransformerKey { private final ClassLoader classLoader ; private final String targetClassName ; public TransformerKey ( ClassLoader classLoader , String targetClassName ) { this.classLoader=classLoader ; this.targetClassName=targetClassName ; } @ Override public int hashCode ( ) { return classLoader.hashCode ( ) * 31 + targetClassName.hashCode ( ) ; } @ Override public boolean equals ( Object obj ) { TransformerKey other= ( TransformerKey ) obj ; return this.classLoader.equals ( other.classLoader ) & & this.targetClassName.equals ( other.targetClassName ) ; } } } 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['new'  'LinkedHashMap'  '<'  'String'  ' '  'JdbcSqlStat'  '>'  '('  'maxSize 0.75f'  ' '  'true'  ')'] 
__label__0 args.length > 1 & & args [ 1 ] instanceof String 
__label__0 map.lock ( key,1 , TimeUnit.SECONDS ) 
__label__1 ['logger.warn'  '('  '``'  'The'  'GENA'  'Subscription'  'for'  'serviceID'  '{'  '}'  'ended'  'for'  'device'  '{'  '}'  "''"  ' '  'subscription.getService'  '('  ')'  '.getServiceId'  '('  ')'  ' '  'subscription.getService'  '('  ')'  '.getDevice'  '('  ')'  ')'] 
__label__0 ( ( ExecutorService ) executor ) .isTerminated ( ) 
__label__1 ['mockRegionInfo.isMetaRegion'  '('  ')'] 
__label__0 JavaAssistUtils.toPinpointParameterType ( parameterTypes ) 
__label__1 ['logger.info'  '('  '``'  'Moving'  'functions'  '+'  'variable'  'into'  'deeper'  'modules'  "''"  ')'] 
__label__1 ['LOG.debug'  '('  '``'  'EOL'  '('  'end-of-line'  ')'  'defined'  'for'  'the'  'CSV'  ':'  '{'  '}'  "''"  ' '  'crlf'  ')'] 
__label__0 obj.setContentType ( Mimetypes.MIMETYPE_BINARY_OCTET_STREAM ) 
__label__1 ['GL20.glUniform4'  '('  'location'  ' '  'toIntBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '<'  '<'  '2'  ')'  ')'] 
__label__0 VertexAttribute.ColorPacked ( ) 
__label__1 ['allowedIdentifiersCheckDigits'  '['  'i'  ']'] 
__label__0 DEFAULT_CAPACITY=1000 
__label__1 ['NumberFormatException'  'nfe'] 
__label__1 ['AtmosphereResourceEventListener.class'] 
__label__0 in.readFully ( serCondition ) 
__label__0 rsMeta.getColumnLabel ( i + 1 ) 
__label__0 region.checkAndMutate ( row1 , fam1 , qf1 , CompareOp.EQUAL , new BinaryComparator ( val1 ) , delete , true ) 
__label__0 grammar.getTokenDisplayNames ( ) 
__label__1 ['inner.innerSetException'  '('  'new'  'TimeoutException'  '('  ')'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__1 ['totalBytesOnTiers.get'  '('  'tierAlias'  ')'  '>'  '0'] 
__label__0 assertTrue ( dr.isFailure ( ) ) 
__label__0 LOG.warn ( `` Failed to look for classes in `` + jarFileName + `` : `` + ioEx ) 
__label__1 ['``'  'Excluding'  'secondary'  'region'  '``'  '+'  'regionToFlush'  '+'  '``'  '-'  'trying'  'to'  'find'  'a'  'different'  'region'  'to'  'refresh'  'files'  '.'  "''"] 
__label__0 InetAddress.getByName ( `` 127.0.0.1 '' ) 
__label__1 ['processor.open'  '('  'w'  ' '  'request'  ')'] 
__label__1 ['renderUpdate'  '('  'out'  ' '  'results'  ')'] 
__label__0 new Packet ( data , operation.getPartitionId ( ) ) 
__label__1 ['from.getClass'  '('  ')'] 
__label__1 ['amq.getConfiguration'  '('  ')'  '.getConnectionFactory'  '('  ')'] 
__label__1 ['views.html.search.noresults.render'  '('  'currentUser'  '('  ')'  ' '  'q'  ' '  'searchResult'  ')'] 
__label__0 ProcedureTestingUtility.waitAllProcedures ( master.getMasterProcedureExecutor ( ) ) 
__label__1 ['assertEquals'  '('  'countDownLatch.getCount'  '('  ')'  ' 3L'  ')'] 
__label__1 ['mm.tryLock'  '('  'key 4'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['parameter.toString'  '('  ')'] 
__label__0 Long.parseLong ( args [ 2 ] ) 
__label__1 ['ROOT_LOGGER.error'  '('  'consoleSlot'  '=='  'null'  '?'  '``'  'main'  "''"  ':'  'consoleSlot'  ')'] 
__label__0 TimeUnit.SECONDS.toMillis ( timeoutSeconds ) 
__label__0 row2 * layerTileHeight 
__label__1 ['new'  'IllegalStateException'  '('  ')'] 
__label__1 ['task.cancel'  '('  ')'] 
__label__1 ['a.getBoolean'  '('  'R.styleable.DragSortListView_use_default_controller'  ' '  'false'  ')'] 
__label__0 props.getProperty ( propName ) 
__label__1 ['flushAfterDuration'  '('  'entry.getKey'  '('  ')'  ' '  'entry.getValue'  '('  ')'  ')'] 
__label__1 ['public'  'DerivedBuilder'  'setMaximumNumberOfRedirects'  '('  'int'  'maxDefaultRedirects'  ')'  '{'  'configBuilder.setMaximumNumberOfRedirects'  '('  'maxDefaultRedirects'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['hgraph.getMutualDegree'  '('  'n'  ')'] 
__label__1 ['l.onSuspend'  '('  'request'  ' '  'response'  ')'] 
__label__0 model.getNodeTextColumns ( ) == null || model.getNodeTextColumns ( ) .length == 0 
__label__0 getClientConfig ( ) .getAddresses ( ) 
__label__0 lookup= '' java : /topic/myAwesomeTopic '' 
__label__0 await ( ) .atMost ( 20 , TimeUnit.SECONDS ) 
__label__1 ['config.setProxyList'  '('  'modelconf.get'  '('  'CommonAttributes.PROXY_URL'  ')'  '.asString'  '('  ')'  ')'] 
__label__0 logger.trace ( `` MyQ binding received command ' { } ' for item ' { } ' '' , command , itemName ) 
__label__0 LOG.warn ( `` Async Kafka commit failed . `` , cause ) 
__label__0 ALIASES.addOperationParameterDescription ( resources , '' infinispan.container '' , op ) 
__label__0 actor.addCaptureListener ( listener ) 
__label__0 LOG.warn ( `` Failed to get next entry from `` + jarFileName + `` : `` + ioEx ) 
__label__1 ['value'  '>'  '>'  '>'  '8'] 
__label__0 this ( parameters , new StringBuilder ( ) , true ) ; 
__label__1 ['sendCommand'  '('  'CLIENT_GETNAME'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/mentions.json '' , null , true ) ) 
__label__0 controller.handleSubmission ( request , new MockHttpSession ( ) , new ModelMap ( ) , '' Save User '' , '' pass123 '' , '' pass123 '' , new String [ 0 ] , '' true '' , user , new BindException ( user , '' user '' ) ) 
__label__1 ['len'  '%'  '('  '1024'  '*'  '1024'  ')'  '/'  '10'] 
__label__0 Character.toUpperCase ( ch ) 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['tokens.toString'  '('  ')'] 
__label__0 logger.warn ( `` '' , ex ) 
__label__0 new SimpleProxyPool ( httpProxyList , false ) 
__label__1 ['this.configuration.getMappedStatement'  '('  'id'  ')'] 
__label__1 ['graphModel.getGraph'  '('  ')'  '.getEdgeCount'  '('  ')'] 
__label__1 ['{'  'MAGIC_HIGH'  ' '  'MAGIC_LOW 0x20 20 0 0 0 0 0 0 0 0 0 0 0 0'  '}'] 
__label__0 call.getStartTime ( ) 
__label__0 new IOException ( `` Test IOException '' ) 
__label__1 ['timePassed'  '>'  '='  '1000'] 
__label__1 ['new'  'IOException'  '('  'msg'  ')'] 
__label__0 group ! = null & & ! `` 0 '' .equals ( group ) 
__label__0 resultEndpoint.expectedBodiesReceivedInAnyOrder ( `` one '' , '' three '' ) 
__label__0 setLowHighExpected ( lowResults , highResults , expectedResults , MUC_TP,5965,5970,5965 ) 
__label__0 GL20.glUniform2iv ( location , v ) 
__label__1 ['triggerManager.getRules'  '('  'CHANGE'  ' '  'item'  ' '  'newState'  ' '  'oldState'  ')'] 
__label__0 config.getClientNumThreads ( ) 
__label__1 ['r.destination'  '!'  '='  'null'] 
__label__0 factory.get ( fResponseWildcard , NO_ANNOTATIONS , retrofit ) 
__label__0 Assert.assertEquals ( `` Message key ' '' + retrievedMessage + `` ' is not valid '' , '' unable.open.cause '' , retrievedMessage ) 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'helloForRole'  "''"  ')'  ')'] 
__label__1 ['assertFalse'  '('  'predicate.apply'  '('  'pickleEvent'  ')'  ')'] 
__label__1 ['1000'  '*'  '1000'  '*'  '10'] 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['Math.min'  '('  '1000L'  ' '  'connectionTimeout'  ')'] 
__label__1 ['pushExecutor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'Push'  'Reset'  '['  '%'  's'  ']'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'pushObserver.onReset'  '('  'streamId'  ' '  'errorCode'  ')'  ';'  'synchronized'  '('  'SpdyConnection.this'  ')'  '{'  'currentPushRequests.remove'  '('  'streamId'  ')'  ';'  '}'  '}'  '}'  ')'] 
__label__0 Sets.newLinkedHashSet ( ) 
__label__0 invocation.logger.finest ( `` 'is-executing ' : `` + executing + `` - > `` + invocation ) 
__label__1 ['Assert.assertFalse'  '('  'mFileSystem.getStatus'  '('  'uri'  ')'  '.getInMemoryPercentage'  '('  ')'  '=='  '100'  ')'] 
__label__1 ['mock.expectedMessageCount'  '('  '3'  ')'] 
__label__0 currentTime.get ( ) / 1_000_000L 
__label__1 ['n.intValue'  '('  ')'] 
__label__0 subProperties.putIfAbsent ( subName , value ) 
__label__1 ['``'  'Using'  'bind'  'address'  ':'  '``'  '+'  'publicAddress'] 
__label__1 ['ClusterLeaveReelectionListener.class'] 
__label__0 nameDefinitionMultimap.keys ( ) 
__label__1 ['UfsUtils.loadUfs'  '('  'mFileSystem'  ' '  'new'  'AlluxioURI'  '('  'AlluxioURI.SEPARATOR'  ')'  ' '  'new'  'AlluxioURI'  '('  'mUfsRoot'  '+'  'AlluxioURI.SEPARATOR'  ')'  ' '  'new'  'PrefixList'  '('  '``'  'alluxio'  ';'  'exclusions'  "''"  ' '  "''"  ';'  "''"  ')'  ' '  'mLocalAlluxioClusterResource.get'  '('  ')'  '.getMasterConf'  '('  ')'  ')'] 
__label__0 new String ( bytes2 , '' UTF8 '' ) 
__label__1 ['new'  'InputStreamReader'  '('  'bais'  ' '  'StandardCharsets.UTF_8'  ')'] 
__label__0 Ints.min ( completedSplits.get ( ) , startedSplits.get ( ) , splits ) 
__label__1 ['Long.valueOf'  '('  'args'  '['  '2'  ']'  ')'] 
__label__1 ['assertThat'  '('  'response'  ')'  '.isEqualToIgnoringCase'  '('  '``'  'Ok.\\n'  "''"  ')'] 
__label__0 graphModel.getUndirectedGraphVisible ( ) 
__label__1 ['getSsl'  '('  'ClientAuth.NEED'  ' '  "''"  'password'  "''"  ' '  "''"  'src/test/resources/test.jks'  "''"  ')'] 
__label__1 ['ch.unsafe'  '('  ')'  '.flushNow'  '('  ')'] 
__label__0 statistics.addPutTimeNanos ( System.nanoTime ( ) - start ) 
__label__0 file.getAbsolutePath ( ) 
__label__1 ['factory.get'  '('  'sResponseClass'  ' '  'NO_ANNOTATIONS'  ' '  'retrofit'  ')'] 
__label__0 client.getVertx ( ) .setTimer ( 1000 , id - > checkExpired ( ) ) 
__label__1 ['createMessageConsumer'  '('  'session'  ' '  'destinationName'  ' '  'messageSelector'  ' '  'false'  ' '  'null'  ' '  'true'  ')'] 
__label__1 ['EVICT_ALL'  '+'  '1'] 
__label__0 mPersistFileService.shutdown ( ) 
__label__1 ['System.identityHashCode'  '('  'this'  ')'] 
__label__1 ['DEFAULT_MAX_UNION_SIZE=20'] 
__label__1 ['incomingDir.exists'  '('  ')'] 
__label__1 ['ImmutableSet.'  '<'  'String'  '>'  'builder'  '('  ')'  '.add'  '('  'BUFFERS_READ'  ' '  'FIELDNAMES_READ'  ' '  'INDEXERCLUSTER_READ'  ' '  'INPUTS_READ'  ' '  'JOURNAL_READ'  ' '  'JVMSTATS_READ'  ' '  'MESSAGECOUNT_READ'  ' '  'MESSAGES_READ'  ' '  'METRICS_READ'  ' '  'SYSTEM_READ'  ' '  'THROUGHPUT_READ'  ' '  'SAVEDSEARCHES_CREATE'  ' '  'SAVEDSEARCHES_EDIT'  ' '  'SAVEDSEARCHES_READ'  ')'] 
__label__1 ['testError'  '('  'js'  ' '  'VariableReferenceCheck.REDECLARED_VARIABLE'  ')'] 
__label__1 ['GL.glGenTexturesEXT'  '('  'n'  ' '  'textures'  ' '  'Memory.getPosition'  '('  'textures'  ')'  ')'] 
__label__0 buildPages.getTypesWithoutHash ( ) 
__label__1 ['EVICT_ALL'  '+'  '1'] 
__label__1 ['millis'  '%'  'offset'  '=='  '0'] 
__label__0 new FieldFrame ( null , true , null ) 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__1 ['r.getRequest'  '('  'false'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/mentions.json'  "''"  ' '  'null'  ' '  'true'  ')'  ')'] 
__label__0 LOG.warn ( `` Unable to close socket selector '' ) 
__label__0 assertClusterSizeEventually ( 2 , h2 ) 
__label__0 tfs.ls ( Constants.PATH_SEPARATOR , true ) 
__label__1 ['RequestBody.create'  '('  'mediaType'  ' '  '('  'byte'  '['  ']'  ')'  'bodyContents'  ')'] 
__label__1 ['getJSDocTypeWithBraces'  '('  'cp'  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'Unable'  'to'  'close'  'socket'  'selector'  "''"  ' '  'ex'  ')'] 
__label__1 ['component.setMaxThreads'  '('  '11'  ')'] 
__label__0 messageHandler.responder ( ) 
__label__0 ! ( ! relaxLocality & & ( racks == null || racks.length == 0 ) & & ( nodes == null || nodes.length == 0 ) ) 
__label__0 reg.bind ( `` localhost : '' + port , ctx ) 
__label__0 this.addUnsafeEnchantments ( stack.getEnchantments ( ) ) 
__label__0 Calendar.getInstance ( JSON.defaultTimeZone , JSON.defaultLocale ) 
__label__0 TestUtils.randomByte ( ) + 128 
__label__0 config.setAdvertiseSecurityKey ( modelconf.get ( CommonAttributes.ADVERTISE_SECURITY_KEY ) .asString ( ) ) 
__label__0 new RMNodeStatusEvent ( node.getNodeID ( ) , status , new ArrayList < ContainerStatus > ( ) , null , null ) 
__label__0 Preconditions.checkNotNull ( blockWorker , '' blockWorker '' ) 
__label__0 o instanceof InternalAttribute 
__label__1 ['execution.getJobs'  '('  ')'  '.remove'  '('  'this'  ')'] 
__label__0 public static ScaleTo $ ( float scaleX , float scaleY , float duration ) { ScaleTo action=pool.obtain ( ) ; action.scaleX=scaleX ; action.scaleY=scaleY ; action.duration=duration ; action.invDuration=1 / duration ; return action ; } 
__label__0 element.getLocalName ( ) 
__label__1 ['RawUDPInput.class'] 
__label__1 ['websocketComponent.setMaxThreads'  '('  '11'  ')'] 
__label__0 url.toServiceStringWithoutResolving ( ) 
__label__0 / * * * { @ inheritDoc } * / @ Override public Broadcaster addAtmosphereResource ( AtmosphereResource r ) { try { if ( destroyed.get ( ) ) { logger.debug ( DESTROYED , getID ( ) , '' addAtmosphereResource ( AtmosphereResource < ? , ? > r '' ) ; return r ; } start ( ) ; if ( scope == SCOPE.REQUEST & & requestScoped.getAndSet ( true ) ) { throw new IllegalStateException ( `` Broadcaster `` + this + `` can not be used as its scope is set to REQUEST '' ) ; } if ( maxSuspendResource.get ( ) > 0 & & resources.size ( ) > = maxSuspendResource.get ( ) ) { if ( policy == POLICY.FIFO ) { AtmosphereResource resource=resources.poll ( ) ; try { logger.warn ( `` Too many resource . Forcing resume of { } `` , resource ) ; resource.resume ( ) ; } catch ( Throwable t ) { logger.warn ( `` failed to resume resource { } `` , resource , t ) ; } } else if ( policy == POLICY.REJECT ) { throw new RejectedExecutionException ( String.format ( `` Maximum suspended AtmosphereResources % s '' , maxSuspendResource ) ) ; } } if ( resources.contains ( r ) ) { return r ; } synchronized ( concurrentSuspendBroadcast ) { if ( resources.isEmpty ( ) ) { BroadcasterFactory.getDefault ( ) .add ( this , name ) ; } checkCachedAndPush ( r , r.getAtmosphereResourceEvent ( ) ) ; if ( isAtmosphereResourceValid ( r ) ) { resources.add ( r ) ; } } } finally { if ( resources.size ( ) > 0 ) { synchronized ( awaitBarrier ) { awaitBarrier.notifyAll ( ) ; } } } return r ; } 
__label__0 AnnotatedElementUtils.hasAnnotation ( type , Validated.class ) 
__label__1 ['Double.isNaN'  '('  'rate'  ')'] 
__label__1 ['ctx.sendDownstream'  '('  'e'  ')'] 
__label__0 attribute.getDefinition ( ) .getMarshaller ( ) 
__label__0 / * * * Matches no characters . * / public static final InputFastMatcher NONE=new InputFastMatcher ( ) { @ Override public boolean matches ( char c ) { return false ; } @ Override public String replaceFrom ( CharSequence sequence , CharSequence replacement ) { checkNotNull ( replacement ) ; return sequence.toString ( ) ; } private void checkNotNull ( CharSequence replacement ) { } @ Override public String collapseFrom ( CharSequence sequence , char replacement ) { return sequence.toString ( ) ; } @ Override public String trimTrailingFrom ( CharSequence sequence ) { return sequence.toString ( ) ; } } ; 
__label__1 ['new'  'StringBuilder'  '('  '246'  ')'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ReliableTopicBasicLocalTest'  'extends'  'ReliableTopicBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '1'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__1 ['stat.st_mode.get'  '('  ')'] 
__label__0 Double.parseDouble ( value.toString ( ) ) 
__label__0 comparePartitionOwnership ( false , localMember , partition ) 
__label__0 ( strLine=br.readLine ( ) ) ! = null & & ! strLine.isEmpty ( ) 
__label__0 ManifestUtils.getOrCreateManifest ( archive ) 
__label__0 new Duration ( 60 , TimeUnit.SECONDS ) 
__label__0 new RuntimeException ( `` Error while creating the data flow plan for an iteration : The iteration end was not specified correctly . '' ) 
__label__1 ['Double.valueOf'  '('  'value.toString'  '('  ')'  ')'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__0 ( System.currentTimeMillis ( ) - lastAccessedTime.getTime ( ) ) > = timeout 
__label__1 ['getRegistry'  '('  ')'  '.put'  '('  '``'  'hb'  "''"  ' '  'hb'  ')'] 
__label__0 CamelCloudServiceCallRoutesAutoConfiguration.class 
__label__1 ['registry.put'  '('  '``'  'myManager'  "''"  ' '  'cacheManager'  ')'] 
__label__1 ['('  '!'  'relaxLocality'  '&'  '&'  '('  'racks'  '=='  'null'  '||'  'racks.length'  '=='  '0'  ')'  '&'  '&'  '('  'nodes'  '=='  'null'  '||'  'nodes.length'  '=='  '0'  ')'  ')'] 
__label__0 setTimeToIdleSeconds ( Long.valueOf ( ( String ) cacheSettings.get ( `` timeToIdleSeconds '' ) ) .longValue ( ) ) 
__label__1 ['declaredIntentionToWrite.getMode'  '('  ')'  '!'  '='  'DIRECT_TO_TARGET_NEW_DIRECTORY'] 
__label__0 Utilities.getInputPaths ( jobConf , mapWork , emptyScratchDir , ctx , false ) 
__label__1 ['ClassNotFoundException'  'e'] 
__label__1 ['logger.warn'  '('  '``'  'gave'  'up'  'waiting'  'for'  'query'  'reply'  'from'  'device'  '{'  '}'  "''"  ' '  'm_address'  ')'] 
__label__0 new RequestManager ( testTimer,3000 ) 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['MAX_PRETTY_PRINTED_PROPERTIES=4'] 
__label__0 ImportAutoConfigurationWithItemsTwo.class 
__label__0 LinkedHashMap < String , ASTNode > 
__label__1 ['this.instanceManager'  '!'  '='  'null'] 
__label__1 ['checkpointPath.getPath'  '('  ')'] 
__label__1 ['Assert.assertFalse'  '('  'mFileSystem.getStatus'  '('  'uri'  ')'  '.getInMemoryPercentage'  '('  ')'  '=='  '100'  ')'] 
__label__1 ['setEternal'  '('  'Boolean.valueOf'  '('  '('  'String'  ')'  'cacheSettings.get'  '('  '``'  'diskPersistent'  "''"  ')'  ')'  ')'] 
__label__0 System.currentTimeMillis ( ) 
__label__1 ['new'  'StringBuilder'  '('  '247'  ')'] 
__label__0 assertEquals ( someName , actualPattern.pattern ( ) ) 
__label__0 getLog ( ) .warn ( `` register druid-driver mbean error '' , ex ) 
__label__1 ['this'  '('  'parameters'  ' '  'new'  'StringBuilder'  '('  ')'  ' '  'false'  ')'  ';'] 
__label__0 complete.expectedBodiesReceivedInAnyOrder ( `` finish '' , '' stop '' , '' faulted '' , '' except '' ) 
__label__0 AbstractFilterRegistrationBean.class 
__label__0 request.getServletPath ( ) 
__label__1 ['Integer.valueOf'  '('  'options.getMaxKeys'  '('  ')'  ')'] 
__label__1 ['size'  '('  ')'  '>'  '='  'this.capacity'] 
__label__1 ['out.write'  '('  'this.connectionAddress.getPort'  '('  ')'  ')'] 
__label__0 new BindException ( newConcept , '' concept '' ) 
__label__1 ['invocation.logger.warning'  '('  '``'  "'is-executing"  "'"  ':'  '``'  '+'  'executing'  '+'  '``'  '-'  '>'  '``'  '+'  'invocation'  ')'] 
__label__1 ['this.traceHandlers.add'  '('  'traceHandler'  ')'] 
__label__0 details.setProperty ( CONFIG_HASH_KEY , currentConfigHash ) 
__label__1 ['registry.put'  '('  '``'  'dummy'  "''"  ' '  'new'  'ReactiveStreamsTestService'  '('  '``'  'from-registry'  "''"  ')'  ')'] 
__label__0 mock.expectedBodiesReceivedInAnyOrder ( `` B+END '' , '' A+END '' ) 
__label__0 this.registry.getValue ( ) .removeXAResourceRecovery ( recovery ) 
__label__1 ['port'  '>'  '='  '65535'] 
__label__0 realPointerIndex > = AndroidInput.NUM_TOUCHES 
__label__1 ['javaClass.addNestedType'  '('  ')'  '.setPublic'  '('  ')'] 
__label__1 ['rj.mapProgress'  '('  ')'] 
__label__1 ['isCancelled0'  '('  'result'  ')'] 
__label__0 logger.error ( `` { } is already cancelled '' , impl.uuid ( ) ) 
__label__1 ['getConnectionFactory'  '('  ')'] 
__label__1 ['getLock'  '('  'address'  ')'] 
__label__0 new GeneralDataCoding ( false , true , MessageClass.CLASS1 , Alphabet.ALPHA_DEFAULT ) 
__label__1 ['TEST_UTIL.waitTableEnabled'  '('  'tableName'  ')'] 
__label__1 ['DiagnosticType.error'  '('  '``'  'JSC_NAME_REFERENCE_IN_EXTERNS'  "''"  ' '  "''"  'accessing'  'name'  '{'  '0'  '}'  'in'  'externs'  'has'  'no'  'effect'  "''"  ')'] 
__label__1 ['new'  'byte'  '['  '17'  ']'] 
__label__0 GraphDatabaseSetting < Long > 
__label__1 ['Preconditions.checkState'  '('  'n.isModuleBody'  '('  ')'  '||'  'scope.getParent'  '('  ')'  '=='  'null'  ')'] 
__label__1 ['``'  'Segment'  'initialized'  'with'  'too'  'large'  'address'  ':'  '``'  '+'  'address'  '+'  '``'  ';'  'Max'  'allowed'  'address'  'is'  '``'  '+'  '('  'Long.MAX_VALUE'  '-'  'Integer.MAX_VALUE'  '-'  '1'  ')'] 
__label__0 testModules ( `` var foo = function ( module ) { module.exports = { } ; } ; '' + `` module.exports = foo ; '' , '' goog.provide ( 'module $ test ' ) ; '' + `` var foo $ $ module $ test=function ( module ) { module.exports= { } } ; '' + `` var module $ test=foo $ $ module $ test '' ) 
__label__0 Sets.newLinkedHashSet ( ) 
__label__1 ['new'  'HazelcastInstance'  '['  'count'  ']'] 
__label__0 logger.fine ( `` Named `` + namedCount + `` anon functions using `` + bytesUsed+ `` bytes '' ) 
__label__0 deployment.addServletContainerInitializer ( new ServletContainerInitializerInfo ( Initializer.class , new ImmediateInstanceFactory < ServletContainerInitializer > ( initializer ) , NO_CLASSES ) ) 
__label__0 Protocol.read ( inputStream ) 
__label__1 ['coreThreads.asString'  '('  ')'] 
__label__1 ['GL11.glGetTexParameter'  '('  'target'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 System.currentTimeMillis ( ) 
__label__0 Logger.getLogger ( loggerName ) .getEffectiveLevel ( ) 
__label__0 new Path ( bucketPath , '' part- '' + i + '-'+ j ) .getPath ( ) 
__label__1 ['Collection'  '<'  '?'  'extends'  'IJsonNode'  '>'] 
__label__0 isFieldKept ( input , uniqueField ) 
__label__1 ['buffer.getInt8'  '('  ')'] 
__label__0 GL20.glUniform3fv ( location , toFloatBuffer ( v , offset , count * 3 ) ) 
__label__0 public class XpathRegressionRightCurlyTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=RightCurlyCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionRightCurlyOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( RightCurlyCheck.class ) ; final String [ ] expectedViolation= { `` 8:9 : `` + getCheckMessage ( RightCurlyCheck.class , RightCurlyCheck.MSG_KEY_LINE_SAME , '' } '' ,9 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionRightCurlyOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /SLIST/LITERAL_IF/SLIST/RCURLY '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=RightCurlyCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionRightCurlyTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( RightCurlyCheck.class ) ; moduleConfig.addAttribute ( `` option '' , RightCurlyOption.ALONE.toString ( ) ) ; final String [ ] expectedViolation= { `` 9:15 : `` + getCheckMessage ( RightCurlyCheck.class , RightCurlyCheck.MSG_KEY_LINE_NEW , '' } '' ,15 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionRightCurlyTwo ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='fooMethod ' ] /SLIST/LITERAL_TRY/SLIST/RCURLY '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testThree ( ) throws Exception { final String checkName=RightCurlyCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionRightCurlyThree.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( RightCurlyCheck.class ) ; moduleConfig.addAttribute ( `` option '' , RightCurlyOption.ALONE.toString ( ) ) ; final String [ ] expectedViolation= { `` 5:72 : `` + getCheckMessage ( RightCurlyCheck.class , RightCurlyCheck.MSG_KEY_LINE_ALONE , '' } '' ,72 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionRightCurlyThree ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='sample ' ] /SLIST/LITERAL_IF/SLIST/RCURLY '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testFour ( ) throws Exception { final String checkName=RightCurlyCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionRightCurlyFour.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( RightCurlyCheck.class ) ; moduleConfig.addAttribute ( `` option '' , RightCurlyOption.SAME.toString ( ) ) ; final String [ ] expectedViolation= { `` 7:27 : `` + getCheckMessage ( RightCurlyCheck.class , RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE , '' } '' ,27 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionRightCurlyFour ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='sample ' ] /SLIST/LITERAL_IF/SLIST/RCURLY '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__0 ! Objects.isNull ( value ) 
__label__0 r.getUri ( ) .getPath ( ) 
__label__1 ['{'  'MAGIC_HIGH'  ' '  'MAGIC_LOW 0x20 20 0 0 0 0 0 0 0 0 0 0 0 0'  '}'] 
__label__1 ['DirectMessage.constructDirectMessages'  '('  'http.get'  '('  '``'  'http'  ':'  '//yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json'  "''"  ')'  ')'] 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__1 ['this.isDefaultAutoCommit'  '('  ')'] 
__label__0 prevNerEndIndex ! = ( start - 1 ) & & nextNerStartIndex ! = end 
__label__1 ['cookies.columnMap'  '('  ')'] 
__label__0 MD5Loader.loadModel ( Gdx.files.internal ( `` data/zfat.md5mesh '' ) .read ( ) , false ) 
__label__1 ['n.intValue'  '('  ')'] 
__label__0 getConnectTimeout ( ) 
__label__1 ['ProcedureTestingUtility.waitNoProcedureRunning'  '('  'master.getMasterProcedureExecutor'  '('  ')'  ')'] 
__label__1 ['return'  'false'  ';'] 
__label__1 ['DiagnosticType.error'  '('  '``'  'JSC_NAME_REFERENCE_IN_EXTERNS'  "''"  ' '  "''"  'accessing'  'name'  '{'  '0'  '}'  'in'  'externs'  'has'  'no'  'effect'  "''"  ')'] 
__label__0 factory.getEmbeddedServletContainer ( initializers [ 0 ] , initializers [ 1 ] ) 
__label__1 ['findDelegate'  '('  'name'  ')'] 
__label__0 role.description ( ) .orNull ( ) 
__label__1 ['dstPath.getValue'  '('  ')'] 
__label__1 ['legacyModel.isDefined'  '('  ')'] 
__label__1 ['data.remaining'  '('  ')'] 
__label__1 ['('  '1L'  '<'  '<'  'n'  ')'] 
__label__0 prefSize ( new Fixed ( width ) , new Fixed ( height ) ) 
__label__1 ['JsonNode'  ':'  ':isLong'] 
__label__0 Arrays.asList ( RFXComValueSelector.RAW_DATA , RFXComValueSelector.SIGNAL_LEVEL , RFXComValueSelector.COMMAND , RFXComValueSelector.CONTACT ) 
__label__0 Optional.fromNullable ( resourceManagement.getStats ( ) ) 
__label__1 ['new'  'PutBackupOperation'  '('  'name'  ' '  'dataKey'  ' '  'dataValue'  ' '  'replicationInfo'  ' '  'true'  ')'] 
__label__1 ['new'  'ContinueProcessOperation'  '('  'this'  ' '  'execution'  ' '  'true'  ')'] 
__label__1 ['new'  'CancelJobSupervisorOperation'  '('  'name'  ' '  'jobId'  ' '  'jobOwner'  ')'] 
__label__0 rj.reduceProgress ( ) 
__label__0 visitStatement ( node , context ) 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['sExecutorService.shutdown'  '('  ')'] 
__label__1 ['width'  '-'  'originY'] 
__label__1 ['targetClass'  '!'  '='  'null'] 
__label__1 ['new'  'BindException'  '('  'concept'  ' '  "''"  'concept'  "''"  ')'] 
__label__1 ['dis.read'  '('  'serializedData 0'  ' '  'length'  ')'] 
__label__0 LOG.warn ( `` Failed to write into TachyonStorage , the block `` + getCurrentBlockId ( ) + `` will not be in TachyonStorage '' ) 
__label__0 new MapStoreWithStoreCount ( expectedStoreCount,300,50 ) 
__label__0 new GetExecutionVariableInstancesCmd ( executionId , variableNames , true , locale , withLocalizationFallback ) 
__label__0 logger.trace ( `` Invalid Account Credentials '' ) 
__label__1 ['logger.info'  '('  '``'  'Skipped'  'renaming'  '``'  '+'  'instancesSkipped'  '+'  '``'  'invalidated'  '``'  '+'  '``'  'properties'  ' '  '``'  '+'  'propsSkipped+'  '``'  'instances'  'of'  'properties'  '``'  '+'  '``'  'that'  'were'  'skipped'  'for'  'specific'  'types'  'and'  '``'  '+'  'singleTypeProps+'  '``'  'properties'  'that'  'were'  'referenced'  'from'  'only'  'one'  'type'  '.'  "''"  ')'] 
__label__1 ['edge.setType'  '('  'edgeDefault'  ')'] 
__label__0 System.currentTimeMillis ( ) + WAIT_MILLIS_BEFORE_JOIN 
__label__1 ['new'  'StringBuilder'  '('  '741'  ')'] 
__label__1 ['getOrCreateContainer'  '('  ')'  '.unlock'  '('  'dataKey'  ' '  'caller'  ' '  'threadId'  ')'] 
__label__0 ! config.isAutoRead ( ) 
__label__0 xmlDocAnnotation.get ( CoreAnnotations.TokensAnnotation.class ) .get ( 543 ) 
__label__0 uri.toString ( ) .equals ( future.getURI ( ) .toString ( ) ) 
__label__1 ['julianDateFloor'  '('  'range'  ' '  '('  'int'  ')'  'date'  '+'  'EPOCH_JULIAN'  ' '  'true'  ')'] 
__label__1 ['``'  'Refreshing'  'storefiles'  'of'  'region'  '``'  '+'  'regionToFlush'  '+'  '``'  'due'  'to'  'global'  'heap'  'pressure'  '.'  'memstore'  'size='  "''"  '+'  'StringUtils.humanReadableInt'  '('  'server.getRegionServerAccounting'  '('  ')'  '.getGlobalMemstoreSize'  '('  ')'  ')'] 
__label__1 ['callTimeoutMs=5000'] 
__label__1 ['TupleDomain.none'  '('  ')'] 
__label__1 ['setEternal'  '('  'Boolean.valueOf'  '('  '('  'String'  ')'  'cacheSettings.get'  '('  '``'  'diskPersistent'  "''"  ')'  ')'  ')'] 
__label__0 this.categoryWithApiModel=category 
__label__0 mapper.writeValueAsBytes ( segment ) 
__label__0 reservedWords.contains ( codegenProperty.datatypeWithEnum ) || name.equals ( codegenProperty.datatypeWithEnum ) 
__label__1 ['assertEquals'  '('  '9'  ' '  'rows.size'  '('  ')'  ')'] 
__label__1 ['List'  '<'  'String'  '>'] 
__label__0 ReactiveHelper.schedule ( ( ) - > { if ( uow ! = null ) { uow.afterProcess ( processor , exchange , callback , false ) ; } if ( log.isTraceEnabled ( ) ) { log.trace ( `` Exchange processed and is continued routed asynchronously for exchangeId : { } - > { } '' , exchange.getExchangeId ( ) , exchange ) ; } } , '' CamelInternalProcessor - UnitOfWork - afterProcess - `` + processor + `` - `` + exchange.getExchangeId ( ) ) 
__label__0 Preconditions.checkNotNull ( manager , '' manager '' ) 
__label__1 ['logger.info'  '('  '``'  'Normalizing'  "''"  ')'] 
__label__0 grammar.getTokenDisplayNames ( ) 
__label__0 public ReducedMetric registerMetric ( String name , IReducer reducer , int timeBucketSizeInSecs ) { return registerMetric ( name , new ReducedMetric ( reducer ) , timeBucketSizeInSecs ) ; } 
__label__1 ['new'  'ModelNode'  '('  ')'  '.set'  '('  '17500'  ')'] 
__label__1 ['statistics.addPutTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 synchronized ( references ) { if ( transformed == null ) { transformed=initializer.initializeBroadcastVariable ( data ) ; data=null ; } return transformed ; } 
__label__1 ['CommonUtils.randomString'  '('  'random.nextInt'  '('  '10'  ')'  ')'] 
__label__1 ['waitUntil'  '('  '('  ')'  '-'  '>'  'clusterManager.getNodes'  '('  ')'  '.size'  '('  ')'  '=='  '2 30_000'  ')'] 
__label__0 saveTask instanceof LongTask 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweets/ '' + statusId+ `` .json '' , true ) ) 
__label__0 DataStreamSink < OUT > 
__label__0 connections.get ( target ) 
__label__1 ['error'  '('  '``'  'Unable'  'to'  'connect'  'due'  'to'  'unrecognised'  'server'  'certificate'  "''"  ')'] 
__label__0 ObjectStore.isCurrentStatsValidForTheQuery ( conf , params , statsWriteId , writeIdString , false ) 
__label__1 ['assertEquals'  '('  '8'  ' '  'lm.getFields'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__0 Context.hasPrivilege ( OpenmrsConstants.PRIV_EDIT_USERS ) 
__label__1 ['target.directory'  '('  '``'  'zk'  "''"  '+'  'id'  '+'  '``'  'data'  "''"  ')'] 
__label__1 ['factory.lookup'  '('  'DefaultBroadcaster.class'  ' '  'id'  ')'] 
__label__0 CollectionUtils.isEmpty ( elements ) 
__label__1 ['@'  'Override'  'protected'  'BlockBuilder'  'getBlock'  '('  ')'  '{'  'return'  'blockBuilder'  ';'  '}'] 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  ')'] 
__label__1 ['username.length'  '('  ')'] 
__label__1 ['nlDataOutNodes'  '!'  '='  'null'  '&'  'nlDataOutNodes.getLength'  '('  ')'  '>'  '0'] 
__label__1 ['InputProcessor'  '['  ']'] 
__label__1 ['new'  'SemanticException'  '('  'TYPE_MISMATCH'  ' '  'node'  ' '  "''"  'column'  '%'  'd'  'in'  '%'  's'  'query'  'has'  'incompatible'  'types'  ':'  '%'  's'  ' '  '%'  's'  "''"  ' '  'i'  ' '  'outputFieldTypes'  '['  'i'  ']'  '.getDisplayName'  '('  ')'  ' '  'setOperationName'  ' '  'descFieldType.getDisplayName'  '('  ')'  ')'] 
__label__0 Assert.notNull ( cache , '' No cache with name ' '' + cacheName + `` ' found . '' ) 
__label__0 assertThat ( xml ) .isEqualToIgnoringWhitespace ( expectedContent ) 
__label__1 ['modulePath.split'  '('  'File.pathSeparator'  ')'  '['  '1'  ']'] 
__label__1 ['{'  '189084 192250.913 195456.774 198696.946 201977.762 205294.444 208651.754 212042.099 215472.269 218941.91 222443.912 225996.845 229568.199 233193.568 236844.457 240543.233 244279.475 248044.27 251854.588 255693.2 259583.619 263494.621 267445.385 271454.061 275468.769 279549.456 283646.446 287788.198 291966.099 296181.164 300431.469 304718.618 309024.004 313393.508 317760.803 322209.731 326675.061 331160.627 335654.47 340241.442 344841.833 349467.132 354130.629 358819.432 363574.626 368296.587 373118.482 377914.93 382782.301 387680.669 392601.981 397544.323 402529.115 407546.018 412593.658 417638.657 422762.865 427886.169 433017.167 438213.273 443441.254 448692.421 453937.533 459239.049 464529.569 469910.083 475274.03 480684.473 486070.26 491515.237 496995.651 502476.617 507973.609 513497.19 519083.233 524726.509 530305.505 535945.728 541584.404 547274.055 552967.236 558667.862 564360.216 570128.148 575965.08 581701.952 587532.523 593361.144 599246.128 605033.418 610958.779 616837.117 622772.818 628672.04 634675.369 640574.831 646585.739 652574.547 658611.217 664642.684 670713.914 676737.681 682797.313 688837.897 694917.874 701009.882 707173.648 713257.254 719415.392 725636.761 731710.697 737906.209 744103.074 750313.39 756504.185 762712.579 768876.985 775167.859 781359 787615.959 793863.597 800245.477 806464.582 812785.294 819005.925 825403.057 831676.197 837936.284 844266.968 850642.711 856959.756 863322.774 869699.931 876102.478 882355.787 888694.463 895159.952 901536.143 907872.631 914293.672 920615.14 927130.974 933409.404 939922.178 946331.47 952745.93 959209.264 965590.224 972077.284 978501.961 984953.19 991413.271 997817.479 1004222.658 1010725.676 1017177.138 1023612.529 1030098.236 1036493.719 1043112.207 1049537.036 1056008.096 062476.184 1068942.337 1075524.95 1081932.864 1088426.025 1094776.005 1101327.448 1107901.673 1114423.639 1120884.602 1127324.923 1133794.24 1140328.886 1146849.376 1153346.682 1159836.502 1166478.703 1172953.304 1179391.502 1185950.982 1192544.052 1198913.41 1205430.994 1212015.525 1218674.042 1225121.683 1231551.101 1238126.379 1244673.795 1251260.649 1257697.86 1264320.983 1270736.319 1277274.694 1283804.95 1290211.514 1296858.568 1303455.691'  '}'] 
__label__0 ! config.isAutoRead ( ) 
__label__1 ['progress.start'  '('  '0.19f'  ')'] 
__label__0 buf.discardReadBytes ( ) 
__label__0 System.arraycopy ( value,0 , chars , length , value.length ) 
__label__0 Tuple2.of ( timeoutPattern4,12L ) 
__label__0 connection.remote ( ) .incrementAndGetNextStreamId ( ) 
__label__0 line.toString ( charset ) 
__label__0 resetTimeInSeconds * 1000L 
__label__1 ['TestUtils.randomByte'  '('  ')'  '+'  '127'] 
__label__0 new InputStreamReader ( in , '' UTF-8 '' ) 
__label__0 logger.warn ( `` InfluxDB is not yet connected '' ) 
__label__0 public class Arial extends BasicFontMetrics { { maxCharHeight=781 ; widths [ 32 ] =277 ; widths [ 33 ] =277 ; widths [ 34 ] =354 ; widths [ 35 ] =556 ; widths [ 36 ] =556 ; widths [ 37 ] =889 ; widths [ 38 ] =666 ; widths [ 39 ] =190 ; widths [ 40 ] =333 ; widths [ 41 ] =333 ; widths [ 42 ] =389 ; widths [ 43 ] =583 ; widths [ 44 ] =277 ; widths [ 45 ] =333 ; widths [ 46 ] =277 ; widths [ 47 ] =277 ; widths [ 48 ] =556 ; widths [ 49 ] =556 ; widths [ 50 ] =556 ; widths [ 51 ] =556 ; widths [ 52 ] =556 ; widths [ 53 ] =556 ; widths [ 54 ] =556 ; widths [ 55 ] =556 ; widths [ 56 ] =556 ; widths [ 57 ] =556 ; widths [ 58 ] =277 ; widths [ 59 ] =277 ; widths [ 60 ] =583 ; widths [ 61 ] =583 ; widths [ 62 ] =583 ; widths [ 63 ] =556 ; widths [ 64 ] =1015 ; widths [ 65 ] =666 ; widths [ 66 ] =666 ; widths [ 67 ] =722 ; widths [ 68 ] =722 ; widths [ 69 ] =666 ; widths [ 70 ] =610 ; widths [ 71 ] =777 ; widths [ 72 ] =722 ; widths [ 73 ] =277 ; widths [ 74 ] =500 ; widths [ 75 ] =666 ; widths [ 76 ] =556 ; widths [ 77 ] =833 ; widths [ 78 ] =722 ; widths [ 79 ] =777 ; widths [ 80 ] =666 ; widths [ 81 ] =777 ; widths [ 82 ] =722 ; widths [ 83 ] =666 ; widths [ 84 ] =610 ; widths [ 85 ] =722 ; widths [ 86 ] =666 ; widths [ 87 ] =943 ; widths [ 88 ] =666 ; widths [ 89 ] =666 ; widths [ 90 ] =610 ; widths [ 91 ] =277 ; widths [ 92 ] =277 ; widths [ 93 ] =277 ; widths [ 94 ] =469 ; widths [ 95 ] =556 ; widths [ 96 ] =333 ; widths [ 97 ] =556 ; widths [ 98 ] =556 ; widths [ 99 ] =500 ; widths [ 100 ] =556 ; widths [ 101 ] =556 ; widths [ 102 ] =277 ; widths [ 103 ] =556 ; widths [ 104 ] =556 ; widths [ 105 ] =222 ; widths [ 106 ] =222 ; widths [ 107 ] =500 ; widths [ 108 ] =222 ; widths [ 109 ] =833 ; widths [ 110 ] =556 ; widths [ 111 ] =556 ; widths [ 112 ] =556 ; widths [ 113 ] =556 ; widths [ 114 ] =333 ; widths [ 115 ] =500 ; widths [ 116 ] =277 ; widths [ 117 ] =556 ; widths [ 118 ] =500 ; widths [ 119 ] =722 ; widths [ 120 ] =500 ; widths [ 121 ] =500 ; widths [ 122 ] =500 ; widths [ 123 ] =333 ; widths [ 124 ] =259 ; widths [ 125 ] =333 ; widths [ 126 ] =583 ; } } 
__label__0 patientExitObs ! = null & & patientExitObs.size ( ) > 0 
__label__0 maxPendingPersists < = 0 
__label__0 lastFailureException instanceof SocketTimeoutException 
__label__0 world.add ( `` capsule '' ,5f,3f,5f ) 
__label__0 / * * * This exception is for stopping retries for S3 calls that should n't be retried . For example , `` Caused by : com.amazonaws.services.s3.model.AmazonS3Exception : Forbidden ( Service : Amazon S3 ; Status Code : 403 ... '' * / @ VisibleForTesting static class UnrecoverableS3OperationException extends IOException { public UnrecoverableS3OperationException ( Path path , Throwable cause ) { super ( format ( `` % s ( Path : % s ) '' , cause , path ) , cause ) ; } } 
__label__1 ['/'  '*'  '*'  '*'  'This'  'exception'  'is'  'for'  'stopping'  'retries'  'for'  'S3'  'calls'  'that'  'should'  "n't"  'be'  'retried'  '.'  'For'  'example'  ' '  '``'  'Caused'  'by'  ':'  'com.amazonaws.services.s3.model.AmazonS3Exception'  ':'  'Forbidden'  '('  'Service'  ':'  'Amazon'  'S3'  ';'  'Status'  'Code'  ':'  '403'  '...'  "''"  '*'  '/'  '@'  'VisibleForTesting'  'static'  'class'  'UnrecoverableS3OperationException'  'extends'  'RuntimeException'  '{'  'public'  'UnrecoverableS3OperationException'  '('  'Path'  'path'  ' '  'Throwable'  'cause'  ')'  '{'  'super'  '('  'format'  '('  '``'  '%'  's'  '('  'Path'  ':'  '%'  's'  ')'  "''"  ' '  'cause'  ' '  'path'  ')'  ' '  'cause'  ')'  ';'  '}'  '}'] 
__label__0 `` maxHeaderSize must be a positive integer : `` + maxHeaderSize 
__label__1 ['getLsNoAclResultStr'  '('  '``'  '/testRoot/testDir'  "''"  ' '  'files'  '['  '1'  ']'  '.getCreationTimeMs'  '('  ')'  ' 0'  ' '  'LsCommand.STATE_FOLDER'  ')'] 
__label__1 ['eventJournalConfig.getMapName'  '('  ')'] 
__label__0 stopwatch.elapsed ( MILLISECONDS ) 
__label__0 localFilteredData.addAccessRestrictedResource ( absoluteChildAddr ) 
__label__0 out.writeFloat ( ( Float ) obj ) 
__label__0 logger.warn ( `` fail-mock : `` + invocation.getMethodName ( ) + `` fail-mock enabled , url : `` + directory.getUrl ( ) , e ) 
__label__0 toJSON ( entry.getValue ( ) , config ) 
__label__0 String requestRequiredAcks 
__label__0 IOConverter.toInputStream ( s , null ) 
__label__0 entity instanceof ProcessDefinitionEntity 
__label__0 getLog ( ) .warn ( `` register druid-driver mbean error '' , ex ) 
__label__1 ['cs.getString'  '('  'columnIndex'  ')'] 
__label__1 ['tJvmGcDetailed.getJvmGcNewCount'  '('  ')'] 
__label__0 obj.setContentType ( Mimetypes.MIMETYPE_BINARY_OCTET_STREAM ) 
__label__1 ['request.getContentType'  '('  ')'  '.equals'  '('  '``'  'application/x-www-form-urlencoded'  "''"  ')'] 
__label__0 message.contains ( `` 14807 '' ) || message.contains ( `` 14883 '' ) || message.contains ( `` 11340 '' ) 
__label__1 ['new'  'DynamicAwareEntry'  '('  'uri'  ' '  'properties'  ' '  'lenient'  ')'] 
__label__1 ['methodsToImplement'  '('  'methods'  ')'] 
__label__0 Context.getAdministrationService ( ) .saveGlobalProperty ( propToUpdate ) 
__label__0 logger.trace ( `` MyQ binding received command ' { } ' for item ' { } ' '' , command , itemName ) 
__label__0 DiagnosticType.warning ( `` JSC_REDECLARED_VARIABLE '' , '' Redeclared variable : { 0 } '' ) 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['11'  '*'  'ClassSize.REFERENCE'] 
__label__0 logger.trace ( `` myq securityToken : { } '' , securityToken ) 
__label__0 super.mySetupMutualAuthServerIsValidClientException ( cause ) 
__label__1 ['graphModel.getDirectedGraph'  '('  ')'] 
__label__1 ['order.getInstructions'  '('  ')'] 
__label__1 ['n.isArrayPattern'  '('  ')'] 
__label__1 ['name='  "''"  'java'  ':'  'jboss/mail'  "''"] 
__label__0 indexOutURI.toString ( ) 
__label__1 ['beans.add'  '('  '0'  ' '  'bean'  ')'] 
__label__0 assertOpenEventually ( `` responseLatch '' , responseLatch ) 
__label__1 ['mTfs.setPin'  '('  'mTfs.open'  '('  'path'  ')'  ' '  'false'  ')'] 
__label__1 ['channel.close'  '('  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['min1'  '<'  'min2'] 
__label__1 ['cached.get'  '('  'walCacheLock'  ')'] 
__label__1 ['toJSON'  '('  'item'  ')'] 
__label__1 ['Gdx.files.internal'  '('  'fileName'  ')'  '.nameWithoutExtension'  '('  ')'] 
__label__1 ['new'  'ClobTypeHandler'  '('  ')'] 
__label__0 getConnectTimeout ( ) 
__label__0 totalHistogram.getValueAtPercentile ( 95 ) 
__label__0 GL20.glUniform3iv ( location , v ) 
__label__1 ['isTestOnBorrow'  '('  ')'] 
__label__0 Assert.assertEquals ( 21 , Context.getAdministrationService ( ) .getAllGlobalProperties ( ) .size ( ) ) 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__1 ['connections.get'  '('  'address'  ')'] 
__label__0 HazelcastClient.newHazelcastClient ( clientConfig ) 
__label__1 ['config.setSslKeyAlias'  '('  'ssl.get'  '('  'CommonAttributes.PROTOCOL'  ')'  '.asString'  '('  ')'  ')'] 
__label__1 ['SingleServerInventoryProvider.class'] 
__label__1 ['metaData.getColumnName'  '('  '1'  ')'] 
__label__1 ['UriBuilder.fromResource'  '('  'StreamAlertConditionResource.class'  ')'  '.path'  '('  '``'  '{'  'conditionId'  '}'  "''"  ')'  '.build'  '('  'alertCondition.getId'  '('  ')'  ')'] 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/home_timeline.json '' , true ) ) 
__label__1 ['getStreamNode'  '('  'iterationHead'  ')'] 
__label__0 new DefaultPropertyNamePatternsMatcher ( delimiters , '' aaa '' , '' bbbb '' , '' ccccc '' ) 
__label__0 ! method.getName ( ) .equals ( methodToSearch ) || ! method.getReturnType ( ) .isAssignableFrom ( methodToFind.getReturnType ( ) ) || method.getParameterTypes ( ) .length ! = pTypes.length 
__label__0 new CsvFilter ( `` '' ) 
__label__1 ['Object'  '...'  'pathParams'] 
__label__1 ['logPageUrl'  '!'  '='  'null'  '||'  'logPageUrl.length'  '('  ')'  '>'  '0'] 
__label__0 MESSAGES.persistenceUnitNotFound ( absolutePath , puName , current ) 
__label__0 AtmosphereResponse.newInstance ( ) 
__label__1 ['preds2.size'  '('  ')'  '=='  '1'] 
__label__1 ['item.getClass'  '('  ')'] 
__label__0 Thread.currentThread ( ) .interrupted ( ) 
__label__1 ['node1.checkTreeTypeAwareEqualsSilent'  '('  'node2'  ')'] 
__label__1 ['error.expectedMessageCount'  '('  '2'  ')'] 
__label__1 ['this.registry.getValue'  '('  ')'  '.addXAResourceRecovery'  '('  'recovery'  ')'] 
__label__1 ['inputProcessor.touchDown'  '('  'event.x'  ' '  'event.y'  ' '  'event.pointer'  ' '  'Buttons.LEFT'  ')'] 
__label__0 this.healthMvcEndpointProperties.getMapping ( ) ! = null & & this.healthMvcEndpointProperties.getMapping ( ) .size ( ) > 0 
__label__1 ['req.getSession'  '('  ')'  '.getMaxInactiveInterval'  '('  ')'  '*'  '1000'] 
__label__0 LOG.warn ( `` Syslog message is missing date or date could not be parsed . ( Possibly set { } to true ) `` + `` Not further handling . Message was : { } '' , SyslogInputBase.CK_ALLOW_OVERRIDE_DATE , new String ( msg.getRaw ( ) ) ) 
__label__0 valueClass ( NullWritable.class ) 
__label__0 raw.getOutParameters ( ) 
__label__0 new PoolBagEntry ( null,0 , pool ) 
__label__1 ['EXTFramebufferObject.glGetRenderbufferParameterEXT'  '('  'target'  ' '  'pname'  ' '  'params'  ')'] 
__label__1 ['hazelcastFactory.newHazelcastInstance'  '('  ')'] 
__label__0 LOG.info ( `` Node `` + path + `` already exists and this is not a `` + `` retry '' ) 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['beansXml.createAlternatives'  '('  ')'] 
__label__0 config.setAdvertiseSecurityKey ( modelconf.get ( CommonAttributes.ADVERTISE_SECURITY_KEY ) .asString ( ) ) 
__label__0 public Builder setConnectionTimeoutInMs ( int connectionTimeuot ) { configBuilder.setConnectionTimeoutInMs ( connectionTimeuot ) ; return this ; } 
__label__1 ['g.tool.errMgr.grammarError'  '('  'ErrorType.INVALID_RULE_PARAMETER_REF'  ' '  'g.fileName'  ' '  'y'  ' '  'y.getText'  '('  ')'  ' '  'expr'  ')'] 
__label__1 ['traces.set'  '('  'null'  ')'] 
__label__0 DeletionRetentionStrategyConfig.class 
__label__0 HornetQEmbeddedConfigurationFactory.class 
__label__1 ['getTimeout'  '('  ')'] 
__label__1 ['mFileLength'  '-'  'mPos'  '<'  'mBlockSize'] 
__label__1 ['Utils.isZkAuthenticationConfiguredStormServer'  '('  'topoConf'  ')'] 
__label__1 ['patientState.getState'  '('  ')'  '.getId'  '('  ')'] 
__label__0 mapper.writeValueAsBytes ( segment ) 
__label__1 ['StringUtils.hasLength'  '('  'secretQuestion'  ')'  '||'  'StringUtils.hasLength'  '('  'secretAnswer'  ')'] 
__label__1 ['new'  'InMemoryMessageRespository'  '('  ')'] 
__label__1 ['Long.valueOf'  '('  'args'  '['  '2'  ']'  ')'] 
__label__1 ['element.getNodeName'  '('  ')'] 
__label__0 GL20.glVertexAttribPointer ( indx , size , type , normalized , stride , ( FloatBuffer ) buffer ) 
__label__1 ['assertEquals'  '('  '9'  ' '  'this.context.getBean'  '('  'FilterChainProxy.class'  ')'  '.getFilterChains'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__1 ['new'  'Vector2'  '('  ')'] 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  ')'] 
__label__0 LOG.debug ( `` Creating netty output stream for block { } @ { } from client { } '' , blockId , address , NetworkAddressUtils.getClientHostName ( ) ) 
__label__1 ['type'  '=='  'TokenTypes.CLASS_DEF'] 
__label__0 error.expectedMinimumMessageCount ( 1 ) 
__label__1 ['requestFilters.isEmpty'  '('  ')'] 
__label__0 mock.expectedMinimumMessageCount ( 2 ) 
__label__0 location.equals ( BlockStoreLocation.anyTier ( ) ) 
__label__1 ['Thread.sleep'  '('  '200'  ')'] 
__label__0 Long.parseLong ( args [ 1 ] ) 
__label__0 new StringBuilder ( 246 ) 
__label__0 new RuntimeException ( `` Error during multilang processing '' , e ) 
__label__1 ['@'  'Override'  'public'  'ResponseImpl'  'description'  '('  'String'  'description'  ')'  '{'  'this.setDescription'  '('  'description'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__0 contact.getWorldManifold ( ) 
__label__0 InetAddress.getByName ( `` localhost '' ) 
__label__0 ImmutableSet < ImplementationMethodDescriptor > 
__label__1 ['('  'getSource'  '('  ')'  '.x'  '('  ')'  '+'  'getTarget'  '('  ')'  '.x'  '('  ')'  ')'  '/'  '2f'] 
__label__0 { @ link ImportControl } 
__label__1 ['serialVersionUID=1L'] 
__label__0 flushStatements ( true ) 
__label__0 context.revertReloadRequired ( ) 
__label__0 cursor.shouldRetry ( ) 
__label__0 processEngineConfiguration.getCommandExecutor ( ) 
__label__0 ! sourceEdgeTextData.getText ( ) .isEmpty ( ) 
__label__1 ['logger.debug'  '('  '``'  'MyQ'  'binding'  'received'  'command'  "'"  '{'  '}'  "'"  'for'  'item'  "'"  '{'  '}'  "'"  "''"  ' '  'command'  ' '  'itemName'  ')'] 
__label__0 log.warn ( e , '' Graceful shutdown of task [ % s ] aborted with exception . `` , task.getId ( ) ) 
__label__1 ['new'  'PriorityTieredBrokerSelectorStrategy'  '('  '0 1'  ')'] 
__label__1 ['getBooleanValue'  '('  'ASYNC_CLIENT'  '+'  '``'  'acceptAnyCertificate'  "''"  ' '  'false'  ')'] 
__label__0 endsWith ( `` /home/source '' ) 
__label__0 globalExecutionStats.getStartedSplits ( ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/mentions.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['inner.innerSetException'  '('  '('  'Throwable'  ')'  'result'  ')'] 
__label__1 ['assertMockEndpointsSatisfied'  '('  ')'] 
__label__0 rSocketMessageHandler.responder ( ) 
__label__0 preserve.asString ( ) 
__label__0 item.getName ( ) .equals ( name ) 
__label__0 GL11.glGetTexParameterfv ( target , pname , params ) 
__label__1 ['test'  '('  '``'  'var'  'foo'  '='  'function'  '('  ')'  '{'  'var'  'module'  '='  '{'  '}'  ';'  'module.exports'  '='  '{'  '}'  ';'  '}'  ';'  "''"  '+'  '``'  'module.exports'  '='  'foo'  ';'  "''"  ' '  "''"  'goog.provide'  '('  "'module"  '$'  'test'  "'"  ')'  ';'  "''"  '+'  '``'  'var'  'foo'  '$'  '$'  'module'  '$'  'test=function'  '('  ')'  '{'  'var'  'module='  '{'  '}'  ';'  'module.exports='  '{'  '}'  '}'  ';'  "''"  '+'  '``'  'var'  'module'  '$'  'test=foo'  '$'  '$'  'module'  '$'  'test'  "''"  ')'] 
__label__1 ['Long.valueOf'  '('  'timeout'  ')'] 
__label__0 item.annotationType ( ) 
__label__0 new Duration ( 30 , SECONDS ) 
__label__0 promise.tryFailure ( new ClosedChannelException ( ) ) 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'byte'  '['  ']'  'copy=new'  'byte'  '['  'this.length'  ']'  ';'  'ByteBufferUtils.copyFromBufferToArray'  '('  'copy'  ' '  'this.buf'  ' '  'this.offset 0'  ' '  'this.length'  ')'  ';'  'KeyValue'  'kv=new'  'NoTagsKeyValue'  '('  'copy 0'  ' '  'copy.length'  ')'  ';'  'kv.setSequenceId'  '('  'this.getSequenceId'  '('  ')'  ')'  ';'  'return'  'kv'  ';'  '}'] 
__label__1 ['context.restartRequired'  '('  ')'] 
__label__1 ['preloadQueue.size'  '=='  '0'] 
__label__0 cache5.setColors ( red ) 
__label__1 ['new'  'JSONParseSpec'  '('  'timestampSpec'  ' '  'new'  'DimensionsSpec'  '('  'dimensions'  ' '  'dimensionExclusions'  ' '  'spatialDimensions'  ')'  ' '  'JSONParseSpec.JSON'  ')'] 
__label__1 ['handshakeFuture'  '!'  '='  'null'] 
__label__1 ['assertEquals'  '('  '2'  ' '  'historyService.createHistoricActivityInstanceQuery'  '('  ')'  '.finished'  '('  ')'  '.list'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__1 ['executionListenerContextCloseListener.addClosedExecutionListener'  '('  'executionListener'  ' '  'execution'  ' '  'executionVariablesToUse'  ' '  'customPropertiesMapToUse'  ')'] 
__label__1 ['dstPath.getPath'  '('  ')'] 
__label__0 ModuleReflectionUtils : :isCheckstyleTreeWalkerCheck 
__label__0 dirtyOutputBuffer ( ) || currentPacket ! = null 
__label__0 GL20.glGetShaderiv ( shader , pname , params ) 
__label__0 actor.addCaptureListener ( listener ) 
__label__0 lookup= '' org.jboss.as.test.integration.ee.datasourcedefinition.DataSourceBean/dataSource3 '' 
__label__0 queryNotifyLatch.await ( 1000 , TimeUnit.MILLISECONDS ) 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'short'  'circuit'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ')'] 
__label__1 ['taken'  '>'  '190'] 
__label__0 createMessageConsumer ( session , destinationName , messageSelector , false , null ) 
__label__1 ['DefaultAtmosphereRequest'  'request'] 
__label__0 camelContext.getExecutorServiceManager ( ) .shutdownNow ( timeoutCheckerExecutorService ) 
__label__1 ['AstUtils.hasLeastOneAnnotation'  '('  'classNode'  ' '  "''"  'MessageEndpoint'  "''"  ' '  "''"  'EnableIntegrationPatterns'  "''"  ')'] 
__label__0 CompletableFuture < Void > 
__label__0 message.getFilteredFields ( ) 
__label__1 ['this.healthMvcEndpointProperties.getMapping'  '('  ')'  '!'  '='  'null'] 
__label__0 private final DynamicTransformerRegistry dynamicTransformerRegistry ; 
__label__0 initialCapacity > 1 < < 30 
__label__0 Arrays.asList ( `` Int '' , '' Float '' , '' Double '' , '' Bool '' , '' Void '' , '' String '' , '' Character '' , '' AnyObject '' ) 
__label__1 ['Mockito.verify'  '('  'mRMClient'  ')'  '.start'  '('  ')'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__1 ['routeList'  '=='  'null'] 
__label__1 ['values.equals'  '('  'values'  '['  'i'  ']'  ')'] 
__label__1 ['timeLeft'  '>'  '='  '0'] 
__label__1 ['new'  'ModelNode'  '('  '10000'  ')'] 
__label__0 assertEquals ( avDegree,1.0 ) 
__label__1 ['partProps.size'  '('  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__1 ['getTablename'  '('  ')'  '.getBytes'  '('  ')'] 
__label__1 ['assertEquals'  '('  'ex.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  "''"  'Unable'  'to'  'read'  '1'  'bytes'  ' '  'got'  '0'  "''"  ')'] 
__label__1 ['assertRemoveSubsystemResources'  '('  'servicesA'  ')'] 
__label__1 ['new'  'FilterConfiguration'  '('  'filterParams'  ' '  'filterClass'  ')'] 
__label__0 Class.forName ( serializerConfigClassname , false , userCodeClassLoader ) 
__label__1 ['resource.terminate'  '('  'input.getId'  '('  ')'  ' '  'extractorId'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Ignoring'  'duplicate'  'class'  '``'  '+'  'className'  ')'] 
__label__1 ['basicInvocation.potentialResponse'  '=='  'null'] 
__label__1 ['new'  'ServiceActivatorContextImpl'  '('  'batchBuilder'  ')'] 
__label__0 model.calculateBoundingBox ( bbox ) 
__label__1 ['encounter.getObsAtTopLevel'  '('  'false'  ')'] 
__label__1 ['new'  'RuntimeException'  '('  'String.format'  '('  '``'  'File'  '\\'  "''"  '%'  '1'  '$'  's\\'  "''"  'has'  'incorrect'  'indentation'  'in'  'comment'  '.'  "''"  '+'  '``'  'Line'  '%'  '2'  '$'  'd'  ':'  'comment'  ':'  '%'  '3'  '$'  'd'  ' '  'actual'  ':'  '%'  '4'  '$'  'd'  '.'  '``'  ' '  'aFileName'  ' '  'lineNumber'  ' '  'indentInComment'  ' '  'actualIndent'  ')'  ')'] 
__label__0 uri.getPort ( ) == -1 & & request.getVirtualHost ( ) ! = null 
__label__0 new CompilerException ( sourcePath , e.line , e.getCause ( ) ) 
__label__0 mock.expectedMinimumMessageCount ( 1 ) 
__label__0 TimeUnit.SECONDS.toMillis ( 4 ) 
__label__0 meta.setContentType ( Mimetypes.MIMETYPE_OCTET_STREAM ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  'value='  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ReplicatedMapReadYourWritesTest'  'extends'  'ReplicatedMapBaseTest'  '{'  '@'  'Test'  'public'  'void'  'testReadYourWritesBySize'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'HashMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=new'  'HashMap'  '<'  'Integer'  ' '  'Integer'  '>'  '('  ')'  ';'  'final'  'int'  'count=100'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'count'  ';'  'i++'  ')'  '{'  'map.put'  '('  'i'  ' '  'i'  ')'  ';'  '}'  'map1.putAll'  '('  'map'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertEquals'  '('  'count'  ' '  'map1.size'  '('  ')'  ')'  ';'  'assertEquals'  '('  'count'  ' '  'map2.size'  '('  ')'  ')'  ';'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testReadYourWritesByGet'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  '1000'  ';'  'i++'  ')'  '{'  'assertReadYourWriteByGet'  '('  'instance2'  ' '  'map1'  ' '  'i'  ')'  ';'  'assertReadYourWriteByGet'  '('  'instance1'  ' '  'map2'  ' '  'i'  ')'  ';'  '}'  '}'  '@'  'Test'  'public'  'void'  'testReadYourWritesByContainsKey'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  '1000'  ';'  'i++'  ')'  '{'  'assertReadYourWriteByContainsKey'  '('  'instance2'  ' '  'map1'  ' '  'i'  ')'  ';'  'assertReadYourWriteByContainsKey'  '('  'instance1'  ' '  'map2'  ' '  'i'  ')'  ';'  '}'  '}'  '@'  'Test'  'public'  'void'  'testReadYourWritesByContainsValue'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  '1000'  ';'  'i++'  ')'  '{'  'assertReadYourWriteByContainsValue'  '('  'instance2'  ' '  'map1'  ' '  'i'  ')'  ';'  'assertReadYourWriteByContainsValue'  '('  'instance1'  ' '  'map2'  ' '  'i'  ')'  ';'  '}'  '}'  'private'  'void'  'assertReadYourWriteByGet'  '('  'HazelcastInstance'  'instance'  ' '  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map'  ' '  'int'  'value'  ')'  '{'  'String'  'key=generateKeyAndPutValue'  '('  'instance'  ' '  'map'  ' '  'value'  ')'  ';'  'assertEquals'  '('  'value'  ' '  '('  'int'  ')'  'map.get'  '('  'key'  ')'  ')'  ';'  '}'  'private'  'void'  'assertReadYourWriteByContainsKey'  '('  'HazelcastInstance'  'instance'  ' '  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map'  ' '  'int'  'value'  ')'  '{'  'String'  'key=generateKeyAndPutValue'  '('  'instance'  ' '  'map'  ' '  'value'  ')'  ';'  'assertTrue'  '('  'map.containsKey'  '('  'key'  ')'  ')'  ';'  '}'  'private'  'void'  'assertReadYourWriteByContainsValue'  '('  'HazelcastInstance'  'instance'  ' '  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map'  ' '  'int'  'value'  ')'  '{'  'generateKeyAndPutValue'  '('  'instance'  ' '  'map'  ' '  'value'  ')'  ';'  'assertTrue'  '('  'map.containsValue'  '('  'value'  ')'  ')'  ';'  '}'  'private'  'String'  'generateKeyAndPutValue'  '('  'HazelcastInstance'  'instance'  ' '  'ReplicatedMap'  '<'  'String'  ' '  'Integer'  '>'  'map'  ' '  'int'  'value'  ')'  '{'  'String'  'key=generateKeyOwnedBy'  '('  'instance'  ')'  ';'  'map.put'  '('  'key'  ' '  'value'  ')'  ';'  'return'  'key'  ';'  '}'  '}'] 
__label__1 ['map.put'  '('  'i'  ' '  'emp 0L'  ' '  'SECONDS 2L'  ' '  'SECONDS'  ')'] 
__label__0 incomingMessage.getMessagePayloadByte ( 1 ) 
__label__0 LOG.error ( `` Fail to set owner for { } with user : { } , group : { } '' , path , user , group ) 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'diskspace'  "''"  ')'] 
__label__1 ['LOG.trace'  '('  '``'  'Terminating'  'channel'  'to'  'the'  'remote'  'gRPC'  'server'  "''"  ')'] 
__label__1 ['waitUntil'  '('  '('  ')'  '-'  '>'  'externalNodesStarted.get'  '('  ')'  '=='  'NODE_COUNT 30_000'  ')'] 
__label__1 ['compressedSliceInput.length'  '('  ')'] 
__label__0 addResult.getNumRowsInSegment ( ) > = tuningConfig.getMaxRowsPerSegment ( ) 
__label__1 ['new'  'TelnetServerPipelineFactory'  '('  ')'] 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__1 ['4'  '<'  'buf.length'  '-'  'count'] 
__label__0 new BuildSecondHashMatchIterator ( this.inputs [ 0 ] , this.inputs [ 1 ] , keyPositions2 , keyPositions1 , keyClasses , memoryManager , ioManager , this , availableMemory ) 
__label__1 ['NONCONFORMING_LR_RULE'  '('  '165'  ' '  "''"  'rule'  '<'  'arg'  '>'  'is'  'left'  'recursive'  'but'  'does'  "n't"  'conform'  'to'  'a'  'pattern'  'ANTLR'  'can'  'handle'  "''"  ' '  'ErrorSeverity.ERROR'  ')'] 
__label__1 ['field.set'  '('  'instanceRef'  ' '  'value'  ')'] 
__label__0 assertEquals ( `` There should be no files '' ,0 , files.length ) 
__label__0 ImmutableList < Number > 
__label__1 ['GL.glGenTexturesEXT'  '('  'n'  ' '  'textures'  ' '  'Memory.getPosition'  '('  'textures'  ')'  ')'] 
__label__1 ['WebSocketEventListener.class.cast'  '('  'l'  ')'  '.onMessage'  '('  'event'  ')'] 
__label__1 ['new'  'Server'  '('  'port'  ')'] 
__label__0 Thread.sleep ( 1000 ) 
__label__1 ['graph.getEdges'  '('  ')'] 
__label__0 CompletableFuture < Void > 
__label__0 WebSocketEventListener.class.cast ( l ) .onHandshake ( event ) 
__label__0 from ( `` direct : c '' ) .delay ( 1000 ) 
__label__1 ['DEFAULT_BLOCK_SIZE=10'] 
__label__1 ['context.var'  '('  '``'  'long'  "''"  ')'] 
__label__0 JSError.make ( declNode , TypeCheck.CONFLICTING_SHAPE_TYPE , '' dict '' , className ) 
__label__1 ['Float.valueOf'  '('  'encoding.substring'  '('  'equalsPos'  '+'  '1'  ')'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'look'  'for'  'classes'  'in'  '``'  '+'  'jarFileName'  '+'  '``'  ':'  '``'  '+'  'ioEx'  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'short'  'circuit'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ')'] 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__1 ['webSocketConnection.getRemote'  '('  ')'  '.sendBytes'  '('  'ByteBuffer.wrap'  '('  'b'  ' '  'offset'  ' '  'length'  ')'  ')'] 
__label__0 DefaultChannelFuture.setUseDeadLockChecker ( true ) 
__label__0 Arrays.asList ( CoreAnnotations.TextAnnotation.class , CoreAnnotations.TokensAnnotation.class , CoreAnnotations.SentencesAnnotation.class , CoreAnnotations.CharacterOffsetBeginAnnotation.class , CoreAnnotations.CharacterOffsetEndAnnotation.class , CoreAnnotations.BeforeAnnotation.class , CoreAnnotations.AfterAnnotation.class , CoreAnnotations.TokenBeginAnnotation.class , CoreAnnotations.TokenEndAnnotation.class , CoreAnnotations.IndexAnnotation.class , CoreAnnotations.OriginalTextAnnotation.class , CoreAnnotations.SentenceIndexAnnotation.class , CoreAnnotations.IsNewlineAnnotation.class , CoreAnnotations.TokenIndexAnnotation.class ) 
__label__1 ['methodName.equals'  '('  '``'  'scan'  "''"  ')'] 
__label__1 ['incomingMessage.getMessagePayloadByte'  '('  '0'  ')'] 
__label__1 ['mMountTable.resolve'  '('  'getPath'  '('  'next'  ')'  ')'  '.getPath'  '('  ')'] 
__label__1 ['@'  'UnrelatedOne'] 
__label__0 tfs.createFile ( new TachyonURI ( `` /root/testFile1 '' ) ) 
__label__0 reg.bind ( LDAP_CONN_NAME , getWiredConnection ( ldapServer ) ) 
__label__0 engine.execute ( cypher ) .dumpToString ( ) 
__label__1 ['new'  'ExchangePatternType'  '('  'exchangePattern'  ')'] 
__label__0 executor.execute ( new NamedRunnable ( `` OkHttp % s stream % d '' , hostname , streamId ) { @ Override public void execute ( ) { try { writeSynReset ( streamId , errorCode ) ; } catch ( IOException ignored ) { } } } ) 
__label__0 otherWriter.write ( line ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'QueueBasicDistributedTest'  'extends'  'QueueBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '2'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'helloForRoles'  "''"  ')'  ')'] 
__label__0 TimeUnit.SECONDS.toMillis ( 5 ) 
__label__0 Color.fromRGB ( 0x51301A ) 
__label__0 partitionContainer.getExistingRecordStore ( name ) 
__label__0 KafkaEightFirehoseFactory.class 
__label__1 ['offset'  '('  '1.0'  ')'] 
__label__1 ['views.html.search.noresults.render'  '('  'currentUser'  '('  ')'  ' '  'q'  ' '  'searchResult'  ')'] 
__label__1 ['ppcY'  '/'  '2.54f'] 
__label__0 ChannelOption < Boolean > 
__label__1 ['out.writeDouble'  '('  '('  'Float'  ')'  'obj'  ')'] 
__label__0 Assert.assertTrue ( rule.appliesTo ( builder.interval ( new Interval ( `` 0500-01-01/2100-12-31 '' ) ) .build ( ) , now ) ) 
__label__0 AdviceWithTasks.beforeByToString ( route , toString , answer , selectFirst , selectLast , selectFrom , selectTo , maxDeep ) 
__label__1 ['InetAddress.getLocalHost'  '('  ')'] 
__label__1 ['logger.debug'  '('  '``'  'Requsting'  'URL'  '{'  '}'  "''"  ' '  'url'  ')'] 
__label__1 ['new'  'MockQueryExecution'  '('  '1'  ')'] 
__label__0 w.println ( paddingText ) 
__label__0 cache.removeRecord ( key ) 
__label__1 ['registry.put'  '('  '``'  'eventBus'  "''"  ' '  'new'  'EventBus'  '('  ')'  ')'] 
__label__0 classResolver.resolveMandatoryClass ( type ) 
__label__1 ['expression.length'  '('  ')'  '-'  '2'] 
__label__0 new AuthenticationException ( `` Error validating LDAP user '' , e ) 
__label__1 ['from'  '('  '``'  'jms'  ':'  'queue2'  ':'  'parallelLoanRequestQueue'  "''"  ')'  '.process'  '('  'new'  'CreditAgency'  '('  ')'  ')'  '.multicast'  '('  'new'  'BankResponseAggregationStrategy'  '('  ')'  '.setAggregatingOutMessage'  '('  'true'  ')'  ')'  '.parallelProcessing'  '('  'true'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__1 ['ServiceAuthorizationManager.refresh'  '('  'conf'  ' '  'new'  'HBasePolicyProvider'  '('  ')'  ')'] 
__label__0 event.isCancelled ( ) 
__label__0 new StringBuilder ( 740 ) 
__label__1 ['new'  'Duration'  '('  '2'  ' '  'SECONDS'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'find'  '``'  '+'  'baseDirectory.getAbsolutePath'  '('  ')'  ')'] 
__label__0 file.getFileNameOnly ( ) 
__label__0 form instanceof IObj & & ! ( form instanceof Var ) & & ( ( IObj ) form ) .meta ( ) ! = null 
__label__0 PositiveDurationValidator.class 
__label__1 ['cacheConfig.isPopulateCache'  '('  ')'] 
__label__0 jmsManager.removeTopicFromJNDI ( name ) 
__label__1 ['testSame'  '('  '``'  'yz'  '('  ')'  ';'  "''"  ' '  "''"  'function'  'yz'  '('  ')'  '{'  '}'  "''"  ' '  'VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR'  ' '  'true'  ')'] 
__label__0 routes.UsersController.editUserForm ( username ) 
__label__1 ['littleEndian.order'  '('  ')'] 
__label__1 ['graphModel.getUndirectedGraph'  '('  ')'] 
__label__0 dis.readFully ( serializedData,0 , length ) 
__label__0 left.getRowLength ( ) 
__label__1 ['CamelCloudServiceCallConfiguration.class'] 
__label__0 nodeEngine.getClusterService ( ) 
__label__1 ['assertThat'  '('  'page2.pagination'  '('  ')'  '.getGlobalTotal'  '('  ')'  ')'  '.isEqualTo'  '('  '7'  ')'] 
__label__1 ['vizConfig.isShowArrows'  '('  ')'  '&'  '&'  'dataBridge.isDirected'  '('  ')'] 
__label__1 ['ConfigAssertions.recordDefaults'  '('  'FeaturesConfig.class'  ')'  '.setExperimentalSyntaxEnabled'  '('  'false'  ')'  '.setDistributedIndexJoinsEnabled'  '('  'false'  ')'  '.setDistributedJoinsEnabled'  '('  'true'  ')'  '.setRedistributeWrites'  '('  'true'  ')'  '.setOptimizeMetadataQueries'  '('  'false'  ')'  '.setOptimizeHashGeneration'  '('  'true'  ')'  '.setOptimizeSingleDistinct'  '('  'true'  ')'  '.setPushTableWriteThroughUnion'  '('  'false'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'defineClass'  'pluginClass'  ':'  '{'  '}'  'cl'  ':'  '{'  '}'  "''"  ' '  'className'  ' '  'classLoader'  ')'] 
__label__0 checkForMisplacedBindingAnnotations ( method , errors ) || ! isValidMethod ( injectableMethod , errors ) 
__label__0 toShort ( bytes,0 , SIZEOF_SHORT ) 
__label__0 currentStage ! = NodeStage.DONE & & sendMessage ( ) == false 
__label__0 Assert.assertEquals ( getNotAllowedExceptionMessage ( `` helloForNone '' ) , e.getCause ( ) .getMessage ( ) ) 
__label__1 ['TransactionException'  'e'] 
__label__1 ['pool.dealloc'  '('  ')'] 
__label__0 expectedCountsForADoc ( weights , e4Update , ind ) 
__label__0 logger.trace ( `` Removing : { } '' , r ) 
__label__0 planNode.getPlanNodeCpuTime ( ) 
__label__1 ['SavedSearch.constructSavedSearches'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'saved_searches.json'  "''"  ' '  'true'  ')'  ')'] 
__label__0 Configuration.getMs ( PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS ) 
__label__1 ['('  '('  'ExecutorService'  ')'  'executor'  ')'  '.isShutdown'  '('  ')'] 
__label__0 metricName.toString ( ) 
__label__0 alluxioUriToDel.equals ( inodePath.getUri ( ) ) || ! ufsSyncChecker.isDirectoryInSync ( parentUri ) 
__label__0 @ QueryParam ( `` createdTimeInterval '' ) 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['readBytes'  '>'  '='  '0'] 
__label__1 ['getDatabaseSchema'  '('  ')'  '!'  '='  'null'] 
__label__1 ['TfsShell.convertMsToDate'  '('  'files'  '['  '1'  ']'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__1 ['fields'  '['  'i'  ']'  '>'  '='  '0'] 
__label__1 ['StatBuckets.prettyUptime'  '('  'secs'  ')'] 
__label__1 ['zController.sendData'  '('  'doRequestStop'  '('  ')'  ')'] 
__label__1 ['args.length'  '=='  '0'] 
__label__0 Thread.sleep ( 1500 ) 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__1 ['notifier.isIgnoreExchangeSentEvents'  '('  ')'] 
__label__1 ['edgeData.getAttributes'  '('  ')'  '=='  'null'] 
__label__1 ['client.getState'  '('  ')'  '.setCredentials'  '('  'new'  'AuthScope'  '('  'null'  ' '  '-1'  ' '  'AuthScope.ANY_REALM'  ')'  ' '  'defaultcreds'  ')'] 
__label__0 nlDataOutNodes ! = null & & nlDataOutNodes.getLength ( ) > 0 
__label__1 ['Assert.assertFalse'  '('  'mFileSystem.getStatus'  '('  'uri'  ')'  '.getInMemoryPercentage'  '('  ')'  '=='  '100'  ')'] 
__label__1 ['``'  'Content-Type'  "''"  '.equals'  '('  'name'  ')'] 
__label__1 ['checkArgument'  '('  'child.parent'  '=='  'null'  ')'] 
__label__1 ['exchange.getPartitioningScheme'  '('  ')'  '.isReplicateNulls'  '('  ')'] 
__label__0 buffer.append ( KEY_NODE_ID + `` = '' ) .append ( nodeId ) 
__label__1 ['callTimeoutMillis=3000'] 
__label__1 ['raw.getParameters'  '('  ')'] 
__label__1 ['Color.fromRGB'  '('  '0xABABAB'  ')'] 
__label__1 ['new'  'FileInputStream'  '('  'props'  ')'] 
__label__1 ['mTfs.mkdirs'  '('  'path'  ')'] 
__label__0 ugi.checkTGTAndReloginFromKeytab ( ) 
__label__1 ['value.doubleValue'  '('  ')'] 
__label__0 ShrinkWrap.create ( JavaArchive.class ) .addClasses ( EmployeeBean.class , Employee.class ) .addAsManifestResource ( `` beans.xml '' ) 
__label__0 parent.getRegionNameAsString ( ) 
__label__0 AtmosphereRequest request 
__label__1 ['assertEquals'  '('  'activeEmployees'  ' '  'values.size'  '('  ')'  ')'] 
__label__1 ['CreateOptions.class'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/home_timeline.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__1 ['methodsToImplement'  '('  'methods'  ')'] 
__label__0 offset == 0 || millis % offset == 0 
__label__1 ['Arrays.asList'  '('  'TYPE'  ' '  'SUBSCRIBE_TYPE'  ' '  'MESSAGE'  ' '  'TIMESTAMP'  ' '  'SIGNATURE'  ' '  'SIGNATURE_VERSION'  ' '  'MESSAGE_ID'  ' '  'SUBJECT'  ' '  'TOPIC'  ' '  'TOKEN'  ')'] 
__label__1 ['JedisConnectionException'  'e'] 
__label__1 ['registrar.checkExisting'  '('  'metric'  ')'] 
__label__1 ['setColor'  '('  'color'  ')'] 
__label__0 i == -1 || nsname.equals ( `` / '' ) 
__label__0 assertOpenEventually ( latch ) 
__label__1 ['meta.setContentEncoding'  '('  'Mimetypes.MIMETYPE_OCTET_STREAM'  ')'] 
__label__1 ['Assert.assertNotNull'  '('  'text'  ')'] 
__label__0 assertEquals ( 10 , rows.size ( ) ) 
__label__1 ['StatBuckets.prettyUptime'  '('  'secs'  ')'] 
__label__1 ['version'  '>'  '0'] 
__label__1 ['logger.error'  '('  '``'  'Error'  'connecting'  'to'  'Plex'  "''"  ' '  'e'  ')'] 
__label__1 ['mock.expectedBodiesReceived'  '('  '``'  'B+END'  "''"  ' '  "''"  'A+END'  "''"  ')'] 
__label__0 assertEquals ( `` val-1 '' , mock.getExchanges ( ) .get ( 0 ) .getIn ( ) .getBody ( String.class ) ) 
__label__1 ['assertEquals'  '('  '``'  'One'  'propagated'  'header'  'is'  'expected'  '.'  '``'  ' 5'  ' '  'headers.toArray'  '('  ')'  '.length'  ')'] 
__label__1 ['tiled'  '!'  '='  'null'] 
__label__1 ['DiagnosticType.disabled'  '('  '``'  'JSC_GOOG_MODULE_IN_NON_MODULE'  "''"  ' '  "''"  'goog.module'  '('  ')'  'call'  'must'  'be'  'the'  'first'  'statement'  'in'  'a'  'module'  '.'  "''"  ')'] 
__label__0 LinkedHashMap < String , LinkedHashMap < String , ASTNode > > 
__label__1 ['logger.info'  '('  '``'  'Parsing'  'Dep'  ':'  '``'  '+'  'filePath'  ')'] 
__label__0 ( color & 0x00FFFFFF ) | ( alpha < < 24 ) 
__label__1 ['logger.info'  '('  '``'  'Renamed'  '``'  '+'  'instancesRenamed'  '+'  '``'  'instances'  'of'  '``'  '+'  'propsRenamed+'  '``'  'properties'  '.'  "''"  ')'] 
__label__0 r.getUri ( ) .getPath ( ) 
__label__0 new HttpDigestAuthFilter ( DIGEST_TEST_LOGIN , DIGEST_TEST_INVALIDPASS ) 
__label__0 new BindException ( newConcept , '' concept '' ) 
__label__1 ['StatBuckets.prettyUptime'  '('  'secs'  ')'] 
__label__0 Assert.assertEquals ( select.size ( ) ,0 ) 
__label__1 ['WALSplitter.moveAsideBadEditsFile'  '('  'walFS'  ' '  'edits'  ')'] 
__label__1 ['group'  '=='  'null'] 
__label__1 ['AcquireJobsRunnable.class'] 
__label__1 ['new'  'DoubleInetAddressDns'  '('  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['name.length'  '('  ')'  '>'  '2'] 
__label__0 zController.enqueue ( doRequestStop ( ) ) 
__label__0 setBytes ( index , data,0 , length ) 
__label__0 session.getMachineIdentifier ( ) .startsWith ( config.getMachineIdentifier ( ) ) 
__label__0 getJSDocType ( cm , var ) 
__label__1 ['Integer'  'newerThan'] 
__label__0 basicInvocation.potentialResponse ! = null 
__label__1 ['/'  '*'  '*'  '*'  'The'  'tested'  'prototype'  'instance'  '*'  '/'  'private'  'final'  'Prototype'  'testedPrototype'  ';'] 
__label__1 ['!'  'StringUtils.startsWithIgnoreCase'  '('  'StringUtils.trim'  '('  'ddl'  ')'  ' '  "''"  'flush'  "''"  ')'  '&'  '&'  '!'  'StringUtils.startsWithIgnoreCase'  '('  'StringUtils.trim'  '('  'ddl'  ')'  ' '  "''"  'grant'  "''"  ')'] 
__label__1 ['name='  "''"  'java'  ':'  '/ConnectionFactory'  "''"] 
__label__0 c.setLong ( `` hbase.hregion.memstore.flush.size '' ,25000 ) 
__label__1 ['localAnchorA.set'  '('  'joint.getLocalAnchorB'  '('  ')'  '.x'  ' '  'joint.getLocalAnchorB'  '('  ')'  '.y'  ')'] 
__label__1 ['new'  'ObjectRecordWithStats'  '('  'key'  ' '  'v'  ')'] 
__label__1 ['getMockEndpoint'  '('  '``'  'mock'  ':'  'line'  "''"  ')'  '.expectedMinimumMessageCount'  '('  '1'  ')'] 
__label__0 lookupService.lookupPrincipalByName ( user ) 
__label__1 ['/'  '*'  '*'  '*'  'TreeTableCellEditor'  'implementation'  '.'  'Component'  'returned'  'is'  'the'  'JTree'  '.'  '*'  '/'  'private'  'class'  'TreeTableCellEditor'  'extends'  'AbstractCellEditor'  'implements'  'TableCellEditor'  '{'  '@'  'Override'  'public'  'Component'  'getTableCellEditorComponent'  '('  'JTable'  'table'  ' '  'Object'  'value'  ' '  'boolean'  'isSelected'  ' '  'int'  'row'  ' '  'int'  'column'  ')'  '{'  'return'  'tree'  ';'  '}'  '/'  '*'  '*'  '*'  'Overridden'  'to'  'return'  'false'  ' '  'and'  'if'  'the'  'event'  'is'  'a'  'mouse'  'event'  'it'  'is'  'forwarded'  'to'  'the'  'tree'  '.'  '<'  'p'  '>'  'The'  'behavior'  'for'  'this'  'is'  'debatable'  ' '  'and'  'should'  'really'  'be'  'offered'  'as'  'a'  'property'  '.'  'By'  'returning'  'false'  ' '  'all'  'keyboard'  'actions'  'are'  'implemented'  'in'  'terms'  'of'  'the'  'table'  '.'  'By'  'returning'  'true'  ' '  'the'  'tree'  'would'  'get'  'a'  'chance'  'to'  'do'  'something'  'with'  'the'  'keyboard'  'events'  '.'  'For'  'the'  'most'  'part'  'this'  'is'  'ok'  '.'  'But'  'for'  'certain'  'keys'  ' '  'such'  'as'  'left/right'  ' '  'the'  'tree'  'will'  'expand/collapse'  'where'  'as'  'the'  'table'  'focus'  'should'  'really'  'move'  'to'  'a'  'different'  'column'  '.'  'Page'  'up/down'  'should'  'also'  'be'  'implemented'  'in'  'terms'  'of'  'the'  'table'  '.'  'By'  'returning'  'false'  'this'  'also'  'has'  'the'  'added'  'benefit'  'that'  'clicking'  'outside'  'of'  'the'  'bounds'  'of'  'the'  'tree'  'node'  ' '  'but'  'still'  'in'  'the'  'tree'  'column'  'will'  'select'  'the'  'row'  ' '  'whereas'  'if'  'this'  'returned'  'true'  'that'  'would'  "n't"  'be'  'the'  'case'  '.'  '<'  'p'  '>'  'By'  'returning'  'false'  'we'  'are'  'also'  'enforcing'  'the'  'policy'  'that'  'the'  'tree'  'will'  'never'  'be'  'editable'  '('  'at'  'least'  'by'  'a'  'key'  'sequence'  ')'  '.'  '*'  '@'  'see'  'TableCellEditor'  '*'  '/'  '@'  'Override'  'public'  'boolean'  'isCellEditable'  '('  'EventObject'  'e'  ')'  '{'  'if'  '('  'e'  'instanceof'  'MouseEvent'  ')'  '{'  'for'  '('  'int'  'counter=getColumnCount'  '('  ')'  '-'  '1'  ';'  'counter'  '>'  '='  '0'  ';'  'counter'  '--'  ')'  '{'  'if'  '('  'getColumnClass'  '('  'counter'  ')'  '=='  'TreeTableModel.class'  ')'  '{'  'final'  'MouseEvent'  'me='  '('  'MouseEvent'  ')'  'e'  ';'  'final'  'MouseEvent'  'newME=new'  'MouseEvent'  '('  'tree'  ' '  'me.getID'  '('  ')'  ' '  'me.getWhen'  '('  ')'  ' '  'me.getModifiers'  '('  ')'  ' '  'me.getX'  '('  ')'  '-'  'getCellRect'  '('  '0'  ' '  'counter'  ' '  'true'  ')'  '.x'  ' '  'me.getY'  '('  ')'  ' '  'me.getClickCount'  '('  ')'  ' '  'me.isPopupTrigger'  '('  ')'  ')'  ';'  'tree.dispatchEvent'  '('  'newME'  ')'  ';'  'break'  ';'  '}'  '}'  '}'  'return'  'false'  ';'  '}'  '}'] 
__label__0 bagEntry ! = null & & bagEntry.state ( ) .compareAndSet ( STATE_NOT_IN_USE , STATE_IN_USE ) 
__label__1 ['``'  'Ca'  "n't"  'have'  'more'  'than'  '32767'  'vertices'  'per'  'batch'  ':'  '``'  '+'  'maxTriangles'] 
__label__1 ['resources.size'  '('  ')'  '<'  '='  'maxSuspendResource.get'  '('  ')'] 
__label__0 new ContinueProcessOperation ( commandContext , execution , true ) 
__label__1 ['graph.getEdges'  '('  ')'] 
__label__0 getRequestMethod ! = null 
__label__1 ['Executors.newCachedThreadPool'  '('  'new'  'ThreadFactory'  '('  ')'  '{'  'private'  'AtomicInteger'  'count=new'  'AtomicInteger'  '('  ')'  ';'  '@'  'Override'  'public'  'Thread'  'newThread'  '('  'final'  'Runnable'  'runnable'  ')'  '{'  'return'  'new'  'Thread'  '('  'runnable'  ' '  "''"  'Atmosphere-BroadcasterConfig-'  "''"  '+'  'count.getAndIncrement'  '('  ')'  ')'  ';'  '}'  '}'  ')'] 
__label__1 ['Files.delete'  '('  'dir.toPath'  '('  ')'  ')'] 
__label__0 start.set ( Calendar.DAY_OF_MONTH , startDay ) 
__label__1 ['XMLInputFactory.newFactory'  '('  ')'] 
__label__0 SchematronProcessorFactory.newSchematronEngine ( endpoint.getRules ( ) ) 
__label__1 ['typeConverter.convertTo'  '('  'XMLStreamReader.class'  ' '  'stream'  ')'] 
__label__1 ['Thread.sleep'  '('  '200'  ')'] 
__label__0 this.applicationContext.register ( RootConfig.class , DifferentPortConfig.class , PropertyPlaceholderAutoConfiguration.class , EmbeddedServletContainerAutoConfiguration.class , DispatcherServletAutoConfiguration.class , WebMvcAutoConfiguration.class , ManagementServerPropertiesAutoConfiguration.class , EndpointWebMvcAutoConfiguration.class , ErrorMvcAutoConfiguration.class ) 
__label__0 LOG.warn ( `` Failed to get next entry from `` + jarFileName + `` : `` + ioEx ) 
__label__0 testModules ( `` var foo = function ( ) { var module = { } ; module.exports = { } ; } ; '' + `` module.exports = foo ; '' , '' goog.provide ( 'module $ test ' ) ; '' + `` var foo $ $ module $ test=function ( ) { var module= { } ; module.exports= { } } ; '' + `` var module $ test=foo $ $ module $ test '' ) 
__label__1 ['!'  'tmp.exists'  '('  ')'  '&'  '&'  '!'  'tmp.isDirectory'  '('  ')'] 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'db'  "''"  ')'] 
__label__0 info.getRegionNameAsString ( ) 
__label__1 ['lookup'  '('  'parseName'  '('  'name'  ')'  ')'] 
__label__0 statistics.addRemoveTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['/'  '*'  '*'  '*'  'Matches'  'no'  'characters'  '.'  '*'  '/'  'public'  'static'  'final'  'FastMatcher'  'NONE=new'  'FastMatcher'  '('  ')'  '{'  '@'  'Override'  'public'  'boolean'  'matches'  '('  'char'  'c'  ')'  '{'  'return'  'false'  ';'  '}'  '@'  'Override'  'public'  'String'  'replaceFrom'  '('  'CharSequence'  'sequence'  ' '  'CharSequence'  'replacement'  ')'  '{'  'checkNotNull'  '('  'replacement'  ')'  ';'  'return'  'sequence.toString'  '('  ')'  ';'  '}'  'private'  'void'  'checkNotNull'  '('  'CharSequence'  'replacement'  ')'  '{'  '}'  '@'  'Override'  'public'  'String'  'collapseFrom'  '('  'CharSequence'  'sequence'  ' '  'char'  'replacement'  ')'  '{'  'return'  'sequence.toString'  '('  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'trimTrailingFrom'  '('  'CharSequence'  'sequence'  ')'  '{'  'return'  'sequence.toString'  '('  ')'  ';'  '}'  '}'  ';'] 
__label__0 assertRemoveSubsystemResources ( servicesB ) 
__label__0 d.setDefaultEncoding ( mergedMetaData.getDefaultEncoding ( ) ) 
__label__1 ['excludesPattern'  '=='  'null'] 
__label__0 dirtyOutputBuffer ( ) || currentPacket ! = null 
__label__0 logger.error ( `` Invalid Atmosphere Version { } '' , javascriptVersion ) 
__label__1 ['rackIdToNodes.get'  '('  'rid'  ')'] 
__label__0 entry.getName ( ) .equals ( BOOT_INF_CLASSES ) 
__label__1 ['GL20.glUniform1'  '('  'location'  ' '  'toIntBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  ')'  ')'] 
__label__0 database.FindProduct ( node.getManufacturer ( ) , node.getDeviceType ( ) , node.getDeviceId ( ) , node.getApplicationVersion ( ) ) 
__label__1 ['LOG.info'  '('  '``'  'Finding'  'components'  'in'  'url'  ':'  '{'  '}'  "''"  ' '  'url'  ')'] 
__label__0 Preconditions.checkNotNull ( location , '' location '' ) 
__label__1 ['unlockForRegularUsage'  '('  ')'] 
__label__0 arrayName=options.get ( ARRAY_NAME ) 
__label__1 ['new'  'StringBuilder'  '('  '239'  ')'] 
__label__0 clusterProperties.getMaxRedirects ( ) 
__label__0 getPath ( `` InputDefaultConfig.java '' ) 
__label__0 NettyUtils.isDomainSocketSupported ( dataSource ) 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['UnderFileSystemUtils.deleteIfExists'  '('  'mUfs'  ' '  'mTempCheckpointPath'  ')'] 
__label__1 ['localAddress'  '!'  '='  'null'] 
__label__0 Pattern.compile ( foundAuthor , Pattern.LITERAL ) 
__label__0 ConfigUtils.absoluteStormLocalDir ( stormConf ) 
__label__1 ['GenericIntegrationTest.class'] 
__label__0 this.thrown.expectMessage ( `` File must exist '' ) 
__label__0 DirectMessage.createDirectMessageList ( http.get ( `` http : //yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json '' ) ) 
__label__1 ['getGlobalProperty'  '('  'OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST'  ')'] 
__label__1 ['new'  'RuntimeException'  '('  '``'  'Could'  'not'  'create'  'TypeInformation'  'for'  'type'  '``'  '+'  'first.getClass'  '('  ')'  '+'  '``'  ';'  'please'  'specify'  'the'  'TypeInformation'  'manually'  'via'  '``'  '+'  '``'  'StreamExecutionEnvironment'  '#'  'fromElements'  '('  'Collection'  ' '  'TypeInformation'  ')'  "''"  ')'] 
__label__1 ['TestSuiteEnvironment.getServerAddress'  '('  ')'] 
__label__1 ['@'  'InputIntMethodAnnotation'  '('  '42'  ')'] 
__label__0 / * * * Converts quoted property accesses to dot syntax ( a [ ' b ' ] - > a.b ) * / CONVERT_TO_DOTTED_PROPERTIES { @ Override void apply ( CompilerOptions options , boolean value ) { options.setConvertToDottedProperties ( value ) ; } @ Override String getJavaInfo ( ) { return `` options.setConvertToDottedProperties ( true ) '' ; } } 
__label__0 out.writeData ( function ) 
__label__0 AdviceWithTasks.afterByToString ( route , toString , answer , selectFirst , selectLast , selectFrom , selectTo , maxDeep ) 
__label__0 Preconditions.checkNotNull ( worker , '' worker '' ) 
__label__1 ['8'  '*'  'Constants.MB'] 
__label__0 overrideDeploymentConfig || ( loginConfig == null ) 
__label__0 setDiskExpiryThreadIntervalSeconds ( Long.valueOf ( ( String ) cacheSettings.get ( `` diskExpiryThreadIntervalSeconds '' ) ) .longValue ( ) ) 
__label__1 ['LOG.info'  '('  'getName'  '('  ')'  '+'  '``'  'caught'  ':'  '``'  ' '  'e'  ')'] 
__label__0 new UDFArgumentTypeException ( 1 , '' The first and seconds arguments of function NLV should have the same type , `` + `` but they are different : \ '' '' + arguments [ 0 ] .getTypeName ( ) + `` \ '' and \ '' '' + arguments [ 1 ] .getTypeName ( ) + `` \ '' '' ) 
__label__0 channel.disconnect ( ) 
__label__0 messageHandler.serverResponder ( ) 
__label__1 ['bean.getCollectionCount'  '('  ')'] 
__label__0 bindingGroup.hasDefined ( PORT_OFFSET ) 
__label__1 ['table.getParameters'  '('  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__1 ['BufferUtils.freeMemory'  '('  'bytebuffer'  ')'] 
__label__0 setMinHeight ( minHeight ) 
__label__0 processEngineConfiguration.getExpressionManager ( ) == null & & applicationContext ! = null 
__label__1 ['return'  'context'  ';'] 
__label__0 dataFormatModel.setDescription ( row.get ( `` description '' ) ) 
__label__1 ['propEditor'  '!'  '='  'null'] 
__label__0 Engineer manager=new GnomeEngineeringManager ( ) ; 
__label__1 ['Gauge'  '<'  'Object'  '>'] 
__label__0 cf.getCompressionType ( ) == null || cf.getCompressionType ( ) == Compression.Algorithm.NONE 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__1 ['conceptAnswer.getConcept'  '('  ')'] 
__label__1 ['details.put'  '('  'CONFIG_HASH_KEY'  ' '  'currentConfigHash'  ')'] 
__label__0 new IllegalStateException ( `` Result is already complete : succeeded '' ) 
__label__1 ['AstUtils.hasLeastOneAnnotation'  '('  'classNode'  ' '  "''"  'Controller'  "''"  ' '  "''"  'EnableWebMvc'  "''"  ')'] 
__label__0 conn.getResponseCode ( ) == HttpURLConnection.HTTP_OK || conn.getResponseCode ( ) == HttpURLConnection.HTTP_BAD_REQUEST 
__label__1 ['cursor.getPosition'  '('  ')'] 
__label__0 GL11.glTexParameterfv ( target , pname , params ) 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__0 getAnimation ( id , false ) 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__0 Validate.configurationDirectoryExists ( controllerJavaHome , '' controllerJavaHome must exist at `` + controllerJavaHome ) 
__label__1 ['isIgnoreUriScheme'  '('  ')'] 
__label__0 rackIdToNodes.getOrDefault ( rid , Collections.emptyList ( ) ) 
__label__1 ['assertEquals'  '('  'avDegree 2.0'  ')'] 
__label__1 ['getPath'  '('  '``'  'InputPackageDeclarationDiffDirectoryAtParent.java'  "''"  ')'] 
__label__1 ['getIndexes'  '('  ')'  '.hasIndex'  '('  ')'  '&'  'OBJECT.equals'  '('  'mapConfig.getInMemoryFormat'  '('  ')'  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['new'  'RuntimeIOException'  '('  'e'  ')'] 
__label__1 ['new'  'GeneralDataCoding'  '('  'false'  ' '  'false'  ' '  'MessageClass.CLASS1'  ' '  'Alphabet.ALPHA_DEFAULT'  ')'] 
__label__1 ['SampleCacheApplication.class'] 
__label__1 ['``'  'streams'  ':'  "''"  '+'  'filter'] 
__label__1 ['assertFalse'  '('  'dr.isFailure'  '('  ')'  ')'] 
__label__1 ['ExceptionUtils.getFullStackTrace'  '('  'th'  ')'] 
__label__0 log.info ( error , cause ) 
__label__0 LOG.debug ( `` Creating netty input stream for block { } @ { } from client { } '' , blockId , address , NetworkAddressUtils.getClientHostName ( ) ) 
__label__0 simple.getToSentDate ( ) 
__label__0 ( UndeclaredThrowableException ) unwrapped 
__label__0 `` wrong partition , expected : `` + getPartitionId ( ) + `` but found : '' + partitionId 
__label__1 ['xmlDocAnnotation.get'  '('  'CoreAnnotations.TokensAnnotation.class'  ')'  '.get'  '('  '554'  ')'] 
__label__0 ( JobResponse ) result 
__label__0 Mockito.any ( WorkerNetAddress.class ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__0 routes.BuffersResource ( ) 
__label__1 ['new'  'StringBuilder'  '('  '246'  ')'] 
__label__1 ['grammar.getTokenNames'  '('  ')'] 
__label__1 ['hazelcastFactory.newHazelcastClient'  '('  ')'] 
__label__1 ['('  'Node'  ')'  'container'] 
__label__1 ['model.getNodeTextColumns'  '('  ')'  '=='  'null'] 
__label__1 ['new'  'CSVFilter'  '('  'lines'  ')'] 
__label__0 Long.parseLong ( args [ 2 ] ) 
__label__0 callback.done ( false ) 
__label__0 javaClass.addNestedType ( ) .setPackagePrivate ( ) 
__label__1 ['ConcurrentHashMap'  '<'  'Url'  ' '  'Channel'  '>'] 
__label__1 ['/'  '*'  '*'  '*'  'This'  'is'  'the'  'primary'  'connection'  'pool'  'class'  'that'  'provides'  'the'  'basic'  'pooling'  'behavior'  'for'  'HikariCP'  '.'  '*'  '@'  'author'  'Brett'  'Wooldridge'  '*'  '/'  'public'  'abstract'  'class'  'BaseHikariPool'  'implements'  'HikariPoolMBean'  ' '  'IBagStateListener'  '{'  'protected'  'final'  'Logger'  'LOGGER=LoggerFactory.getLogger'  '('  'getClass'  '('  ')'  ')'  ';'  'private'  'static'  'final'  'long'  'ALIVE_BYPASS_WINDOW=Long.getLong'  '('  '``'  'com.zaxxer.hikari.aliveBypassWindow'  "''"  ' 1000L'  ')'  ';'  'protected'  'static'  'final'  'int'  'POOL_RUNNING=0'  ';'  'protected'  'static'  'final'  'int'  'POOL_SUSPENDED=1'  ';'  'protected'  'static'  'final'  'int'  'POOL_SHUTDOWN=2'  ';'  'public'  'final'  'String'  'catalog'  ';'  'public'  'final'  'boolean'  'isReadOnly'  ';'  'public'  'final'  'boolean'  'isAutoCommit'  ';'  'public'  'int'  'transactionIsolation'  ';'  'protected'  'final'  'PoolUtilities'  'poolUtils'  ';'  'protected'  'final'  'HikariConfig'  'configuration'  ';'  'protected'  'final'  'AtomicInteger'  'totalConnections'  ';'  'protected'  'final'  'ConcurrentBag'  '<'  'PoolBagEntry'  '>'  'connectionBag'  ';'  'protected'  'final'  'ThreadPoolExecutor'  'addConnectionExecutor'  ';'  'protected'  'final'  'ThreadPoolExecutor'  'closeConnectionExecutor'  ';'  'protected'  'final'  'ScheduledThreadPoolExecutor'  'houseKeepingExecutorService'  ';'  'protected'  'final'  'boolean'  'isUseJdbc4Validation'  ';'  'protected'  'final'  'boolean'  'isIsolateInternalQueries'  ';'  'protected'  'volatile'  'int'  'poolState'  ';'  'protected'  'volatile'  'long'  'connectionTimeout'  ';'  'protected'  'volatile'  'long'  'validationTimeout'  ';'  'private'  'final'  'LeakTask'  'leakTask'  ';'  'private'  'final'  'DataSource'  'dataSource'  ';'  'private'  'final'  'GlobalPoolLock'  'suspendResumeLock'  ';'  'private'  'final'  'IConnectionCustomizer'  'connectionCustomizer'  ';'  'private'  'final'  'AtomicReference'  '<'  'Throwable'  '>'  'lastConnectionFailure'  ';'  'private'  'final'  'String'  'username'  ';'  'private'  'final'  'String'  'password'  ';'  'private'  'volatile'  'MetricsTracker'  'metricsTracker'  ';'  'private'  'volatile'  'boolean'  'isRecordMetrics'  ';'  '/'  '*'  '*'  '*'  'Construct'  'a'  'HikariPool'  'with'  'the'  'specified'  'configuration'  '.'  '*'  '@'  'param'  'configuration'  'a'  'HikariConfig'  'instance'  '*'  '/'  'public'  'BaseHikariPool'  '('  'HikariConfig'  'configuration'  ')'  '{'  'this'  '('  'configuration'  ' '  'configuration.getUsername'  '('  ')'  ' '  'configuration.getPassword'  '('  ')'  ')'  ';'  '}'  '/'  '*'  '*'  '*'  'Construct'  'a'  'HikariPool'  'with'  'the'  'specified'  'configuration'  '.'  'We'  'cache'  'lots'  'of'  'configuration'  'items'  'in'  'class-local'  'final'  'members'  'for'  'speed'  '.'  '*'  '@'  'param'  'configuration'  'a'  'HikariConfig'  'instance'  '*'  '@'  'param'  'username'  'authentication'  'username'  '*'  '@'  'param'  'password'  'authentication'  'password'  '*'  '/'  'public'  'BaseHikariPool'  '('  'HikariConfig'  'configuration'  ' '  'String'  'username'  ' '  'String'  'password'  ')'  '{'  'this.username=username'  ';'  'this.password=password'  ';'  'this.configuration=configuration'  ';'  'this.poolUtils=new'  'PoolUtilities'  '('  'configuration'  ')'  ';'  'this.connectionBag=createConcurrentBag'  '('  'this'  ')'  ';'  'this.totalConnections=new'  'AtomicInteger'  '('  ')'  ';'  'this.connectionTimeout=configuration.getConnectionTimeout'  '('  ')'  ';'  'this.validationTimeout=configuration.getValidationTimeout'  '('  ')'  ';'  'this.lastConnectionFailure=new'  'AtomicReference'  '<'  'Throwable'  '>'  '('  ')'  ';'  'this.isReadOnly=configuration.isReadOnly'  '('  ')'  ';'  'this.isAutoCommit=configuration.isAutoCommit'  '('  ')'  ';'  'this.suspendResumeLock=configuration.isAllowPoolSuspension'  '('  ')'  '?'  'new'  'GlobalPoolLock'  '('  'true'  ')'  ':'  'GlobalPoolLock.FAUX_LOCK'  ';'  'this.catalog=configuration.getCatalog'  '('  ')'  ';'  'this.connectionCustomizer=initializeCustomizer'  '('  ')'  ';'  'this.transactionIsolation=getTransactionIsolation'  '('  'configuration.getTransactionIsolation'  '('  ')'  ')'  ';'  'this.isIsolateInternalQueries=configuration.isIsolateInternalQueries'  '('  ')'  ';'  'this.isUseJdbc4Validation=configuration.getConnectionTestQuery'  '('  ')'  '=='  'null'  ';'  'setMetricRegistry'  '('  'configuration.getMetricRegistry'  '('  ')'  ')'  ';'  'setHealthCheckRegistry'  '('  'configuration.getHealthCheckRegistry'  '('  ')'  ')'  ';'  'this.dataSource=poolUtils.initializeDataSource'  '('  'configuration.getDataSourceClassName'  '('  ')'  ' '  'configuration.getDataSource'  '('  ')'  ' '  'configuration.getDataSourceProperties'  '('  ')'  ' '  'configuration.getDriverClassName'  '('  ')'  ' '  'configuration.getJdbcUrl'  '('  ')'  ' '  'username'  ' '  'password'  ')'  ';'  'this.addConnectionExecutor=createThreadPoolExecutor'  '('  'configuration.getMaximumPoolSize'  '('  ')'  ' '  "''"  'HikariCP'  'connection'  'filler'  '('  'pool'  '``'  '+'  'configuration.getPoolName'  '('  ')'  '+'  '``'  ')'  "''"  ' '  'configuration.getThreadFactory'  '('  ')'  ' '  'new'  'ThreadPoolExecutor.DiscardPolicy'  '('  ')'  ')'  ';'  'this.closeConnectionExecutor=createThreadPoolExecutor'  '('  '4'  ' '  "''"  'HikariCP'  'connection'  'closer'  '('  'pool'  '``'  '+'  'configuration.getPoolName'  '('  ')'  '+'  '``'  ')'  "''"  ' '  'configuration.getThreadFactory'  '('  ')'  ' '  'new'  'ThreadPoolExecutor.CallerRunsPolicy'  '('  ')'  ')'  ';'  'long'  'delayPeriod=Long.getLong'  '('  '``'  'com.zaxxer.hikari.housekeeping.periodMs'  "''"  ' '  'TimeUnit.SECONDS.toMillis'  '('  '30L'  ')'  ')'  ';'  'ThreadFactory'  'threadFactory=configuration.getThreadFactory'  '('  ')'  '!'  '='  'null'  '?'  'configuration.getThreadFactory'  '('  ')'  ':'  'new'  'DefaultThreadFactory'  '('  '``'  'Hikari'  'Housekeeping'  'Timer'  '('  'pool'  '``'  '+'  'configuration.getPoolName'  '('  ')'  '+'  '``'  ')'  "''"  ' '  'true'  ')'  ';'  'this.houseKeepingExecutorService=new'  'ScheduledThreadPoolExecutor'  '('  '1'  ' '  'threadFactory'  ' '  'new'  'ThreadPoolExecutor.DiscardPolicy'  '('  ')'  ')'  ';'  'this.houseKeepingExecutorService.scheduleAtFixedRate'  '('  'getHouseKeeper'  '('  ')'  ' '  'delayPeriod'  ' '  'delayPeriod'  ' '  'TimeUnit.MILLISECONDS'  ')'  ';'  'this.houseKeepingExecutorService.setExecuteExistingDelayedTasksAfterShutdownPolicy'  '('  'false'  ')'  ';'  'this.leakTask='  '('  'configuration.getLeakDetectionThreshold'  '('  ')'  '=='  '0'  ')'  '?'  'LeakTask.NO_LEAK'  ':'  'new'  'LeakTask'  '('  'configuration.getLeakDetectionThreshold'  '('  ')'  ' '  'houseKeepingExecutorService'  ')'  ';'  'setRemoveOnCancelPolicy'  '('  'houseKeepingExecutorService'  ')'  ';'  'poolUtils.setLoginTimeout'  '('  'dataSource'  ' '  'connectionTimeout'  ')'  ';'  'registerMBeans'  '('  'configuration'  ' '  'this'  ')'  ';'  'initializeConnections'  '('  ')'  ';'  '}'  '/'  '*'  '*'  '*'  'Get'  'a'  'connection'  'from'  'the'  'pool'  ' '  'or'  'timeout'  'after'  'connectionTimeout'  'milliseconds'  '.'  '*'  '@'  'return'  'a'  'java.sql.Connection'  'instance'  '*'  '@'  'throws'  'SQLException'  'thrown'  'if'  'a'  'timeout'  'occurs'  'trying'  'to'  'obtain'  'a'  'connection'  '*'  '/'  'public'  'final'  'Connection'  'getConnection'  '('  ')'  'throws'  'SQLException'  '{'  'return'  'getConnection'  '('  'connectionTimeout'  ')'  ';'  '}'  '/'  '*'  '*'  '*'  'Get'  'a'  'connection'  'from'  'the'  'pool'  ' '  'or'  'timeout'  'after'  'the'  'specified'  'number'  'of'  'milliseconds'  '.'  '*'  '@'  'param'  'hardTimeout'  'the'  'maximum'  'time'  'to'  'wait'  'for'  'a'  'connection'  'from'  'the'  'pool'  '*'  '@'  'return'  'a'  'java.sql.Connection'  'instance'  '*'  '@'  'throws'  'SQLException'  'thrown'  'if'  'a'  'timeout'  'occurs'  'trying'  'to'  'obtain'  'a'  'connection'  '*'  '/'  'public'  'final'  'Connection'  'getConnection'  '('  'final'  'long'  'hardTimeout'  ')'  'throws'  'SQLException'  '{'  'suspendResumeLock.acquire'  '('  ')'  ';'  'long'  'timeout=hardTimeout'  ';'  'final'  'long'  'start=System.currentTimeMillis'  '('  ')'  ';'  'final'  'MetricsContext'  'metricsContext='  '('  'isRecordMetrics'  '?'  'metricsTracker.recordConnectionRequest'  '('  'start'  ')'  ':'  'MetricsTracker.NO_CONTEXT'  ')'  ';'  'try'  '{'  'do'  '{'  'final'  'PoolBagEntry'  'bagEntry=connectionBag.borrow'  '('  'timeout'  ' '  'TimeUnit.MILLISECONDS'  ')'  ';'  'if'  '('  'bagEntry'  '=='  'null'  ')'  '{'  'break'  ';'  '}'  'final'  'long'  'now=System.currentTimeMillis'  '('  ')'  ';'  'if'  '('  'bagEntry.evicted'  '||'  '('  'now'  '-'  'bagEntry.lastAccess'  '>'  'ALIVE_BYPASS_WINDOW'  '&'  '&'  '!'  'isConnectionAlive'  '('  'bagEntry.connection'  ')'  ')'  ')'  '{'  'closeConnection'  '('  'bagEntry'  ' '  "''"  '('  'connection'  'evicted'  'or'  'dead'  ')'  "''"  ')'  ';'  'timeout=hardTimeout'  '-'  'elapsedTimeMs'  '('  'start'  ')'  ';'  '}'  'else'  '{'  'metricsContext.setConnectionLastOpen'  '('  'bagEntry'  ' '  'now'  ')'  ';'  'metricsContext.stop'  '('  ')'  ';'  'return'  'ProxyFactory.getProxyConnection'  '('  '('  'HikariPool'  ')'  'this'  ' '  'bagEntry'  ' '  'leakTask.start'  '('  'bagEntry'  ')'  ')'  ';'  '}'  '}'  'while'  '('  'timeout'  '>'  '0L'  ')'  ';'  '}'  'catch'  '('  'InterruptedException'  'e'  ')'  '{'  'throw'  'new'  'SQLException'  '('  '``'  'Interrupted'  'during'  'connection'  'acquisition'  "''"  ' '  'e'  ')'  ';'  '}'  'finally'  '{'  'suspendResumeLock.release'  '('  ')'  ';'  '}'  'logPoolState'  '('  '``'  'Timeout'  'failure'  '``'  ')'  ';'  'throw'  'new'  'SQLTimeoutException'  '('  'String.format'  '('  '``'  'Timeout'  'after'  '%'  'dms'  'of'  'waiting'  'for'  'a'  'connection'  '.'  '``'  ' '  'elapsedTimeMs'  '('  'start'  ')'  ')'  ' '  'lastConnectionFailure.getAndSet'  '('  'null'  ')'  ')'  ';'  '}'  '/'  '*'  '*'  '*'  'Release'  'a'  'connection'  'back'  'to'  'the'  'pool'  ' '  'or'  'permanently'  'close'  'it'  'if'  'it'  'is'  'broken'  '.'  '*'  '@'  'param'  'bagEntry'  'the'  'PoolBagEntry'  'to'  'release'  'back'  'to'  'the'  'pool'  '*'  '/'  'public'  'final'  'void'  'releaseConnection'  '('  'final'  'PoolBagEntry'  'bagEntry'  ')'  '{'  'metricsTracker.recordConnectionUsage'  '('  'bagEntry'  ')'  ';'  'if'  '('  'bagEntry.evicted'  ')'  '{'  'LOGGER.debug'  '('  '``'  'Connection'  'returned'  'to'  'pool'  '{'  '}'  'is'  'broken'  'or'  'evicted'  '.'  'Closing'  'connection'  '.'  '``'  ' '  'configuration.getPoolName'  '('  ')'  ')'  ';'  'closeConnection'  '('  'bagEntry'  ' '  "''"  '('  'connection'  'broken'  'or'  'evicted'  ')'  "''"  ')'  ';'  '}'  'else'  '{'  'connectionBag.requite'  '('  'bagEntry'  ')'  ';'  '}'  '}'  '/'  '*'  '*'  '*'  'Shutdown'  'the'  'pool'  ' '  'closing'  'all'  'idle'  'connections'  'and'  'aborting'  'or'  'closing'  'active'  'connections'  '.'  '*'  '@'  'throws'  'InterruptedException'  'thrown'  'if'  'the'  'thread'  'is'  'interrupted'  'during'  'shutdown'  '*'  '/'  'public'  'final'  'void'  'shutdown'  '('  ')'  'throws'  'InterruptedException'  '{'  'if'  '('  'poolState'  '!'  '='  'POOL_SHUTDOWN'  ')'  '{'  'poolState=POOL_SHUTDOWN'  ';'  'LOGGER.info'  '('  '``'  'HikariCP'  'pool'  '{'  '}'  'is'  'shutting'  'down'  '.'  '``'  ' '  'configuration.getPoolName'  '('  ')'  ')'  ';'  'logPoolState'  '('  '``'  'Before'  'shutdown'  '``'  ')'  ';'  'connectionBag.close'  '('  ')'  ';'  'softEvictConnections'  '('  ')'  ';'  'houseKeepingExecutorService.shutdown'  '('  ')'  ';'  'addConnectionExecutor.shutdownNow'  '('  ')'  ';'  'houseKeepingExecutorService.awaitTermination'  '('  '5L'  ' '  'TimeUnit.SECONDS'  ')'  ';'  'addConnectionExecutor.awaitTermination'  '('  '5L'  ' '  'TimeUnit.SECONDS'  ')'  ';'  'final'  'ExecutorService'  'assassinExecutor=createThreadPoolExecutor'  '('  'configuration.getMaximumPoolSize'  '('  ')'  ' '  "''"  'HikariCP'  'connection'  'assassin'  "''"  ' '  'configuration.getThreadFactory'  '('  ')'  ' '  'new'  'ThreadPoolExecutor.CallerRunsPolicy'  '('  ')'  ')'  ';'  'final'  'long'  'start=System.currentTimeMillis'  '('  ')'  ';'  'do'  '{'  'softEvictConnections'  '('  ')'  ';'  'abortActiveConnections'  '('  'assassinExecutor'  ')'  ';'  '}'  'while'  '('  'getTotalConnections'  '('  ')'  '>'  '0'  '&'  '&'  'elapsedTimeMs'  '('  'start'  ')'  '<'  'TimeUnit.SECONDS.toMillis'  '('  '5'  ')'  ')'  ';'  'assassinExecutor.shutdown'  '('  ')'  ';'  'assassinExecutor.awaitTermination'  '('  '5L'  ' '  'TimeUnit.SECONDS'  ')'  ';'  'closeConnectionExecutor.shutdown'  '('  ')'  ';'  'closeConnectionExecutor.awaitTermination'  '('  '5L'  ' '  'TimeUnit.SECONDS'  ')'  ';'  'logPoolState'  '('  '``'  'After'  'shutdown'  '``'  ')'  ';'  'unregisterMBeans'  '('  'configuration'  ' '  'this'  ')'  ';'  'metricsTracker.close'  '('  ')'  ';'  '}'  '}'  '/'  '*'  '*'  '*'  'Evict'  'a'  'connection'  'from'  'the'  'pool'  '.'  '*'  '@'  'param'  'proxyConnection'  'the'  'connection'  'to'  'evict'  '*'  '/'  'public'  'final'  'void'  'evictConnection'  '('  'IHikariConnectionProxy'  'proxyConnection'  ')'  '{'  'closeConnection'  '('  'proxyConnection.getPoolBagEntry'  '('  ')'  ' '  "''"  '('  'connection'  'evicted'  'by'  'user'  ')'  "''"  ')'  ';'  '}'  '/'  '*'  '*'  '*'  'Get'  'the'  'wrapped'  'DataSource'  '.'  '*'  '@'  'return'  'the'  'wrapped'  'DataSource'  '*'  '/'  'public'  'final'  'DataSource'  'getDataSource'  '('  ')'  '{'  'return'  'dataSource'  ';'  '}'  '/'  '*'  '*'  '*'  'Get'  'the'  'pool'  'configuration'  'object'  '.'  '*'  '@'  'return'  'the'  '{'  '@'  'link'  'HikariConfig'  '}'  'for'  'this'  'pool'  '*'  '/'  'public'  'final'  'HikariConfig'  'getConfiguration'  '('  ')'  '{'  'return'  'configuration'  ';'  '}'  '@'  'Override'  'public'  'String'  'toString'  '('  ')'  '{'  'return'  'configuration.getPoolName'  '('  ')'  ';'  '}'  '/'  '*'  '*'  '*'  '{'  '@'  'inheritDoc'  '}'  '*'  '/'  '@'  'Override'  'public'  'final'  'int'  'getActiveConnections'  '('  ')'  '{'  'return'  'connectionBag.getCount'  '('  'STATE_IN_USE'  ')'  ';'  '}'  '/'  '*'  '*'  '*'  '{'  '@'  'inheritDoc'  '}'  '*'  '/'  '@'  'Override'  'public'  'final'  'int'  'getIdleConnections'  '('  ')'  '{'  'return'  'connectionBag.getCount'  '('  'STATE_NOT_IN_USE'  ')'  ';'  '}'  '/'  '*'  '*'  '*'  '{'  '@'  'inheritDoc'  '}'  '*'  '/'  '@'  'Override'  'public'  'final'  'int'  'getTotalConnections'  '('  ')'  '{'  'return'  'connectionBag.size'  '('  ')'  '-'  'connectionBag.getCount'  '('  'STATE_REMOVED'  ')'  ';'  '}'  '/'  '*'  '*'  '*'  '{'  '@'  'inheritDoc'  '}'  '*'  '/'  '@'  'Override'  'public'  'final'  'int'  'getThreadsAwaitingConnection'  '('  ')'  '{'  'return'  'connectionBag.getPendingQueue'  '('  ')'  ';'  '}'  '/'  '*'  '*'  '*'  '{'  '@'  'inheritDoc'  '}'  '*'  '/'  '@'  'Override'  'public'  'final'  'void'  'suspendPool'  '('  ')'  '{'  'if'  '('  'suspendResumeLock'  '=='  'GlobalPoolLock.FAUX_LOCK'  ')'  '{'  'throw'  'new'  'IllegalStateException'  '('  '``'  'Pool'  '``'  '+'  'configuration.getPoolName'  '('  ')'  '+'  '``'  'is'  'not'  'suspendable'  "''"  ')'  ';'  '}'  'else'  'if'  '('  'poolState'  '!'  '='  'POOL_SUSPENDED'  ')'  '{'  'suspendResumeLock.suspend'  '('  ')'  ';'  'poolState=POOL_SUSPENDED'  ';'  '}'  '}'  '/'  '*'  '*'  '*'  '{'  '@'  'inheritDoc'  '}'  '*'  '/'  '@'  'Override'  'public'  'final'  'void'  'resumePool'  '('  ')'  '{'  'if'  '('  'poolState'  '=='  'POOL_SUSPENDED'  ')'  '{'  'poolState=POOL_RUNNING'  ';'  'addBagItem'  '('  ')'  ';'  'suspendResumeLock.resume'  '('  ')'  ';'  '}'  '}'  'public'  'void'  'setMetricRegistry'  '('  'Object'  'metricRegistry'  ')'  '{'  'this.isRecordMetrics=metricRegistry'  '!'  '='  'null'  ';'  'if'  '('  'isRecordMetrics'  ')'  '{'  'this.metricsTracker=new'  'CodaHaleMetricsTracker'  '('  'this'  ' '  '('  'MetricRegistry'  ')'  'metricRegistry'  ')'  ';'  '}'  'else'  '{'  'this.metricsTracker=new'  'MetricsTracker'  '('  'this'  ')'  ';'  '}'  '}'  'public'  'void'  'setHealthCheckRegistry'  '('  'Object'  'healthCheckRegistry'  ')'  '{'  'if'  '('  'healthCheckRegistry'  '!'  '='  'null'  ')'  '{'  'CodahaleHealthChecker.registerHealthChecks'  '('  'this'  ' '  '('  'HealthCheckRegistry'  ')'  'healthCheckRegistry'  ')'  ';'  '}'  '}'  '/'  '*'  '*'  '*'  '{'  '@'  'inheritDoc'  '}'  '*'  '/'  '@'  'Override'  'public'  'Future'  '<'  'Boolean'  '>'  'addBagItem'  '('  ')'  '{'  'FutureTask'  '<'  'Boolean'  '>'  'future=new'  'FutureTask'  '<'  'Boolean'  '>'  '('  'new'  'Runnable'  '('  ')'  '{'  'public'  'void'  'run'  '('  ')'  '{'  'long'  'sleepBackoff=200L'  ';'  'final'  'int'  'minimumIdle=configuration.getMinimumIdle'  '('  ')'  ';'  'final'  'int'  'maxPoolSize=configuration.getMaximumPoolSize'  '('  ')'  ';'  'while'  '('  'poolState'  '=='  'POOL_RUNNING'  '&'  '&'  'totalConnections.get'  '('  ')'  '<'  'maxPoolSize'  '&'  '&'  'getIdleConnections'  '('  ')'  '<'  '='  'minimumIdle'  '&'  '&'  '!'  'addConnection'  '('  ')'  ')'  '{'  'quietlySleep'  '('  'sleepBackoff'  ')'  ';'  'sleepBackoff=Math.min'  '('  'connectionTimeout'  '/'  '2'  ' '  '('  'long'  ')'  '('  '('  'double'  ')'  'sleepBackoff'  '*'  '1.5'  ')'  ')'  ';'  '}'  '}'  '}'  ' '  'true'  ')'  ';'  'addConnectionExecutor.execute'  '('  'future'  ')'  ';'  'return'  'future'  ';'  '}'  '/'  '*'  '*'  '*'  'Create'  'and'  'add'  'a'  'single'  'connection'  'to'  'the'  'pool'  '.'  '*'  '/'  'protected'  'final'  'boolean'  'addConnection'  '('  ')'  '{'  'if'  '('  'totalConnections.incrementAndGet'  '('  ')'  '<'  '='  'configuration.getMaximumPoolSize'  '('  ')'  ')'  '{'  'Connection'  'connection=null'  ';'  'try'  '{'  'connection='  '('  'username'  '=='  'null'  '&'  '&'  'password'  '=='  'null'  ')'  '?'  'dataSource.getConnection'  '('  ')'  ':'  'dataSource.getConnection'  '('  'username'  ' '  'password'  ')'  ';'  'if'  '('  'isUseJdbc4Validation'  '&'  '&'  '!'  'poolUtils.isJdbc4ValidationSupported'  '('  'connection'  ')'  ')'  '{'  'throw'  'new'  'SQLException'  '('  '``'  'JDBC4'  'Connection.isValid'  '('  ')'  'method'  'not'  'supported'  ' '  'connection'  'test'  'query'  'must'  'be'  'configured'  "''"  ')'  ';'  '}'  'final'  'int'  'originalTimeout=poolUtils.getAndSetNetworkTimeout'  '('  'connection'  ' '  'connectionTimeout'  ')'  ';'  'transactionIsolation='  '('  'transactionIsolation'  '<'  '0'  '?'  'connection.getTransactionIsolation'  '('  ')'  ':'  'transactionIsolation'  ')'  ';'  'poolUtils.setupConnection'  '('  'connection'  ' '  'isAutoCommit'  ' '  'isReadOnly'  ' '  'transactionIsolation'  ' '  'catalog'  ')'  ';'  'connectionCustomizer.customize'  '('  'connection'  ')'  ';'  'poolUtils.executeSql'  '('  'connection'  ' '  'configuration.getConnectionInitSql'  '('  ')'  ' '  'isAutoCommit'  ')'  ';'  'poolUtils.setNetworkTimeout'  '('  'connection'  ' '  'originalTimeout'  ')'  ';'  'connectionBag.add'  '('  'new'  'PoolBagEntry'  '('  'connection'  ' '  'this'  ')'  ')'  ';'  'lastConnectionFailure.set'  '('  'null'  ')'  ';'  'return'  'true'  ';'  '}'  'catch'  '('  'Exception'  'e'  ')'  '{'  'lastConnectionFailure.set'  '('  'e'  ')'  ';'  'if'  '('  'poolState'  '=='  'POOL_RUNNING'  ')'  '{'  'LOGGER.debug'  '('  '``'  'Connection'  'attempt'  'to'  'database'  '{'  '}'  'failed'  ':'  '{'  '}'  "''"  ' '  'configuration.getPoolName'  '('  ')'  ' '  'e.getMessage'  '('  ')'  ' '  'e'  ')'  ';'  '}'  'poolUtils.quietlyCloseConnection'  '('  'connection'  ' '  "''"  '('  'exception'  'during'  'connection'  'creation'  ')'  "''"  ')'  ';'  '}'  '}'  'totalConnections.decrementAndGet'  '('  ')'  ';'  'return'  'false'  ';'  '}'  '/'  '*'  '*'  '*'  'Fill'  'pool'  'up'  'from'  'current'  'idle'  'connections'  '('  'as'  'they'  'are'  'perceived'  'at'  'the'  'point'  'of'  'execution'  ')'  'to'  'minimumIdle'  'connections'  '.'  '*'  '/'  'protected'  'void'  'fillPool'  '('  ')'  '{'  'final'  'int'  'connectionsToAdd=configuration.getMinimumIdle'  '('  ')'  '-'  'getIdleConnections'  '('  ')'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'connectionsToAdd'  ';'  'i++'  ')'  '{'  'addBagItem'  '('  ')'  ';'  '}'  'if'  '('  'connectionsToAdd'  '>'  '0'  '&'  '&'  'LOGGER.isDebugEnabled'  '('  ')'  ')'  '{'  'addConnectionExecutor.execute'  '('  'new'  'Runnable'  '('  ')'  '{'  'public'  'void'  'run'  '('  ')'  '{'  'logPoolState'  '('  '``'  'After'  'fill'  '``'  ')'  ';'  '}'  '}'  ')'  ';'  '}'  '}'  '/'  '*'  '*'  '*'  'Permanently'  'close'  'the'  'real'  '('  'underlying'  ')'  'connection'  '('  'eat'  'any'  'exception'  ')'  '.'  '*'  '@'  'param'  'connectionProxy'  'the'  'connection'  'to'  'actually'  'close'  '*'  '/'  'protected'  'abstract'  'void'  'closeConnection'  '('  'final'  'PoolBagEntry'  'bagEntry'  ' '  'final'  'String'  'closureReason'  ')'  ';'  '/'  '*'  '*'  '*'  'Check'  'whether'  'the'  'connection'  'is'  'alive'  'or'  'not'  '.'  '*'  '@'  'param'  'connection'  'the'  'connection'  'to'  'test'  '*'  '@'  'return'  'true'  'if'  'the'  'connection'  'is'  'alive'  ' '  'false'  'if'  'it'  'is'  'not'  'alive'  'or'  'we'  'timed'  'out'  '*'  '/'  'protected'  'abstract'  'boolean'  'isConnectionAlive'  '('  'final'  'Connection'  'connection'  ')'  ';'  '/'  '*'  '*'  '*'  'Attempt'  'to'  'abort'  '('  ')'  'active'  'connections'  'on'  'Java7+'  ' '  'or'  'close'  '('  ')'  'them'  'on'  'Java6'  '.'  '*'  '@'  'param'  'assassinExecutor'  '*'  '@'  'throws'  'InterruptedException'  '*'  '/'  'protected'  'abstract'  'void'  'abortActiveConnections'  '('  'final'  'ExecutorService'  'assassinExecutor'  ')'  'throws'  'InterruptedException'  ';'  '/'  '*'  '*'  '*'  'Create'  'the'  'JVM'  'version-specific'  'ConcurrentBag'  'instance'  'used'  'by'  'the'  'pool'  '.'  '*'  '@'  'param'  'listener'  'the'  'IBagStateListener'  'instance'  '*'  '@'  'return'  'a'  'ConcurrentBag'  'instance'  '*'  '/'  'protected'  'abstract'  'ConcurrentBag'  '<'  'PoolBagEntry'  '>'  'createConcurrentBag'  '('  'IBagStateListener'  'listener'  ')'  ';'  '/'  '*'  '*'  '*'  'Create'  'the'  'JVM'  'version-specific'  'Housekeeping'  'runnable'  'instance'  'used'  'by'  'the'  'pool'  '.'  '*'  '@'  'return'  'the'  'HouseKeeper'  'instance'  '*'  '/'  'protected'  'abstract'  'Runnable'  'getHouseKeeper'  '('  ')'  ';'  '/'  '*'  '*'  '*'  'Fill'  'the'  'pool'  'up'  'to'  'the'  'minimum'  'size'  '.'  '*'  '/'  'private'  'void'  'initializeConnections'  '('  ')'  '{'  'if'  '('  'configuration.isInitializationFailFast'  '('  ')'  ')'  '{'  'try'  '{'  'try'  '{'  'if'  '('  '!'  'addConnection'  '('  ')'  ')'  '{'  'shutdown'  '('  ')'  ';'  'throw'  'new'  'PoolInitializationException'  '('  'lastConnectionFailure.getAndSet'  '('  'null'  ')'  ')'  ';'  '}'  'ConnectionProxy'  'connection='  '('  'ConnectionProxy'  ')'  'getConnection'  '('  ')'  ';'  'connection.getPoolBagEntry'  '('  ')'  '.evicted='  '('  'configuration.getMinimumIdle'  '('  ')'  '=='  '0'  ')'  ';'  'connection.close'  '('  ')'  ';'  '}'  'catch'  '('  'SQLException'  'e'  ')'  '{'  'shutdown'  '('  ')'  ';'  'throw'  'new'  'PoolInitializationException'  '('  'e'  ')'  ';'  '}'  '}'  'catch'  '('  'InterruptedException'  'ie'  ')'  '{'  'throw'  'new'  'PoolInitializationException'  '('  'ie'  ')'  ';'  '}'  '}'  'fillPool'  '('  ')'  ';'  '}'  '/'  '*'  '*'  '*'  'Construct'  'the'  'user'  "'s"  'connection'  'customizer'  ' '  'if'  'specified'  '.'  '*'  '@'  'return'  'an'  'IConnectionCustomizer'  'instance'  '*'  '/'  '@'  'SuppressWarnings'  '('  '``'  'deprecation'  "''"  ')'  'private'  'IConnectionCustomizer'  'initializeCustomizer'  '('  ')'  '{'  'if'  '('  'configuration.getConnectionCustomizerClassName'  '('  ')'  '!'  '='  'null'  ')'  '{'  'return'  'createInstance'  '('  'configuration.getConnectionCustomizerClassName'  '('  ')'  ' '  'IConnectionCustomizer.class'  ')'  ';'  '}'  'return'  'configuration.getConnectionCustomizer'  '('  ')'  ';'  '}'  'public'  'final'  'void'  'logPoolState'  '('  'String'  '...'  'prefix'  ')'  '{'  'if'  '('  'LOGGER.isDebugEnabled'  '('  ')'  ')'  '{'  'LOGGER.debug'  '('  '``'  '{'  '}'  'pool'  'stats'  '{'  '}'  '('  'total='  '{'  '}'  ' '  'inUse='  '{'  '}'  ' '  'avail='  '{'  '}'  ' '  'waiting='  '{'  '}'  ')'  "''"  ' '  '('  'prefix.length'  '>'  '0'  '?'  'prefix'  '['  '0'  ']'  ':'  '``'  "''"  ')'  ' '  'configuration.getPoolName'  '('  ')'  ' '  'getTotalConnections'  '('  ')'  ' '  'getActiveConnections'  '('  ')'  ' '  'getIdleConnections'  '('  ')'  ' '  'getThreadsAwaitingConnection'  '('  ')'  ')'  ';'  '}'  '}'  '}'] 
__label__0 System.out.println ( hostResult ) 
__label__1 ['new'  'JSONParseSpec'  '('  'new'  'TimestampSpec'  '('  '``'  'timestamp'  "''"  ' '  "''"  'iso'  "''"  ')'  ' '  'new'  'DimensionsSpec'  '('  'Arrays.asList'  '('  'DIMENSIONS'  ')'  ' '  'Arrays.'  '<'  'String'  '>'  'asList'  '('  ')'  ' '  'null'  ')'  ' '  'JSONParseSpec.JSON'  ')'] 
__label__1 ['node1.checkTreeEqualsSilent'  '('  'node1'  ')'] 
__label__1 ['assertMockEndpointsSatisifed'  '('  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__0 original.getScreenName ( ) .endsWith ( `` new '' ) || original.getName ( ) .endsWith ( `` new '' ) 
__label__1 ['getLsNoAclResultStr'  '('  '``'  '/testRoot/testDir'  "''"  ' '  'files'  '['  '1'  ']'  '.getCreationTimeMs'  '('  ')'  ' 0'  ' '  'LsCommand.STATE_FOLDER'  ')'] 
__label__0 transactionalMap.set ( key , value ) 
__label__1 ['getTaskWriterCount'  '('  'session'  ')'  '>'  '1'] 
__label__0 ExprEval.ofLong ( null ) 
__label__1 ['assertThat'  '('  'child.getBeansOfType'  '('  'ExampleBean.class'  ')'  ')'  '.hasSize'  '('  '1'  ')'] 
__label__0 logger.info ( `` defineClass pluginClass : { } cl : { } '' , className , classLoader ) 
__label__0 LOG.debug ( `` Failed to send receipt of data to worker { } for request { } : { } . `` , mAddress , mReadRequest , e.getMessage ( ) ) 
__label__1 ['LOG.warn'  '('  '``'  'Failed'  'to'  'write'  'into'  'TachyonStorage'  ' '  'the'  'block'  '``'  '+'  'getCurrentBlockId'  '('  ')'  '+'  '``'  'will'  'not'  'be'  'in'  'TachyonStorage'  "''"  ' '  'ioe'  ')'] 
__label__1 ['cache.put'  '('  'new'  'Element'  '('  'key'  ' '  'element'  ')'  ' '  'true'  ')'] 
__label__1 ['suiteMethod.invoke'  '('  'null'  ' '  '('  'Object'  '['  ']'  ')'  'new'  'Class'  '['  '0'  ']'  ')'] 
__label__1 ['DEFAULT_SHUFFLE_PORT=11000'] 
__label__0 partitionKey.getType ( ) .getName ( ) 
__label__1 ['Math.min'  '('  'aggregateData.getAvgColLen'  '('  ')'  ' '  'newData.getAvgColLen'  '('  ')'  ')'] 
__label__0 from ( `` jms : queue : order '' ) .to ( `` bean : validateOrder '' ) .to ( `` mock : validate '' ) .threads ( 20 ) .unmarshal ( mySecureDataFormat ) .delay ( 500 ) 
__label__1 ['new'  'UnsupportedOperationException'  '('  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'favorites/'  "''"  '+'  'id+'  '``'  '.json'  "''"  ' '  "''"  'page'  "''"  ' '  'String.valueOf'  '('  'page'  ')'  ' '  'true'  ')'  ')'] 
__label__0 public class DefaultDynamicTransformerRegistry implements DynamicTransformerRegistry { private final Logger logger=LoggerFactory.getLogger ( this.getClass ( ) ) ; private final ConcurrentMap < TransformerKey , ClassFileTransformer > transformerMap=new ConcurrentHashMap < TransformerKey , ClassFileTransformer > ( ) ; @ Override public void onRetransformRequest ( Class < ? > target , final ClassFileTransformer transformer ) { add ( target.getClassLoader ( ) , target.getName ( ) , transformer ) ; if ( logger.isInfoEnabled ( ) ) { logger.info ( `` added retransformer classLoader : { } , class : { } , registry size : { } '' , target.getClassLoader ( ) , target.getName ( ) , transformerMap.size ( ) ) ; } } @ Override public void onTransformRequest ( ClassLoader classLoader , String targetClassName , ClassFileTransformer transformer ) { add ( classLoader , targetClassName , transformer ) ; if ( logger.isInfoEnabled ( ) ) { logger.info ( `` added dynamic transformer classLoader : { } , className : { } , registry size : { } '' , classLoader , targetClassName , transformerMap.size ( ) ) ; } } private void add ( ClassLoader classLoader , String targetClassName , ClassFileTransformer transformer ) { ClassFileTransformer prev=transformerMap.putIfAbsent ( new TransformerKey ( classLoader , targetClassName.replace ( ' . ' , '/ ' ) ) , transformer ) ; if ( prev ! = null ) { throw new ProfilerException ( `` Transformer already exists . classLoader : `` + classLoader + `` , target : `` + targetClassName+ `` , transformer : `` + prev ) ; } } @ Override public ClassFileTransformer getTransformer ( ClassLoader classLoader , String targetClassName ) { if ( transformerMap.isEmpty ( ) ) { return null ; } ClassFileTransformer transformer=transformerMap.remove ( new TransformerKey ( classLoader , targetClassName ) ) ; if ( logger.isDebugEnabled ( ) ) { logger.info ( `` removed dynamic transformer classLoader : { } , className : { } , registry size : { } '' , classLoader , targetClassName , transformerMap.size ( ) ) ; } return transformer ; } private static final class TransformerKey { private final ClassLoader classLoader ; private final String targetClassName ; public TransformerKey ( ClassLoader classLoader , String targetClassName ) { this.classLoader=classLoader ; this.targetClassName=targetClassName ; } @ Override public int hashCode ( ) { return classLoader.hashCode ( ) * 31 + targetClassName.hashCode ( ) ; } @ Override public boolean equals ( Object obj ) { TransformerKey other= ( TransformerKey ) obj ; return this.classLoader.equals ( other.classLoader ) & & this.targetClassName.equals ( other.targetClassName ) ; } } } 
__label__0 promise.tryFailure ( new ClosedChannelException ( ) ) 
__label__1 ['assertMockEndpointsSatisifed'  '('  ')'] 
__label__1 ['targetDescription.getClassName'  '('  ')'] 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['UIPasteboard.getGeneral'  '('  ')'] 
__label__1 ['littleEndian.order'  '('  ')'] 
__label__1 ['Math.min'  '('  'RETRY_INTERVAL'  ' '  'timeout.timeLeft'  '('  ')'  '.toMillis'  '('  ')'  ')'] 
__label__1 ['!'  'scriptsToUpdate.add'  '('  'n'  ')'] 
__label__1 ['ConnectorSplitManager.class'] 
__label__1 ['secConn'  '!'  '='  'null'] 
__label__1 ['CxfEndpointBean.class'] 
__label__1 ['case'  'REPLACE_IS_SAME'  ':'] 
__label__1 ['public'  'String'  'getPort'  '('  ')'  '{'  'return'  'this.port'  ';'  '}'] 
__label__0 pId + BASE_FILE_NUMBER 
__label__1 ['Byte.valueOf'  '('  'value.toString'  '('  ')'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Loads'  'the'  'import'  'control'  'file'  'from'  'a'  '{'  '@'  'link'  'InputSource'  '}'  '.'  '*'  '@'  'param'  'source'  'the'  'source'  'to'  'load'  'from'  '.'  '*'  '@'  'param'  'uri'  'uri'  'of'  'the'  'source'  'being'  'loaded'  '.'  '*'  '@'  'return'  'the'  'root'  '{'  '@'  'link'  'PkgControl'  '}'  'object'  '.'  '*'  '@'  'throws'  'CheckstyleException'  'if'  'an'  'error'  'occurs'  '.'  '*'  '/'  'private'  'static'  'PkgControl'  'load'  '('  'final'  'InputSource'  'source'  ' '  'final'  'URI'  'uri'  ')'  'throws'  'CheckstyleException'  '{'  'try'  '{'  'final'  'ImportControlLoader'  'loader=new'  'ImportControlLoader'  '('  ')'  ';'  'loader.parseInputSource'  '('  'source'  ')'  ';'  'return'  'loader.getRoot'  '('  ')'  ';'  '}'  'catch'  '('  'final'  'ParserConfigurationException|SAXException'  'ex'  ')'  '{'  'throw'  'new'  'CheckstyleException'  '('  '``'  'unable'  'to'  'parse'  '``'  '+'  'uri'  '+'  '``'  '-'  '``'  '+'  'ex.getMessage'  '('  ')'  ' '  'ex'  ')'  ';'  '}'  'catch'  '('  'final'  'IOException'  'ex'  ')'  '{'  'throw'  'new'  'CheckstyleException'  '('  '``'  'unable'  'to'  'read'  '``'  '+'  'uri'  ' '  'ex'  ')'  ';'  '}'  '}'] 
__label__1 ['constructor.getTypeParameters'  '('  ')'] 
__label__1 ['zoneId.equals'  '('  '``'  '+00:00'  "''"  ')'  '|'  'zoneId.equals'  '('  '``'  '-00:00'  "''"  ')'] 
__label__1 ['getPath'  '('  'tFile'  ')'  '.startsWith'  '('  'MASTER_CONF.TEMPORARY_FOLDER'  ')'] 
__label__1 ['new'  'CommandFormatException'  '('  '``'  'Communication'  'error'  "''"  ' '  'e'  ')'] 
__label__1 ['config.getBroadcasterFactory'  '('  ')'  '.lookup'  '('  'a.broadcaster'  '('  ')'  ' '  'true'  ')'] 
__label__0 Status.createStatuseList ( get ( getApiBaseURL ( ) + V1 + user+ `` /lists/ '' + id+ `` /statuses.json '' , new PostParameter [ 0 ] , paging.asPostParameterList ( Paging.SMCP , Paging.PER_PAGE ) , true ) ) 
__label__0 Long.parseLong ( args [ 2 ] ) 
__label__1 ['MD5Loader.loadModel'  '('  'Gdx.files.internal'  '('  '``'  'data/zfat.md5mesh'  "''"  ')'  '.read'  '('  ')'  ' '  'false'  ')'] 
__label__1 ['ImmutableSet.Builder'  '<'  'ImplemetationMethodDescriptor'  '>'] 
__label__1 ['logger.error'  '('  '``'  'Can'  'not'  'retrieve'  'item'  '{'  '}'  'for'  'widget'  '{'  '}'  "''"  ' '  'itemName'  ' '  'w.eClass'  '('  ')'  '.getInstanceTypeName'  '('  ')'  ')'] 
__label__1 ['n.getNodeData'  '('  ')'  '.getLabel'  '('  ')'  '.toLowerCase'  '('  ')'  '.contains'  '('  'str'  ')'] 
__label__1 ['assertEquals'  '('  '2000'  ' '  'timeout'  ')'] 
__label__1 ['block.useSourceInfoFromForTree'  '('  'exprRoot'  ')'] 
__label__0 HeartbeatReelectionListener.class 
__label__1 ['HeartbeatScheduler.await'  '('  'HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC 500'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['field.getRawType'  '('  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__0 AtmosphereResponse.newInstance ( ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__1 ['out.writeObject'  '('  'function'  ')'] 
__label__0 Assert.assertEquals ( 0 , stringNumber ) 
__label__0 assertTrue ( dr.isFailure ( ) ) 
__label__1 ['new'  'StringBuilder'  '('  '239'  ')'] 
__label__1 ['cluster.getRexBuilder'  '('  ')'  '.makeCall'  '('  'calciteOp'  ' '  'childRexNodeLst'  ')'] 
__label__0 registry.bind ( `` amazonSQSClient '' , clientMock ) 
__label__1 ['floatBuffer.clear'  '('  ')'] 
__label__0 public class XpathRegressionLeftCurlyTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=LeftCurlyCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionLeftCurlyOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( LeftCurlyCheck.class ) ; final String [ ] expectedViolation= { `` 4:1 : `` + getCheckMessage ( LeftCurlyCheck.class , LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS , '' { `` ,1 ) } ; final List < String > expectedXpathQueries=Arrays.asList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionLeftCurlyOne ' ] /OBJBLOCK '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionLeftCurlyOne ' ] /OBJBLOCK/LCURLY '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=LeftCurlyCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionLeftCurlyTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( LeftCurlyCheck.class ) ; moduleConfig.addAttribute ( `` option '' , LeftCurlyOption.NL.toString ( ) ) ; final String [ ] expectedViolation= { `` 3:53 : `` + getCheckMessage ( LeftCurlyCheck.class , LeftCurlyCheck.MSG_KEY_LINE_NEW , '' { `` ,53 ) } ; final List < String > expectedXpathQueries=Arrays.asList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionLeftCurlyTwo ' ] /OBJBLOCK '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionLeftCurlyTwo ' ] /OBJBLOCK/LCURLY '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testThree ( ) throws Exception { final String checkName=LeftCurlyCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionLeftCurlyThree.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( LeftCurlyCheck.class ) ; final String [ ] expectedViolation= { `` 5:19 : `` + getCheckMessage ( LeftCurlyCheck.class , LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER , '' { `` ,19 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionLeftCurlyThree ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='sample ' ] /SLIST/LITERAL_IF/SLIST '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['Thread.sleep'  '('  '1350'  ')'] 
__label__0 super.getView ( position , contextualUndoView.getContentView ( ) , contextualUndoView ) 
__label__1 ['new'  'SslContextBuilder'  '('  'true'  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['registry.put'  '('  '``'  'connectionFactoryMock'  "''"  ' '  'connectionFactoryMock'  ')'] 
__label__0 logger.debug ( `` { } { } '' , errorCode , message ) 
__label__1 ['Assert.notNull'  '('  'jarScanner'  ' '  "''"  'Patterns'  'must'  'not'  'be'  'null'  "''"  ')'] 
__label__0 new StringBuilder ( 740 ) 
__label__0 testerAnnotation.annotationType ( ) 
__label__1 ['version'  '=='  'null'] 
__label__0 loadingSegments.get ( segment.getIdentifier ( ) , server.getTier ( ) ) 
__label__1 ['annotatorImplementation.custom'  '('  'inputProps'  ' '  'customName'  ')'] 
__label__1 ['graphVersion.incNodeVersion'  '('  ')'] 
__label__0 ( ( VarcharType ) type ) .getLengthSafe ( ) 
__label__0 GL20.glUniform1fv ( location , v ) 
__label__1 ['exchange.getOut'  '('  ')'] 
__label__0 parameterIsPrimitiveOrNullable ( func , i ) 
__label__0 WebAppUtils.getResolvedRMWebAppURLWithScheme ( conf ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 Site.me ( ) .setRetryTimes ( 3 ) .setSleepTime ( 1000 ) 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectory.java '' ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['getCompletePredicate'  '('  ')'] 
__label__1 ['new'  'DropTableEvent'  '('  'tbl'  ' '  'deleteData'  ' '  'true'  ' '  'this'  ')'] 
__label__1 ['ufsPath.getPath'  '('  ')'] 
__label__0 dynamicState.changingBlobs.isEmpty ( ) 
__label__0 new LocalAlluxioClusterResource ( 1000 , Constants.GB , Constants.SECURITY_AUTHENTICATION_TYPE , AuthType.SIMPLE.getAuthName ( ) , Constants.SECURITY_AUTHORIZATION_PERMISSION_ENABLED , '' true '' ) 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweets_of_me.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__0 logger.trace ( `` { } unsupported item type { } for item { } '' , LoggerConstants.TFMODELUPDATE , provider.getItem ( itemName ) , itemName ) 
__label__0 logger.debug ( `` The GENA Subscription for serviceID { } is established for device { } '' , sub.getService ( ) .getServiceId ( ) , sub.getService ( ) .getDevice ( ) ) 
__label__1 ['logger.info'  '('  '``'  'Named'  '``'  '+'  'namedCount'  '+'  '``'  'anon'  'functions'  'using'  '``'  '+'  'bytesUsed+'  '``'  'bytes'  "''"  ')'] 
__label__0 cache5.setColors ( red ) 
__label__0 retVal.setProperty ( p.getKey ( ) , p.getValue ( ) ) 
__label__1 ['options.getLambdaRole'  '('  ')'] 
__label__1 ['from'  '('  '``'  'direct'  ':'  'a'  "''"  ')'  '.delay'  '('  '500'  ')'] 
__label__1 ['context.reloadRequired'  '('  ')'] 
__label__0 OptionalIdentifiedDefinition < FromDefinition > 
__label__1 ['new'  'MaterializingOperator'  '('  'operatorContext'  ' '  'sourceType'  ')'] 
__label__1 ['``'  'unable'  'to'  'parse'  '``'  '+'  'abstractOption'] 
__label__0 assertTrue ( dr.isFailure ( ) ) 
__label__0 logger.warn ( `` Configuration for influxdb not yet loaded or broken . '' ) 
__label__0 zkWorker2.getWorker ( ) 
__label__0 final AuditEventFormatter formatter=new AuditEventDefaultFormatter ( ) ; 
__label__0 ( Short ) args.get ( `` damage '' ) 
__label__0 log.debug ( `` Performing lookup : % s -- > % s '' , nodeIds , retVal ) 
__label__0 ReferenceCountUtil.release ( holder ) 
__label__0 pool ! = null & & pool.getDataSource ( ) .getClass ( ) .isAssignableFrom ( iface ) 
__label__1 ['HashMap'  '<'  'String'  ' '  'Operator'  '<'  '?'  'extends'  'Serializable'  '>'  '>'] 
__label__1 ['new'  'DefaultAsyncHttpClient'  '('  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__0 getLsNoAclResultStr ( `` /testRoot/testDir '' , files [ 1 ] .getCreationTimeMs ( ) ,1 , LsCommand.STATE_FOLDER ) 
__label__0 attribute.getDefinition ( ) .getMarshaller ( ) 
__label__0 new IllegalStateException ( `` Result is already complete : succeeded '' ) 
__label__0 public Integer getPort ( ) { return this.port ; } 
__label__0 report ( n , MISPLACED_ANNOTATION , '' @ abstract '' , '' only functions or methods can be abstract '' ) 
__label__0 new HttpParameter ( `` retweets '' , retweets ) 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__0 String.format ( `` Starting audit ... % n '' + expectedPath + `` :3:14 : `` + `` warning : Name 'InputMain ' must match pattern '^ [ a-z0-9 ] * $ '. % n '' + expectedPath+ `` :5:7 : `` + `` warning : Name 'InputMainInner ' must match pattern '^ [ a-z0-9 ] * $ '. % n '' + `` Audit done. % n '' , expectedPath ) 
__label__0 node.getLifecycleService ( ) .shutdown ( ) 
__label__1 ['t.report'  '('  'n'  ' '  'UNUSED_PRIVATE_PROPERTY'  ')'] 
__label__1 ['LOG.isInfoEnabled'  '('  ')'] 
__label__1 ['('  'outputFolder'  '+'  'File.separator'  '+'  'apiFolder'  ')'  '.replaceAll'  '('  '``'  '/'  "''"  ' '  'File.separator'  ')'] 
__label__1 ['status.isDirectory'  '('  ')'] 
__label__0 file.name ( ) .endsWith ( `` .etc1 '' ) 
__label__1 ['new'  'byte'  '['  '9'  ']'] 
__label__0 Assert.assertEquals ( getNotAllowedExceptionMessage ( `` helloForRole '' ) , e.getCause ( ) .getMessage ( ) ) 
__label__0 Preconditions.checkNotNull ( blockWorker , '' blockWorker '' ) 
__label__1 ['TfsShell.convertMsToDate'  '('  'files'  '['  '2'  ']'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__0 LOG.warn ( `` Failed to get TachyonStore stream , the block `` + currentBlockId + `` will not be in TachyonStorage '' ) 
__label__1 ['newState.score'  '('  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  'mBlockIdsOnTiers'  ')'] 
__label__1 ['minZ'  '!'  '='  '0f'  '&'  '&'  'maxZ'  '!'  '='  '0f'] 
__label__0 ( ( StringLiteral ) literal ) .getValue ( ) 
__label__1 ['GL20.glUniformMatrix4'  '('  'location'  ' '  'transpose'  ' '  'toFloatBuffer'  '('  'value'  ' '  'offset'  ' '  'count'  '<'  '<'  '4'  ')'  ')'] 
__label__0 hz1.getLifecycleService ( ) .shutdown ( ) 
__label__1 ['coreThreads.asString'  '('  ')'] 
__label__0 ImportAutoConfigurationWithItemsTwo.class 
__label__1 ['TimeUnit.SECONDS.toMillis'  '('  '4'  ')'] 
__label__0 endpointA.expectedBodiesReceivedInAnyOrder ( `` A blue car ! `` , '' A blue car , again ! '' ) 
__label__1 ['super.createDataFormat'  '('  'camelContext'  ')'] 
__label__0 layout.setReleaseLabel ( label ) 
__label__0 builder.addDependency ( DependencyType.OPTIONAL , RegistryInstallerService.SERVICE_NAME ) 
__label__0 removeBlock ( sessionId , blockId , BlockStoreLocation.anyTier ( ) ) 
__label__1 ['parent.decrementPrioritizableForTree'  '('  'amt'  ')'] 
__label__0 new DatagramDnsQuery ( null , addr,1 ) 
__label__0 waitUntil ( ( ) - > noHandlersErrors.get ( ) == ( NODE_COUNT - 1 ) * ADDRESSES_COUNT,60_000 ) 
__label__1 ['new'  'DropTableEvent'  '('  'tbl'  ' '  'deleteData'  ' '  'success'  ' '  'this'  ')'] 
__label__0 new JobConf ( config_ , StreamJob.class ) 
__label__0 mPersistFileService.shutdown ( ) 
__label__0 dictionary.put ( words [ 0 ] , words [ 2 ] ) 
__label__0 sctpChannelClass.getMethod ( `` open '' ) 
__label__0 LOG.trace ( `` No binding to service interface as @ Body , @ Header , @ ExchangeProperty not detected . Using BeanInvocation as message body when calling proxy method : { } '' , method ) 
__label__1 ['connections.get'  '('  'address'  ')'] 
__label__1 ['createRecord'  '('  'value'  ' '  'expiryTime'  ')'] 
__label__1 ['new'  'PrestoException'  '('  'HIVE_FILESYSTEM_ERROR'  ' '  'e'  ')'] 
__label__0 mock ( ExampleService.class ) 
__label__1 ['context.add'  '('  '``'  'exceptionalMethod'  "''"  ' 123f'  ')'] 
__label__0 http2.setInitialStreamRecvWindow ( initialStreamSendWindow ) 
__label__1 ['f.getAttrs'  '('  ')'  '.getATime'  '('  ')'] 
__label__1 ['ModuleReflectionUtils'  ':'  ':isCheckstyleCheck'] 
__label__1 ['LOG.info'  '('  '``'  'Building'  'gRPC'  'server'  'on'  '``'  '+'  'configuration.getHost'  '('  ')'  '+'  '``'  ':'  "''"  '+'  'configuration.getPort'  '('  ')'  ')'] 
__label__1 ['assertEquals'  '('  '1'  ' '  'historyService.createHistoricActivityInstanceQuery'  '('  ')'  '.processDefinitionId'  '('  'processInstance.getProcessDefinitionId'  '('  ')'  ')'  '.list'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  'mBlockIdsOnTiers'  ')'] 
__label__1 ['retry.attemptRetry'  '('  ')'] 
__label__1 ['log.error'  '('  'throwable'  ' '  "''"  'Query'  '%'  's'  'failed'  "''"  ' '  'queryId'  ')'] 
__label__0 registry.bind ( `` amazonSQSClient '' , clientMock ) 
__label__0 BatchServerInventoryViewProvider.class 
__label__0 Integer autoCommitInterval 
__label__0 new DescribeInstances ( awsConfig ) .execute ( ) 
__label__1 ['@'  'RunWith'  '('  'Parameterized.class'  ')'  'public'  'class'  'ReplicatedMapWriteOrderTest'  'extends'  'ReplicatedMapBaseTest'  '{'  'int'  'nodeCount'  ';'  'int'  'operations'  ';'  'int'  'keyCount'  ';'  'public'  'ReplicatedMapWriteOrderTest'  '('  'int'  'nodeCount'  ' '  'int'  'operations'  ' '  'int'  'keyCount'  ')'  '{'  'this.nodeCount=nodeCount'  ';'  'this.operations=operations'  ';'  'this.keyCount=keyCount'  ';'  '}'  '@'  'Parameterized.Parameters'  'public'  'static'  'Collection'  '<'  'Object'  '['  ']'  '>'  'data'  '('  ')'  '{'  'return'  'Arrays.asList'  '('  'new'  'Object'  '['  ']'  '['  ']'  '{'  '{'  '2 50 1'  '}'  ' '  '{'  '2 50 10'  '}'  ' '  '{'  '2 50 50'  '}'  '}'  ')'  ';'  '}'  '@'  'After'  'public'  'void'  'setUp'  '('  ')'  'throws'  'Exception'  '{'  'HazelcastInstanceFactory.terminateAll'  '('  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testDataIntegrity'  '('  ')'  'throws'  'InterruptedException'  '{'  'setLoggingLog4j'  '('  ')'  ';'  'System.out.println'  '('  '``'  'nodeCount'  '='  '``'  '+'  'nodeCount'  ')'  ';'  'System.out.println'  '('  '``'  'operations'  '='  '``'  '+'  'operations'  ')'  ';'  'System.out.println'  '('  '``'  'keyCount'  '='  '``'  '+'  'keyCount'  ')'  ';'  'Config'  'config=new'  'Config'  '('  ')'  ';'  'config.getReplicatedMapConfig'  '('  '``'  'test'  "''"  ')'  '.setReplicationDelayMillis'  '('  '0'  ')'  ';'  'TestHazelcastInstanceFactory'  'factory=new'  'TestHazelcastInstanceFactory'  '('  'nodeCount'  ')'  ';'  'final'  'HazelcastInstance'  '['  ']'  'instances=factory.newInstances'  '('  'config'  ')'  ';'  'String'  'replicatedMapName='  "''"  'test'  "''"  ';'  'final'  'List'  '<'  'ReplicatedMap'  '>'  'maps=createMapOnEachInstance'  '('  'instances'  ' '  'replicatedMapName'  ')'  ';'  'ArrayList'  '<'  'Integer'  '>'  'keys=generateRandomIntegerList'  '('  'keyCount'  ')'  ';'  'Thread'  '['  ']'  'threads=createThreads'  '('  'nodeCount'  ' '  'maps'  ' '  'keys'  ' '  'operations'  ')'  ';'  'for'  '('  'Thread'  'thread'  ':'  'threads'  ')'  '{'  'thread.start'  '('  ')'  ';'  '}'  'for'  '('  'Thread'  'thread'  ':'  'threads'  ')'  '{'  'thread.join'  '('  ')'  ';'  '}'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'keyCount'  ';'  'i++'  ')'  '{'  'final'  'String'  'key='  "''"  'foo-'  "''"  '+'  'keys.get'  '('  'i'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'System.out.println'  '('  '``'  '--'  '--'  '--'  '--'  '--'  '--'  '--'  '--'  '--'  '--'  '-'  "''"  ')'  ';'  'System.out.println'  '('  '``'  'key'  '='  '``'  '+'  'key'  ')'  ';'  'printValues'  '('  ')'  ';'  'assertValuesAreEqual'  '('  ')'  ';'  '}'  'private'  'void'  'printValues'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'int'  'j=0'  ';'  'j'  '<'  'maps.size'  '('  ')'  ';'  'j++'  ')'  '{'  'ReplicatedMap'  'map=maps.get'  '('  'j'  ')'  ';'  'System.out.println'  '('  '``'  'value'  '['  '``'  '+'  'j'  '+'  '``'  ']'  '='  '``'  '+'  'map.get'  '('  'key'  ')'  '+'  '``'  ' '  'store'  'version'  ':'  '``'  '+'  'getStore'  '('  'map'  ' '  'key'  ')'  '.getVersion'  '('  ')'  ')'  ';'  '}'  '}'  'private'  'void'  'assertValuesAreEqual'  '('  ')'  '{'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'maps.size'  '('  ')'  '-'  '1'  ';'  'i++'  ')'  '{'  'ReplicatedMap'  'map1=maps.get'  '('  'i'  ')'  ';'  'ReplicatedMap'  'map2=maps.get'  '('  'i'  '+'  '1'  ')'  ';'  'Object'  'v1=map1.get'  '('  'key'  ')'  ';'  'Object'  'v2=map2.get'  '('  'key'  ')'  ';'  'assertNotNull'  '('  'v1'  ')'  ';'  'assertNotNull'  '('  'v2'  ')'  ';'  'assertEquals'  '('  'v1'  ' '  'v2'  ')'  ';'  '}'  '}'  '}'  ' 120'  ')'  ';'  '}'  '}'  'private'  'Thread'  '['  ']'  'createThreads'  '('  'int'  'count'  ' '  'List'  '<'  'ReplicatedMap'  '>'  'maps'  ' '  'ArrayList'  '<'  'Integer'  '>'  'keys'  ' '  'int'  'operations'  ')'  '{'  'Thread'  '['  ']'  'threads=new'  'Thread'  '['  'count'  ']'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'count'  ';'  'i++'  ')'  '{'  'threads'  '['  'i'  ']'  '=createPutOperationThread'  '('  'maps.get'  '('  'i'  ')'  ' '  'keys'  ' '  'operations'  ')'  ';'  '}'  'return'  'threads'  ';'  '}'  'private'  'Thread'  'createPutOperationThread'  '('  'final'  'ReplicatedMap'  '<'  'String'  ' '  'Object'  '>'  'map'  ' '  'final'  'ArrayList'  '<'  'Integer'  '>'  'keys'  ' '  'final'  'int'  'operations'  ')'  '{'  'return'  'new'  'Thread'  '('  'new'  'Runnable'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  '{'  'Random'  'random=new'  'Random'  '('  ')'  ';'  'int'  'size=keys.size'  '('  ')'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'operations'  ';'  'i++'  ')'  '{'  'int'  'index=i'  '%'  'size'  ';'  'String'  'key='  "''"  'foo-'  "''"  '+'  'keys.get'  '('  'index'  ')'  ';'  'map.put'  '('  'key'  ' '  'random.nextLong'  '('  ')'  ')'  ';'  'boolean'  'containsKey=map.containsKey'  '('  'key'  ')'  ';'  'assert'  'containsKey'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '}'] 
__label__0 Wt.getSlice ( slice ) .plus ( Wt.getSlice ( slice ) .transpose ( ) ) 
__label__1 ['manualClock.addTimeMs'  '('  '1020'  ')'] 
__label__0 markChannelNotReadable ( channel.getPipeline ( ) .getContext ( NettyAsyncHttpProvider.class ) ) 
__label__1 ['LOG.warn'  '('  '``'  'Unable'  'to'  'close'  'socket'  'selector'  "''"  ' '  'ex'  ')'] 
__label__0 Arrays.asList ( `` abstract '' , '' continue '' , '' for '' , '' new '' , '' switch '' , '' assert '' , '' default '' , '' if '' , '' package '' , '' synchronized '' , '' boolean '' , '' do '' , '' goto '' , '' private '' , '' this '' , '' break '' , '' double '' , '' implements '' , '' protected '' , '' throw '' , '' byte '' , '' else '' , '' import '' , '' public '' , '' throws '' , '' case '' , '' enum '' , '' instanceof '' , '' return '' , '' transient '' , '' catch '' , '' extends '' , '' int '' , '' short '' , '' try '' , '' char '' , '' final '' , '' interface '' , '' static '' , '' void '' , '' class '' , '' finally '' , '' long '' , '' strictfp '' , '' volatile '' , '' const '' , '' float '' , '' native '' , '' super '' , '' while '' , '' type '' ) 
__label__0 Bytes.toBytes ( tableNameOrRegionName ) 
__label__1 ['new'  'ArrayList'  '<'  'FileInputSplit'  '>'  '('  'numSubtasks'  ')'] 
__label__0 handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED 
__label__1 ['logger.info'  '('  '``'  'Adding'  'PropertySource'  ':'  '``'  '+'  'source'  '+'  '``'  'in'  'group'  ':'  '``'  '+'  'basename'  ')'] 
__label__1 ['LOG.debug'  '('  'e'  ')'] 
__label__1 ['input.getDouble'  '('  '0'  ')'  '<'  '10.0'] 
__label__0 EmbeddedServerPortFileWriter.class 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['32'  '*'  '1024'  '*'  '1024'] 
__label__1 ['new'  'StringBuilder'  '('  '741'  ')'] 
__label__1 ['visibleOnly=false'] 
__label__0 wrappersToPrimitives.put ( wrapperType , primitiveType ) 
__label__1 ['``'  'http'  "''"  '.equals'  '('  'protocol'  ')'] 
__label__1 ['assertEquals'  '('  'fc'  ' '  'fc2'  ')'] 
__label__0 executor.execute ( new NamedRunnable ( `` OkHttp % s ACK Settings '' , hostName ) { @ Override public void execute ( ) { try { frameWriter.ackSettings ( peerSettings ) ; } catch ( IOException ignored ) { } } } ) 
__label__1 ['ImmutableSet'  '<'  'ImplemetationMethodDescriptor'  '>'] 
__label__1 ['!'  'failureDesc.contains'  '('  '``'  '14807'  "''"  ')'  '&'  '&'  '!'  'failureDesc.contains'  '('  '``'  '14883'  "''"  ')'] 
__label__0 ( ( ChannelProgressivePromise ) promise ) .tryProgress ( progress , -1 ) 
__label__0 LOG.warn ( rootPath + `` is not a directory '' ) 
__label__1 ['barrier1.await'  '('  '2'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__0 UserGroupInformation.getCurrentUser ( ) .checkTGTAndReloginFromKeytab ( ) 
__label__1 ['promise.tryFailure'  '('  'new'  'ClosedChannelException'  '('  ')'  ')'] 
__label__0 notifier.isIgnoreExchangeSendingEvents ( ) 
__label__0 setLowHighExpected ( lowResults , highResults , expectedResults , CONLL_SCORE,53.75,54.10,54.01 ) 
__label__1 ['Thread.sleep'  '('  '1200'  ')'] 
__label__0 ImmutableList.copyOf ( listeners ) 
__label__0 test ( `` var foo = function ( a ) { } ; foo.call ( this , 1 ) ; '' , '' var foo = function ( ) { var a $ jscomp $ 1 = 1 ; } ; foo.call ( this ) ; '' ) 
__label__0 typeSerializer.getDeserializedType ( ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION 
__label__1 ['queryStrings.append'  '('  'name'  ')'] 
__label__0 ss.getAuthorizerV2 ( ) .checkPrivileges ( type , Arrays.asList ( commandObj ) , null , null ) 
__label__0 new IllegalStateException ( `` Result is already complete : failed '' ) 
__label__0 this.categoryWithApiModel=category 
__label__1 ['!'  'isUDTF'  '&'  '&'  'child.getChildCount'  '('  ')'  '>'  '2'] 
__label__0 new StringBuilder ( 1024 ) 
__label__1 ['Column'  ':'  ':toString'] 
__label__1 ['NbBundle.getMessage'  '('  'DesktopImportControllerUI.class'  ' '  "''"  'DesktopImportControllerUI.spigot.ui.dialog.title'  "''"  ')'] 
__label__1 ['securityDomain'  '!'  '='  'null'] 
__label__0 InetAddress.getByName ( `` 0.0.0.0 '' ) 
__label__1 ['/'  '*'  '*'  '*'  '/'  'class'  'SctpServerPipelineSink'  'extends'  'AbstractScptChannelSink'  '{'  'static'  'final'  'InternalLogger'  'logger=InternalLoggerFactory.getInstance'  '('  'SctpServerPipelineSink.class'  ')'  ';'  'private'  'final'  'SctpWorker'  '['  ']'  'workers'  ';'  'private'  'final'  'AtomicInteger'  'workerIndex=new'  'AtomicInteger'  '('  ')'  ';'  'SctpServerPipelineSink'  '('  'Executor'  'workerExecutor'  ' '  'int'  'workerCount'  ')'  '{'  'workers=new'  'SctpWorker'  '['  'workerCount'  ']'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'workers.length'  ';'  'i++'  ')'  '{'  'workers'  '['  'i'  ']'  '=new'  'SctpWorker'  '('  'workerExecutor'  ')'  ';'  '}'  '}'  '@'  'Override'  'public'  'void'  'eventSunk'  '('  'ChannelPipeline'  'pipeline'  ' '  'ChannelEvent'  'e'  ')'  'throws'  'Exception'  '{'  'Channel'  'channel=e.getChannel'  '('  ')'  ';'  'if'  '('  'channel'  'instanceof'  'SctpServerChannelImpl'  ')'  '{'  'handleServerSocket'  '('  'e'  ')'  ';'  '}'  'else'  'if'  '('  'channel'  'instanceof'  'SctpChannelImpl'  ')'  '{'  'handleAcceptedSocket'  '('  'e'  ')'  ';'  '}'  '}'  'private'  'void'  'handleServerSocket'  '('  'ChannelEvent'  'e'  ')'  '{'  'if'  '('  '!'  '('  'e'  'instanceof'  'ChannelStateEvent'  ')'  ')'  '{'  'return'  ';'  '}'  'ChannelStateEvent'  'event='  '('  'ChannelStateEvent'  ')'  'e'  ';'  'SctpServerChannelImpl'  'channel='  '('  'SctpServerChannelImpl'  ')'  'event.getChannel'  '('  ')'  ';'  'ChannelFuture'  'future=event.getFuture'  '('  ')'  ';'  'ChannelState'  'state=event.getState'  '('  ')'  ';'  'Object'  'value=event.getValue'  '('  ')'  ';'  'switch'  '('  'state'  ')'  '{'  'case'  'OPEN'  ':'  'if'  '('  'Boolean.FALSE.equals'  '('  'value'  ')'  ')'  '{'  'close'  '('  'channel'  ' '  'future'  ')'  ';'  '}'  'break'  ';'  'case'  'BOUND'  ':'  'if'  '('  'value'  '!'  '='  'null'  ')'  '{'  'bind'  '('  'channel'  ' '  'future'  ' '  '('  'SocketAddress'  ')'  'value'  ')'  ';'  '}'  'else'  '{'  'close'  '('  'channel'  ' '  'future'  ')'  ';'  '}'  'case'  'INTEREST_OPS'  ':'  'if'  '('  'event'  'instanceof'  'SctpBindAddressEvent'  ')'  '{'  'SctpBindAddressEvent'  'bindAddressEvent='  '('  'SctpBindAddressEvent'  ')'  'event'  ';'  'bindAddress'  '('  'channel'  ' '  'bindAddressEvent.getFuture'  '('  ')'  ' '  'bindAddressEvent.getValue'  '('  ')'  ')'  ';'  '}'  'if'  '('  'event'  'instanceof'  'SctpUnbindAddressEvent'  ')'  '{'  'SctpUnbindAddressEvent'  'unbindAddressEvent='  '('  'SctpUnbindAddressEvent'  ')'  'event'  ';'  'unbindAddress'  '('  'channel'  ' '  'unbindAddressEvent.getFuture'  '('  ')'  ' '  'unbindAddressEvent.getValue'  '('  ')'  ')'  ';'  '}'  'break'  ';'  '}'  '}'  'private'  'void'  'handleAcceptedSocket'  '('  'ChannelEvent'  'e'  ')'  '{'  'if'  '('  'e'  'instanceof'  'ChannelStateEvent'  ')'  '{'  'ChannelStateEvent'  'event='  '('  'ChannelStateEvent'  ')'  'e'  ';'  'SctpChannelImpl'  'channel='  '('  'SctpChannelImpl'  ')'  'event.getChannel'  '('  ')'  ';'  'ChannelFuture'  'future=event.getFuture'  '('  ')'  ';'  'ChannelState'  'state=event.getState'  '('  ')'  ';'  'Object'  'value=event.getValue'  '('  ')'  ';'  'switch'  '('  'state'  ')'  '{'  'case'  'OPEN'  ':'  'if'  '('  'Boolean.FALSE.equals'  '('  'value'  ')'  ')'  '{'  'channel.worker.close'  '('  'channel'  ' '  'future'  ')'  ';'  '}'  'break'  ';'  'case'  'BOUND'  ':'  'case'  'CONNECTED'  ':'  'if'  '('  'value'  '=='  'null'  ')'  '{'  'channel.worker.close'  '('  'channel'  ' '  'future'  ')'  ';'  '}'  'break'  ';'  'case'  'INTEREST_OPS'  ':'  'channel.worker.setInterestOps'  '('  'channel'  ' '  'future'  ' '  '('  'Integer'  ')'  'value'  ')'  ';'  'break'  ';'  '}'  '}'  'else'  'if'  '('  'e'  'instanceof'  'MessageEvent'  ')'  '{'  'MessageEvent'  'event='  '('  'MessageEvent'  ')'  'e'  ';'  'SctpChannelImpl'  'channel='  '('  'SctpChannelImpl'  ')'  'event.getChannel'  '('  ')'  ';'  'boolean'  'offered=channel.writeBuffer.offer'  '('  'event'  ')'  ';'  'assert'  'offered'  ';'  'channel.worker.writeFromUserCode'  '('  'channel'  ')'  ';'  '}'  '}'  'private'  'void'  'bind'  '('  'SctpServerChannelImpl'  'channel'  ' '  'ChannelFuture'  'future'  ' '  'SocketAddress'  'localAddress'  ')'  '{'  'boolean'  'bound=false'  ';'  'boolean'  'bossStarted=false'  ';'  'try'  '{'  'channel.serverChannel.bind'  '('  'localAddress'  ' '  'channel.getConfig'  '('  ')'  '.getBacklog'  '('  ')'  ')'  ';'  'bound=true'  ';'  'channel.setBound'  '('  ')'  ';'  'future.setSuccess'  '('  ')'  ';'  'fireChannelBound'  '('  'channel'  ' '  'channel.getLocalAddress'  '('  ')'  ')'  ';'  'Executor'  'bossExecutor='  '('  '('  'SctpServerSocketChannelFactory'  ')'  'channel.getFactory'  '('  ')'  ')'  '.bossExecutor'  ';'  'DeadLockProofWorker.start'  '('  'bossExecutor'  ' '  'new'  'Boss'  '('  'channel'  ')'  ')'  ';'  'bossStarted=true'  ';'  '}'  'catch'  '('  'Throwable'  't'  ')'  '{'  'future.setFailure'  '('  't'  ')'  ';'  'fireExceptionCaught'  '('  'channel'  ' '  't'  ')'  ';'  '}'  'finally'  '{'  'if'  '('  '!'  'bossStarted'  '&'  '&'  'bound'  ')'  '{'  'close'  '('  'channel'  ' '  'future'  ')'  ';'  '}'  '}'  '}'  'private'  'void'  'bindAddress'  '('  'SctpServerChannelImpl'  'channel'  ' '  'ChannelFuture'  'future'  ' '  'InetAddress'  'localAddress'  ')'  '{'  'try'  '{'  'channel.serverChannel.bindAddress'  '('  'localAddress'  ')'  ';'  'future.setSuccess'  '('  ')'  ';'  '}'  'catch'  '('  'Throwable'  't'  ')'  '{'  'future.setFailure'  '('  't'  ')'  ';'  'fireExceptionCaught'  '('  'channel'  ' '  't'  ')'  ';'  '}'  '}'  'private'  'void'  'unbindAddress'  '('  'SctpServerChannelImpl'  'channel'  ' '  'ChannelFuture'  'future'  ' '  'InetAddress'  'localAddress'  ')'  '{'  'try'  '{'  'channel.serverChannel.unbindAddress'  '('  'localAddress'  ')'  ';'  'future.setSuccess'  '('  ')'  ';'  '}'  'catch'  '('  'Throwable'  't'  ')'  '{'  'future.setFailure'  '('  't'  ')'  ';'  'fireExceptionCaught'  '('  'channel'  ' '  't'  ')'  ';'  '}'  '}'  'private'  'void'  'close'  '('  'SctpServerChannelImpl'  'channel'  ' '  'ChannelFuture'  'future'  ')'  '{'  'boolean'  'bound=channel.isBound'  '('  ')'  ';'  'try'  '{'  'if'  '('  'channel.serverChannel.isOpen'  '('  ')'  ')'  '{'  'channel.serverChannel.close'  '('  ')'  ';'  'Selector'  'selector=channel.selector'  ';'  'if'  '('  'selector'  '!'  '='  'null'  ')'  '{'  'selector.wakeup'  '('  ')'  ';'  '}'  '}'  'channel.shutdownLock.lock'  '('  ')'  ';'  'try'  '{'  'if'  '('  'channel.setClosed'  '('  ')'  ')'  '{'  'future.setSuccess'  '('  ')'  ';'  'if'  '('  'bound'  ')'  '{'  'fireChannelUnbound'  '('  'channel'  ')'  ';'  '}'  'fireChannelClosed'  '('  'channel'  ')'  ';'  '}'  'else'  '{'  'future.setSuccess'  '('  ')'  ';'  '}'  '}'  'finally'  '{'  'channel.shutdownLock.unlock'  '('  ')'  ';'  '}'  '}'  'catch'  '('  'Throwable'  't'  ')'  '{'  'future.setFailure'  '('  't'  ')'  ';'  'fireExceptionCaught'  '('  'channel'  ' '  't'  ')'  ';'  '}'  '}'  'SctpWorker'  'nextWorker'  '('  ')'  '{'  'return'  'workers'  '['  'Math.abs'  '('  'workerIndex.getAndIncrement'  '('  ')'  '%'  'workers.length'  ')'  ']'  ';'  '}'  'private'  'final'  'class'  'Boss'  'implements'  'Runnable'  '{'  'private'  'final'  'Selector'  'selector'  ';'  'private'  'final'  'SctpServerChannelImpl'  'channel'  ';'  'Boss'  '('  'SctpServerChannelImpl'  'channel'  ')'  'throws'  'IOException'  '{'  'this.channel=channel'  ';'  'selector=Selector.open'  '('  ')'  ';'  'boolean'  'registered=false'  ';'  'try'  '{'  'channel.serverChannel.register'  '('  'selector'  ' '  'SelectionKey.OP_ACCEPT'  ')'  ';'  'registered=true'  ';'  '}'  'finally'  '{'  'if'  '('  '!'  'registered'  ')'  '{'  'closeSelector'  '('  ')'  ';'  '}'  '}'  'channel.selector=selector'  ';'  '}'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  '{'  'final'  'Thread'  'currentThread=Thread.currentThread'  '('  ')'  ';'  'channel.shutdownLock.lock'  '('  ')'  ';'  'try'  '{'  'for'  '('  ';'  ';'  ')'  '{'  'try'  '{'  'if'  '('  'selector.select'  '('  '500'  ')'  '>'  '0'  ')'  '{'  'selector.selectedKeys'  '('  ')'  '.clear'  '('  ')'  ';'  '}'  'SctpChannel'  'acceptedSocket=channel.serverChannel.accept'  '('  ')'  ';'  'if'  '('  'acceptedSocket'  '!'  '='  'null'  ')'  '{'  'registerAcceptedChannel'  '('  'acceptedSocket'  ' '  'currentThread'  ')'  ';'  '}'  '}'  'catch'  '('  'SocketTimeoutException'  'e'  ')'  '{'  '}'  'catch'  '('  'CancelledKeyException'  'e'  ')'  '{'  '}'  'catch'  '('  'ClosedSelectorException'  'e'  ')'  '{'  '}'  'catch'  '('  'ClosedChannelException'  'e'  ')'  '{'  'break'  ';'  '}'  'catch'  '('  'Throwable'  'e'  ')'  '{'  'if'  '('  'logger.isWarnEnabled'  '('  ')'  ')'  '{'  'logger.warn'  '('  '``'  'Failed'  'to'  'accept'  'a'  'connection'  '.'  '``'  ' '  'e'  ')'  ';'  '}'  'try'  '{'  'Thread.sleep'  '('  '1000'  ')'  ';'  '}'  'catch'  '('  'InterruptedException'  'e1'  ')'  '{'  '}'  '}'  '}'  '}'  'finally'  '{'  'channel.shutdownLock.unlock'  '('  ')'  ';'  'closeSelector'  '('  ')'  ';'  '}'  '}'  'private'  'void'  'registerAcceptedChannel'  '('  'SctpChannel'  'acceptedSocket'  ' '  'Thread'  'currentThread'  ')'  '{'  'try'  '{'  'ChannelPipeline'  'pipeline=channel.getConfig'  '('  ')'  '.getPipelineFactory'  '('  ')'  '.getPipeline'  '('  ')'  ';'  'SctpWorker'  'worker=nextWorker'  '('  ')'  ';'  'worker.register'  '('  'new'  'SctpAcceptedChannel'  '('  'channel.getFactory'  '('  ')'  ' '  'pipeline'  ' '  'channel'  ' '  'SctpServerPipelineSink.this'  ' '  'acceptedSocket'  ' '  'worker'  ' '  'currentThread'  ')'  ' '  'null'  ')'  ';'  '}'  'catch'  '('  'Exception'  'e'  ')'  '{'  'if'  '('  'logger.isWarnEnabled'  '('  ')'  ')'  '{'  'logger.warn'  '('  '``'  'Failed'  'to'  'initialize'  'an'  'accepted'  'socket'  '.'  '``'  ' '  'e'  ')'  ';'  '}'  'try'  '{'  'acceptedSocket.close'  '('  ')'  ';'  '}'  'catch'  '('  'IOException'  'e2'  ')'  '{'  'if'  '('  'logger.isWarnEnabled'  '('  ')'  ')'  '{'  'logger.warn'  '('  '``'  'Failed'  'to'  'close'  'a'  'partially'  'accepted'  'socket'  '.'  '``'  ' '  'e2'  ')'  ';'  '}'  '}'  '}'  '}'  'private'  'void'  'closeSelector'  '('  ')'  '{'  'channel.selector=null'  ';'  'try'  '{'  'selector.close'  '('  ')'  ';'  '}'  'catch'  '('  'Exception'  'e'  ')'  '{'  'if'  '('  'logger.isWarnEnabled'  '('  ')'  ')'  '{'  'logger.warn'  '('  '``'  'Failed'  'to'  'close'  'a'  'selector'  '.'  '``'  ' '  'e'  ')'  ';'  '}'  '}'  '}'  '}'  '}'] 
__label__1 ['new'  'CommandFormatException'  '('  '``'  'Failed'  'to'  'execute'  'operation'  '.'  '``'  ' '  'e'  ')'] 
__label__0 container.getAttributeModel ( ) .getEdgeTable ( ) 
__label__0 / * * * Does a deep copy of the contents to a new memory area and returns it as a new cell . * @ return The deep cloned cell * / ExtendedCell deepClone ( ) ; 
__label__1 ['source'  '!'  '='  'null'] 
__label__0 LOG.warn ( `` Promotion of block `` + blockId + `` failed . '' ) 
__label__1 ['assertEquals'  '('  'actual'  ' '  'expected'  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'RingbufferBasicDistributedTest'  'extends'  'RingbufferBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '2'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__1 ['HashMap'  '<'  'String'  ' '  'ASTNode'  '>'] 
__label__0 ps.setNString ( i , parameter ) 
__label__0 initialCapacity > 1 < < 30 
__label__0 cs.getNString ( columnIndex ) 
__label__1 ['``'  'GET'  "''"  '.equals'  '('  'httpMethod'  ')'] 
__label__1 ['sname.getParent'  '('  ')'  '.getSimpleName'  '('  ')'  '.substring'  '('  '9'  ')'] 
__label__1 ['Integer.valueOf'  '('  'sessionTTL'  ')'] 
__label__0 factory.get ( mResponseClass , NO_ANNOTATIONS , retrofit ) 
__label__0 implementationMethodDescriptors.build ( ) 
__label__1 ['time.put'  '('  'delta'  ')'] 
__label__0 PropertyValuesAnimationAdapter < T > 
__label__1 ['latch.await'  '('  '1'  ' '  'TimeUnit.MINUTES'  ')'] 
__label__1 ['BeanMapper.mapList'  '('  'books'  ' '  'Book.class'  ' '  'BookDto.class'  ')'] 
__label__1 ['ticket.notify'  '('  ')'] 
__label__0 order.isCurrent ( ) || order.isFuture ( ) 
__label__0 GL20.glVertexAttribPointer ( indx , size , type , normalized , stride , ( ( ByteBuffer ) buffer ) .asFloatBuffer ( ) ) 
__label__1 ['new'  'DefaultPropertyNamePatternsMatcher'  '('  'delimeters'  ' '  "''"  'aaa'  "''"  ' '  "''"  'bbbb'  "''"  ' '  "''"  'ccccc'  "''"  ')'] 
__label__0 new RuntimeIOException ( `` Error opening output file '' , e ) 
__label__0 mm.tryLock ( key,10 , TimeUnit.SECONDS ) 
__label__1 ['27'  '*'  'ClassSize.REFERENCE'] 
__label__0 jsonArray.toString ( 1 ) 
__label__0 new StringBuilder ( 638 ) 
__label__1 ['synchronized'  '('  'threadCount'  ')'  '{'  '++threadCount'  ';'  'if'  '('  'session'  '=='  'null'  ')'  '{'  'try'  '{'  'options=BigtableOptionsFactory.fromConfiguration'  '('  'CONFIG'  ')'  ';'  'session=new'  'BigtableSession'  '('  'options'  ')'  ';'  'client=session.getDataClient'  '('  ')'  ';'  '}'  'catch'  '('  'IOException'  'e'  ')'  '{'  'throw'  'new'  'DBException'  '('  '``'  'Error'  'loading'  'options'  'from'  'config'  ':'  '``'  ' '  'e'  ')'  ';'  '}'  '}'  'else'  '{'  'client=session.getDataClient'  '('  ')'  ';'  '}'  'if'  '('  'clientSideBuffering'  ')'  '{'  'heapSizeManager=new'  'HeapSizeManager'  '('  'Long.parseLong'  '('  'getProperties'  '('  ')'  '.getProperty'  '('  'ASYNC_MUTATOR_MAX_MEMORY'  ' '  'Long.toString'  '('  'AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT'  ')'  ')'  ')'  ' '  'Integer.parseInt'  '('  'getProperties'  '('  ')'  '.getProperty'  '('  'ASYNC_MAX_INFLIGHT_RPCS'  ' '  'Integer.toString'  '('  'AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT'  ')'  ')'  ')'  ')'  ';'  'asyncExecutor=new'  'AsyncExecutor'  '('  'client'  ' '  'heapSizeManager'  ')'  ';'  '}'  '}'] 
__label__1 ['webSocketProcessorName.equalsIgnoreCase'  '('  'WebSocketProcessor.class.getName'  '('  ')'  ')'] 
__label__0 cSet.setConceptSet ( this ) 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'jms'  "''"  ')'] 
__label__1 ['@'  'Path'  '('  'PATH_NODE_INDEX_ID'  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__0 assertEquals ( Service.State.FAILED , service.state ( ) ) 
__label__0 assertFalse ( CompressionTest.testCompression ( `` SNAPPY '' ) ) 
__label__0 Arrays.equals ( this.element , other.element ) || this.score == other.getScore ( ) 
__label__1 ['rj.mapProgress'  '('  ')'] 
__label__0 ImmutableList.copyOf ( sourcesAsStrings ) 
__label__1 ['Long.valueOf'  '('  'args'  '['  '2'  ']'  ')'] 
__label__1 ['hotDrinkDelay=500'] 
__label__0 assertEquals ( response.getResponseBody ( ) .length ( ) ,3873 ) 
__label__0 clazz.getConstructor ( ConstantsAndVariables.class , PatternScoring.class , String.class , TwoDimensionalCounter.class , TwoDimensionalCounter.class , TwoDimensionalCounter.class , TwoDimensionalCounter.class , TwoDimensionalCounter.class , String.class ) 
__label__0 MESSAGES.failToReplicateAttribute ( name , value.getClass ( ) .getCanonicalName ( ) ) 
__label__0 ( ( Number ) s.first ( ) ) .longValue ( ) 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__1 ['cachedMemoryUsageBytes'  '<'  'softMemoryLimitBytes'] 
__label__0 Assert.assertNotNull ( ex.getCause ( ) ) 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['SecurityActions.getModuleClassLoader'  '('  'JACC_MODULE'  ')'] 
__label__1 ['jtaEnvironmentBean.getValue'  '('  ')'  '.getPerformImmediateCleanupOfCommitMarkableResourceBranchesMap'  '('  ')'  '.remove'  '('  'immediateCleanup'  ')'] 
__label__0 manager ! = null & & manager.server ! = null 
__label__0 HeartbeatScheduler.await ( HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,5 , TimeUnit.SECONDS ) 
__label__0 DiagnosticType.disabled ( `` JSC_TOO_MANY_TEMPLATE_PARAMS '' , '' { 0 } '' ) 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__1 ['level'  '<'  '='  'RF_STATUS_LOW_SIGNAL'] 
__label__0 `` Deleting existing file : `` + target 
__label__0 logger.finest ( `` Future response is already set ! Current response : `` + response + `` , Offered response : `` + offeredResponse+ `` , Invocation : `` + invocation ) 
__label__0 logger.trace ( `` myq securityToken : { } '' , securityToken ) 
__label__0 AtmosphereRequest.newInstance ( ) 
__label__0 GL11.glTexParameterfv ( target , pname , params ) 
__label__0 TimeUnit.SECONDS.toMillis ( 5 ) 
__label__1 ['Boolean'  'success'] 
__label__1 ['ROOT_LOGGER.error'  '('  'consoleSlot'  '=='  'null'  '?'  '``'  'main'  "''"  ':'  'consoleSlot'  ')'] 
__label__1 ['IllegalArgumentException'  'e'] 
__label__0 serviceName == null || seenServiceNames.contains ( serviceName ) 
__label__0 Arrays.asList ( STANFORD_TOKENIZE , STANFORD_SSPLIT , STANFORD_POS ) 
__label__0 type.getDataFormat ( routeContext ) 
__label__1 ['Assert.assertEquals'  '('  '2'  ' '  'propertyCategories.size'  '('  ')'  ')'] 
__label__0 out.writeBytes ( mask ) 
__label__0 `` streams : '' + streamId 
__label__1 ['toObject'  '('  'value'  ')'] 
__label__1 ['GatherGettersAndSetterProperties.gather'  '('  'compiler'  ' '  'mainRoot'  ')'] 
__label__1 ['kryo.readObjectOrNull'  '('  'input'  ' '  'JobID.class'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweeted_to_me.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__1 ['getPath'  '('  '``'  'InputPackageDeclarationDiffDirectoryAtParent.java'  "''"  ')'] 
__label__0 routes.SessionsController.index ( `` '' ) 
__label__0 expiresOn.getTime ( ) 
__label__0 InetAddress.getLocalHost ( ) 
__label__1 ['newEmbeddedDatabaseBuilder'  '('  'path'  ')'] 
__label__0 public String getRequestRequiredAcks ( ) { return configuration.getRequestRequiredAcks ( ) ; } 
__label__0 ! Values.UPGRADE.equalsIgnoreCase ( connection ) 
__label__0 tableLayoutHandle.getPartitions ( ) .isPresent ( ) 
__label__1 ['new'  'StringBuilder'  '('  '247'  ')'] 
__label__1 ['dateOfBirth'  '=='  'null'] 
__label__1 ['http2c.setInitialStreamSendWindow'  '('  'initialStreamSendWindow'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '246'  ')'] 
__label__0 obj.setContentType ( Mimetypes.MIMETYPE_BINARY_OCTET_STREAM ) 
__label__1 ['attribute.getDefinition'  '('  ')'  '.getAttributeMarshaller'  '('  ')'] 
__label__1 ['List'  '<'  'ConformanceConfig'  '>'] 
__label__0 assertTrueAllTheTime ( ( ) - > { assertTrue ( map.containsKey ( 0 ) ) ; Collection < Employee > valuesNullCity=map.values ( predicateCityNull ) ; assertEquals ( 2 , valuesNullCity.size ( ) ) ; Collection < Employee > valuesNotNullCity=map.values ( Predicates.equal ( `` city '' , '' cityname '' ) ) ; assertEquals ( 3 , valuesNotNullCity.size ( ) ) ; } ,30 ) 
__label__1 ['new'  'IOException'  '('  ')'] 
__label__0 testModules ( `` var foo = function ( ) { var module = { } ; module.exports = { } ; } ; '' + `` module.exports = foo ; '' , '' goog.provide ( 'module $ test ' ) ; '' + `` var foo $ $ module $ test=function ( ) { var module= { } ; module.exports= { } } ; '' + `` var module $ test=foo $ $ module $ test '' ) 
__label__0 public ReducedMetric registerMetric ( String name , IReducer reducer , int timeBucketSizeInSecs ) { return _topoContext.registerMetric ( name , new ReducedMetric ( reducer ) , timeBucketSizeInSecs ) ; } 
__label__1 ['initial'  '('  'rand'  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['defaultCamelContext.removeRouteDefinition'  '('  'id'  ')'] 
__label__1 ['setLowHighExpected'  '('  'lowResults'  ' '  'highResults'  ' '  'expectedResults'  ' '  'MENTION_F1 55.5 55.6 55.7'  ')'] 
__label__0 public class XpathRegressionImportControlTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=ImportControlCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionImportControlOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( ImportControlCheck.class ) ; moduleConfig.addAttribute ( `` file '' , getPath ( checkName , '' SuppressionXpathRegressionImportControlOne.xml '' ) ) ; final String [ ] expectedViolation= { `` 3:1 : `` + getCheckMessage ( ImportControlCheck.class , ImportControlCheck.MSG_DISALLOWED , '' java.util.Scanner '' ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /IMPORT '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=ImportControlCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionImportControlTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( ImportControlCheck.class ) ; moduleConfig.addAttribute ( `` file '' , getPath ( checkName , '' SuppressionXpathRegressionImportControlTwo.xml '' ) ) ; final String [ ] expectedViolation= { `` 1:1 : `` + getCheckMessage ( ImportControlCheck.class , ImportControlCheck.MSG_UNKNOWN_PKG ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /PACKAGE_DEF '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testThree ( ) throws Exception { final String checkName=ImportControlCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionImportControlThree.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( ImportControlCheck.class ) ; final String [ ] expectedViolation= { `` 1:1 : `` + getCheckMessage ( ImportControlCheck.class , ImportControlCheck.MSG_MISSING_FILE ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /PACKAGE_DEF '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testFour ( ) throws Exception { final String checkName=ImportControlCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionImportControlFour.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( ImportControlCheck.class ) ; moduleConfig.addAttribute ( `` file '' , getPath ( checkName , '' SuppressionXpathRegressionImportControlFour.xml '' ) ) ; final String [ ] expectedViolation= { `` 4:1 : `` + getCheckMessage ( ImportControlCheck.class , ImportControlCheck.MSG_DISALLOWED , '' java.util.Scanner '' ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /IMPORT [ ./DOT [ @ text='Scanner ' ] ] '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['mError'  '!'  '='  'null'] 
__label__0 assertEquals ( 16 , rows.size ( ) ) 
__label__1 ['mTfs.ls'  '('  'Constants.PATH_SEPARATOR'  ' '  'true'  ')'] 
__label__0 when ( rs.wasNull ( ) ) .thenReturn ( true ) 
__label__1 ['WebAppUtils.getResolvedRMWebAppURLWithoutScheme'  '('  'new'  'Configuration'  '('  ')'  ')'] 
__label__1 ['status'  '('  ')'  '.isMovedTemporarily'  '('  ')'] 
__label__0 new InstrumentedHttpRequestExecutor ( metricRegistry , metricNameStrategy , name ) 
__label__1 ['assertThat'  '('  'converter.getSupportedMediaTypes'  '('  ')'  ')'  '.containsExactly'  '('  'MediaTypes.HAL_JSON'  ')'] 
__label__0 new SpriteBatch ( 5460 ) 
__label__0 new ASMClassLoader ( ASMSerializerFactory.class.getClassLoader ( ) ) 
__label__0 ctx.alloc ( ) .buffer ( ) 
__label__0 new Color ( pixels [ i ] , true ) 
__label__0 yamlFactory.createParser ( input ) 
__label__0 listener.onStatus ( new StatusJSONImpl ( json ) ) 
__label__0 wrapper.joinWithTimeout ( ) 
__label__1 ['log.debug'  '('  'message'  ' '  'exception'  ')'] 
__label__1 ['cache.flush'  '('  ')'] 
__label__0 mapConfig.getBackupCount ( ) 
__label__1 ['new'  'StringBuilder'  '('  '246'  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  'containerIdGenerator'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'rapidRefreshFuture'  'scheduleing'  'for'  '{'  '}'  'millis'  "''"  ' '  'millis'  ')'] 
__label__0 functionJSDocInfo ! = null & & functionJSDocInfo.getAssociatedNode ( ) ! = null 
__label__0 n.getNodeData ( ) .getLabel ( ) .toLowerCase ( ) .equals ( str ) 
__label__1 ['ssl.has'  '('  'CommonAttributes.CIPHER_SUITE'  ')'] 
__label__1 ['log.warn'  '('  '``'  'Unable'  'to'  'provision'  'more'  'workers'  '.'  'Current'  'workerCount'  '['  '%'  'd'  ']'  'maximum'  'workerCount'  '['  '%'  'd'  ']'  '.'  "''"  ')'] 
__label__1 ['doTestNegative'  '('  '301'  ' '  'false'  ')'] 
__label__1 ['processor.open'  '('  'w'  ' '  'request'  ')'] 
__label__0 Context.hasPrivilege ( OpenmrsConstants.PRIV_EDIT_USERS ) 
__label__1 ['getRequestMethod'  '=='  'null'] 
__label__0 region.getRegionHeight ( ) 
__label__0 LOG.warn ( `` Unable to close socket selector '' ) 
__label__1 ['endFunction'  '('  '``'  'get_column_statistics_by_table'  ':'  '``'  ' '  'statsObj'  '!'  '='  'null'  ')'] 
__label__1 ['override.toString'  '('  ')'] 
__label__1 ['assertEquals'  '('  'actual'  '('  ')'  '.toString'  '('  ')'  ' '  'typeString'  ')'] 
__label__1 ['uri.equals'  '('  '``'  '/'  "''"  ')'] 
__label__1 ['a.getTypeByte'  '('  ')'] 
__label__0 LOG.warn ( `` Failed to find `` + baseDirectory.getAbsolutePath ( ) ) 
__label__0 tableMetadataBuilder ( TPCH_SCHEMA_NAME , TPCH_ORDERS_NAME ) .column ( `` orderkey '' , LONG ) .column ( `` custkey '' , LONG ) .column ( `` orderstatus '' , STRING ) .column ( `` totalprice '' , DOUBLE ) .column ( `` orderdate '' , STRING ) .column ( `` orderpriority '' , STRING ) .column ( `` clerk '' , STRING ) .column ( `` shippriority '' , LONG ) 
__label__1 ['result.expectedMessageCount'  '('  '1'  ')'] 
__label__0 new StringBuilder ( 50 ) 
__label__0 waitForJobExecutorToProcessAllJobs ( 5000,500 ) 
__label__1 ['n.getNodeData'  '('  ')'  '.x'  '('  ')'] 
__label__0 namespace == null || namespace.equals ( `` '' ) 
__label__0 routeList == null || routeList.isEmpty ( ) 
__label__1 ['!'  'regex.equals'  '('  'lastRegex'  ')'] 
__label__1 ['that.getDomain'  '('  ')'  '=='  'null'] 
__label__1 ['implemetationMethodDescriptors.build'  '('  ')'] 
__label__0 new HTable ( TEST_UTIL.getConfiguration ( ) , TABLE ) 
__label__1 ['memoryMap.getInt'  '('  '``'  'mappedWithJournal'  "''"  ')'] 
__label__1 ['public'  'DerivedBuilder'  'setUserAgent'  '('  'String'  'userAgent'  ')'  '{'  'configBuilder.setUserAgent'  '('  'userAgent'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['TfsShell.convertMsToDate'  '('  'files'  '['  '1'  ']'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__1 ['MAX_CACHED_HBASE_INSTANCES=31'] 
__label__1 ['Response'  '<'  'L'  '>'] 
__label__0 endsWith ( `` /home/source '' ) 
__label__0 mapConfig.getBackupCount ( ) 
__label__1 ['Size.kilobytes'  '('  '32'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'OpenTracing'  ':'  'Failed'  'to'  'capture'  'tracing'  'data'  "''"  ' '  't'  ')'] 
__label__1 ['{'  '('  'byte'  ')'  'this.getNode'  '('  ')'  '.getNodeId'  '('  ')'  ' 3'  ' '  '('  'byte'  ')'  'getCommandClass'  '('  ')'  '.getKey'  '('  ')'  ' '  '('  'byte'  ')'  'SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE'  '}'] 
__label__0 headers.get ( ROLLBACK_ON_RUNTIME_FAILURE ) 
__label__1 ['values'  '['  'i'  ']'  '=='  'values'] 
__label__0 ! failureDesc.contains ( `` 14807 '' ) & & ! failureDesc.contains ( `` 14883 '' ) & & ! failureDesc.contains ( `` 11340 '' ) 
__label__0 r.getUri ( ) .getPath ( ) 
__label__1 ['events'  '=='  'null'] 
__label__0 userGroupMember.getUserGroupId ( ) 
__label__1 ['statistics.addRemoveTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['obj.getAcceptableTokens'  '('  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` favorites/ '' + id+ `` .json '' , '' page '' , String.valueOf ( page ) , true ) ) 
__label__0 AtmosphereResourceLifecycleInterceptor.class 
__label__1 ['reg.put'  '('  'LDAP_CONN_NAME'  ' '  'getWiredConnection'  '('  'ldapServer'  ')'  ')'] 
__label__0 pushExecutor.execute ( new NamedRunnable ( `` OkHttp % s Push Reset [ % s ] '' , hostName , streamId ) { @ Override public void execute ( ) { pushObserver.onReset ( streamId , errorCode ) ; synchronized ( SpdyConnection.this ) { currentPushRequests.remove ( streamId ) ; } } } ) 
__label__1 ['booleanProperty'  '('  'DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION'  ' '  "''"  'Experimental'  ':'  'Use'  'dynamic'  'schedule'  'for'  'grouped'  'execution'  'when'  'possible'  "''"  ' '  'false'  ' '  'featuresConfig.isDynamicScheduleForGroupedExecutionEnabled'  '('  ')'  ')'] 
__label__0 new TypeResolver ( hasRelatedOfString ) 
__label__1 ['req.getServletPath'  '('  ')'] 
__label__1 ['logger.error'  '('  '``'  'Failed'  'to'  'enumerate'  'network'  'interfaces'  "''"  ' '  'e'  ')'] 
__label__0 Time.currentTimeMillis ( ) 
__label__1 ['superClass'  '=='  'Object.class'] 
__label__1 ['assertEquals'  '('  '0'  ' '  'beanInfo.getOperations'  '('  ')'  '.length'  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'failed'  'to'  'send'  '{'  '}'  'messages'  'to'  '{'  '}'  ':'  '{'  '}'  "''"  ' '  'numMessages'  ' '  'dstAddressPrefixedName'  ' '  'future.getCause'  '('  ')'  ')'] 
__label__1 ['setAttributeInternal'  '('  'inodePath'  ' '  'true'  ' '  'opTimeMs'  ' '  'options'  ')'] 
__label__1 ['incomingEdges.containsKey'  '('  'source'  ')'] 
__label__1 ['new'  'S3DataSegmentMover'  '('  'mockS3Client'  ')'] 
__label__1 ['preDestroys'  '!'  '='  'null'] 
__label__0 JsonObject.createObjectMapper ( ) .getFactory ( ) 
__label__0 / * * * Matches no characters . * / public static final InputFastMatcher NONE=new InputFastMatcher ( ) { @ Override public boolean matches ( char c ) { return false ; } @ Override public String replaceFrom ( CharSequence sequence , CharSequence replacement ) { checkNotNull ( replacement ) ; return sequence.toString ( ) ; } private void checkNotNull ( CharSequence replacement ) { } @ Override public String collapseFrom ( CharSequence sequence , char replacement ) { return sequence.toString ( ) ; } @ Override public String trimTrailingFrom ( CharSequence sequence ) { return sequence.toString ( ) ; } } ; 
__label__1 ['new'  'DynamicAwareEntry'  '('  '``'  'https'  ':'  '//localhost:8443/test'  "''"  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['new'  'ClobTypeHandler'  '('  ')'] 
__label__1 ['trimmedLine.endsWith'  '('  'delimiter'  ')'] 
__label__1 ['setUnknownLabels'  '('  'binarized'  ' '  'mainLabel'  ')'] 
__label__0 GL11.glGetFloatv ( pname , params ) 
__label__0 assertEquals ( 3 , historyService.createHistoricActivityInstanceQuery ( ) .executionId ( processInstance.getId ( ) ) .list ( ) .size ( ) ) 
__label__1 ['13'  '*'  'Bytes.SIZEOF_LONG'] 
__label__0 CommandUtils.convertMsToDate ( files [ 0 ] .getCreationTimeMs ( ) ) 
__label__0 super ( pipeline , null , HEAD_NAME , true , true ) ; 
__label__1 ['this.aliasToCTEs.containsKey'  '('  'alias'  ')'] 
__label__1 ['logger.debug'  '('  'getName'  '('  ')'  '+'  '``'  'has'  'been'  'started'  "''"  ')'] 
__label__1 ['context.registerSubsystem'  '('  'SUBSYSTEM_NAME 1 0'  ')'] 
__label__1 ['mLineageStore.requestFilePersistence'  '('  'fileId'  ')'] 
__label__0 wrapper.joinWithTimeout ( ) 
__label__0 alluxioUriToLoad.getPath ( ) 
__label__1 ['realIndex'  '<'  'columns.size'  '('  ')'] 
__label__1 ['s.count'  '('  ')'] 
__label__1 ['websocketComponent.setMaxThreads'  '('  '11'  ')'] 
__label__0 ChannelBufferHolders.messageBuffer ( queue ) 
__label__1 ['target'  '=='  'null'] 
__label__1 ['assertEquals'  '('  '401'  ' '  'te.getStatusCode'  '('  ')'  ')'] 
__label__1 ['new'  'BufferedImage'  '('  'region.height'  ' '  'region.width'  ' '  'page.getType'  '('  ')'  ')'] 
__label__1 ['o.toString'  '('  ')'  '.getBytes'  '('  ')'] 
__label__0 parameters.getPositions ( ) .get ( 1 ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['System.getProperty'  '('  '``'  'RecoveryEnvironmentBean.expiryScannerClassNames'  "''"  ')'  '!'  '='  'null'] 
__label__0 new IllegalArgumentException ( `` Command not found in spout message : `` + shellMsg ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__0 ! fadeScrollBars & & scrollbarsOnTop & & scrollX 
__label__1 ['c.getName'  '('  ')'] 
__label__1 ['Cli.buildCli'  '('  '``'  'presto'  "''"  ' '  'Runnable.class'  ')'  '.withDefaultCommand'  '('  'Server.class'  ')'  '.withCommand'  '('  'Server.class'  ')'  '.withCommand'  '('  'Execute.class'  ')'  '.withCommand'  '('  'Console.class'  ')'  '.withCommands'  '('  'Help.class'  ')'] 
__label__1 ['mjCtx.getOldMapJoin'  '('  ')'  '=='  'null'] 
__label__1 ['GL11.glTexParameter'  '('  'target'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 model.getCurrentResult ( ) ! = null & & graphModel ! = null 
__label__0 assertFalse ( jmsTemplate.isPubSubDomain ( ) ) 
__label__1 ['Collection'  '<'  'String'  '>'] 
__label__1 ['mMountTable.resolve'  '('  'getPath'  '('  'dir'  ')'  ')'  '.getPath'  '('  ')'] 
__label__0 Math.max ( 1000L , connectionTimeout ) 
__label__1 ['dict.put'  '('  'words'  '['  '0'  ']'  ' '  'words'  '['  '2'  ']'  ')'] 
__label__1 ['endTrack'  '('  '``'  'main'  "''"  ')'] 
__label__0 new GrammaticalRelation ( Language.UniversalChinese , '' nummod '' , '' numeric modifier '' , MODIFIER , '' QP|NP|DP '' , tregexCompiler , '' NP|QP < ( QP =target < < M $ ++ NN|NP|QP ) '' ) 
__label__1 ['bar.expectedMinimumMessageCount'  '('  '1'  ')'] 
__label__0 this.connectTo ( vertex , channelType , compressionLevel , -1 , -1 , distributionPattern , true ) 
__label__0 Color.rgba8888ToColor ( color , colorInt ) 
__label__0 this.thrown.expectMessage ( `` File must not be null '' ) 
__label__1 ['option.getType'  '('  ')'] 
__label__0 DEFAULT_OCTREE_WIDTH=50000 
__label__0 entityLabelProbVals.containsKey ( label ) & & labelProbsForToken.get ( label ) < entityLabelProbVals.get ( label ) 
__label__1 ['n.isArrayPattern'  '('  ')'] 
__label__0 mPersistedFiles.removeAll ( persistedFiles ) 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__0 LOG.warn ( `` Can not resolve the host name for `` + regionAddress + `` because of `` + e ) 
__label__1 ['quoteMatcher.group'  '('  '0'  ')'] 
__label__0 data.getBytes ( response.getCharacterEncoding ( ) ) 
__label__0 new StringTypeHandler ( ) 
__label__0 otherWriter.write ( line ) 
__label__0 new PropertiesLoader ( `` classpath : /application.properties '' , '' classpath : /application.functional.properties '' , '' classpath : /application.functional-local.properties '' ) 
__label__1 ['getUrl'  '('  ')'  '.getMethodParameter'  '('  'methodName'  ' '  'TIMEOUT_KEY'  ' '  'DEFAULT_TIMEOUT'  ')'] 
__label__0 logger.trace ( `` Return Object { } now at size { } '' , b , count.getAndDecrement ( ) ) 
__label__0 ChannelBuffers.wrappedBuffer ( sb.toString ( ) .getBytes ( bodyCharset ) ) 
__label__1 ['getClusterMap'  '('  ')'  '.put'  '('  'buildAttributeName'  '('  'name'  ')'  ' '  'value'  ')'] 
__label__1 ['msgType'  '<'  '='  'values.length'] 
__label__1 ['length'  '%'  'dictionarySize'] 
__label__1 ['HashMap'  '<'  'String'  ' '  'Operator'  '<'  '?'  'extends'  'Serializable'  '>'  '>'] 
__label__0 new CommandLineException ( `` The result could n't be retrieved ( perhaps the task was cancelled '' , e ) 
__label__1 ['mock.expectedMessageCount'  '('  '3'  ')'] 
__label__1 ['doubleValue'  '=='  '0'] 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` solr '' ) 
__label__0 config.trustStoreLocation == null 
__label__1 ['userId'  '<'  '='  '0'] 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__0 / * * * Changes the owner of a file or directory specified by args recursively . * / public final class ChownRecursiveCommand extends AbstractAclCommand { public ChownRecursiveCommand ( TachyonConf conf , TachyonFileSystem tfs ) { super ( conf , tfs ) ; } @ Override public String getCommandName ( ) { return `` chownr '' ; } @ Override protected int getNumOfArgs ( ) { return 2 ; } @ Override public void run ( String ... args ) throws IOException { String owner=args [ 0 ] ; TachyonURI path=new TachyonURI ( args [ 1 ] ) ; chown ( path , owner , true ) ; } @ Override public String getUsage ( ) { return `` chownr < owner > < path > '' ; } } 
__label__0 mm.tryLock ( key,10 , TimeUnit.SECONDS ) 
__label__1 ['stat.st_mode.get'  '('  ')'] 
__label__0 that.getDomain ( ) == null & & getDomain ( ) ! = null 
__label__0 new IllegalStateException ( String.format ( `` File \ '' % 1 $ s\ '' has no indentation comment or its format `` + `` malformed . Error on line : % 2 $ d ( % 3 $ s ) '' , aFileName , lineNumber , line ) ) 
__label__0 qp.isExclusiveMinimum ( ) 
__label__1 ['out.writeObject'  '('  'function'  ')'] 
__label__0 StringUtil.in ( name , '' base '' , '' basefont '' , '' bgsound '' , '' command '' , '' link '' , '' meta '' , '' noframes '' , '' script '' , '' style '' , '' title '' ) 
__label__1 ['waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs'  '('  '10000 200'  ')'] 
__label__1 ['new'  'UnsupportedOperationException'  '('  '``'  'Command'  'not'  'found'  'in'  'spout'  'message'  ':'  '``'  '+'  'shellMsg'  ')'] 
__label__0 GL11.glTexParameteriv ( target , pname , params ) 
__label__1 ['from'  '('  '``'  'direct'  ':'  'b'  "''"  ')'  '.delay'  '('  '500'  ')'] 
__label__0 implementationMethodDescriptors.build ( ) 
__label__1 ['Thread.sleep'  '('  '100'  ')'] 
__label__1 ['Subqueries.gt'  '('  '0L'  ' '  'subquery'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` favorites/ '' + id+ `` .json '' , '' page '' , String.valueOf ( page ) , true ) ) 
__label__0 log.rollWriter ( true ) 
__label__1 ['mapper.getJsonFactory'  '('  ')'] 
__label__1 ['compressedProto.length'  '<'  '390000'] 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__0 typeSerializer.getDeserializedType ( ) 
__label__1 ['slice.getAddress'  '('  ')'] 
__label__1 ['logger.error'  '('  '``'  '{'  '}'  'unsupported'  'item'  'type'  '{'  '}'  'for'  'item'  '{'  '}'  "''"  ' '  'LoggerConstants.TFMODELUPDATE'  ' '  'provider.getItem'  '('  'itemName'  ')'  ' '  'itemName'  ')'] 
__label__1 ['websocketComponent.setMaxThreads'  '('  '11'  ')'] 
__label__0 graphModel.getDirectedGraphVisible ( ) 
__label__1 ['String.format'  '('  '``'  'Starting'  'audit'  '...'  '%'  'n'  "''"  '+'  'expectedPath'  '+'  '``'  ':3:14'  ':'  '``'  '+'  '``'  'Name'  "'InputMain"  "'"  'must'  'match'  'pattern'  "'^"  '['  'a-z0-9'  ']'  '*'  '$'  "'."  '%'  'n'  "''"  '+'  'expectedPath+'  '``'  ':5:7'  ':'  '``'  '+'  '``'  'Name'  "'InputMainInner"  "'"  'must'  'match'  'pattern'  "'^"  '['  'a-z0-9'  ']'  '*'  '$'  "'."  '%'  'n'  "''"  '+'  '``'  'Audit'  'done.'  '%'  'n'  "''"  '+'  '``'  'Checkstyle'  'ends'  'with'  '2'  'errors.'  '%'  'n'  "''"  ')'] 
__label__0 public Builder setExecutorService ( ExecutorService applicationThreadPool ) { configBuilder.setExecutorService ( applicationThreadPool ) ; return this ; } 
__label__1 ['width'  '-'  'originY'] 
__label__0 request.getServletPath ( ) 
__label__1 ['new'  'FlinkRuntimeException'  '('  '``'  'Unexpected'  'list'  'element'  'deserialization'  'failure'  "''"  ')'] 
__label__0 queryPurger.scheduleWithFixedDelay ( new PurgeQueriesRunnable ( queries.keySet ( ) , queryManager ) ,200,200 , TimeUnit.MILLISECONDS ) 
__label__0 failOrAccept ( prevAccept , input , closure , t ) 
__label__1 ['ALIAS.addOperationParameterDescription'  '('  'resources'  ' '  "''"  'infinispan.container'  "''"  ' '  'op'  ')'] 
__label__0 ImmutableList.of ( new ExpressionPostAggregator ( `` a3 '' , '' log ( ( \ '' a1\ '' + \ '' a2\ '' ) ) '' ) , new ArithmeticPostAggregator ( `` a4 '' , '' quotient '' , ImmutableList.of ( new FieldAccessPostAggregator ( null , '' a1 '' ) , new ConstantPostAggregator ( null,0.25 ) ) ) ) 
__label__0 getConnectTimeout ( ) 
__label__1 ['GL20.glGetVertexAttrib'  '('  'index'  ' '  'pname'  ' '  'params'  ')'] 
__label__1 ['fragUtils.getClass'  '('  ')'] 
__label__1 ['outList.size'  '('  ')'] 
__label__0 new SimpleDateFormat ( format , Locale.US ) 
__label__1 ['Assert.assertEquals'  '('  '``'  'Message'  'key'  "'"  "''"  '+'  'retrievedMessage'  '+'  '``'  "'"  'is'  'not'  'valid'  "''"  ' '  'retrievedMessage'  ' '  "''"  'unable.open.cause'  "''"  ')'] 
__label__1 ['new'  'Tag'  '('  'line'  ' '  'column'  ' '  'text'  ' '  'on'  ')'] 
__label__0 AbstractBootstrap < ServerBootstrap , Channel > 
__label__0 resource.terminate ( input.getId ( ) , extractorId ) 
__label__1 ['paused.get'  '('  ')'] 
__label__0 log.debug ( `` Worker nodes % s do not have capacity to run any more tasks ! `` , zkWorkers.values ( ) ) 
__label__1 ['waitLatch.await'  '('  '25'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'mail'  "''"  ')'] 
__label__0 getTokenDisplayNames ( ) 
__label__1 ['types.get'  '('  'channel'  ')'] 
__label__0 entry.getName ( ) .equals ( BOOT_INF_CLASSES ) 
__label__1 ['new'  'byte'  '['  '13'  ']'] 
__label__1 ['TransactionMetadata'  ':'  ':setInActive'] 
__label__1 ['start.set'  '('  'Calendar.DAY_OF_MONTH'  ' '  'startMonth'  ')'] 
__label__0 GL20.glGetUniformfv ( program , location , params ) 
__label__0 ps.saveRelationship ( rel ) 
__label__0 Preconditions.checkNotNull ( hostname , '' hostname '' ) 
__label__0 Integer.parseInt ( st.nextToken ( ) ) 
__label__0 Context.getAdministrationService ( ) .saveGlobalProperty ( propToUpdate ) 
__label__0 grammar.getTokenDisplayNames ( ) 
__label__1 ['localCache.put'  '('  'name'  ' '  'NULL_ENTRY'  ')'] 
__label__0 fieldDeser.getPropertyValueDirect ( currentObject ) 
__label__0 FilterModifWord.modifResult ( result , forests ) 
__label__1 ['titleTextField.getText'  '('  ')'] 
__label__1 ['override.toString'  '('  ')'] 
__label__1 ['ctx.write'  '('  '``'  'Your'  'session'  'is'  'protected'  'by'  '``'  '+'  'ctx.pipeline'  '('  ')'  '.get'  '('  'SslHandler.class'  ')'  '.engine'  '('  ')'  '.getSession'  '('  ')'  '.getCipherSuite'  '('  ')'  '+'  '``'  'cipher'  'suite.\\n'  "''"  ')'] 
__label__1 ['mm.tryLock'  '('  'key 4'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__0 deployOneTaskTestProcess ( ) 
__label__0 routes.InputTypesResource ( ) 
__label__1 ['UnderFileSystemUtils.deleteIfExists'  '('  'mUfs'  ' '  'mTempCheckpointPath'  ')'] 
__label__0 graphVersion.incNodeAndEdgeVersion ( ) 
__label__1 ['LOG.error'  '('  '``'  'Could'  'not'  'parse'  'syslog'  'message'  '.'  'Not'  'further'  'handling'  '.'  '``'  ' '  'e'  ')'] 
__label__1 ['processor.open'  '('  'w'  ' '  'request'  ')'] 
__label__1 ['nlDataOutNodes'  '!'  '='  'null'  '&'  'nlDataOutNodes.getLength'  '('  ')'  '>'  '0'] 
__label__0 endpoint.getOrCreateConnectionFactory ( ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['statistics.addPutTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['assertEquals'  '('  'fStopwatch.runtime'  '('  'MILLISECONDS'  ')'  ' 800d 250d'  ')'] 
__label__0 ( ( Number ) s.first ( ) ) .doubleValue ( ) 
__label__0 GL.glTexSubImage2D ( target , level , xoffset , yoffset , width , height , format , type , pixels , Memory.getPosition ( pixels ) ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class SetBasicDistributedTest extends SetAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 2 ) .newInstances ( config ) ; } } 
__label__0 HttpURLConnection.setFollowRedirects ( httpRequest.getFollowRedirects ( ) ) 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__1 ['DefaultBroadcaster.class.cast'  '('  'resource.getBroadcaster'  '('  ')'  ')'  '.broadcasterCache.retrieveFromCache'  '('  'resource'  ')'] 
__label__0 KeyColumnValueStoreTest.class 
__label__1 ['infos'  '=='  'null'  '|'  'infos.length'  '=='  '0'] 
__label__0 waitUntil ( ( ) - > pongsReceived.get ( ) == ADDRESSES_COUNT,60_000 ) 
__label__1 ['new'  'DynamicAwareEntry'  '('  '``'  'http'  ':'  '//localhost/test'  "''"  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['new'  'RuntimeIOException'  '('  'e'  ')'] 
__label__0 MANAGEMENT_API_MICRO_VERSION=1 
__label__0 LOG.debug ( `` Created new Configuration { } '' , configuration ) 
__label__0 out.writeBytes ( mask ) 
__label__1 ['ReactiveHelper.scheduleLast'  '('  '('  ')'  '-'  '>'  'processor.process'  '('  'exchange'  ' '  'done'  '-'  '>'  '{'  'if'  '('  'exchange.getException'  '('  ')'  '!'  '='  'null'  ')'  '{'  'getExceptionHandler'  '('  ')'  '.handleException'  '('  '``'  'Error'  'processing'  'aggregated'  'exchange'  "''"  ' '  'exchange'  ' '  'exchange.getException'  '('  ')'  ')'  ';'  '}'  'else'  '{'  'log.trace'  '('  '``'  'Processing'  'aggregated'  'exchange'  ':'  '{'  '}'  'complete'  '.'  '``'  ' '  'exchange'  ')'  ';'  '}'  '}'  ')'  ' '  "''"  'sending'  'aggregated'  'exchange'  "''"  ')'] 
__label__0 titleTextField.getText ( ) 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__0 content.contains ( expected ) 
__label__1 ['new'  'LwjglPreferences'  '('  'name'  ')'] 
__label__1 ['toHeapData'  '('  'key'  ')'] 
__label__1 ['internalExecutor.submit'  '('  'command'  ')'] 
__label__0 ! isDistinct ( child ) 
__label__1 ['runOTIafterNTI=true'] 
__label__0 JavaConversions.mapAsJavaMap ( logManager.logsByTopicPartition ( ) ) 
__label__1 ['isStarted'  '('  ')'] 
__label__1 ['options.getLambdaRole'  '('  ')'] 
__label__1 ['('  'System.currentTimeMillis'  '('  ')'  '-'  'lastAccessedTime.getTime'  '('  ')'  ')'  '>'  'timeout'] 
__label__1 ['Assert.notNull'  '('  'groupId'  ' '  "''"  'ArtifactId'  'must'  'not'  'be'  'null'  "''"  ')'] 
__label__0 GL.glGenTextures ( n , textures , Memory.getPosition ( textures ) ) 
__label__1 ['containedToken.get'  '('  'TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetBeginAnnotation.class'  ')'] 
__label__1 ['Integer.valueOf'  '('  'matcher.group'  '('  '1'  ')'  ')'] 
__label__1 ['buf.clear'  '('  ')'] 
__label__0 LOG.warn ( `` Can not access storage directory `` + rootPath , ex ) 
__label__0 maxInvocationCountObservedDuringWarmup * 2 
__label__1 ['entry.getCheckName'  '('  ')'  '.equals'  '('  'checkAlias'  ')'] 
__label__0 new DefaultMemoryManager ( totalMemory , numSlots , pageSize , true ) 
__label__1 ['Validate.notEmpty'  '('  '``'  'Cookie'  'name'  'must'  'not'  'be'  'empty'  "''"  ')'] 
__label__0 logger.debug ( `` NODE { } : Retry timout : Ca n't advance '' , node.getNodeId ( ) ) 
__label__1 ['getPath'  '('  '``'  'InputPackageDeclarationDiffDirectoryAtParent.java'  "''"  ')'] 
__label__0 ignoreUnknownFields=true 
__label__0 MBeanInfoAssembler.class 
__label__1 ['obj.setContentEncoding'  '('  'Mimetypes.MIMETYPE_BINARY_OCTET_STREAM'  ')'] 
__label__0 mTfs.setPin ( mTfs.open ( path ) , true ) 
__label__0 mock.expectedMinimumMessageCount ( 2 ) 
__label__1 ['public'  'class'  'XpathRegressionLeftCurlyTest'  'extends'  'AbstractXpathTestSupport'  '{'  '@'  'Test'  'public'  'void'  'testOne'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=LeftCurlyCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionLeftCurlyOne.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'LeftCurlyCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '4:1'  ':'  '``'  '+'  'getCheckMessage'  '('  'LeftCurlyCheck.class'  ' '  'LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS'  ' '  "''"  '{'  '``'  ' 1'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Arrays.asList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionLeftCurlyOne"  "'"  ']'  '/OBJBLOCK'  "''"  ' '  "''"  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionLeftCurlyOne"  "'"  ']'  '/OBJBLOCK/LCURLY'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testTwo'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=LeftCurlyCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionLeftCurlyTwo.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'LeftCurlyCheck.class'  ')'  ';'  'moduleConfig.addAttribute'  '('  '``'  'option'  "''"  ' '  'LeftCurlyOption.NL.toString'  '('  ')'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '3:53'  ':'  '``'  '+'  'getCheckMessage'  '('  'LeftCurlyCheck.class'  ' '  'LeftCurlyCheck.MSG_KEY_LINE_NEW'  ' '  "''"  '{'  '``'  ' 53'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Arrays.asList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionLeftCurlyTwo"  "'"  ']'  '/OBJBLOCK'  "''"  ' '  "''"  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionLeftCurlyTwo"  "'"  ']'  '/OBJBLOCK/LCURLY'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testThree'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=LeftCurlyCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionLeftCurlyThree.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'LeftCurlyCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '5:19'  ':'  '``'  '+'  'getCheckMessage'  '('  'LeftCurlyCheck.class'  ' '  'LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER'  ' '  "''"  '{'  '``'  ' 19'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionLeftCurlyThree"  "'"  ']'  '/OBJBLOCK'  "''"  '+'  '``'  '/METHOD_DEF'  '['  '@'  "text='sample"  "'"  ']'  '/SLIST/LITERAL_IF/SLIST'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '}'] 
__label__0 new DefaultRouteContext ( first.getBuilder ( ) .getProcessBuilder ( ) .getContext ( ) , route , null , list ) 
__label__1 ['logger.severe'  '('  '``'  'Failed'  'to'  'process'  'response'  ':'  '``'  '+'  'responsePacket'  '+'  '``'  'on'  'response'  'thread'  ':'  "''"  '+'  'getName'  '('  ')'  ')'] 
__label__0 EventPublishingService < IdentifiedDataSerializable , ReplicatedMessageListener > 
__label__1 ['attributes'  '=='  'null'] 
__label__0 beansXml.getOrCreateAlternatives ( ) 
__label__0 testError ( `` class Foo extends BaseFoo { method ( ) { Foo.base ( this , 'method ' ) ; } } '' , BASE_CLASS_ERROR ) 
__label__0 Status.createStatuseList ( http.get ( `` http : //yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json '' ) ) 
__label__0 DataStreamSink < OUT > 
__label__0 InetAddress.getLocalHost ( ) 
__label__1 ['/'  '*'  '*'  '*'  'Returns'  'messages'  'older'  'than'  'the'  'message'  'ID'  'specified'  'as'  'a'  'numeric'  'string'  '.'  'This'  'is'  'useful'  'for'  'paginating'  'messages'  '.'  'For'  'example'  ' '  'if'  'you'  "'re"  'currently'  'viewing'  '20'  'messages'  'and'  'the'  'oldest'  'is'  'number'  '2912'  ' '  'you'  'could'  'append'  '``'  '?'  'olderThan=2912″'  'to'  'your'  'request'  'to'  'get'  'the'  '20'  'messages'  'prior'  'to'  'those'  'you'  "'re"  'seeing'  '.'  '*'  '/'  'private'  'Integer'  'olderThan=-1'  ';'] 
__label__1 ['t.report'  '('  'n'  ' '  'REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME'  ')'] 
__label__1 ['count'  '<'  '='  '0'] 
__label__1 ['totalHistogram.getValueAtPercentile'  '('  '90'  ')'] 
__label__0 incomingMessage.getMessagePayloadByte ( 1 ) 
__label__1 ['/'  '*'  '*'  '*'  'Creates'  'an'  'exception'  'indicating'  'the'  'transactional'  'entity'  'manager'  'can'  'not'  'be'  'closed'  'when'  'it'  'is'  'managed'  'by'  'the'  'container'  '.'  '*'  '@'  'return'  'an'  '{'  '@'  'link'  'IllegalStateException'  '}'  'for'  'the'  'error'  '.'  '*'  '/'  '@'  'Message'  '('  'id=11424'  ' '  'value='  "''"  'Container'  'managed'  'entity'  'manager'  'can'  'only'  'be'  'closed'  'by'  'the'  'container'  '``'  '+'  '``'  '('  'auto-cleared'  'at'  'tx/invocation'  'end'  'and'  'closed'  'when'  'owning'  'component'  'is'  'closed'  '.'  ')'  "''"  ')'  'IllegalArgumentException'  'cannotCloseTransactionContainerEntityManger'  '('  ')'  ';'] 
__label__0 handler.isDifferent ( existing ) 
__label__0 runtime.minus ( provided ) 
__label__1 ['this.assignmentManager.isRegionInTransition'  '('  'regionInfo'  ')'  '=='  'null'] 
__label__1 ['TimeUnit.SECONDS.toNanos'  '('  '5'  ')'] 
__label__0 assertClusterSizeEventually ( 2 , nodes [ 0 ] ) 
__label__0 ! mTFS.exists ( turi ) 
__label__1 ['LOG.debug'  '('  '``'  'Consumer'  'subtask'  '{'  '}'  'is'  'trying'  'to'  'discover'  'new'  'partitions'  '...'  "''"  ')'] 
__label__1 ['log.debug'  '('  '``'  'Failed'  'to'  'transfer'  'file'  'from'  'TaskExecutor'  '{'  '}'  '.'  '``'  ' '  'taskManagerId'  ' '  'throwable'  ')'] 
__label__0 DiagnosticType.warning ( `` JSC_CONSTANT_REASSIGNED_VALUE_ERROR '' , '' constant { 0 } assigned a value more than once.\n '' + `` Original definition at { 1 } '' ) 
__label__1 ['/'  '*'  '*'  '*'  'Line'  'number'  'filter'  '.'  '*'  '/'  'private'  'CSVFilter'  'lineFilter'  ';'] 
__label__0 jmsManager.removeQueueFromJNDI ( queueName ) 
__label__0 new BindException ( newConcept , '' concept '' ) 
__label__0 @ Override public ExtendedCell deepClone ( ) { byte [ ] copy=new byte [ this.length ] ; ByteBufferUtils.copyFromBufferToArray ( copy , this.buf , this.offset,0 , this.length ) ; KeyValue kv=new KeyValue ( copy,0 , copy.length ) ; kv.setSequenceId ( this.getSequenceId ( ) ) ; return kv ; } 
__label__1 ['LOG.error'  '('  '``'  'Node'  '``'  '+'  'path'  '+'  '``'  'already'  'exists'  'and'  'this'  'is'  'not'  'a'  '``'  '+'  '``'  'retry'  "''"  ')'] 
__label__1 ['asList'  '('  '8L'  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__0 sizeNeeded > items.length 
__label__0 mockRegionInfo.isMetaTable ( ) 
__label__1 ['scheduler.scheduleRecurring'  '('  'indexPopulation'  ' '  'countInvocationsJob 1'  ' '  'MILLISECONDS'  ')'] 
__label__0 ! force & & EventCacheBroadcasterCache.class.isAssignableFrom ( broadcasterCache.getClass ( ) ) 
__label__0 Arrays.asList ( `` Java '' , '' CSharp '' , '' Cpp '' ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['ar.cause'  '('  ')'] 
__label__1 ['Assert.assertEquals'  '('  'masterAddress'  ' '  'new'  'InetSocketAddress'  '('  'defaultHostname 20000'  ')'  ')'] 
__label__1 ['detailNode'  '!'  '='  'null'] 
__label__0 LOG.debug ( `` Creating short circuit input stream for block { } @ { } '' , blockId , address ) 
__label__1 ['endTrack'  '('  '``'  'main'  "''"  ')'] 
__label__1 ['cs.getMetaData'  '('  ')'] 
__label__0 Response example ( String type , Object example ) ; 
__label__1 ['filteredSearchRequest'  '('  'query'  ' '  'filter'  ' '  'IndexHelper.determineAffectedIndices'  '('  'indexRangeService'  ' '  'deflector'  ' '  'range'  ')'  ')'] 
__label__1 ['testSame'  '('  '``'  'var'  'foo'  '='  'function'  '('  'a'  ')'  '{'  '}'  ';'  'foo.call'  '('  'this'  ' '  '1'  ')'  ';'  "''"  ' '  "''"  'var'  'foo'  '='  'function'  '('  ')'  '{'  'var'  'a'  '$'  'jscomp'  '$'  '1'  '='  '1'  ';'  '}'  ';'  'foo.call'  '('  'this'  ')'  ';'  "''"  ')'] 
__label__0 logger.trace ( `` rapidRefreshFuture scheduleing for { } millis '' , millis ) 
__label__0 Assert.assertEquals ( values , expected ) 
__label__1 ['mock.expectedBodiesReceived'  '('  '``'  'c'  "''"  ' '  "''"  'b'  "''"  ' '  "''"  'a'  "''"  ')'] 
__label__0 pId + BASE_FILE_NUMBER 
__label__1 ['assertRemoveSubsystemResources'  '('  'servicesA'  ')'] 
__label__0 mBlockRemovalService.shutdown ( ) 
__label__0 private static class TestException extends RuntimeException { private static final long serialVersionUID=1L ; @ Override public void printStackTrace ( PrintWriter printWriter ) { printWriter.print ( `` stackTrace '' ) ; } } 
__label__0 flushIntervalSecs == 0 
__label__1 ['mLocalWorkerAddress.getRpcPort'  '('  ')'] 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'Cell'  'clonedBaseCell='  '('  '('  'ExtendedCell'  ')'  'this.cell'  ')'  '.deepClone'  '('  ')'  ';'  'return'  'new'  'ValueAndTagRewriteCell'  '('  'clonedBaseCell'  ' '  'this.value'  ' '  'this.tags'  ')'  ';'  '}'] 
__label__1 ['executor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  'Window'  'Update'  '%'  's'  'stream'  '%'  'd'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'frameWriter.windowUpdate'  '('  'streamId'  ' '  'unacknowledgedBytesRead'  ')'  ';'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__0 private final PropertyKey mBindHostKey ; 
__label__0 new IntRangeValidator ( 1 , true , true ) 
__label__1 ['new'  'java.util.Date'  '('  ')'] 
__label__1 ['Utils.deserialize'  '('  '_boltSer'  ' '  'IBatchBolt.class'  ')'] 
__label__1 ['Set'  '<'  'Renderer'  '>'] 
__label__0 packFileName.substring ( 0 , packFileName.length ( ) - settings.atlasExtension.length ( ) ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  'value='  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ReplicatedMapLoadingTest'  'extends'  'ReplicatedMapBaseTest'  '{'  '@'  'Test'  'public'  'void'  'testAsyncFillUp'  '('  ')'  'throws'  'Exception'  '{'  'Config'  'config=new'  'Config'  '('  ')'  ';'  'String'  'mapName=randomMapName'  '('  ')'  ';'  'ReplicatedMapConfig'  'replicatedMapConfig=config.getReplicatedMapConfig'  '('  'mapName'  ')'  ';'  'replicatedMapConfig.setAsyncFillup'  '('  'true'  ')'  ';'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  ')'  ';'  'fillMapsAndAssertMapSizeEventually'  '('  'nodeFactory'  ' '  'config'  ' '  'mapName'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testSyncFillUp'  '('  ')'  'throws'  'Exception'  '{'  'Config'  'config=new'  'Config'  '('  ')'  ';'  'String'  'mapName=randomMapName'  '('  ')'  ';'  'ReplicatedMapConfig'  'replicatedMapConfig=config.getReplicatedMapConfig'  '('  'mapName'  ')'  ';'  'replicatedMapConfig.setAsyncFillup'  '('  'false'  ')'  ';'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  ')'  ';'  'fillMapsAndAssertMapSizeEventually'  '('  'nodeFactory'  ' '  'config'  ' '  'mapName'  ')'  ';'  '}'  'private'  'void'  'fillMapsAndAssertMapSizeEventually'  '('  'TestHazelcastInstanceFactory'  'nodeFactory'  ' '  'Config'  'config'  ' '  'String'  'mapName'  ')'  '{'  'final'  'int'  'first=1000'  ';'  'final'  'int'  'second=2000'  ';'  'final'  'int'  'third=3000'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map1=instance1.getReplicatedMap'  '('  'mapName'  ')'  ';'  'fillMap'  '('  'map1 0'  ' '  'first'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map2=instance2.getReplicatedMap'  '('  'mapName'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertMapSize'  '('  '``'  'map1'  "''"  ' '  'first'  ' '  'map1'  ')'  ';'  'assertMapSize'  '('  '``'  'map2'  "''"  ' '  'first'  ' '  'map2'  ')'  ';'  '}'  '}'  ')'  ';'  'fillMap'  '('  'map2'  ' '  'first'  ' '  'second'  ')'  ';'  'HazelcastInstance'  'instance3=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map3=instance3.getReplicatedMap'  '('  'mapName'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertMapSize'  '('  '``'  'map1'  "''"  ' '  'second'  ' '  'map1'  ')'  ';'  'assertMapSize'  '('  '``'  'map2'  "''"  ' '  'second'  ' '  'map2'  ')'  ';'  'assertMapSize'  '('  '``'  'map3'  "''"  ' '  'second'  ' '  'map3'  ')'  ';'  '}'  '}'  ')'  ';'  'fillMap'  '('  'map3'  ' '  'second'  ' '  'third'  ')'  ';'  'HazelcastInstance'  'instance4=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map4=instance4.getReplicatedMap'  '('  'mapName'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertMapSize'  '('  '``'  'map1'  "''"  ' '  'third'  ' '  'map1'  ')'  ';'  'assertMapSize'  '('  '``'  'map2'  "''"  ' '  'third'  ' '  'map2'  ')'  ';'  'assertMapSize'  '('  '``'  'map3'  "''"  ' '  'third'  ' '  'map3'  ')'  ';'  'assertMapSize'  '('  '``'  'map4'  "''"  ' '  'third'  ' '  'map4'  ')'  ';'  '}'  '}'  ')'  ';'  '}'  'private'  'void'  'fillMap'  '('  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map'  ' '  'int'  'start'  ' '  'int'  'end'  ')'  '{'  'for'  '('  'int'  'i=start'  ';'  'i'  '<'  'end'  ';'  'i++'  ')'  '{'  'map.put'  '('  'i'  ' '  'i'  ')'  ';'  '}'  '}'  'private'  'void'  'assertMapSize'  '('  'String'  'mapName'  ' '  'int'  'expectedMapSize'  ' '  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map'  ')'  '{'  'assertEquals'  '('  'format'  '('  '``'  '%'  's'  'should'  'contain'  '%'  'd'  'elements'  "''"  ' '  'mapName'  ' '  'expectedMapSize'  ')'  ' '  'expectedMapSize'  ' '  'map.size'  '('  ')'  ')'  ';'  '}'  '}'] 
__label__1 ['rsMeta.getColumnName'  '('  'i'  '+'  '1'  ')'] 
__label__0 SecurityActions.getModuleClassLoader ( module ) 
__label__1 ['logger.debug'  '('  '``'  'AtmosphereResource'  '{'  '}'  'is'  'resuming'  "''"  ' '  'uuid'  '('  ')'  ')'] 
__label__0 LOG.debug ( `` Terminating gRPC server '' ) 
__label__0 ObjectStreamClass.lookup ( clazz ) 
__label__1 ['name='  "''"  'java'  ':'  'jboss/datasources/ExampleDS'  "''"] 
__label__0 ExceptionUtils.getStackTrace ( th ) 
__label__0 System.currentTimeMillis ( ) 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 new MockResponse ( ) .setBody ( `` A '' ) .setSocketPolicy ( DISCONNECT_AT_END ) 
__label__1 ['config.getClass'  '('  ')'  '.toString'  '('  ')'] 
__label__1 ['deploymentInfo.setDefaultEncoding'  '('  'mergedMetaData.getDefaultEncoding'  '('  ')'  ')'] 
__label__0 registration.registerOperationHandler ( CommonAttributes.ENABLE_CONTEXT , ModClusterEnableContext.INSTANCE , enableContext , false , runtimeOnlyFlags ) 
__label__1 ['new'  'Histogram'  '('  '10 100 1000 10'  '*'  '1000 100'  '*'  '1000'  ')'] 
__label__1 ['MESSAGES.deploymentUnitNotFound'  '('  'absolutePath'  ' '  'puName'  ' '  'current'  ')'] 
__label__1 ['CreateFileOptions.defaults'  '('  ')'  '.setBlockSizeBytes'  '('  'Constants.KB'  ')'  '.setRecursive'  '('  'true'  ')'  '.setTtl'  '('  '1'  ')'] 
__label__1 ['entry.getValue'  '('  ')'  '.health'  '('  ')'  '.compose'  '('  'this.timeoutCompose'  ')'] 
__label__1 ['new'  'SensitivityClassification'  '('  'SUBSYSTEM_NAME'  ' '  "''"  'web-valve'  "''"  ' '  'true'  ' '  'false'  ' '  'false'  ')'] 
__label__0 endsWith ( `` /home/source '' ) 
__label__1 ['c.isEncoded'  '('  ')'] 
__label__0 mapper.writeValueAsBytes ( segment ) 
__label__0 error.expectedMinimumMessageCount ( 2 ) 
__label__1 ['Assert.assertEquals'  '('  'masterAddress'  ' '  'new'  'InetSocketAddress'  '('  '``'  'RemoteMaster1'  "''"  ' 10000'  ')'  ')'] 
__label__0 handshakeFuture == null 
__label__0 simple.getFromReceivedDate ( ) 
__label__0 new URI ( parentUri.getScheme ( ) , parentUri.getAuthority ( ) , parentUri.getPath ( ) + SEPARATOR , null , null ) 
__label__0 createRecord ( value , now , expiryTime ) 
__label__0 new StormClientErrorHandler ( client.name ( ) ) 
__label__1 ['warnings.append'  '('  'LocalizationMessages.HINT_MSG'  '('  'error.getMessage'  '('  ')'  ')'  ')'] 
__label__1 ['executionManager.findChildExecutionsByParentExecutionId'  '('  'processInstanceId'  ')'] 
__label__1 ['existingOne'  '=='  'null'] 
__label__1 ['private'  'final'  'DynamicTrnasformerRegistry'  'dynamicTransformerRegistry'  ';'] 
__label__0 processDefinition.getTenantId ( ) == null || ProcessEngineConfiguration.NO_TENANT_ID.equals ( processDefinition.getTenantId ( ) ) 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'helloForNone'  "''"  ')'  ')'] 
__label__1 ['preDestroys'  '!'  '='  'null'] 
__label__1 ['LOG.info'  '('  '``'  'Storage'  'directory'  '``'  '+'  'rootPath'  '+'  '``'  'does'  'not'  'exist'  "''"  ')'] 
__label__0 Arrays.asList ( `` spring-boot-starter-jetty- '' , '' jetty-continuation '' , '' jetty-util- '' , '' javax.servlet- '' , '' jetty-io- '' , '' jetty-http- '' , '' jetty-server- '' , '' jetty-security- '' , '' jetty-servlet- '' , '' jetty-servlets '' , '' jetty-webapp- '' , '' websocket-api '' , '' javax.annotation-api '' , '' jetty-plus '' , '' javax-websocket-server-impl- '' , '' apache-el '' , '' asm- '' , '' javax.websocket-api- '' , '' asm-tree- '' , '' asm-commons- '' , '' websocket-common- '' , '' jetty-annotations- '' , '' javax-websocket-client-impl- '' , '' websocket-client- '' , '' websocket-server- '' , '' jetty-xml- '' , '' websocket-servlet- '' ) 
__label__0 DataFormat.PAYLOAD == message.get ( DataFormat.class ) & & params [ 0 ] instanceof CxfPayload 
__label__0 prefSize ( new Fixed ( width ) , new Fixed ( height ) ) 
__label__0 twitter1.getPublicTimeline ( ) 
__label__1 ['Calendar.getInstance'  '('  'JSON.defaultLocale'  ')'] 
__label__1 ['new'  'GatherGettersAndSetterProperties'  '('  'compiler'  ')'] 
__label__1 ['new'  'TypeResolver'  '('  'arrayListOfString'  ')'] 
__label__0 LOG.warn ( `` Ignoring duplicate class `` + className ) 
__label__0 className.lastIndexOf ( `` org.openmrs . '' ) 
__label__1 ['options.checkProvides.isOn'  '('  ')'] 
__label__1 ['logger.debug'  '('  '``'  'myq'  'ReturnCode'  ':'  '{'  '}'  "''"  ' '  'returnCode'  ')'] 
__label__1 ['cacheDirectory.exists'  '('  ')'] 
__label__0 / * * * SSH port . * / private Integer port=2000 ; 
__label__1 ['timeMillis'  '-'  'MILLIS_IN'] 
__label__1 ['log.error'  '('  '``'  'Not'  'updating'  'metadata'  ' '  'existing'  'state'  '['  '%'  's'  ']'  'in'  'metadata'  'store'  'does'  "n't"  'match'  'to'  'the'  'new'  'start'  'state'  '['  '%'  's'  ']'  '.'  '``'  ' '  'oldCommitMetadataBytesFromDb'  ' '  'startMetadata'  ')'] 
__label__0 registry.bind ( `` params '' , params ) 
__label__0 Map < List < Object > , T > 
__label__1 ['values.equals'  '('  'values'  '['  'i'  ']'  ')'] 
__label__1 ['incomingMessage.getMessagePayloadByte'  '('  '0'  ')'] 
__label__1 ['processDefinition.getTenantId'  '('  ')'  '=='  'null'] 
__label__1 ['http2c.setInitialStreamSendWindow'  '('  'initialStreamSendWindow'  ')'] 
__label__0 LOG.error ( `` discarding { } messages because the Netty client to { } is being closed '' , numMessages , dstAddressPrefixedName ) 
__label__0 new IllegalStateException ( String.format ( `` File \ '' % 1 $ s\ '' has incorrect indentation in comment . '' + `` Line % 2 $ d : comment : % 3 $ d , actual : % 4 $ d . `` , aFileName , lineNumber , indentInComment , actualIndent ) ) 
__label__1 ['new'  'StringBuilder'  '('  '239'  ')'] 
__label__1 ['log.debug'  '('  '``'  'Error'  'while'  'closing'  'command'  'context'  "''"  ' '  'exception'  ')'] 
__label__0 config.getMapConfig ( mapName ) .setTimeToLiveSeconds ( 10 ) 
__label__0 queue.size ( ) > 100000 
__label__0 compressedProto.length < 380000 
__label__0 IllegalStateException.class 
__label__1 ['getPreferences'  '('  ')'  '.store'  '('  'fos'  ' '  "''"  "''"  ')'] 
__label__0 asyncWriteFuture.cancel ( false ) 
__label__0 Arrays.asList ( `` /css/ * * '' , '' /js/ * * '' , '' /images/ * * '' , '' /webjars/ * * '' , '' / * * /favicon.ico '' ) 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__1 ['size'  '*'  '1.75f'] 
__label__1 ['c.getDeclaredConstructors'  '('  ')'] 
__label__1 ['counter'  '+'  '2'] 
__label__1 ['Foundation.NSLog'  '('  '``'  '['  'debug'  ']'  '``'  '+'  'tag'  '+'  '``'  ':'  '``'  '+'  'message'  ')'] 
__label__1 ['factory.get'  '('  'sBodyClass'  ' '  'NO_ANNOTATIONS'  ' '  'retrofit'  ')'] 
__label__1 ['mAbsListView.getPositionForView'  '('  'childView'  ')'  '=='  'position'] 
__label__0 IntrospectionSupport.getProperties ( configuration , params , null , false ) 
__label__1 ['executor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'stream'  '%'  'd'  "''"  ' '  'hostname'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'writeSynReset'  '('  'streamId'  ' '  'errorCode'  ')'  ';'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__0 cache.put ( new Element ( key , element ) ) 
__label__1 ['headerHandled=false'] 
__label__1 ['new'  'JobConf'  '('  'config_'  ')'] 
__label__0 Calendar.getInstance ( JSON.defaultTimeZone , JSON.defaultLocale ) 
__label__1 ['``'  'Refreshing'  'storefiles'  'of'  'region'  '``'  '+'  'regionToFlush'  '+'  '``'  'due'  'to'  'global'  'heap'  'pressure'  '.'  'memstore'  'size='  "''"  '+'  'StringUtils.humanReadableInt'  '('  'server.getRegionServerAccounting'  '('  ')'  '.getGlobalMemstoreSize'  '('  ')'  ')'] 
__label__0 new RuntimeException ( `` error initializing deserializer : `` + deserializer.getClass ( ) .getName ( ) , e ) 
__label__0 metastore.getHost ( ) 
__label__0 info.getRegionNameAsString ( ) 
__label__0 this.conf.addResource ( coreSiteXMLInputStream , YarnConfiguration.CORE_SITE_CONFIGURATION_FILE ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweets_of_me.json '' , null , true ) ) 
__label__1 ['List'  '<'  'INPUT'  '>'] 
__label__0 new OptiqSemanticException ( generateErrorMessage ( tabref , '' Schema of both sides of union should match : field `` + field + `` : '' + `` appears on the left side of the UNION at column position : `` + getPositionFromInternalName ( lInfo.getInternalName ( ) ) + `` , and on the right side of the UNION at column position : `` + getPositionFromInternalName ( rInfo.getInternalName ( ) ) + `` . Column positions should match for a UNION '' ) ) 
__label__1 ['String'  'id=reader.getAttributeValue'  '('  'null'  ' '  "''"  'id'  "''"  ')'  ';'] 
__label__0 BaseBulletTest.init ( ) 
__label__0 logger.info ( `` defineClass pluginClass : { } cl : { } '' , className , classLoader ) 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 row ( `` p_comment '' , null,7.0,0.0 , null , null , null ) 
__label__1 ['CsvReporter.forRegistry'  '('  'registry'  ')'  '.convertDurationsTo'  '('  'getDurationUnit'  '('  ')'  ')'  '.convertDurationsTo'  '('  'getRateUnit'  '('  ')'  ')'] 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__1 ['prevNerEndIndex'  '!'  '='  '('  'start'  '-'  '1'  ')'  '||'  'nextNerStartIndex'  '!'  '='  'end'] 
__label__0 new CacheCreateConfigOperation ( cacheConfig , createAlsoOnOthers , false ) 
__label__0 this.thrown.expectMessage ( `` File must exist '' ) 
__label__0 GL11.glGetTexParameterfv ( target , pname , params ) 
__label__0 compositeBuffer ( Integer.MAX_VALUE ) 
__label__1 ['/'  '*'  '*'  '*'  'The'  'root'  'package'  'controller'  '.'  '*'  '/'  'private'  'PkgControl'  'root'  ';'] 
__label__0 @ InputIntMethodAnnotation ( -44 ) 
__label__0 LOG.info ( `` Unable to read HTTP response content '' , e ) 
__label__0 serverSocket.setReuseAddress ( true ) 
__label__1 ['logger.info'  '('  '``'  'Creating'  'extern'  'file'  'for'  'exports'  "''"  ')'] 
__label__0 Generics.newTreeMap ( ) 
__label__0 ImmutableList < String > 
__label__0 Arrays.asList ( CoreAnnotations.TextAnnotation.class , CoreAnnotations.TokensAnnotation.class , CoreAnnotations.CharacterOffsetBeginAnnotation.class , CoreAnnotations.CharacterOffsetEndAnnotation.class , CoreAnnotations.BeforeAnnotation.class , CoreAnnotations.AfterAnnotation.class , CoreAnnotations.TokenBeginAnnotation.class , CoreAnnotations.TokenEndAnnotation.class , CoreAnnotations.PositionAnnotation.class , CoreAnnotations.IndexAnnotation.class , CoreAnnotations.OriginalTextAnnotation.class , CoreAnnotations.ValueAnnotation.class , CoreAnnotations.IsNewlineAnnotation.class , CoreAnnotations.TokenIndexAnnotation.class ) 
__label__1 ['NodeTraversal.traverseEs6'  '('  'compiler'  ' '  'originalRoot'  ' '  'this'  ')'] 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__0 namespaces.isDefined ( ) 
__label__1 ['dirtyOutputBuffer'  '('  ')'] 
__label__1 ['RedisOperations'  '<'  'Object'  ' '  'Object'  '>'] 
__label__1 ['new'  'MapJsonReader'  '('  'streamDescriptor'  ' '  'writeStackType'  ' '  'checkForNulls'  ' '  'sessionTimeZone'  ' '  'sessionTimeZone'  ')'] 
__label__0 that.getDomain ( ) == null & & getDomain ( ) ! = null 
__label__1 ['isTouched'  '('  '0.75f 1'  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__0 getTokenDisplayNames ( ) 
__label__1 ['floatBuffer.clear'  '('  ')'] 
__label__1 ['activeFrom.getTime'  '('  ')'] 
__label__0 Arrays.asList ( CoreAnnotations.TextAnnotation.class , CoreAnnotations.TokensAnnotation.class , CoreAnnotations.CharacterOffsetBeginAnnotation.class , CoreAnnotations.CharacterOffsetEndAnnotation.class , CoreAnnotations.BeforeAnnotation.class , CoreAnnotations.AfterAnnotation.class , CoreAnnotations.TokenBeginAnnotation.class , CoreAnnotations.TokenEndAnnotation.class , CoreAnnotations.PositionAnnotation.class , CoreAnnotations.IndexAnnotation.class , CoreAnnotations.OriginalTextAnnotation.class , CoreAnnotations.ValueAnnotation.class , CoreAnnotations.IsNewlineAnnotation.class ) 
__label__1 ['TEST_UTIL.waitTableEnabled'  '('  'TEST_TABLE.getTableName'  '('  ')'  ')'] 
__label__0 log.infof ( `` started ResourceAdapterService % s '' , context.getController ( ) .getName ( ) ) 
__label__0 new GZIPOutputStream ( outputStream ) 
__label__1 ['ticket.notify'  '('  ')'] 
__label__1 ['setLowHighExpected'  '('  'lowResults'  ' '  'highResults'  ' '  'expectedResults'  ' '  'CONLL_SCORE 53.75 54.00 53.98'  ')'] 
__label__1 ['constructors'  '['  'TXN_REMOVE_ALL'  ']'] 
__label__0 raw.getOutParameters ( ) 
__label__0 addProperty ( secondNode , '' band '' , '' The Clash '' ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['processEngineConfiguration.getCommandExecutorTxRequiresNew'  '('  ')'] 
__label__1 ['numKeys'  '>'  '1'] 
__label__1 ['Assert.assertEquals'  '('  'workerAddress'  ' '  'new'  'InetSocketAddress'  '('  'defaultHostname'  ' '  'defaultPort'  ')'  ')'] 
__label__1 ['getClass'  '('  ')'  '.getSimpleName'  '('  ')'  '+'  '``'  '['  'populator'  ':'  "''"  '+'  'populator+'  '``'  ' '  'descriptor'  ':'  "''"  '+'  'descriptor+'  '``'  ']'  "''"] 
__label__1 ['unsafeBuffers.contains'  '('  'buffer'  ' '  'true'  ')'] 
__label__1 ['expirationTime'  '=='  'Long.MAX_VALUE'  '&'  '&'  'expirationTime'  '<'  '0'] 
__label__0 LOG.warn ( `` Failed to delete path from UFS : { } '' , e.getMessage ( ) ) 
__label__0 ( Relationship ) container 
__label__0 assertTrue ( dr.isFailure ( ) ) 
__label__1 ['consumer.endpoint.isAutoAck'  '('  ')'] 
__label__0 factory.getOrCreateProxyByName ( packet.name ) 
__label__0 Utils.isZkAuthenticationConfiguredTopology ( topoConf ) 
__label__1 ['buffer.getInt8'  '('  ')'] 
__label__1 ['hgraph.getMutualDegree'  '('  'n'  ')'] 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__0 Thread.sleep ( 1500 ) 
__label__0 conf.getInt ( Constants.TFS_PERMISSIONS_UMASK_KEY ) 
__label__1 ['``'  'A'  'task'  'is'  'in'  'the'  'ABORTED'  'state'  'but'  'stage'  'is'  '``'  '+'  'stageState'] 
__label__0 grammar.getTokenDisplayNames ( ) 
__label__0 new RuntimeException ( `` Error when launching multilang subprocess '' , e ) 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` diskspace '' ) 
__label__0 Context.getEncounterService ( ) .saveEncounter ( encounter ) 
__label__1 ['EJBException'  'nsee'] 
__label__1 ['clusterService'  '!'  '='  'null'] 
__label__0 `` false '' .equals ( showRelationships ) || result.hasErrors ( ) 
__label__0 wrappersToPrimitives.put ( wrapperType , primitiveType ) 
__label__0 getTokenDisplayNames ( ) 
__label__0 postAgg.getName ( ) .equalsIgnoreCase ( topNMetricName ) 
__label__0 mTfs.unpin ( mTfs.open ( path ) ) 
__label__1 ['public'  'Long'  'getAutoCommitInterval'  '('  ')'  '{'  'return'  'this.autoCommitInterval'  ';'  '}'] 
__label__0 result.expectedMinimumMessageCount ( 3 ) 
__label__0 GL.glDeleteTextures ( n , textures , Memory.getPosition ( textures ) ) 
__label__0 websocketComponent.setMaxThreads ( 20 ) 
__label__0 entry.getValue ( ) .health ( ) .transformDeferred ( this.timeoutCompose ) 
__label__0 mMountTable.resolve ( getPath ( dir ) ) .toString ( ) 
__label__1 ['javaWriter.emitSingleLineCOmment'  '('  '``'  'foo'  "''"  ')'] 
__label__0 visitor.visitTypeLiteral ( this ) 
__label__1 ['items'  '['  '16'  ']'] 
__label__1 ['ufsDeleter.delete'  '('  'alluxioUriToDel'  ' '  'delInode'  ')'] 
__label__0 logger.debug ( `` Can not retrieve item { } for widget { } '' , itemName , w.eClass ( ) .getInstanceTypeName ( ) ) 
__label__1 ['``'  'false'  "''"  '.equals'  '('  'showRelationships'  ')'] 
__label__1 ['``'  'maxHeaderSize'  'must'  'be'  'a'  'positive'  'integer'  ':'  '``'  '+'  'maxChunkSize'] 
__label__1 ['existing.getState'  '('  ')'] 
__label__1 ['op.getJavaName'  '('  ')'] 
__label__0 getOrCreateConnectionFactory ( ) 
__label__0 ConversionException e 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweets_of_me.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['RuntimeGlue'  'optionalGlue'] 
__label__1 ['assertEquals'  '('  'actualPattern.pattern'  '('  ')'  ' '  'someName'  ')'] 
__label__0 Bytes.toBytes ( tableOrRegionName ) 
__label__1 ['ImmutableSortedSet.of'  '('  '``'  'a'  "''"  ' '  "''"  'abbr'  "''"  ' '  "''"  'acronym'  "''"  ' '  "''"  'address'  "''"  ' '  "''"  'area'  "''"  ' '  "''"  'b'  "''"  ' '  "''"  'bdo'  "''"  ' '  "''"  'big'  "''"  ' '  "''"  'blockquote'  "''"  ' '  "''"  'br'  "''"  ' '  "''"  'caption'  "''"  ' '  "''"  'cite'  "''"  ' '  "''"  'code'  "''"  ' '  "''"  'colgroup'  "''"  ' '  "''"  'del'  "''"  ' '  "''"  'div'  "''"  ' '  "''"  'dfn'  "''"  ' '  "''"  'dl'  "''"  ' '  "''"  'em'  "''"  ' '  "''"  'fieldset'  "''"  ' '  "''"  'h1'  "''"  ' '  "''"  'h2'  "''"  ' '  "''"  'h3'  "''"  ' '  "''"  'h4'  "''"  ' '  "''"  'h5'  "''"  ' '  "''"  'h6'  "''"  ' '  "''"  'hr'  "''"  ' '  "''"  'i'  "''"  ' '  "''"  'img'  "''"  ' '  "''"  'ins'  "''"  ' '  "''"  'kbd'  "''"  ' '  "''"  'li'  "''"  ' '  "''"  'ol'  "''"  ' '  "''"  'p'  "''"  ' '  "''"  'pre'  "''"  ' '  "''"  'q'  "''"  ' '  "''"  'samp'  "''"  ' '  "''"  'small'  "''"  ' '  "''"  'span'  "''"  ' '  "''"  'strong'  "''"  ' '  "''"  'style'  "''"  ' '  "''"  'sub'  "''"  ' '  "''"  'sup'  "''"  ' '  "''"  'table'  "''"  ' '  "''"  'tbody'  "''"  ' '  "''"  'td'  "''"  ' '  "''"  'tfoot'  "''"  ' '  "''"  'th'  "''"  ' '  "''"  'thead'  "''"  ' '  "''"  'tr'  "''"  ' '  "''"  'tt'  "''"  ' '  "''"  'ul'  "''"  ')'] 
__label__1 ['``'  'Segment'  'initialized'  'with'  'too'  'large'  'address'  ':'  '``'  '+'  'address'  '+'  '``'  ';'  'Max'  'allowed'  'address'  'is'  '``'  '+'  '('  'Long.MAX_VALUE'  '-'  'Integer.MAX_VALUE'  '-'  '1'  ')'] 
__label__1 ['DiagnosticType.error'  '('  '``'  'JSC_GOOG_MODULE_IN_NON_MODULE'  "''"  ' '  "''"  'goog.module'  '('  ')'  'call'  'must'  'be'  'the'  'first'  'statement'  'in'  'a'  'module'  '.'  "''"  ')'] 
__label__1 ['public'  'DerivedBuilder'  'setSSLEngineFactory'  '('  'SSLEngineFactory'  'sslEngineFactory'  ')'  '{'  'configBuilder.setSSLEngineFactory'  '('  'sslEngineFactory'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__0 from ( `` jms : queue2 : parallelLoanRequestQueue '' ) .process ( new CreditAgency ( ) ) .multicast ( new BankResponseAggregationStrategy ( ) .setAggregatingOutMessage ( true ) ) .setParallelProcessing ( true ) 
__label__1 ['graphModel.getDirectedGraph'  '('  ')'] 
__label__0 DataStreamSink < OUT > 
__label__1 ['String.format'  '('  '``'  'NODE'  '%'  'd'  ':'  'Already'  'in'  'or'  'beyond'  'node'  'stage'  ' '  'ignoring'  '.'  'current'  '='  '%'  's'  ' '  'requested'  '='  '%'  's'  "''"  ' '  'this.node.getNodeStage'  '('  ')'  '.getLabel'  '('  ')'  ' '  'targetStage.getLabel'  '('  ')'  ')'] 
__label__0 WALSplitter.moveAsideBadEditsFile ( fs , edits ) 
__label__1 ['client.getBulkReply'  '('  ')'] 
__label__0 DefaultAlluxioWorker.class 
__label__0 ctx.writeAndFlush ( `` Your session is protected by `` + ctx.pipeline ( ) .get ( SslHandler.class ) .engine ( ) .getSession ( ) .getCipherSuite ( ) + `` cipher suite.\n '' ) 
__label__0 m.isReadBackupData ( ) 
__label__1 ['endpointId'  '<'  '='  'result.getInstances'  '('  ')'] 
__label__0 graph.getEdgesAndMetaEdges ( ) 
__label__1 ['latch.await'  '('  '100'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'Block'  'of'  'ID'  '``'  '+'  'getCurrentBlockId'  '('  ')'  '+'  '``'  'could'  'not'  'be'  'cached'  'into'  'Tachyon'  "''"  ' '  'ioe'  ')'] 
__label__1 ['@'  'Message'  '('  'id=14151'  ' '  'value='  "''"  'Could'  'not'  'find'  'view'  '%'  's'  'for'  'EJB'  '%'  's'  "''"  ')'  'RuntimeException'  'viewNotFound'  '('  'String'  'viewClass'  ' '  'String'  'ejbName'  ')'  ';'] 
__label__1 ['stop'  '<'  'start'] 
__label__0 WeakSafeReadWriteLock strongReference 
__label__1 ['ImmutableList.of'  '('  'listeners'  ')'] 
__label__0 DirectMessage.createDirectMessageList ( get ( getBaseURL ( ) + `` direct_messages/sent.json '' , new PostParameter [ 0 ] , paging.asPostParameterList ( ) , true ) ) 
__label__0 titleCache.setColors ( Color.tmp.set ( getColor ( ) ) .mul ( style.titleFontColor ) ) 
__label__0 logger.trace ( `` rapidRefreshFutureEnd stopping '' ) 
__label__1 ['logger.info'  '('  'sb.toString'  '('  ')'  ')'] 
__label__0 String ... pathParams 
__label__1 ['julLogger.info'  '('  '``'  'Hello'  'world'  "''"  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['Latkes.getStaticPath'  '('  ')'] 
__label__1 ['DefaultFileSystemMaster.class'] 
__label__0 response.get ( ROLLED_BACK ) 
__label__0 entry ! = null & & ! DropboxUploadMode.force.equals ( mode ) 
__label__0 IRON_SWORD ( 267,1,250 ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` favorites.json '' , new PostParameter [ 0 ] , true ) ) 
__label__1 ['Generics.newHashMap'  '('  ')'] 
__label__1 ['SOURCE.deref'  '('  ')'] 
__label__1 ['new'  'LwjglPreferences'  '('  'name'  ')'] 
__label__0 dataFormatModel.setDescription ( row.get ( `` description '' ) ) 
__label__1 ['new'  'HashMap'  '<'  '>'  '('  'queryMemoryReservations'  ')'] 
__label__0 LOG.warn ( `` Block of ID `` + getCurrentBlockId ( ) + `` could not be cached into Tachyon '' ) 
__label__1 ['queryIdsSnapshot.remove'  '('  'deadQuery'  ')'] 
__label__0 LOG.warn ( `` OpenTracing : Failed to capture tracing data '' , t ) 
__label__0 logger.fine ( `` Computing Control Flow Graph '' ) 
__label__0 DiagnosticType.disabled ( `` JSC_TOO_MANY_TEMPLATE_PARAMS '' , '' { 0 } '' ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__0 new UnsupportedOperationException ( getClass ( ) .getName ( ) ) 
__label__1 ['GL20.glUniform2'  '('  'location'  ' '  'v'  ')'] 
__label__0 config.getClass ( ) .getName ( ) 
__label__0 23 * ClassSize.REFERENCE 
__label__1 ['mapServiceContext.hasRegisteredListener'  '('  'mapName'  ')'] 
__label__0 getConfiguration ( ) .getOrCreateConnectionFactory ( ) 
__label__0 replicatedMapService.getReplicatedRecordStore ( mapName , true ) 
__label__0 executor.scheduleAtFixedRate ( this , period , period , unit ) 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'QueueBasicLocalTest'  'extends'  'QueueBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '1'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__0 assertEquals ( `` string '' , model.getProperties ( ) .get ( NAME ) .getType ( ) ) 
__label__0 ch == '| ' & & JdbcConstants.POSTGRESQL.equals ( dbType ) 
__label__1 ['TimeUnit.SECONDS.toMillis'  '('  '3'  ')'] 
__label__0 new FlinkRuntimeException ( `` Unexpected list element deserialization failure '' , e ) 
__label__1 ['assertEquals'  '('  '0'  ' '  'counter.get'  '('  ')'  ')'] 
__label__1 ['jmsManager.destroyQueue'  '('  'queueName'  ')'] 
__label__0 size ( ) > this.capacity 
__label__0 config.getOrcStreamBufferSize ( ) 
__label__1 ['Exception'  'cause'] 
__label__1 ['new'  'PoolBagEntry'  '('  'null'  ' '  'pool'  ')'] 
__label__0 player.teleport ( playerLocation , TeleportCause.COMMAND ) 
__label__0 GL20.glUniform4iv ( location , toIntBuffer ( v , offset , count < < 2 ) ) 
__label__1 ['w.println'  '('  'padding'  ')'] 
__label__0 new PeepholeSubstituteAlternateSyntax ( true ) 
__label__0 stat.st_mode.intValue ( ) 
__label__0 resultEndpoint.setMinimumResultWaitTime ( 900 ) 
__label__1 ['('  'o'  'instanceof'  'Record'  ')'] 
__label__0 SimpleAttributeDefinitionBuilder.create ( `` min-inclusive '' , ModelType.BOOLEAN , true ) 
__label__1 ['read'  '('  'buffer'  ')'] 
__label__1 ['assertEquals'  '('  'fStopwatch.runtime'  '('  'MILLISECONDS'  ')'  ' 300d 100d'  ')'] 
__label__1 ['Thread.sleep'  '('  '1000'  ')'] 
__label__1 ['webSocket.isOpen'  '('  ')'] 
__label__1 ['lastPosition'  '<'  'positionCount'] 
__label__1 ['MathUtils.PI'  '*'  '('  'this.width'  '*'  'this.height'  ')'  '/'  '2'] 
__label__1 ['type.equalsIgnoreCase'  '('  '``'  'integer'  "''"  ')'] 
__label__1 ['new'  'IllegalArgumentException'  '('  '``'  'Expected'  'a'  'proto'  'but'  'was'  ':'  '``'  '+'  'body.mimeType'  '('  ')'  ')'] 
__label__0 Assert.assertTrue ( System.currentTimeMillis ( ) - now < 5000 ) 
__label__0 currentMode == MODE_PULL_DOWN_TO_REFRESH 
__label__1 ['cursor.retry'  '('  ')'] 
__label__0 CONFIG_GRANULARITY.equals ( configKey ) || CONFIG_REFRESH.equals ( configKey ) || `` service.pid '' .equals ( configKey ) 
__label__0 ctClass.toClass ( clazz.getClassLoader ( ) , null ) 
__label__1 ['className.indexOf'  '('  '``'  'org.openmrs'  '.'  "''"  ')'] 
__label__1 ['/'  '*'  '*'  '*'  '@'  'see'  'ConceptService'  '#'  'getCountOfConceptReferenceTerms'  '('  'String'  ' '  'ConceptSource'  ' '  'boolean'  ')'  '*'  '/'  'public'  'Integer'  'getCountOfConceptReferenceTerms'  '('  'String'  'query'  ' '  'ConceptSource'  'conceptSource'  ' '  'boolean'  'includeRetired'  ')'  'throws'  'DAOException'  ';'] 
__label__0 type == VertexDataType.VertexBufferObject || Mesh.forceVBO 
__label__0 expression.length ( ) - 1 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__1 ['decoder.readOutbound'  '('  ')'] 
__label__1 ['nodeString'  '('  ')'] 
__label__1 ['assertMockEndpointsSatisifed'  '('  ')'] 
__label__1 ['nameTextField.getText'  '('  ')'] 
__label__1 ['lockForRescale'  '('  ')'] 
__label__0 times + BASE_FILE_NUMBER 
__label__1 ['log.info'  '('  '``'  'Performing'  'lookup'  ':'  '%'  's'  '--'  '>'  '%'  's'  "''"  ' '  'nodeIds'  ' '  'retVal'  ')'] 
__label__0 GL.glDeleteTextures ( n , textures , Memory.getPosition ( textures ) ) 
__label__1 ['assertClusterSize'  '('  '2'  ' '  'nodes'  '['  '0'  ']'  ')'] 
__label__1 ['request.getTaskDefinitionKey'  '('  ')'] 
__label__0 this.posColumn=column 
__label__0 builder ( SingleSignOnDefinition.INSTANCE ) .addAttributes ( SingleSignOnDefinition.DOMAIN , SingleSignOnDefinition.PATH , SingleSignOnDefinition.HTTP_ONLY , SingleSignOnDefinition.SECURE , SingleSignOnDefinition.COOKIE_NAME ) 
__label__1 ['assertClusterSize'  '('  '2'  ' '  'nodes'  '['  '0'  ']'  ')'] 
__label__1 ['decodeAttribute'  '('  'nameAttribute.getValue'  '('  ')'  ' '  'charset'  ')'] 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__0 getStreamNode ( vertexID ) 
__label__0 addProperty ( secondNode , '' band '' , '' The Clash '' ) 
__label__0 ! JedisClusterHashTagUtil.isClusterCompliantMatchPattern ( matchPattern ) 
__label__1 ['Set'  '<'  'String'  '>'] 
__label__1 ['assertMockEndpointsSatisifed'  '('  ')'] 
__label__0 GL20.glGetVertexAttribiv ( index , pname , params ) 
__label__1 ['node1.checkTreeTypeAwareEqualsSilent'  '('  'node2'  ')'] 
__label__1 ['TestSuiteEnvironment.getServerAddress'  '('  ')'] 
__label__1 ['this.isDefaultAutoCommit'  '('  ')'] 
__label__1 ['result.addEnchantments'  '('  'getEnchantments'  '('  ')'  ')'] 
__label__0 views.html.search.noresults.render ( currentUser ( ) , q , searchResult , null ) 
__label__0 location.equals ( BlockStoreLocation.anyTier ( ) ) 
__label__0 new StringBuilder ( 729 ) 
__label__1 ['free'  '('  'path'  ' '  'false'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Gets'  'the'  'key'  'of'  'service'  'port'  '.'  '*'  '@'  'return'  'key'  'of'  'service'  'port'  '*'  '/'  'public'  'String'  'getPortKey'  '('  ')'  '{'  'return'  'mPortKey'  ';'  '}'] 
__label__1 ['RCFileMergeMapper.jobClose'  '('  'outputPath'  ' '  'noName'  ' '  'job'  ' '  'console'  ')'] 
__label__1 ['logger.info'  '('  '``'  'Optimized'  'Selector'  ':'  '``'  '+'  'selector.getClass'  '('  ')'  '.getName'  '('  ')'  ')'] 
__label__0 entry.getHeader ( ) .getEventLength ( ) * 6 
__label__0 new StringBuilder ( 256 ) 
__label__0 response.get ( ROLLED_BACK ) 
__label__0 getMockEndpoint ( `` mock : '' + i ) .expectedMessageCount ( 200 ) 
__label__1 ['payload.getBodySources'  '('  ')'  '.size'  '('  ')'  '=='  '1'] 
__label__0 logger.fine ( `` Recording function information '' ) 
__label__1 ['BufferUtils.newByteBuffer'  '('  'fileSize'  ')'] 
__label__0 clearFromMember.join ( ) 
__label__0 bindingConfiguration.getSource ( ) .getResourceValue ( resolutionContext , serviceBuilder , phaseContext , service.getManagedObjectInjector ( ) ) 
__label__1 ['new'  'ValidationException'  '('  '``'  'Unable'  'to'  'deserialize'  'string'  "'"  "''"  '+'  'base64String'  '+'  '``'  "'"  'of'  'base'  'class'  "'"  "''"  '+'  'baseClass.getName'  '('  ')'  '+'  '``'  "'"  '.'  "''"  ')'] 
__label__1 ['assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertFalse'  '('  'lock.isLocked'  '('  ')'  ')'  ';'  '}'  '}'  ' 5'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/user_timeline.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__1 ['registration.registerOperationHandler'  '('  'CommonAttributes.DISABLE'  ' '  'ModClusterDisable.INSTANCE'  ' '  'disable'  ' '  'false'  ')'] 
__label__1 ['mCheckUnusedThrows=aFlag'] 
__label__0 @ Override public ExtendedCell deepClone ( ) { Cell clonedBaseCell= ( ( ExtendedCell ) this.cell ) .deepClone ( ) ; if ( clonedBaseCell instanceof ByteBufferCell ) { return new TagRewriteByteBufferCell ( ( ByteBufferCell ) clonedBaseCell , this.tags ) ; } return new TagRewriteCell ( clonedBaseCell , this.tags ) ; } 
__label__1 ['FileInStream.create'  '('  'status'  ' '  'options.toInStreamOptions'  '('  ')'  ' '  'mContext'  ')'] 
__label__1 ['target.addTask'  '('  'task'  ')'] 
__label__1 ['testError'  '('  'js'  ' '  'VariableReferenceCheck.REDECLARED_VARIABLE'  ')'] 
__label__1 ['CsvReporter.forRegistry'  '('  'registry'  ')'  '.convertDurationsTo'  '('  'getDurationUnit'  '('  ')'  ')'  '.convertDurationsTo'  '('  'getRateUnit'  '('  ')'  ')'] 
__label__0 KBP_MINIMUM_SCORE=.453 
__label__1 ['nodeEngine.getPartitionService'  '('  ')'] 
__label__0 System.currentTimeMillis ( ) 
__label__1 ['period'  '<'  'MINIMAL_POLL_PERIOD'] 
__label__0 userGroupMember.getUserGroupId ( ) 
__label__0 LOG.info ( `` recovered from `` + StringUtils.stringifyException ( e ) ) 
__label__1 ['TimeUnit.SECONDS.toMillis'  '('  '4'  ')'] 
__label__1 ['row'  '('  '``'  'p_comment'  "''"  ' '  'null 1.0 0.0'  ' '  'null'  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['@'  'Bean'  '@'  'ConditionalOnMissingBean'  '('  'NamedParameterJdbcOperations.class'  ')'  'public'  'NamedParameterJdbcOperations'  'namedParameterJdbcTemplate'  '('  ')'  '{'  'return'  'new'  'NamedParameterJdbcTemplate'  '('  'this.dataSource'  ')'  ';'  '}'] 
__label__1 ['plugin'  '!'  '='  'null'] 
__label__1 ['totalTime'  '/'  'curTime'  '=='  'curOps'] 
__label__1 ['map.set'  '('  'keyValue.getKeyData'  '('  ')'  ' '  'value 0'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['logger.error'  '('  '``'  '{'  '}'  'unsupported'  'item'  'type'  '{'  '}'  'for'  'item'  '{'  '}'  "''"  ' '  'LoggerConstants.TFMODELUPDATE'  ' '  'provider.getItem'  '('  'itemName'  ')'  ' '  'itemName'  ')'] 
__label__0 stateHolder.reloadDatapoints ( ) 
__label__0 resultBuilder ( driverContext.getSession ( ) , BIGINT , BIGINT , DOUBLE , VARCHAR , BIGINT , BIGINT , REAL , DOUBLE , VARCHAR ) 
__label__1 ['mStack.size'  '('  ')'  '>'  '2'] 
__label__0 proxy == null || proxy ! = view.getAnimation ( ) 
__label__1 ['Color.fromRGB'  '('  '0xEB8844'  ')'] 
__label__0 LOG.warn ( `` delete failed : { } '' , e.getMessage ( ) ) 
__label__1 ['attribute.startsWith'  '('  'keyPrefix'  ')'  '&'  'attribute.length'  '('  ')'  '>'  'keyPrefix.length'  '('  ')'] 
__label__1 ['mock.expectedMessageCount'  '('  '1'  ')'] 
__label__0 AttributeUtils.getDefault ( ) .getMax ( column , valuesArray ) 
__label__0 Integer.MIN_VALUE + 9 
__label__1 ['_availMemory'  '+'  'amount'] 
__label__1 ['mockRegionInfo.isMetaRegion'  '('  ')'] 
__label__1 ['assertOpenEventually'  '('  'countDownLatch 30'  ')'] 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__0 result.expectedBodiesReceivedInAnyOrder ( `` A+C+E+G+I '' , '' B+D+F+H+J '' ) 
__label__1 ['xtw.writeCharacters'  '('  'customProperty.getSimpleValue'  '('  ')'  ')'] 
__label__0 GL20.glUniformMatrix4fv ( location , transpose , value ) 
__label__1 ['this.mrwork.getHadoopSupportsSplittable'  '('  ')'] 
__label__0 pieces.length < = tagColumn 
__label__0 new StringBuilder ( 245 ) 
__label__1 ['resultsE.appendChild'  '('  'reportE'  ')'] 
__label__1 ['Setting'  '<'  'Long'  '>'] 
__label__0 channel.getPipeline ( ) .sendUpstreamLater ( new DefaultExceptionEvent ( channel , cause ) ) 
__label__0 new ModelNode ( ) .set ( 600000L ) 
__label__0 Preconditions.checkNotNull ( manager , '' manager '' ) 
__label__0 file.flushAndForce ( ) 
__label__1 ['checkPlanDoNotMatch'  '('  'exchange'  '('  ')'  ' '  "''"  'Expected'  'rules'  'to'  'be'  'fired'  'before'  "'AddExchanges"  "'"  'optimizer'  "''"  ')'] 
__label__1 ['@'  'PathParam'  '('  '``'  'createdTimeInterval'  "''"  ')'] 
__label__1 ['DUE_DILIGENCE_MILLIS=50'] 
__label__1 ['planNode.getPlanNodeScheduledTime'  '('  ')'] 
__label__1 ['field.getRawType'  '('  ')'] 
__label__0 details.setProperty ( fileName , Long.toString ( timestamp ) ) 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['new'  'PutBackupOperation'  '('  'name'  ' '  'dataKey'  ' '  'dataValue'  ' '  'replicationInfo'  ' '  'true'  ')'] 
__label__1 ['new'  'Font'  '('  'edgeFontName'  ' '  'edgeFontSize'  ' '  'edgeFontStyle'  ')'] 
__label__1 ['serverEnvironment'  '=='  'null'] 
__label__0 stationItemName ! = null & & openSprinkler ! = null 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'short'  'circuit'  'output'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ')'] 
__label__1 ['log.error'  '('  '``'  'activitiy'  'or'  'FailedJobRetryTimerCycleValue'  'is'  'null'  'in'  'job'  '``'  '+'  'jobId'  '+'  '``'  "'"  '.'  'only'  'decrementing'  'retries'  '.'  "''"  ')'] 
__label__1 ['primitiveType'  '!'  '='  'null'] 
__label__0 lookupService.lookupPrincipalByName ( user ) 
__label__1 ['streamCachingStrategy.setSpoolThreshold'  '('  '1l'  ')'] 
__label__1 ['JavaConversions.asMap'  '('  'logManager.logsByTopicPartition'  '('  ')'  ')'] 
__label__0 new ServiceActivatorContextImpl ( batchBuilder , serviceContainer ) 
__label__1 ['getExecutorService'  '('  ')'] 
__label__0 GL20.glUniform2iv ( location , v ) 
__label__1 ['LOG.warn'  '('  '``'  'DataNode'  'is'  'out'  'of'  'memory'  '.'  'Will'  'retry'  'in'  '30'  'seconds'  '.'  '``'  ' '  'ie'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/user_timeline.json '' , true ) ) 
__label__0 public Long getNewerThan ( ) { return newerThan ; } 
__label__1 ['logger.debug'  '('  '``'  'NODE'  '{'  '}'  ':'  'Retry'  'timout'  ':'  'Ca'  "n't"  'advance'  "''"  ')'] 
__label__1 ['raw.getParameters'  '('  ')'] 
__label__0 assertEquals ( 2 , map2.keySet ( ) .size ( ) ) 
__label__0 executionStats.getStartedSplits ( ) 
__label__0 assertEquals ( 12 , events.size ( ) ) 
__label__1 ['LOG.info'  '('  'rootPath'  '+'  '``'  'is'  'not'  'a'  'directory'  "''"  ')'] 
__label__0 request.getDueAfter ( ) 
__label__0 assertMockEndpointsSatisfied ( ) 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'short'  'circuit'  'output'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ')'] 
__label__1 ['@'  'Override'  'public'  'ResponseImpl'  'headers'  '('  'Map'  '<'  'String'  ' '  'Property'  '>'  'headers'  ')'  '{'  'throw'  'new'  'RuntimeException'  '('  '``'  'Not'  'implemented'  "''"  ')'  ';'  '}'] 
__label__0 headers.get ( ROLLBACK_ON_RUNTIME_FAILURE ) 
__label__0 request.getPathInfo ( ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['Integer'  'requestRequiredAcks'] 
__label__0 logger.trace ( `` myq ReturnCode : { } '' , returnCode ) 
__label__0 executionListenerContextCloseListener.addCloseFailedExecutionListener ( executionListener , execution , executionVariablesToUse , customPropertiesMapToUse ) 
__label__0 getIntProperty ( `` tachyon.master.web.threads '' ,9 ) 
__label__0 LOG.warn ( `` Error in response for blockId : `` + recvMsg.getBlockId ( ) + `` message : `` + recvMsg.getStatus ( ) .getMessage ( ) ) 
__label__1 ['serverQueue.add'  '('  'holder'  ')'] 
__label__0 memoryReservation.addAndGet ( bytes ) 
__label__0 option.getJavaType ( ) 
__label__1 ['twitter4j.List.constructListOfLists'  '('  'get'  '('  'getApiBaseURL'  '('  ')'  '+'  'V1'  '+'  'user+'  '``'  '/lists/subscriptions.json'  '?'  'cursor='  "''"  '+'  'cursor'  ' '  'true'  ')'  ')'] 
__label__1 ['IR.name'  '('  'TMP_ERROR'  ')'] 
__label__1 ['queryNotifyLatch.await'  '('  '25'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__0 parent.decrementPrioritizableForTree0 ( amt ) 
__label__1 ['args.length'  '<'  '1'] 
__label__0 from ( `` jms : queue2 : parallelLoanRequestQueue '' ) .process ( new CreditAgency ( ) ) .multicast ( new BankResponseAggregationStrategy ( ) .setAggregatingOutMessage ( true ) ) .setParallelProcessing ( true ) 
__label__1 ['DiagnosticType.error'  '('  '``'  'JSC_REDECLARED_VARIABLE'  "''"  ' '  "''"  'Redeclared'  'variable'  ':'  '{'  '0'  '}'  "''"  ')'] 
__label__0 request.getPathInfo ( ) 
__label__1 ['node1.checkTreeTypeAwareEqualsSilent'  '('  'node2'  ')'] 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  'initializers'  '['  '0'  ']'  ' '  'initializers'  '['  '1'  ']'  ')'] 
__label__1 ['clientConfig.property'  '('  'ClientProperties.READ_TIMEOUT 1000'  ')'] 
__label__0 ImmutableSortedSet.of ( `` a '' , '' abbr '' , '' acronym '' , '' address '' , '' area '' , '' b '' , '' bdo '' , '' big '' , '' blockquote '' , '' br '' , '' caption '' , '' cite '' , '' code '' , '' colgroup '' , '' dd '' , '' del '' , '' div '' , '' dfn '' , '' dl '' , '' dt '' , '' em '' , '' fieldset '' , '' h1 '' , '' h2 '' , '' h3 '' , '' h4 '' , '' h5 '' , '' h6 '' , '' hr '' , '' i '' , '' img '' , '' ins '' , '' kbd '' , '' li '' , '' ol '' , '' p '' , '' pre '' , '' q '' , '' samp '' , '' small '' , '' span '' , '' strong '' , '' style '' , '' sub '' , '' sup '' , '' table '' , '' tbody '' , '' td '' , '' tfoot '' , '' th '' , '' thead '' , '' tr '' , '' tt '' , '' ul '' ) 
__label__0 from ( `` seda : foo '' ) .startupOrder ( 1 ) .delay ( 500 ) 
__label__1 ['new'  'ModelNode'  '('  ')'  '.set'  '('  '25000'  ')'] 
__label__1 ['registry.put'  '('  '``'  'myManager'  "''"  ' '  'cacheManager'  ')'] 
__label__0 node.hasDefined ( Constants.ALIAS ) 
__label__0 endpoint.getBus ( ) .getInInterceptors ( ) .size ( ) > = 1 
__label__1 ['StringBuffer'  'pattern=new'  'StringBuffer'  '('  'this.prefix'  ')'  ';'] 
__label__1 ['new'  'HazelcastProperty'  '('  '``'  'hazelcast.invalidation.reconciliation.interval.seconds'  "''"  ' 1'  ' '  'SECONDS'  ')'] 
__label__0 assertRemoveSubsystemResources ( servicesB ) 
__label__0 setop.getJavaName ( ) 
__label__1 ['uuid'  '!'  '='  'null'] 
__label__1 ['EmptyResponse.class'] 
__label__0 seenVertices.contains ( endAncestor ) 
__label__1 ['ClassNotFoundException'  'e'] 
__label__1 ['instance2.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__1 ['this.getLimit'  '('  ')'] 
__label__0 assertEquals ( 156 , map.getLocalMapStats ( ) .getHeapCost ( ) ) 
__label__0 mListView.getListChildAt ( index ) 
__label__1 ['/'  '*'  '*'  '*'  'Make'  'sure'  'we'  'do'  "n't"  'attempt'  'to'  'recover'  'inline'  ';'  'if'  'the'  'parser'  'successfully'  'recovers'  ' '  'it'  'wo'  "n't"  'throw'  'an'  'exception'  '.'  '*'  '/'  '@'  'Override'  'public'  'Token'  'recoverInline'  '('  'BaseRecognizer'  'recognizer'  ')'  'throws'  'RecognitionException'  '{'  'throw'  'new'  'RuntimeException'  '('  'new'  'InputMismatchException'  '('  'recognizer'  ')'  ')'  ';'  '}'] 
__label__1 ['maxSize'  '>'  '('  'used'  '/'  'total'  ')'] 
__label__1 ['Color.fromRGB'  '('  '0x1E1B1B'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweeted_to_me.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['?'  'extends'  'Exception'] 
__label__0 factory.get ( mResponseWildcard , NO_ANNOTATIONS , retrofit ) 
__label__0 getClientConnectionManager ( ) 
__label__1 ['config.getInputShipStrategy'  '('  '0'  ')'] 
__label__0 testTLS ( Cert.CLIENT_PEM_ROOT_CA , Trust.SERVER_JKS , Cert.SERVER_JKS , Trust.CLIENT_PEM_ROOT_CA ) .requiresClientAuth ( ) .serverUsesCrl ( ) 
__label__1 ['writer.write'  '('  'line'  ')'] 
__label__1 ['factory.get'  '('  'sResultClass'  ' '  'NO_ANNOTATIONS'  ' '  'retrofit'  ')'] 
__label__0 latch.await ( 600 , TimeUnit.SECONDS ) 
__label__0 cachedMessages=b.getBroadcasterConfig ( ) .applyFilters ( r , t ) 
__label__1 ['ActionsEnum.valueOf'  '('  'action'  ')'] 
__label__1 ['element.getChildByName'  '('  '``'  'properties'  "''"  ')'] 
__label__1 ['filter.setPageSize'  '('  '3'  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Getting'  'synchronous'  'method'  'stub'  'from'  'channel'  "''"  ')'] 
__label__0 new ArrayList < > ( ) 
__label__0 FilteredBatchServerViewProvider.class 
__label__0 DateTimeZone.forID ( `` Asia/Shanghai '' ) 
__label__0 localCache.put ( name , cacheEntry ) 
__label__0 event.isTouchFocusCancel ( ) || ! calculatePositionAndValue ( x , y ) 
__label__1 ['columnType.equalsIgnoreCase'  '('  '``'  'double'  "''"  ')'] 
__label__1 ['url.getServiceInterface'  '('  ')'] 
__label__0 sizeNeeded > items.length 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['UserGroupInformation.getLoginUser'  '('  ')'  '.reloginFromKeytab'  '('  ')'] 
__label__1 ['GL20.glUniform2'  '('  'location'  ' '  'toFloatBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '<'  '<'  '1'  ')'  ')'] 
__label__0 ClosedChannelException e 
__label__1 ['details.put'  '('  'fileName'  ' '  'Long.toString'  '('  'timestamp'  ')'  ')'] 
__label__1 ['acquiredChannelCount'  '<'  '='  'maxConnections'] 
__label__1 ['new'  'IllegalStateException'  '('  ')'] 
__label__1 ['delegate.getChild'  '('  'element'  ')'] 
__label__1 ['new'  'HttpParameter'  '('  '``'  'retweets'  "''"  ' '  'enableDeviceNotification'  ')'] 
__label__0 Thread.sleep ( 2000 ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastSerialClassRunner.class'  ')'  '@'  'Category'  '('  'SlowTest.class'  ')'  'public'  'class'  'ReplicatedMapTtlTest'  'extends'  'ReplicatedMapBaseTest'  '{'  '@'  'Test'  'public'  'void'  'testPutWithTTL_withMigration'  '('  ')'  'throws'  'Exception'  '{'  'int'  'nodeCount=1'  ';'  'int'  'keyCount=10000'  ';'  'int'  'operationCount=10000'  ';'  'int'  'threadCount=15'  ';'  'int'  'ttl=500'  ';'  'testPutWithTTL'  '('  'nodeCount'  ' '  'keyCount'  ' '  'operationCount'  ' '  'threadCount'  ' '  'ttl'  ' '  'true'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testPutWithTTL_withoutMigration'  '('  ')'  'throws'  'Exception'  '{'  'int'  'nodeCount=5'  ';'  'int'  'keyCount=10000'  ';'  'int'  'operationCount=10000'  ';'  'int'  'threadCount=10'  ';'  'int'  'ttl=500'  ';'  'testPutWithTTL'  '('  'nodeCount'  ' '  'keyCount'  ' '  'operationCount'  ' '  'threadCount'  ' '  'ttl'  ' '  'false'  ')'  ';'  '}'  'private'  'void'  'testPutWithTTL'  '('  'int'  'nodeCount'  ' '  'int'  'keyCount'  ' '  'int'  'operationCount'  ' '  'int'  'threadCount'  ' '  'int'  'ttl'  ' '  'boolean'  'causeMigration'  ')'  'throws'  'InterruptedException'  '{'  'TimeUnit'  'timeUnit=TimeUnit.MILLISECONDS'  ';'  'TestHazelcastInstanceFactory'  'factory=createHazelcastInstanceFactory'  '('  ')'  ';'  'HazelcastInstance'  '['  ']'  'instances=factory.newInstances'  '('  'null'  ' '  'nodeCount'  ')'  ';'  'String'  'mapName=randomMapName'  '('  ')'  ';'  'List'  '<'  'ReplicatedMap'  '>'  'maps=createMapOnEachInstance'  '('  'instances'  ' '  'mapName'  ')'  ';'  'ArrayList'  '<'  'Integer'  '>'  'keys=generateRandomIntegerList'  '('  'keyCount'  ')'  ';'  'Thread'  '['  ']'  'threads=createThreads'  '('  'threadCount'  ' '  'maps'  ' '  'keys'  ' '  'ttl'  ' '  'timeUnit'  ' '  'operationCount'  ')'  ';'  'for'  '('  'Thread'  'thread'  ':'  'threads'  ')'  '{'  'thread.start'  '('  ')'  ';'  '}'  'HazelcastInstance'  'instance=null'  ';'  'if'  '('  'causeMigration'  ')'  '{'  'instance=factory.newHazelcastInstance'  '('  ')'  ';'  '}'  'for'  '('  'Thread'  'thread'  ':'  'threads'  ')'  '{'  'thread.join'  '('  ')'  ';'  '}'  'if'  '('  'causeMigration'  ')'  '{'  'ReplicatedMap'  '<'  'Object'  ' '  'Object'  '>'  'map=instance.getReplicatedMap'  '('  'mapName'  ')'  ';'  'maps.add'  '('  'map'  ')'  ';'  '}'  'for'  '('  'ReplicatedMap'  'map'  ':'  'maps'  ')'  '{'  'assertSizeEventually'  '('  '0'  ' '  'map 60'  ')'  ';'  '}'  '}'  'private'  'Thread'  '['  ']'  'createThreads'  '('  'int'  'count'  ' '  'List'  '<'  'ReplicatedMap'  '>'  'maps'  ' '  'ArrayList'  '<'  'Integer'  '>'  'keys'  ' '  'long'  'ttl'  ' '  'TimeUnit'  'timeunit'  ' '  'int'  'operations'  ')'  '{'  'Thread'  '['  ']'  'threads=new'  'Thread'  '['  'count'  ']'  ';'  'int'  'size=maps.size'  '('  ')'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'count'  ';'  'i++'  ')'  '{'  'threads'  '['  'i'  ']'  '=createPutOperationThread'  '('  'maps.get'  '('  'i'  '%'  'size'  ')'  ' '  'keys'  ' '  'ttl'  ' '  'timeunit'  ' '  'operations'  ')'  ';'  '}'  'return'  'threads'  ';'  '}'  'private'  'Thread'  'createPutOperationThread'  '('  'final'  'ReplicatedMap'  '<'  'String'  ' '  'Object'  '>'  'map'  ' '  'final'  'ArrayList'  '<'  'Integer'  '>'  'keys'  ' '  'final'  'long'  'ttl'  ' '  'final'  'TimeUnit'  'timeunit'  ' '  'final'  'int'  'operations'  ')'  '{'  'return'  'new'  'Thread'  '('  'new'  'Runnable'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  '{'  'Random'  'random=new'  'Random'  '('  ')'  ';'  'int'  'size=keys.size'  '('  ')'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'operations'  ';'  'i++'  ')'  '{'  'int'  'index=i'  '%'  'size'  ';'  'String'  'key='  "''"  'foo-'  "''"  '+'  'keys.get'  '('  'index'  ')'  ';'  'map.put'  '('  'key'  ' '  'random.nextLong'  '('  ')'  ' 1'  '+'  'random.nextInt'  '('  '('  'int'  ')'  'ttl'  ')'  ' '  'timeunit'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '}'] 
__label__0 processor.open ( w2 , request , AtmosphereResponse.newInstance ( framework.getAtmosphereConfig ( ) , request , w ) ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 conceptToValidate.getUuid ( ) 
__label__0 assertOpenEventually ( `` responseLatch '' , responseLatch ) 
__label__1 ['StringUtils.isEmpty'  '('  'parameter'  ')'] 
__label__1 ['new'  'File'  '('  'value'  ')'  '.getPath'  '('  ')'] 
__label__0 Bytes.toBytes ( tableNameOrRegionName ) 
__label__1 ['PathUtils.concatPath'  '('  'filePath'  ' '  'YML_FILE_DIR'  ')'] 
__label__0 assertEquals ( `` val-2 '' , mock.getExchanges ( ) .get ( 1 ) .getIn ( ) .getHeader ( ChronicleEngineConstants.OLD_VALUE ) ) 
__label__0 visitStatement ( node , context ) 
__label__1 ['globalExecutionStats.getSplits'  '('  ')'] 
__label__0 getSessionTimeout ( ) .getSeconds ( ) 
__label__0 buildPages.getTypesWithoutHash ( ) 
__label__1 ['new'  'IllegalStateException'  '('  ')'] 
__label__0 booleanProperty ( DYNAMIC_SCHEDULE_FOR_GROUPED_EXECUTION , '' Experimental : Use dynamic schedule for grouped execution when possible '' , featuresConfig.isDynamicScheduleForGroupedExecutionEnabled ( ) , false ) 
__label__1 ['testConsumerConfig'  '('  ')'] 
__label__1 ['items'  '['  '24'  ']'] 
__label__1 ['assertEquals'  '('  '6358482'  ' '  'received.get'  '('  '0'  ')'  '['  '1'  ']'  ')'] 
__label__1 ['outputBufferProcessors=5'] 
__label__0 waitLatch.await ( 1000 , TimeUnit.MILLISECONDS ) 
__label__1 ['FISHING_ROD'  '('  '346 1 32'  ')'] 
__label__1 ['ENGLISH_BIDIRECTIONAL_SENTENCE_ACCURACY=.564'] 
__label__0 System.getProperty ( `` RecoveryEnvironmentBean.expiryScannerClassNames '' ) ! = null || System.getProperty ( `` com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean.expiryScannerClassNames '' ) ! = null 
__label__1 ['getTokenNames'  '('  ')'] 
__label__0 registry.bind ( `` myConf '' , new XmlConfiguration ( getClass ( ) .getResource ( `` /ehcache/ehcache-file-config.xml '' ) ) ) 
__label__1 ['Bullet.init'  '('  ')'] 
__label__1 ['MetricMonitorValues.getMetric'  '('  'metrics'  ' '  'TRANSACTION_UNSAMPLED_NEW'  ' '  'UNSUPPORTED_GAUGE'  ')'] 
__label__0 d.setDefaultEncoding ( servletContainer.getDefaultEncoding ( ) ) 
__label__1 ['processor.open'  '('  'w'  ' '  'request'  ')'] 
__label__0 mSizeOnTier.containsKey ( tierAlias ) ? mSizeOnTier.get ( tierAlias ) : 0L 
__label__1 ['wrapper.shutdownNow'  '('  ')'] 
__label__0 executor.execute ( new NamedRunnable ( `` OkHttp Window Update % s stream % d '' , hostName , streamId ) { @ Override public void execute ( ) { try { frameWriter.windowUpdate ( streamId , unacknowledgedBytesRead ) ; } catch ( IOException ignored ) { } } } ) 
__label__1 ['found.size'  '('  ')'  '=='  '1'] 
__label__1 ['getLog'  '('  ')'  '.error'  '('  '``'  'register'  'druid-driver'  'mbean'  'error'  "''"  ' '  'ex'  ')'] 
__label__0 Assert.fail ( `` createDirectory was expected to fail with FileAlreadyExistsException '' ) 
__label__0 AtmosphereResponse.newInstance ( ) 
__label__0 writtenIntermediatePhysicalDataSize+=stageStats.getPhysicalWrittenDataSize ( ) .toBytes ( ) 
__label__0 JsonObject.createObjectMapper ( ) .getFactory ( ) 
__label__1 ['items'  '['  '17'  ']'] 
__label__0 public Builder setSSLContext ( final SSLContext sslContext ) { configBuilder.setSSLContext ( sslContext ) ; return this ; } 
__label__1 ['LOG.error'  '('  '``'  'OpenTracing'  ':'  'Failed'  'to'  'capture'  'tracing'  'data'  "''"  ' '  't'  ')'] 
__label__1 ['return'  'false'  ';'] 
__label__1 ['!'  'mpline.contains'  '('  'boundary'  ')'] 
__label__1 ['final'  'Command'  'cmd'] 
__label__1 ['AvailablePortFinder.getNextAvailable'  '('  ')'] 
__label__0 ASYNC_PRODUCER_THREAD.getStackTrace ( ) 
__label__0 mViewAbove.setCurrentItem ( 0 , animate ) 
__label__1 ['assertClusterSize'  '('  '2'  ' '  'nodes'  '['  '0'  ']'  ')'] 
__label__0 GL20.glUniform1fv ( location , v ) 
__label__0 getHandledPredicate ( ) 
__label__0 includedGroup == null 
__label__0 registry.bind ( `` sessionStateListener '' , new SessionStateListener ( ) { @ Override public void onStateChange ( SessionState arg0 , SessionState arg1 , Session arg2 ) { } } ) 
__label__1 ['logger.debug'  '('  '``'  'Trying'  'to'  'map'  '{'  '}'  'to'  '{'  '}'  "''"  ' '  't'  ' '  'path'  ')'] 
__label__0 latch.await ( 20 , SECONDS ) 
__label__1 ['DeletionRetentionStrategy.class'] 
__label__1 ['DEFAULT_HEAP_LIMIT_CAP=500'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 ImmutableSortedSet.of ( `` a '' , '' abbr '' , '' acronym '' , '' address '' , '' area '' , '' b '' , '' bdo '' , '' big '' , '' blockquote '' , '' br '' , '' caption '' , '' cite '' , '' code '' , '' colgroup '' , '' dd '' , '' del '' , '' div '' , '' dfn '' , '' dl '' , '' dt '' , '' em '' , '' fieldset '' , '' font '' , '' h1 '' , '' h2 '' , '' h3 '' , '' h4 '' , '' h5 '' , '' h6 '' , '' hr '' , '' i '' , '' img '' , '' ins '' , '' kbd '' , '' li '' , '' ol '' , '' p '' , '' pre '' , '' q '' , '' samp '' , '' small '' , '' span '' , '' strong '' , '' style '' , '' sub '' , '' sup '' , '' table '' , '' tbody '' , '' td '' , '' tfoot '' , '' th '' , '' thead '' , '' tr '' , '' tt '' , '' u '' , '' ul '' ) 
__label__1 ['pushExecutor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'Push'  'Request'  '['  '%'  's'  ']'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'boolean'  'cancel=pushObserver.onRequest'  '('  'streamId'  ' '  'requestHeaders'  ')'  ';'  'try'  '{'  'if'  '('  'cancel'  ')'  '{'  'frameWriter.rstStream'  '('  'streamId'  ' '  'ErrorCode.CANCEL'  ')'  ';'  'synchronized'  '('  'SpdyConnection.this'  ')'  '{'  'currentPushRequests.remove'  '('  'streamId'  ')'  ';'  '}'  '}'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__0 new S3DataSegmentMover ( mockS3Client , new S3DataSegmentPusherConfig ( ) ) 
__label__0 LOG.info ( `` Node `` + path + `` already exists and this is not a `` + `` retry '' ) 
__label__1 ['LOG.info'  '('  '``'  'Ignoring'  'duplicate'  'journal'  'entry'  'with'  'SN'  '{'  '}'  'when'  'next'  'SN'  'is'  '{'  '}'  "''"  ' '  'newSN'  ' '  'mNextSequenceNumberToRead'  ')'] 
__label__1 ['file.getAbsoluteFile'  '('  ')'] 
__label__0 stats.facetFilter ( standardFilters ( range , filter ) ) 
__label__1 ['retry.attemptRetry'  '('  ')'] 
__label__0 hashFunction.hashBytes ( bigEndian ) 
__label__1 ['javaWriter.emitSingleLineCOmment'  '('  '``'  'foo'  "''"  ')'] 
__label__0 MapPutParameters.encodeSizeCost ( NAME , BYTES_DATA , BYTES_DATA ) 
__label__1 ['verifyViewMethodsNotDeclaredFinal'  '('  'sessionBeanClass'  ' '  'remoteBusinessInterfaces'  ')'] 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__1 ['message.contains'  '('  '``'  '14807'  "''"  ')'  '||'  'message.contains'  '('  '``'  '14883'  "''"  ')'] 
__label__1 ['log.error'  '('  '``'  'Metric='  '['  '%'  's'  ']'  'has'  'no'  'StatsD'  'type'  'mapping'  "''"  ' '  'statsDMetric'  ')'] 
__label__0 routes.ExtractorsResource ( ) .create ( input.getId ( ) ) 
__label__0 GL.glGenTextures ( n , toBuffer ( textures , offset ) ,0 ) 
__label__0 excludesPattern == null || requestURI == null 
__label__0 DatabaseDescriptor.getListenAddress ( ) .getHostAddress ( ) 
__label__1 ['logger.info'  '('  '``'  'Aliasing'  'common'  'strings'  "''"  ')'] 
__label__1 ['new'  'VariableInformation'  '('  '10'  ' '  "''"  'Total'  'operation'  'time'  'compressor'  "''"  ' '  'NibeDataType.S32'  ' '  'Type.Sensor'  ')'] 
__label__0 t.getDeclaredConstructors ( ) 
__label__0 bytesToString ( data ) .split ( `` & '' , -1 ) 
__label__1 ['new'  'CheckPermission'  '('  ')'  '.of'  '('  '``'  'all'  "''"  ')'  '.against'  '('  '``'  'deploy'  "''"  ')'  '.expect'  '('  'false'  ')'] 
__label__1 ['new'  'GeoLocation'  '('  'array.getDouble'  '('  '0'  ')'  ' '  'array.getDouble'  '('  '1'  ')'  ')'] 
__label__0 endsWith ( `` /home/source '' ) 
__label__1 ['TestSuite'  'testSuite=new'  'TestSuite'  '('  'testClass'  ')'  ';'] 
__label__1 ['invoke'  '('  'agentInfoList'  ' '  'payload'  ' '  'DEFUALT_FUTURE_TIMEOUT'  ')'] 
__label__0 new StringBuilder ( 50 ) 
__label__0 NodeTraversal.traverseEs6 ( compiler , scriptRoot , this ) 
__label__1 ['Assert.assertEquals'  '('  '1457'  ' '  'details.get'  '('  '6'  ')'  '.getAbsolutePosition'  '('  ')'  ')'] 
__label__0 new IllegalStateException ( `` Result is already complete : failed '' ) 
__label__0 getTokenDisplayNames ( ) 
__label__1 ['AtmosphereResponse.create'  '('  ')'] 
__label__0 AtmosphereResourceImpl.class.cast ( resource ) 
__label__0 metric instanceof MetricsRate || metric instanceof MetricsString || metric instanceof MetricsHistogram|| metric instanceof ExactCounterMetric 
__label__1 ['clientInvocation.invokeUrgent'  '('  ')'  '.andThen'  '('  'new'  'ExecutionCallback'  '<'  'ClientMessage'  '>'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'onResponse'  '('  'ClientMessage'  'response'  ')'  '{'  'if'  '('  'connection.isAlive'  '('  ')'  ')'  '{'  'connection.onHeartbeatReceived'  '('  ')'  ';'  '}'  '}'  '@'  'Override'  'public'  'void'  'onFailure'  '('  'Throwable'  't'  ')'  '{'  'if'  '('  'connection.isAlive'  '('  ')'  ')'  '{'  'logger.warning'  '('  '``'  'Error'  'receiving'  'heartbeat'  'for'  'connection'  ':'  '``'  '+'  'connection'  ' '  't'  ')'  ';'  '}'  '}'  '}'  ')'] 
__label__0 AstUtils.hasAtLeastOneAnnotation ( classNode , '' Controller '' , '' EnableWebMvc '' ) 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__1 ['assertEquals'  '('  '``'  'There'  'should'  'be'  'no'  'files'  "''"  ' '  'files.length 0'  ')'] 
__label__0 mTfs.mkdirs ( new TachyonURI ( dirPath ) , true ) 
__label__0 DEFAULT_USER_AS_DEFAULT_QUEUE=true 
__label__0 HiveRexUtil.simplify ( rexBuilder , node ) 
__label__1 ['GL20.glUniform3'  '('  'location'  ' '  'v'  ')'] 
__label__1 ['GL20.glUniform3'  '('  'location'  ' '  'v'  ')'] 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__1 ['fileName.startsWith'  '('  '``'  '/'  "''"  ')'] 
__label__0 / * * * Service invocation retry times * @ see Constants # DEFAULT_RETRIES * / int retries ( ) default 2 ; 
__label__1 ['Color.fromRGB'  '('  '0x3B511A'  ')'] 
__label__1 ['private'  'final'  'Executor'  'eventExecutor'  ';'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/public_timeline.json '' , null , new Paging ( ( long ) sinceID ) .asPostParameterList ( Paging.S ) , false ) ) 
__label__0 InetAddress.getByName ( `` 127.0.0.1 '' ) 
__label__1 ['clearFromMember.start'  '('  ')'] 
__label__1 ['restEnableGzip=false'] 
__label__1 ['logger.info'  '('  '``'  'Expanding'  'Jquery'  'Aliases'  "''"  ')'] 
__label__0 otherWriter.write ( line ) 
__label__1 ['LOG.error'  '('  '``'  'register'  'druid-driver'  'mbean'  'error'  "''"  ' '  'ex'  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__0 incomingDir.mkdirs ( ) 
__label__0 assertThat ( throttledLines ( Duration.milliseconds ( 100 ) ) ) .doesNotHaveDuplicates ( ) .haveAtLeast ( 9 , containsApplicationLog ) .haveAtMost ( 13 , containsApplicationLog ) 
__label__0 removeQuotes ( timestring.trim ( ) ) 
__label__1 ['this.getNotEmptyWaitThreadPeak'  '('  ')'] 
__label__1 ['handleSecurityPermissionActions'  '('  'principalNode'  ' '  'permConfig'  ')'] 
__label__0 LOG.debug ( `` Creating netty input stream for block { } @ { } from client { } '' , blockId , address , NetworkAddressUtils.getClientHostName ( ) ) 
__label__0 SOURCE_PATH.deref ( ) 
__label__0 IOUtils.closeQuietly ( is ) 
__label__1 ['Executors.newCachedThreadPool'  '('  'new'  'ThreadFactory'  '('  ')'  '{'  'private'  'AtomicInteger'  'count=new'  'AtomicInteger'  '('  ')'  ';'  '@'  'Override'  'public'  'Thread'  'newThread'  '('  'final'  'Runnable'  'runnable'  ')'  '{'  'return'  'new'  'Thread'  '('  'runnable'  ' '  "''"  'Atmosphere-BroadcasterConfig-'  "''"  '+'  'count.getAndIncrement'  '('  ')'  ')'  ';'  '}'  '}'  ')'] 
__label__1 ['assertFalse'  '('  'user.isGeoEnabled'  '('  ')'  ')'] 
__label__0 collisionPoints.get ( 0 ) 
__label__1 ['public'  'DerivedBuilder'  'setRequestCompressionLevel'  '('  'int'  'requestCompressionLevel'  ')'  '{'  'configBuilder.setRequestCompressionLevel'  '('  'requestCompressionLevel'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__0 LOG.warn ( `` Unable to close socket selector '' ) 
__label__1 ['conf.getInt'  '('  'Constants.TFS_PERMISSIONS_UMASK_KEY'  ' '  'Constants.DEFAULT_TFS_PERMISSIONS_UMASK'  ')'] 
__label__1 ['MockReset.before'  '('  ')'] 
__label__0 { ( byte ) this.getNode ( ) .getNodeId ( ) ,2 , ( byte ) getCommandClass ( ) .getKey ( ) , ( byte ) SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE } 
__label__1 ['/'  '*'  '*'  '*'  '@'  'author'  'Eric'  'Vergnaud'  '*'  '/'  'public'  'class'  'Python2Target'  'extends'  'AbstractPython3Target'  '{'  'protected'  'static'  'final'  'String'  '['  ']'  'python2Keywords='  '{'  '``'  'abs'  "''"  ' '  "''"  'all'  "''"  ' '  "''"  'any'  "''"  ' '  "''"  'apply'  "''"  ' '  "''"  'as'  "''"  ' '  "''"  'bin'  "''"  ' '  "''"  'bool'  "''"  ' '  "''"  'buffer'  "''"  ' '  "''"  'bytearray'  "''"  ' '  "''"  'callable'  "''"  ' '  "''"  'chr'  "''"  ' '  "''"  'classmethod'  "''"  ' '  "''"  'coerce'  "''"  ' '  "''"  'compile'  "''"  ' '  "''"  'complex'  "''"  ' '  "''"  'delattr'  "''"  ' '  "''"  'dict'  "''"  ' '  "''"  'dir'  "''"  ' '  "''"  'divmod'  "''"  ' '  "''"  'enumerate'  "''"  ' '  "''"  'eval'  "''"  ' '  "''"  'execfile'  "''"  ' '  "''"  'file'  "''"  ' '  "''"  'filter'  "''"  ' '  "''"  'float'  "''"  ' '  "''"  'format'  "''"  ' '  "''"  'frozenset'  "''"  ' '  "''"  'getattr'  "''"  ' '  "''"  'globals'  "''"  ' '  "''"  'hasattr'  "''"  ' '  "''"  'hash'  "''"  ' '  "''"  'help'  "''"  ' '  "''"  'hex'  "''"  ' '  "''"  'id'  "''"  ' '  "''"  'input'  "''"  ' '  "''"  'int'  "''"  ' '  "''"  'intern'  "''"  ' '  "''"  'isinstance'  "''"  ' '  "''"  'issubclass'  "''"  ' '  "''"  'iter'  "''"  ' '  "''"  'len'  "''"  ' '  "''"  'list'  "''"  ' '  "''"  'locals'  "''"  ' '  "''"  'map'  "''"  ' '  "''"  'max'  "''"  ' '  "''"  'min'  "''"  ' '  "''"  'next'  "''"  ' '  "''"  'memoryview'  "''"  ' '  "''"  'object'  "''"  ' '  "''"  'oct'  "''"  ' '  "''"  'open'  "''"  ' '  "''"  'ord'  "''"  ' '  "''"  'pow'  "''"  ' '  "''"  'print'  "''"  ' '  "''"  'property'  "''"  ' '  "''"  'range'  "''"  ' '  "''"  'raw_input'  "''"  ' '  "''"  'reduce'  "''"  ' '  "''"  'reload'  "''"  ' '  "''"  'repr'  "''"  ' '  "''"  'reversed'  "''"  ' '  "''"  'round'  "''"  ' '  "''"  'set'  "''"  ' '  "''"  'setattr'  "''"  ' '  "''"  'slice'  "''"  ' '  "''"  'sorted'  "''"  ' '  "''"  'staticmethod'  "''"  ' '  "''"  'str'  "''"  ' '  "''"  'sum'  "''"  ' '  "''"  'super'  "''"  ' '  "''"  'tuple'  "''"  ' '  "''"  'type'  "''"  ' '  "''"  'unichr'  "''"  ' '  "''"  'unicode'  "''"  ' '  "''"  'vars'  "''"  ' '  "''"  'with'  "''"  ' '  "''"  'xrange'  "''"  ' '  "''"  'zip'  "''"  ' '  "''"  '__import__'  "''"  ' '  "''"  'True'  "''"  ' '  "''"  'False'  "''"  ' '  "''"  'None'  "''"  '}'  ';'  '/'  '*'  '*'  '*'  'Avoid'  'grammar'  'symbols'  'in'  'this'  'set'  'to'  'prevent'  'conflicts'  'in'  'gen'  "'d"  'code'  '.'  '*'  '/'  'protected'  'final'  'Set'  '<'  'String'  '>'  'badWords=new'  'HashSet'  '<'  'String'  '>'  '('  ')'  ';'  'public'  'Python2Target'  '('  'CodeGenerator'  'gen'  ')'  '{'  'super'  '('  'gen'  ' '  "''"  'Python2'  "''"  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'getVersion'  '('  ')'  '{'  'return'  '``'  '4.4.0'  "''"  ';'  '}'  'public'  'Set'  '<'  'String'  '>'  'getBadWords'  '('  ')'  '{'  'if'  '('  'badWords.isEmpty'  '('  ')'  ')'  '{'  'addBadWords'  '('  ')'  ';'  '}'  'return'  'badWords'  ';'  '}'  'protected'  'void'  'addBadWords'  '('  ')'  '{'  'badWords.addAll'  '('  'Arrays.asList'  '('  'python2Keywords'  ')'  ')'  ';'  'badWords.add'  '('  '``'  'rule'  "''"  ')'  ';'  'badWords.add'  '('  '``'  'parserRule'  "''"  ')'  ';'  '}'  '}'] 
__label__0 EXTFramebufferObject.glGetRenderbufferParameterivEXT ( target , pname , params ) 
__label__1 ['JSError.make'  '('  'declNode'  ' '  'TypeCheck.CONFLICTING_SHAPE_TYPE'  ' '  'className'  ' '  "''"  'dict'  "''"  ' '  "''"  'dict'  "''"  ')'] 
__label__1 ['mapConfig.getTotalBackupCount'  '('  ')'] 
__label__1 ['value'  '|'  '0xff'] 
__label__1 ['contentType'  '!'  '='  'null'] 
__label__1 ['/'  '*'  '*'  '*'  'Represents'  'the'  'default'  'formatter'  'for'  'log'  'message'  '.'  'Default'  'log'  'message'  'format'  'is'  ':'  '['  'SEVERITY'  'LEVEL'  ']'  'filePath'  ':'  'lineNo'  ':'  'columnNo'  ':'  'message'  '.'  '['  'CheckName'  ']'  '*'  '@'  'author'  'Andrei'  'Selkin'  '*'  '/'  'public'  'class'  'AuditEventDefaultFormatter'  'implements'  'AuditEvemtFormatter'  '{'  '/'  '*'  '*'  '*'  'Length'  'of'  'all'  'separators'  '.'  '*'  '/'  'private'  'static'  'final'  'int'  'LENGTH_OF_ALL_SEPARATORS=10'  ';'  '/'  '*'  '*'  '*'  'Suffix'  'of'  'module'  'names'  'like'  'XXXXCheck'  '.'  '*'  '/'  'private'  'static'  'final'  'String'  'SUFFIX='  "''"  'Check'  "''"  ';'  '@'  'Override'  'public'  'String'  'format'  '('  'AuditEvent'  'event'  ')'  '{'  'final'  'String'  'fileName=event.getFileName'  '('  ')'  ';'  'final'  'String'  'message=event.getMessage'  '('  ')'  ';'  'final'  'SeverityLevel'  'severityLevel=event.getSeverityLevel'  '('  ')'  ';'  'final'  'String'  'severityLevelName'  ';'  'if'  '('  'severityLevel'  '=='  'SeverityLevel.WARNING'  ')'  '{'  'severityLevelName='  "''"  'WARN'  "''"  ';'  '}'  'else'  '{'  'severityLevelName=severityLevel.getName'  '('  ')'  '.toUpperCase'  '('  'Locale.US'  ')'  ';'  '}'  'final'  'int'  'bufLen=calculateBufferLength'  '('  'event'  ' '  'severityLevelName.length'  '('  ')'  ')'  ';'  'final'  'StringBuilder'  'sb=new'  'StringBuilder'  '('  'bufLen'  ')'  ';'  'sb.append'  '('  "'"  '['  "'"  ')'  '.append'  '('  'severityLevelName'  ')'  '.append'  '('  '``'  ']'  '``'  ')'  '.append'  '('  'fileName'  ')'  '.append'  '('  "'"  ':'  "'"  ')'  '.append'  '('  'event.getLine'  '('  ')'  ')'  ';'  'if'  '('  'event.getColumn'  '('  ')'  '>'  '0'  ')'  '{'  'sb.append'  '('  "'"  ':'  "'"  ')'  '.append'  '('  'event.getColumn'  '('  ')'  ')'  ';'  '}'  'sb.append'  '('  '``'  ':'  '``'  ')'  '.append'  '('  'message'  ')'  ';'  'final'  'String'  'checkShortName=getCheckShortName'  '('  'event'  ')'  ';'  'sb.append'  '('  '``'  '['  '``'  ')'  '.append'  '('  'checkShortName'  ')'  '.append'  '('  "'"  ']'  "'"  ')'  ';'  'return'  'sb.toString'  '('  ')'  ';'  '}'  '/'  '*'  '*'  '*'  'Returns'  'the'  'length'  'of'  'the'  'buffer'  'for'  'StringBuilder'  '.'  'bufferLength'  '='  'fileNameLength'  '+'  'messageLength'  '+'  'lengthOfAllSeparators'  '+'  '+'  'severityNameLength'  '+'  'checkNameLength'  '.'  '*'  '@'  'param'  'event'  'audit'  'event'  '.'  '*'  '@'  'param'  'severityLevelNameLength'  'length'  'of'  'severity'  'level'  'name'  '.'  '*'  '@'  'return'  'the'  'length'  'of'  'the'  'buffer'  'for'  'StringBuilder'  '.'  '*'  '/'  'private'  'static'  'int'  'calculateBufferLength'  '('  'AuditEvent'  'event'  ' '  'int'  'severityLevelNameLength'  ')'  '{'  'return'  'LENGTH_OF_ALL_SEPARATORS'  '+'  'event.getFileName'  '('  ')'  '.length'  '('  ')'  '+'  'event.getMessage'  '('  ')'  '.length'  '('  ')'  '+'  'severityLevelNameLength+'  'getCheckShortName'  '('  'event'  ')'  '.length'  '('  ')'  ';'  '}'  '/'  '*'  '*'  '*'  'Returns'  'check'  'name'  'without'  "'Check"  "'"  'suffix'  '.'  '*'  '@'  'param'  'event'  'audit'  'ivent'  '.'  '*'  '@'  'return'  'check'  'name'  'without'  "'Check"  "'"  'suffix'  '.'  '*'  '/'  'private'  'static'  'String'  'getCheckShortName'  '('  'AuditEvent'  'event'  ')'  '{'  'final'  'String'  'checkFullName=event.getSourceName'  '('  ')'  ';'  'final'  'String'  'checkShortName'  ';'  'final'  'int'  'lastDotIndex=checkFullName.lastIndexOf'  '('  "'"  '.'  "'"  ')'  ';'  'if'  '('  'lastDotIndex'  '=='  '-1'  ')'  '{'  'if'  '('  'checkFullName.endsWith'  '('  'SUFFIX'  ')'  ')'  '{'  'checkShortName=checkFullName.substring'  '('  '0'  ' '  'checkFullName.lastIndexOf'  '('  'SUFFIX'  ')'  ')'  ';'  '}'  'else'  '{'  'checkShortName=checkFullName.substring'  '('  '0'  ' '  'checkFullName.length'  '('  ')'  ')'  ';'  '}'  '}'  'else'  '{'  'if'  '('  'checkFullName.endsWith'  '('  'SUFFIX'  ')'  ')'  '{'  'checkShortName=checkFullName.substring'  '('  'lastDotIndex'  '+'  '1'  ' '  'checkFullName.lastIndexOf'  '('  'SUFFIX'  ')'  ')'  ';'  '}'  'else'  '{'  'checkShortName=checkFullName.substring'  '('  'lastDotIndex'  '+'  '1'  ' '  'checkFullName.length'  '('  ')'  ')'  ';'  '}'  '}'  'return'  'checkShortName'  ';'  '}'  '}'] 
__label__1 ['public'  'IMetric'  'registerMetric'  '('  'String'  'name'  ' '  'ICombiner'  'combiner'  ' '  'int'  'timeBucketSizeInSecs'  ')'  '{'  'return'  'registerMetric'  '('  'name'  ' '  'new'  'CombinedMetric'  '('  'combiner'  ')'  ' '  'timeBucketSizeInSecs'  ')'  ';'  '}'] 
__label__1 ['Maps.newHashMap'  '('  ')'] 
__label__0 superClass == Object.class || superClass == null 
__label__1 ['testClass.getMethod'  '('  'SUITE_METHODNAME'  ' '  'new'  'Class'  '['  '0'  ']'  ')'] 
__label__1 ['request.getRequestURI'  '('  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  'worker'  ')'] 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['rSocketMessageHandler.serverResponder'  '('  ')'] 
__label__1 ['registry.put'  '('  '``'  'params'  "''"  ' '  'params'  ')'] 
__label__1 ['Objects.isNull'  '('  'value'  ')'] 
__label__1 ['JSError.make'  '('  'AbstractCompiler.READ_ERROR'  ' '  'getName'  '('  ')'  ')'] 
__label__1 ['('  'JobFound'  ')'  'response'] 
__label__1 ['Byte.valueOf'  '('  'value.toString'  '('  ')'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'register'  'druid-driver'  'mbean'  'error'  "''"  ' '  'ex'  ')'] 
__label__1 ['Site.me'  '('  ')'  '.setRetryTimes'  '('  '3'  ')'  '.setSleepTime'  '('  '0'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__1 ['Color.fromRGB'  '('  '0xDECF2A'  ')'] 
__label__0 mock.expectedMinimumMessageCount ( 3 ) 
__label__1 ['BeanMapper.mapList'  '('  'books'  ' '  'Book.class'  ' '  'BookDto.class'  ')'] 
__label__0 mMountTable.resolve ( getPath ( dir ) ) .toString ( ) 
__label__1 ['toHeapData'  '('  'key'  ')'] 
__label__1 ['GL11.glGetTexParameter'  '('  'target'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 markChannelNotReadable ( channel.getPipeline ( ) .getContext ( NettyAsyncHttpProvider.class ) ) 
__label__1 ['private'  'final'  'StringBuffer'  'tmpSb=new'  'StringBuffer'  '('  ')'  ';'] 
__label__1 ['type'  '=='  'TokenTypes.CLASS_DEF'] 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['WebSocketEventListener.class.cast'  '('  'l'  ')'  '.onMessage'  '('  'event'  ')'] 
__label__0 factory.get ( mBodyClass , NO_ANNOTATIONS , retrofit ) 
__label__0 new HttpDigestAuthFilter ( DIGEST_TEST_LOGIN , DIGEST_TEST_PASS ) 
__label__0 item == null || item.getStatus ( ) < 2 
__label__0 factory.getEmbeddedServletContainer ( exampleServletRegistration ( ) , new FilterRegistrationBean ( new ExampleFilter ( ) ) ) 
__label__1 ['n.getNodeData'  '('  ')'  '.getId'  '('  ')'  '.toLowerCase'  '('  ')'  '.contains'  '('  'str'  ')'] 
__label__0 new DropTableEvent ( tbl , success , deleteData , this ) 
__label__0 DynamicAttributeRanking.refreshMinMax ( this , graph ) 
__label__0 new IOException ( `` should execute connector.connect ( ) first '' ) 
__label__0 file.getAbsolutePath ( ) 
__label__0 request.getPathInfo ( ) 
__label__1 ['/'  '*'  '*'  '*'  'Tests'  'for'  '{'  '@'  'link'  'ClosureSortedDependencies'  '}'  '*'  '/'  'public'  'class'  'ClosureSortedDependenciesTest'  'extends'  'SortedDependenciesTest'  '{'  '@'  'Override'  'public'  'SortedDependencies'  '<'  'SimpleDependencyInfo'  '>'  'createSortedDependencies'  '('  'List'  '<'  'SimpleDependencyInfo'  '>'  'shuffled'  ')'  'throws'  'CircularDependencyException'  '{'  'return'  'new'  'ClosureSortedDependencies'  '<'  '>'  '('  'shuffled'  ')'  ';'  '}'  '@'  'Override'  'public'  'boolean'  'handlesCycles'  '('  ')'  '{'  'return'  'false'  ';'  '}'  '}'] 
__label__1 ['removeQuote'  '('  'timestring.trim'  '('  ')'  ')'] 
__label__1 ['case'  'QUIT'  ':'] 
__label__0 DeploymentDescription.getReplaceDeploymentOperation ( locale ) 
__label__1 ['listeners'  '!'  '='  'null'] 
__label__1 ['queryPurger.scheduleAtFixedRate'  '('  'new'  'PurgeQueriesRunnable'  '('  'queries.keySet'  '('  ')'  ' '  'queryManager'  ')'  ' 200 200'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__1 ['compare'  '('  'leftValue'  ' '  'rightValue'  ')'  '<'  '0'] 
__label__1 ['assertMockEndpointsSatisifed'  '('  ')'] 
__label__1 ['getTimeout'  '('  ')'] 
__label__1 ['Gdx.input.getX'  '('  ')'] 
__label__0 submittedNode.get ( `` values '' ) == null 
__label__0 person.getPersonVoidReason ( ) 
__label__1 ['future.get'  '('  '10'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'AtomicLongBasicDistributedTest'  'extends'  'AtomicLongBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '2'  ')'  '.newInstances'  '('  ')'  ';'  '}'  '}'] 
__label__1 ['``'  'Using'  'bind'  'address'  ':'  '``'  '+'  'publicAddress'] 
__label__1 ['adapter.makeCursors'  '('  'null'  ' '  'index.getDataInterval'  '('  ')'  ' '  'VirtualColumns.EMPTY'  ' '  'Granularities.ALL'  ' '  'false'  ')'] 
__label__0 ChannelBuffers.buffer ( 2 ) 
__label__1 ['failure.getCause'  '('  ')'] 
__label__1 ['ServiceHelper.startService'  '('  'jmx'  ')'] 
__label__1 ['this.referenceId'  '=='  'referenceId'] 
__label__1 ['stateHolder.reloadVariables'  '('  ')'] 
__label__0 LOG.error ( `` failed to send { } messages to { } : { } '' , numMessages , dstAddressPrefixedName , future.getCause ( ) ) 
__label__1 ['twitter1.checkUserListSubscription'  '('  'id1.screenName'  ' '  'id2.id'  ' '  'userList.getId'  '('  ')'  ')'] 
__label__1 ['registrar.checkExisting'  '('  'metric'  ')'] 
__label__1 ['Wt.getSlice'  '('  'slice'  ')'  '.mult'  '('  'Wt.getSlice'  '('  'slice'  ')'  '.transpose'  '('  ')'  ')'] 
__label__1 ['AlluxioWorkerService.class'] 
__label__0 planNode.getPlanNodeScheduledTime ( ) 
__label__0 userGroupMember.getUserGroupId ( ) 
__label__0 index > = templateTypes.size ( ) 
__label__1 ['o'  'instanceof'  'Attribute'] 
__label__0 RetryHandlingBlockMasterClient.class 
__label__0 new FastPathBalancedQueueRpcExecutor ( `` deafult.FPBQ '' , handlerCount , maxQueueLength , priority , conf , server ) 
__label__0 column.createColumnObserver ( false ) 
__label__1 ['``'  'Using'  'bind'  'address'  ':'  '``'  '+'  'publicAddress'] 
__label__0 invoke ( agentInfoList , payload , DEFAULT_FUTURE_TIMEOUT ) 
__label__1 ['start.expectedMessageCount'  '('  '6'  ')'] 
__label__1 ['ReactiveHelper.scheduleLast'  '('  '('  ')'  '-'  '>'  '{'  'if'  '('  'uow'  '!'  '='  'null'  ')'  '{'  'uow.afterProcess'  '('  'processor'  ' '  'exchange'  ' '  'callback'  ' '  'sync'  ')'  ';'  '}'  'if'  '('  'LOG.isTraceEnabled'  '('  ')'  ')'  '{'  'LOG.trace'  '('  '``'  'Exchange'  'processed'  'and'  'is'  'continued'  'routed'  'asynchronously'  'for'  'exchangeId'  ':'  '{'  '}'  '-'  '>'  '{'  '}'  "''"  ' '  'exchange.getExchangeId'  '('  ')'  ' '  'exchange'  ')'  ';'  '}'  '}'  ' '  "''"  'SharedCamelInternalProcessor'  '-'  'UnitOfWork'  '-'  'afterProcess'  '-'  '``'  '+'  'processor'  '+'  '``'  '-'  '``'  '+'  'exchange.getExchangeId'  '('  ')'  ')'] 
__label__0 new RunnableAdapter < T > ( task ) 
__label__1 ['touchEventPool.free'  '('  'touchEvents'  ')'] 
__label__0 ObjectStreamClass.lookup ( clazz ) 
__label__0 createRecord ( value , now , expiryTime ) 
__label__1 ['bits2'  '['  '1'  ']'  '=='  'false'] 
__label__0 LOG.error ( `` Failed to shut down ActorSystem '' , t ) 
__label__1 ['factory.get'  '('  'sResultClass'  ' '  'NO_ANNOTATIONS'  ' '  'retrofit'  ')'] 
__label__0 font.draw ( batch , results,20,300 ) 
__label__1 ['theClass.getConstructor'  '('  'new'  'Class'  '['  '0'  ']'  ')'] 
__label__0 node.hasDefined ( Constants.ALIAS ) 
__label__1 ['TestSuiteEnvironment.getServerAddress'  '('  ')'] 
__label__0 Assert.assertEquals ( new InetSocketAddress ( defaultHostname,20000 ) , masterAddress ) 
__label__0 LOGGER.debug ( `` no property for `` + type + `` , `` + format ) 
__label__1 ['writeMethod1.addScopedInterceptor'  '('  'NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE'  ' '  'NettyConstants.SCOPE_WRITE'  ' '  'ExecutionPolicy.BOUNDARY'  ')'] 
__label__1 ['timelineObjectHolder.getObject'  '('  ')'  '.getChunk'  '('  '0'  ')'  '.getObject'  '('  ')'  '.getDimensions'  '('  ')'] 
__label__0 initialCapacity > 1 < < 30 
__label__0 input.mark ( bufferSize ) 
__label__0 config.getBroadcasterFactory ( ) .lookup ( a.broadcaster ( ) , path , true ) 
__label__0 new DateTime ( Long.parseLong ( firstTimestamp ) * 1000 , DateTimeZone.UTC ) 
__label__0 Thread.sleep ( 2000 ) 
__label__1 ['seenVertices.contains'  '('  'startAncestor'  ')'] 
__label__1 ['fireMessageReceived'  '('  'ctx'  ' '  'completeMessage'  ')'] 
__label__1 ['``'  'TcpIpConnectionManager'  'configured'  'with'  'Non'  'Blocking'  'IO-threading'  'model'  ':'  '``'  '+'  'inputThreadCount'  '+'  '``'  'input'  'threads'  'and'  '``'  '+'  'outputThreads+'  '``'  'output'  'threads'  "''"] 
__label__1 ['attributeModel'  '!'  '='  'null'] 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectoryAtParent.java '' ) 
__label__1 ['ProtobufUtil.createSnapshotDesc'  '('  'reqSnapshot'  ')'] 
__label__0 lastUpdate.after ( updated ) || lastUpdate.equals ( updated ) 
__label__0 ENDER_PORTAL_FRAME ( 120 ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/public_timeline.json '' , null , new Paging ( ( long ) sinceID ) .asPostParameterList ( Paging.S ) , false ) ) 
__label__0 new StringBuilder ( 729 ) 
__label__0 getTablename ( ) .getName ( ) 
__label__0 UserGroupInformation.getCurrentUser ( ) .checkTGTAndReloginFromKeytab ( ) 
__label__0 waitYieldLatch.await ( ) 
__label__1 ['new'  'JSONParseSpec'  '('  'timestampSpec'  ' '  'new'  'DimensionsSpec'  '('  'dimensions'  ' '  'dimensionExclusions'  ' '  'spatialDimensions'  ')'  ' '  'JSONParseSpec.JSON'  ')'] 
__label__0 connection.psubscribe ( jedisPubSub , patterns ) 
__label__0 sanitizeName ( name ) 
__label__0 byteBuffer.get ( ( SIZEOFLONG - 1 ) - i ) & 0xffL 
__label__0 out.writeData ( function ) 
__label__1 ['DEFAULT_ROW_FLUSH_BOUNDARY=500000'] 
__label__0 removeBlock ( sessionId , blockId , BlockStoreLocation.anyTier ( ) ) 
__label__1 ['closeCode'  '<'  '1002'] 
__label__1 ['proxyServer'  '!'  '='  'null'] 
__label__0 PathUtils.concatPath ( dst , child ) 
__label__1 ['assertOpenEventually'  '('  '``'  'responseLatch'  "''"  ' '  'responseLatch 5'  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'short'  'circuit'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ')'] 
__label__0 activeFrom.getTime ( ) 
__label__1 ['handshakeStatus'  '=='  'HandshakeStatus.NOT_HANDSHAKING'] 
__label__1 ['titleLabel.getPrefWidth'  '('  ')'] 
__label__1 ['targetDescription.getClassName'  '('  ')'] 
__label__0 DiagnosticType.disabled ( `` JSC_GOOG_MODULE_IN_NON_MODULE '' , '' goog.module ( ) call must be the first statement in a module . '' ) 
__label__0 call.getStartTime ( ) 
__label__1 ['elementClass'  '!'  '='  'null'] 
__label__1 ['new'  'StringBuilder'  '('  '561'  ')'] 
__label__1 ['public'  'ByteBuf'  'getBufferFor'  '('  'int'  'index'  ')'  'throws'  'IOException'  '{'  'if'  '('  'index'  '<'  '0'  '||'  'index'  '>'  'capacity'  '('  ')'  ')'  '{'  'throw'  'new'  'IndexOutOfBoundsException'  '('  '``'  'Invalid'  'index'  ':'  '``'  '+'  'index'  '+'  '``'  '-'  'Bytes'  'needed'  ':'  '``'  '+'  '('  'index'  ')'  '+'  '``'  ' '  'maximum'  'is'  '``'  '+'  'capacity'  '('  ')'  ')'  ';'  '}'  'int'  'componentId=componentId'  '('  'index'  ')'  ';'  'return'  'components'  '['  'componentId'  ']'  '.duplicate'  '('  ')'  ';'  '}'] 
__label__0 IdentifiedDataSerializable event 
__label__0 details.setProperty ( CONFIG_HASH_KEY , currentConfigHash ) 
__label__0 allowedIdentifiersCheckDigitsInts [ i ] 
__label__1 ['VertexAttribute.Color'  '('  ')'] 
__label__1 ['mock.message'  '('  '0'  ')'  '.outBody'  '('  'String.class'  ')'] 
__label__1 ['assertCompositeByteBufIsBufferCopyNeededForWrite'  '('  'alloc 2 0'  ' '  'false'  ')'] 
__label__0 startTest ( getMethodName ( ) ) 
__label__0 assertEquals ( `` Unable to read 2 bytes , got 0 '' , ex.getCause ( ) .getMessage ( ) ) 
__label__1 ['EJBException'  'nsee'] 
__label__0 ResponseBody.create ( new byte [ 0 ] , MediaType.get ( `` text/plain '' ) ) 
__label__1 ['AbstractBootstrap'  '<'  'ServerBootstrap'  ' '  'ServerChannel'  '>'] 
__label__1 ['context.getContextPath'  '('  ')'] 
__label__0 location.equals ( BlockStoreLocation.anyDirInTier ( tierAlias ) ) 
__label__0 getExecutorService ( `` hz.initialization '' ) 
__label__0 first=word.substring ( 0,3 ) 
__label__1 ['Pattern.compile'  '('  'CURRENT_DIR'  ')'] 
__label__0 groupingSets.isEmpty ( ) 
__label__1 ['chain.filter'  '('  'exchange'  ')'  '.compose'  '('  '('  'call'  ')'  '-'  '>'  'filter'  '('  'exchange'  ' '  'call'  ')'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'shut'  'down'  'ActorSystem'  "''"  ')'] 
__label__0 NettyConnectionsPool.class 
__label__1 ['namespace.equals'  '('  '``'  "''"  ')'] 
__label__1 ['new'  'BranchedDataException'  '('  'e'  ')'] 
__label__1 ['content'  '('  ')'  '.copy'  '('  ')'] 
__label__0 / * * * @ see ConceptService # getCountOfConceptReferenceTerms ( String , ConceptSource , boolean ) * / public Long getCountOfConceptReferenceTerms ( String query , ConceptSource conceptSource , boolean includeRetired ) throws DAOException ; 
__label__0 GeneralError.modify ( httpRequest , httpResponse , body , requestWrapper , responseWrapper , generalException ) 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'helloForNone'  "''"  ')'  ')'] 
__label__0 new MainMenu ( Gdx.app ) 
__label__1 ['_availMemory'  '+'  'amount'] 
__label__1 ['getMemberships'  '('  ')'  '.stream'  '('  ')'  '.filter'  '('  'm'  '-'  '>'  'm.isActive'  '('  ')'  '&'  '&'  'm.getPatientId'  '('  ')'  '.equals'  '('  'patient.getPatientId'  '('  ')'  ')'  ')'  '.collect'  '('  'Collectors.toList'  '('  ')'  ')'] 
__label__0 new ClusterConfiguration ( initialConfig.getName ( ) , initialConfig.getMemberURIs ( ) ) 
__label__0 ch.unsafe ( ) .flush ( ) 
__label__0 executeJobExecutorForTime ( 10000,200 ) 
__label__0 idGenerator.generateUuid ( ) 
__label__0 element.getLocalName ( ) 
__label__1 ['static'  'void'  'writeFile'  '('  'NameNode'  'namenode'  ' '  'Configuration'  'conf'  ' '  'Path'  'name'  ' '  'short'  'replication'  ')'  'throws'  'IOException'  '{'  'FileSystem'  'fileSys=FileSystem.get'  '('  'conf'  ')'  ';'  'SequenceFile.Writer'  'writer=SequenceFile.createWriter'  '('  'fileSys'  ' '  'conf'  ' '  'name'  ' '  'BytesWritable.class'  ' '  'BytesWritable.class'  ' '  'CompressionType.NONE'  ')'  ';'  'writer.append'  '('  'new'  'BytesWritable'  '('  ')'  ' '  'new'  'BytesWritable'  '('  ')'  ')'  ';'  'writer.close'  '('  ')'  ';'  'fileSys.setReplication'  '('  'name'  ' '  'replication'  ')'  ';'  'DFSTestUtil.waitReplication'  '('  'fileSys'  ' '  'name'  ' '  'replication'  ')'  ';'  '}'] 
__label__0 public ByteBuf getBufferFor ( int index ) throws IndexOutOfBoundsException { if ( index < 0 || index > capacity ( ) ) { throw new IndexOutOfBoundsException ( `` Invalid index : `` + index + `` - Bytes needed : `` + ( index ) + `` , maximum is `` + capacity ( ) ) ; } int componentId=componentId ( index ) ; return components [ componentId ] .duplicate ( ) ; } 
__label__0 assertThat ( converter.getSupportedMediaTypes ( ) ) .containsExactly ( MediaTypes.HAL_JSON , MediaType.parseMediaType ( MediaTypes.HAL_JSON_VALUE + `` ; charset=UTF-8 '' ) ) 
__label__1 ['UrlUtils.getIdleTimeout'  '('  'getUrl'  '('  ')'  ')'] 
__label__0 nlDataOutNodes ! = null & & nlDataOutNodes.getLength ( ) > 0 
__label__0 i < = uri.length ( ) - 2 
__label__1 ['player.teleport'  '('  'playerLocation'  ')'] 
__label__0 registerConsumer ( owner , newUUIDString ( ) , newUUIDString ( ) , attributes ) 
__label__1 ['mime'  '=='  'null'] 
__label__0 @ UriParam ( label= '' producer '' , defaultValue= '' true '' ) 
__label__1 ['logger.info'  '('  '``'  'Installing'  'Filter'  '{'  '}'  "''"  ' '  'servletClassName'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '639'  ')'] 
__label__1 ['new'  'DefaultAgentOption'  '('  'agentArgs'  ' '  'instrumentation'  ' '  'profilerConfig'  ' '  'pluginJars'  ' '  'bootStrapJarPath'  ' '  'serviceTypeRegistryService'  ' '  'annotationKeyRegistryService'  ')'] 
__label__0 Ordered.HIGHEST_PRECEDENCE + 20 
__label__0 util.getDataTestDirOnTestFS ( table ) 
__label__0 connections.get ( target ) 
__label__0 buffer.put ( indices , offset , count ) 
__label__1 ['jniGetLocalAnchorA'  '('  'addr'  ' '  'tmp'  ')'] 
__label__1 ['new'  'S3DataSegmentMover'  '('  'mockS3Client'  ')'] 
__label__0 new DashboardServiceImpl ( mongoRule.getMongoConnection ( ) , dashboardWidgetCreator ) 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__0 fieldNameNode.getCharno ( ) 
__label__1 ['compactionStarted.getAndSet'  '('  'true'  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 unitOfWork ! = null & & onCompletions ! = null 
__label__1 ['assertTrue'  '('  'predicate.apply'  '('  'pickleEvent'  ')'  ')'] 
__label__0 new SingleInetAddressDns ( ) 
__label__0 Thread.sleep ( 5000 ) 
__label__0 VertexAttribute.ColorUnpacked ( ) 
__label__1 ['AdviceWithTasks.afterByToString'  '('  'route'  ' '  'toString'  ' '  'answer'  ' '  'selectLast'  ' '  'selectFirst'  ' '  'selectFrom'  ' '  'selectTo'  ' '  'maxDeep'  ')'] 
__label__1 ['List'  '<'  'Stats'  '>'] 
__label__1 ['assertEquals'  '('  '4933401'  ' '  'received.get'  '('  '0'  ')'  '['  '1'  ']'  ')'] 
__label__0 `` value '' .equals ( key ) || `` weight '' .equals ( key ) 
__label__1 ['uncompressedProto.length'  '<'  '2550000'] 
__label__0 person.getPersonVoidReason ( ) 
__label__0 Color.fromRGB ( 0xABABAB ) 
__label__0 logger.debug ( `` Error connecting to Plex '' , e ) 
__label__0 new OptiqSemanticException ( `` Invalid Column Reference : `` + grpbyExpr.dump ( ) ) 
__label__1 ['getSrcPath'  '('  '``'  'checks/javadoc/Input_03.java'  "''"  ')'] 
__label__0 DataStreamSink < OUT > 
__label__0 MESSAGES.unknownMessageListenerType ( messageListenerInterface.getName ( ) , resourceAdapterName ) 
__label__1 ['public'  'String'  'getText'  '('  ')'  '{'  'return'  'text'  ';'  '}'] 
__label__0 node.executorManager.executeLocally ( new Runnable ( ) { public void run ( ) { MembershipEvent membershipEvent=new MembershipEvent ( ClusterImpl.this , dummy , MembershipEvent.MEMBER_ADDED ) ; for ( MembershipListener listener : listenerSet ) { listener.memberAdded ( membershipEvent ) ; } } } ) 
__label__0 Wt.getSlice ( slice ) .plus ( Wt.getSlice ( slice ) .transpose ( ) ) 
__label__0 LOG.warn ( `` register druid-driver mbean error '' , ex ) 
__label__1 ['assertRemoveSubsystemResources'  '('  'servicesA'  ')'] 
__label__1 ['controller.execute'  '('  'ExecutionContextBuilder.Factory.create'  '('  'update'  ')'  '.build'  '('  ')'  ' '  'resultHandler'  ')'] 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'exist'  "''"  ')'] 
__label__1 ['mUfs.create'  '('  'testFile'  ')'] 
__label__1 ['maxSize'  '>'  '('  'used'  '/'  'total'  ')'] 
__label__1 ['cursor.getPosition'  '('  ')'] 
__label__0 row ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null ) 
__label__1 ['TfsShell.convertMsToDate'  '('  'files'  '['  '0'  ']'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__1 ['getExpressionTypesFromInput'  '('  'TEST_SESSION'  ' '  'metadata'  ' '  'SQL_PARSER'  ' '  'INPUT_TYPES'  ' '  'ImmutableList.of'  '('  'translatedProjection'  ')'  ' '  'ImmutableList.of'  '('  ')'  ')'] 
__label__0 new ModelNode ( ) .set ( 25000L ) 
__label__0 `` A task is in the ABORTED state but stage is `` + currentState 
__label__1 ['LOG.error'  '('  '``'  'register'  'druid-driver'  'mbean'  'error'  "''"  ' '  'ex'  ')'] 
__label__1 ['getConnectionFactory'  '('  ')'] 
__label__1 ['ImmutableSortedSet.of'  '('  '``'  'a'  "''"  ' '  "''"  'abbr'  "''"  ' '  "''"  'acronym'  "''"  ' '  "''"  'address'  "''"  ' '  "''"  'area'  "''"  ' '  "''"  'b'  "''"  ' '  "''"  'bdo'  "''"  ' '  "''"  'big'  "''"  ' '  "''"  'blockquote'  "''"  ' '  "''"  'br'  "''"  ' '  "''"  'caption'  "''"  ' '  "''"  'cite'  "''"  ' '  "''"  'code'  "''"  ' '  "''"  'colgroup'  "''"  ' '  "''"  'dd'  "''"  ' '  "''"  'del'  "''"  ' '  "''"  'div'  "''"  ' '  "''"  'dfn'  "''"  ' '  "''"  'dl'  "''"  ' '  "''"  'dt'  "''"  ' '  "''"  'em'  "''"  ' '  "''"  'fieldset'  "''"  ' '  "''"  'h1'  "''"  ' '  "''"  'h2'  "''"  ' '  "''"  'h3'  "''"  ' '  "''"  'h4'  "''"  ' '  "''"  'h5'  "''"  ' '  "''"  'h6'  "''"  ' '  "''"  'hr'  "''"  ' '  "''"  'i'  "''"  ' '  "''"  'img'  "''"  ' '  "''"  'ins'  "''"  ' '  "''"  'kbd'  "''"  ' '  "''"  'li'  "''"  ' '  "''"  'ol'  "''"  ' '  "''"  'p'  "''"  ' '  "''"  'pre'  "''"  ' '  "''"  'q'  "''"  ' '  "''"  'samp'  "''"  ' '  "''"  'small'  "''"  ' '  "''"  'span'  "''"  ' '  "''"  'strong'  "''"  ' '  "''"  'style'  "''"  ' '  "''"  'sub'  "''"  ' '  "''"  'sup'  "''"  ' '  "''"  'table'  "''"  ' '  "''"  'tbody'  "''"  ' '  "''"  'td'  "''"  ' '  "''"  'tfoot'  "''"  ' '  "''"  'th'  "''"  ' '  "''"  'thead'  "''"  ' '  "''"  'tr'  "''"  ' '  "''"  'tt'  "''"  ' '  "''"  'ul'  "''"  ')'] 
__label__1 ['logger.debug'  '('  '``'  'Received'  'MyQ'  'JSON'  ':'  '{'  '}'  "''"  ' '  'dataString'  ')'] 
__label__0 new GetExecutionVariableInstancesCmd ( executionId , variableNames , true , locale , withLocalizationFallback ) 
__label__1 ['assertEquals'  '('  'q.toString'  '('  ')'  ' '  "''"  '['  ']'  "''"  ')'] 
__label__1 ['new'  'PkgControl'  '('  'stack.peek'  '('  ')'  ' '  'name'  ' '  'regex'  ')'] 
__label__1 ['time.put'  '('  'delta'  ')'] 
__label__0 assertEquals ( 3 , historyService.createHistoricActivityInstanceQuery ( ) .processDefinitionId ( processInstance.getProcessDefinitionId ( ) ) .list ( ) .size ( ) ) 
__label__0 @ InputMagicNumberIntMethodAnnotation ( value=-45 ) 
__label__1 ['InetAddress.getLoopbackAddress'  '('  ')'] 
__label__1 ['Foundation.NSLog'  '('  '``'  '['  'error'  ']'  '``'  '+'  'tag'  '+'  '``'  ':'  '``'  '+'  'message'  ')'] 
__label__0 endsWith ( `` /home/source '' ) 
__label__1 ['config.getIdleConnectionTimeoutInMs'  '('  ')'] 
__label__0 ps.saveRelationship ( rel ) 
__label__0 framework.getBroadcasterFactory ( ) .lookup ( a.broadcaster ( ) , a.path ( ) , true ) 
__label__1 ['this.vertices.containsKey'  '('  'node'  ')'  '||'  'this.chainedTasks.containsKey'  '('  'node'  ')'] 
__label__0 ParseUtils.parseS300THHumidity ( S300TH_DATA_1 ) 
__label__1 ['statistics.addRemoveTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__0 c.content ( ) .readSlice ( CONTENT_LENGTH ) 
__label__1 ['('  'short'  ')'  '600'] 
__label__0 layout.setReleaseLabel ( label ) 
__label__1 ['ResponseImpl'  'headers'  '('  'Map'  '<'  'String'  ' '  'Property'  '>'  'headers'  ')'  ';'] 
__label__0 mapEntry.getValue ( ) .equals ( source ) 
__label__0 ch == ' & ' & & JdbcConstants.POSTGRESQL.equals ( dbType ) 
__label__0 setUnknownLabels ( collapsedUnary , mainLabel ) 
__label__1 ['REAL_DRIVER.close'  '('  ')'] 
__label__0 new AMQPProducer ( metricRegistry , configuration , serverStatus ) 
__label__0 pushExecutor.execute ( new NamedRunnable ( `` OkHttp % s Push Headers [ % s ] '' , hostName , streamId ) { @ Override public void execute ( ) { boolean cancel=pushObserver.onHeaders ( streamId , requestHeaders , inFinished ) ; try { if ( cancel ) frameWriter.rstStream ( streamId , ErrorCode.CANCEL ) ; if ( cancel || inFinished ) { synchronized ( SpdyConnection.this ) { currentPushRequests.remove ( streamId ) ; } } } catch ( IOException ignored ) { } } } ) 
__label__1 ['this.thrown.equals'  '('  'IllegalStateException.class'  ')'] 
__label__0 executor.scheduleAtFixedRate ( this , period , period , unit ) 
__label__1 ['this.fs.delete'  '('  'filePath'  ' '  'false'  ')'] 
__label__0 Assert.assertTrue ( `` reload-required '' .equals ( result.get ( RESPONSE_HEADERS ) .get ( PROCESS_STATE ) .asString ( ) ) ) 
__label__0 LOG.debug ( `` Exception while fetching metrics . `` , e ) 
__label__0 value.getType ( ) .getName ( ) 
__label__1 ['new'  'Packet'  '('  'data'  ' '  'operation.getPartitionId'  '('  ')'  ' '  'serializationService.getPortableContext'  '('  ')'  ')'] 
__label__0 getFirstByType ( type ) 
__label__0 new URI ( parentUri.getScheme ( ) , parentUri.getAuthority ( ) , parentUri.getPath ( ) + SEPARATOR , null , null ) 
__label__1 ['BlockStoreContext.releaseBlockWorkerThriftClient'  '('  'mRpcAddress'  ' '  'client'  ')'] 
__label__1 ['node.executorManager.executeLocaly'  '('  'new'  'Runnable'  '('  ')'  '{'  'public'  'void'  'run'  '('  ')'  '{'  'MembershipEvent'  'membershipEvent=new'  'MembershipEvent'  '('  'ClusterImpl.this'  ' '  'cm'  ' '  'MembershipEvent.MEMBER_REMOVED'  ')'  ';'  'for'  '('  'MembershipListener'  'listener'  ':'  'listenerSet'  ')'  '{'  'listener.memberRemoved'  '('  'membershipEvent'  ')'  ';'  '}'  '}'  '}'  ')'] 
__label__0 Cache.getTableName ( type ) 
__label__1 ['assertThat'  '('  'context.getBeansOfType'  '('  'WebServerFactoryCustomizer.class'  ')'  ')'  '.hasSize'  '('  '1'  ')'] 
__label__1 ['DEFAULT_OCTREE_WIDTH=10000'] 
__label__1 ['group.getId'  '('  ')'] 
__label__0 IR.constNode ( IR.name ( shortName ) , googRequireNode ) 
__label__1 ['assertFalse'  '('  '``'  'reuse-address'  "''"  ' '  'networkConfig.isReuseAddress'  '('  ')'  ')'] 
__label__1 ['token.substring'  '('  '0'  ' '  'p'  ')'  '.trim'  '('  ')'  '.toLowerCase'  '('  ')'] 
__label__1 ['new'  'RuntimeException'  '('  '``'  'Missing'  'type'  'parameter'  '.'  "''"  ')'] 
__label__1 ['buildPages.getTypes'  '('  ')'] 
__label__1 ['defaultMaxRowsInMemory=500000'] 
__label__0 sliceInput.getRetainedSize ( ) 
__label__0 report ( SHIFT_AMOUNT_OUT_OF_BOUNDS , n ) 
__label__0 defaultCamelContext.removeRoute ( id ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class TransactionalSetBasicDistributedTest extends TransactionalSetAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 2 ) .newInstances ( config ) ; } } 
__label__0 `` Using bind address : `` + bindAddress 
__label__1 ['maxInvocationCountObservedDuringWarmup'  '*'  '1.2'] 
__label__0 LinkedHashMap < String , Operator < ? extends Serializable > > 
__label__1 ['Long.valueOf'  '('  'args'  '['  '2'  ']'  ')'] 
__label__1 ['logger.info'  '('  'sb.toString'  '('  ')'  ')'] 
__label__0 assertNotNull ( `` Failed to trigger savepoint '' , savepointPath ) 
__label__1 ['peekNode'  '('  ')'] 
__label__1 ['TfsShell.convertMsToDate'  '('  'files'  '['  '3'  ']'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__1 ['IntrospectionSupport.getProperties'  '('  'configuration'  ' '  'params'  ' '  'null'  ')'] 
__label__0 assertThat ( child.getBeansOfType ( ExampleBean.class ) ) .hasSize ( 2 ) 
__label__1 ['NbPreferences.forModule'  '('  'DataTableTopComponent.class'  ')'  '.getBoolean'  '('  'DATA_LABORATORY_ONLY_VISIBLE'  ' '  'false'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'rapidRefreshFutureEnd'  'stopping'  "''"  ')'] 
__label__1 ['DirectMessage.constructDirectMessages'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'direct_messages/sent.json'  "''"  ' '  'new'  'PostParameter'  '['  '0'  ']'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__1 ['BufferUtils.freeMemory'  '('  'bytebuffer'  ')'] 
__label__1 ['graphStack.push'  '('  'tx'  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'Requesting'  'paths'  'for'  'query'  'services'  'failed'  '.'  '``'  ' '  'throwable'  ')'] 
__label__0 removeQuotes ( timestring.trim ( ) ) 
__label__0 rowsRet < = 0 || work.getLimit ( ) == totalRows 
__label__1 ['config.getBroadcasterFactory'  '('  ')'  '.lookup'  '('  'm.broadcaster'  '('  ')'  ' '  'true'  ')'] 
__label__1 ['ufsPath.getPath'  '('  ')'] 
__label__1 ['z.next_in'  '['  'z.next_in_index++'  ']'  '=='  '0'] 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( value= { QuickTest.class , ParallelTest.class } ) public class ReplicatedMapReadYourWritesTest extends ReplicatedMapAbstractTest { @ Test public void testReadYourWritesBySize ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( ) ; final ReplicatedMap < Integer , Integer > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < Integer , Integer > map2=instance2.getReplicatedMap ( `` default '' ) ; HashMap < Integer , Integer > map=new HashMap < Integer , Integer > ( ) ; final int count=100 ; for ( int i=0 ; i < count ; i++ ) { map.put ( i , i ) ; } map1.putAll ( map ) ; assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { assertEquals ( count , map1.size ( ) ) ; assertEquals ( count , map2.size ( ) ) ; } } ) ; } @ Test public void testReadYourWritesByGet ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < String , Integer > map1=instance1.getReplicatedMap ( `` default '' ) ; ReplicatedMap < String , Integer > map2=instance2.getReplicatedMap ( `` default '' ) ; for ( int i=0 ; i < 1000 ; i++ ) { assertReadYourWriteByGet ( instance2 , map1 , i ) ; assertReadYourWriteByGet ( instance1 , map2 , i ) ; } } @ Test public void testReadYourWritesByContainsKey ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < String , Integer > map1=instance1.getReplicatedMap ( `` default '' ) ; ReplicatedMap < String , Integer > map2=instance2.getReplicatedMap ( `` default '' ) ; for ( int i=0 ; i < 1000 ; i++ ) { assertReadYourWriteByContainsKey ( instance2 , map1 , i ) ; assertReadYourWriteByContainsKey ( instance1 , map2 , i ) ; } } @ Test public void testReadYourWritesByContainsValue ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < String , Integer > map1=instance1.getReplicatedMap ( `` default '' ) ; ReplicatedMap < String , Integer > map2=instance2.getReplicatedMap ( `` default '' ) ; for ( int i=0 ; i < 1000 ; i++ ) { assertReadYourWriteByContainsValue ( instance2 , map1 , i ) ; assertReadYourWriteByContainsValue ( instance1 , map2 , i ) ; } } private void assertReadYourWriteByGet ( HazelcastInstance instance , ReplicatedMap < String , Integer > map , int value ) { String key=generateKeyAndPutValue ( instance , map , value ) ; assertEquals ( value , ( int ) map.get ( key ) ) ; } private void assertReadYourWriteByContainsKey ( HazelcastInstance instance , ReplicatedMap < String , Integer > map , int value ) { String key=generateKeyAndPutValue ( instance , map , value ) ; assertTrue ( map.containsKey ( key ) ) ; } private void assertReadYourWriteByContainsValue ( HazelcastInstance instance , ReplicatedMap < String , Integer > map , int value ) { generateKeyAndPutValue ( instance , map , value ) ; assertTrue ( map.containsValue ( value ) ) ; } private String generateKeyAndPutValue ( HazelcastInstance instance , ReplicatedMap < String , Integer > map , int value ) { String key=generateKeyOwnedBy ( instance ) ; map.put ( key , value ) ; return key ; } } 
__label__1 ['VertexAttribute.Color'  '('  ')'] 
__label__0 getPath ( `` InputDefaultConfig.java '' ) 
__label__1 ['HornetQAutoConfiguration.class'] 
__label__0 log.info ( `` activitiy or FailedJobRetryTimerCycleValue is null in job `` + jobId + `` ' . only decrementing retries . '' ) 
__label__1 ['Assert.assertEquals'  '('  '9500'  ' '  'Utils.calculateHeapSize'  '('  '10000'  ')'  ')'] 
__label__0 hgraph.getTotalOutDegree ( n ) 
__label__0 endsWith ( `` /home/source '' ) 
__label__0 event.get ( factory.getName ( ) ) 
__label__1 ['dataSource.setInitExceptionThrow'  '('  'true'  ')'] 
__label__0 getTaskWriterCount ( session ) > 1 & & ! node.getPartitioningScheme ( ) .isPresent ( ) 
__label__0 new MetaTableLocator ( ) .waitMetaRegionLocation ( watcher,10000 ) 
__label__1 ['Preconditions.checkNotNull'  '('  'blockIds'  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__0 node.getLifecycleService ( ) .shutdown ( ) 
__label__1 ['testOffset=4875454l'] 
__label__1 ['factory.getSemaphore'  '('  'packet.name'  ')'] 
__label__0 if ( mAllowUndeclaredRTE ) { final ClassResolver cr=new ClassResolver ( getClassLoader ( ) , mPackageFullIdent.getText ( ) , mImports ) ; try { final Class clazz=cr.resolve ( tag.getArg1 ( ) ) ; reqd= ! RuntimeException.class.isAssignableFrom ( clazz ) & & ! Error.class.isAssignableFrom ( clazz ) ; } catch ( ClassNotFoundException e ) { log ( tag.getLineNo ( ) , '' javadoc.classInfo '' , '' @ throws '' , tag.getArg1 ( ) ) ; } } 
__label__0 hazelcastFactory.newHazelcastClient ( newClientConfig ( ) ) 
__label__1 ['hz1.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 contentType ! = null & & charset == null 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class RingbufferBasicDistributedTest extends RingbufferAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 2 ) .newInstances ( config ) ; } } 
__label__1 ['String.valueOf'  '('  '0.02'  ')'] 
__label__0 LOG.debug ( `` Failed to send receipt of data to worker { } for request { } : { } . `` , mAddress , mReadRequest , e.getMessage ( ) ) 
__label__1 ['operation.get'  '('  'ROLLBACK_ON_RUNTIME_FAILURE'  ')'] 
__label__1 ['Thread.sleep'  '('  '50'  ')'] 
__label__1 ['final'  'HColumnDescriptor'  'hcd=htd.getFamily'  '('  'familyName'  ')'  ';'] 
__label__1 ['LOG.debug'  '('  '``'  'Error'  'while'  'deserializing'  'payload'  "''"  ' '  'e'  ')'] 
__label__1 ['BIG_ENOUGH_INT'  '+'  '0.5'] 
__label__0 factory.terminateAll ( ) 
__label__1 ['return'  'false'  ';'] 
__label__0 new DynamicAwareEntry ( `` https : //localhost:8443/test '' , null , null , null ) 
__label__0 Long.parseLong ( args [ 1 ] ) 
__label__1 ['e.getMessage'  '('  ')'] 
__label__0 Optional.fromNullable ( resourceManagement.getStats ( ) ) 
__label__0 new Histogram ( 1,10,100,1000,10 * 1000,100 * 1000 ) 
__label__0 app.configuration ( ) .getString ( `` timezone '' , '' '' ) 
__label__1 ['out.writeObject'  '('  'function'  ')'] 
__label__1 ['littleEndian.order'  '('  ')'] 
__label__1 ['JSError.make'  '('  'REPORT_PATH_IO_ERROR'  ' '  'reportPath'  ')'] 
__label__0 DataStreamSink < OUT > 
__label__1 ['configList.size'  '('  ')'  '=='  '0'] 
__label__1 ['methodsToImplement'  '('  'methods'  ')'] 
__label__1 ['LOGGER.error'  '('  '``'  'no'  'property'  'for'  '``'  '+'  'type'  '+'  '``'  ' '  '``'  '+'  'format'  ')'] 
__label__1 ['this.uncollectedPointCreater'] 
__label__1 ['assertEquals'  '('  'avDegree 1.0'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Converts'  'the'  'given'  'object'  'into'  'a'  'canonical'  'JSON'  'string'  '.'  '*'  '@'  'param'  'object'  'an'  'object'  '*'  '@'  'return'  '{'  '@'  'code'  'object'  '}'  'as'  'a'  'JSON'  'string'  '*'  '@'  'throws'  'IOException'  'if'  'there'  'is'  'an'  'error'  'writing'  '{'  '@'  'code'  'object'  '}'  'as'  'JSON'  '*'  '/'  'public'  'static'  'String'  'asJson'  '('  'Object'  'object'  ')'  'throws'  'IOException'  '{'  'return'  'JSON.writeValueAsString'  '('  'object'  ')'  ';'  '}'] 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__0 executionJobVertex.getMaxParallelism ( ) 
__label__1 ['new'  'DoubleInetAddressDns'  '('  ')'] 
__label__1 ['a.length'  '>'  '='  'count'  '('  ')'] 
__label__0 LOG.error ( `` Cache flusher failed for entry `` + fqe , ex ) 
__label__0 mAllowUndeclaredRTE=aFlag 
__label__0 processEngineConfiguration.getCommandExecutor ( ) 
__label__1 ['logger.debug'  '('  '``'  'Retreiveing'  'door'  'data'  "''"  ')'] 
__label__0 metaData.getColumnLabel ( 1 ) 
__label__1 ['gl.glDeleteBuffer'  '('  'depthStencilPackedBufferHandle'  ')'] 
__label__1 ['connectors.put'  '('  'connectorName'  ' '  'connector'  ')'] 
__label__1 ['resultEndpoint.setResultWaitTime'  '('  '1000'  ')'] 
__label__0 graph.getEdgesAndMetaEdges ( ) 
__label__0 response.getStatus ( ) .getCode ( ) / 100 
__label__1 ['warnings.append'  '('  'LocalizationMessages.HINT_MSG'  '('  'error.getMessage'  '('  ')'  ')'  ')'] 
__label__1 ['DirectMessage.constructDirectMessages'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'direct_messages.json'  "''"  ' '  'true'  ')'  ')'] 
__label__0 manualClock.addTimeMs ( 1001 ) 
__label__1 ['commandLineArguments.isLocal'  '('  ')'] 
__label__1 ['retVal.put'  '('  'entry.getKey'  '('  ')'  ' '  'value'  ')'] 
__label__1 ['cache.setRecord'  '('  'key'  ' '  'record'  ')'] 
__label__0 connector.setPort ( 9080 ) 
__label__1 ['('  'AST'  ')'  'child'] 
__label__0 Configuration.getMs ( PropertyKey.USER_FILE_LOAD_TTL ) 
__label__1 ['mock.expectedMessageCount'  '('  '2'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'myq'  'ReturnCode'  ':'  '{'  '}'  "''"  ' '  'returnCode'  ')'] 
__label__0 value.toBigInteger ( ) 
__label__1 ['getRegistry'  '('  ')'  '.put'  '('  '``'  'myFilter'  "''"  ' '  'new'  'NotificationFilter'  '('  ')'  '{'  'private'  'static'  'final'  'long'  'serialVersionUID=1L'  ';'  'public'  'boolean'  'isNotificationEnabled'  '('  'Notification'  'aNotification'  ')'  '{'  'boolean'  'enabled=aNotification.getSequenceNumber'  '('  ')'  '%'  '2'  '=='  '0'  ';'  'if'  '('  '!'  'enabled'  ')'  '{'  'mRejected.add'  '('  'aNotification'  ')'  ';'  '}'  'return'  'enabled'  ';'  '}'  '}'  ')'] 
__label__0 logger.trace ( `` myq ReturnCode : { } '' , returnCode ) 
__label__1 ['graphModel.getUndirectedGraph'  '('  ')'] 
__label__1 ['@'  'InputIntMethodAnnotation'  '('  'value=43'  ')'] 
__label__1 ['getParser'  '('  ')'  '.parse'  '('  'args'  ')'] 
__label__0 Color.fromRGB ( 0xC354CD ) 
__label__0 new GeoLocation ( array.getDouble ( 1 ) , array.getDouble ( 0 ) ) 
__label__0 assertRemoveSubsystemResources ( servicesB ) 
__label__0 / * * * Matches no characters . * / public static final InputFastMatcher NONE=new InputFastMatcher ( ) { @ Override public boolean matches ( char c ) { return false ; } @ Override public String replaceFrom ( CharSequence sequence , CharSequence replacement ) { checkNotNull ( replacement ) ; return sequence.toString ( ) ; } private void checkNotNull ( CharSequence replacement ) { } @ Override public String collapseFrom ( CharSequence sequence , char replacement ) { return sequence.toString ( ) ; } @ Override public String trimTrailingFrom ( CharSequence sequence ) { return sequence.toString ( ) ; } } ; 
__label__1 ['put'  '('  'v'  ')'] 
__label__0 GL20.glUniform4iv ( location , toIntBuffer ( v , offset , count < < 2 ) ) 
__label__0 new VariableInformation ( 1 , '' Total operation time compressor '' , NibeDataType.S32 , Type.Sensor ) 
__label__1 ['byteBuffer.get'  '('  '('  'SIZEOFLONG'  '-'  '1'  ')'  '-'  'i'  ')'  '&'  '0xff'] 
__label__0 stat.st_size.longValue ( ) 
__label__1 ['mTestStream.getBytesFlushed'  '('  ')'] 
__label__1 ['in.readInt'  '('  ')'] 
__label__1 ['new'  'EnumValidator'  '<'  'Mode'  '>'  '('  'Mode.class'  ' '  'true'  ' '  'false'  ')'] 
__label__0 routerChain.notifyFullInvokers ( invokers , getUrl ( ) ) 
__label__1 ['new'  'MD5Renderer'  '('  'model'  ' '  'true'  ')'] 
__label__0 Assert.assertEquals ( 20 , as.getAllGlobalProperties ( ) .size ( ) ) 
__label__1 ['``'  'Unsupported'  'filesystem'  'scheme'  'found'  'in'  'the'  'backup'  'target'  'url'  '.'  'Error'  'Message'  ':'  '``'  '+'  'newMsg'] 
__label__1 ['newCount'  '<'  'reservoirSize'] 
__label__0 exportAttributes & & attributeModel ! = null 
__label__1 ['mock'  '('  'ExampleService.class'  ' '  'MockReset.before'  '('  ')'  ')'] 
__label__0 / * * * Formatter for the log message . * / private final AuditEventFormatter formatter ; 
__label__0 new BranchedDataException ( `` Unable to perform a mandatory sanity check due to an IO error . `` , e ) 
__label__1 ['new'  'LazyTailArrayNode'  '('  'record'  ' '  'schema'  ')'] 
__label__0 new IOException ( msg , e ) 
__label__1 ['SaslException.class'] 
__label__0 ReactiveHelper.schedule ( ( ) - > { if ( uow ! = null ) { uow.afterProcess ( processor , exchange , callback , sync ) ; } if ( LOG.isTraceEnabled ( ) ) { LOG.trace ( `` Exchange processed and is continued routed asynchronously for exchangeId : { } - > { } '' , exchange.getExchangeId ( ) , exchange ) ; } } , '' SharedCamelInternalProcessor - UnitOfWork - afterProcess - `` + processor + `` - `` + exchange.getExchangeId ( ) ) 
__label__1 ['LOG.error'  '('  'e.getMessage'  '('  ')'  ')'] 
__label__0 version == null || version.equals ( `` '' ) 
__label__0 System.currentTimeMillis ( ) - start 
__label__1 ['config.getBroadcasterFactory'  '('  ')'  '.lookup'  '('  'm.broadcaster'  '('  ')'  ' '  'true'  ')'] 
__label__1 ['if'  '('  'mCheckUnusedThrows'  ')'  '{'  'final'  'ClassResolver'  'cr=new'  'ClassResolver'  '('  'getClassLoader'  '('  ')'  ' '  'mPackageFullIdent.getText'  '('  ')'  ' '  'mImports'  ')'  ';'  'try'  '{'  'final'  'Class'  'clazz=cr.resolve'  '('  'tag.getArg1'  '('  ')'  ')'  ';'  'reqd='  '!'  'RuntimeException.class.isAssignableFrom'  '('  'clazz'  ')'  '&'  '&'  '!'  'Error.class.isAssignableFrom'  '('  'clazz'  ')'  ';'  '}'  'catch'  '('  'ClassNotFoundException'  'e'  ')'  '{'  'log'  '('  'tag.getLineNo'  '('  ')'  ' '  "''"  'javadoc.classInfo'  "''"  ' '  "''"  '@'  'throws'  "''"  ' '  'tag.getArg1'  '('  ')'  ')'  ';'  '}'  '}'] 
__label__0 sectionStartTagToken.word ( ) 
__label__0 response.get ( ROLLED_BACK ) 
__label__0 bc.getAsyncWriteService ( ) 
__label__0 interceptors.addLast ( newAInterceptor ( a ) ) 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'redis'  "''"  ')'] 
__label__1 ['request.getTaskDefinitionKey'  '('  ')'] 
__label__1 ['Calendar.getInstance'  '('  'JSON.defaultLocale'  ')'] 
__label__1 ['LOG.info'  '('  'rootPath'  '+'  '``'  'is'  'not'  'a'  'directory'  "''"  ')'] 
__label__1 ['warnings.append'  '('  'LocalizationMessages.HINT_MSG'  '('  'error.getMessage'  '('  ')'  ')'  ')'] 
__label__0 listener.onStatus ( new StatusJSONImpl ( json ) ) 
__label__1 ['file.getAbsoluteFile'  '('  ')'] 
__label__1 ['/'  '*'  '*'  '*'  '@'  'see'  'org.openmrs.api.db.ConceptDAO'  '#'  'getCountOfConceptReferenceTerms'  '('  'java.lang.String'  ' '  'boolean'  ')'  '*'  '/'  '@'  'Override'  'public'  'Integer'  'getCountOfConceptReferenceTerms'  '('  'String'  'query'  ' '  'ConceptSource'  'conceptSource'  ' '  'boolean'  'includeRetired'  ')'  'throws'  'DAOException'  '{'  'Criteria'  'criteria=createConceptReferenceTermCriteria'  '('  'query'  ' '  'conceptSource'  ' '  'includeRetired'  ')'  ';'  'criteria.setProjection'  '('  'Projections.rowCount'  '('  ')'  ')'  ';'  'return'  '('  'Integer'  ')'  'criteria.uniqueResult'  '('  ')'  ';'  '}'] 
__label__1 ['executeCommand'  '('  '``'  'EXPLAIN'  'OPTIONAL'  'MATCH'  '('  'n'  ')'  'RETURN'  'n'  ';'  "''"  ' '  "''"  'DbHits'  "''"  ' '  "''"  'No'  'data'  'returned'  "''"  ')'] 
__label__0 lights ! = null & & lights.shadowMap ! = null 
__label__1 ['cachedMessages=b.getBroadcasterConfig'  '('  ')'  '.applyFilters'  '('  'r'  ' '  't'  ')'] 
__label__0 logger.trace ( `` AtmosphereResource { } is resuming '' , uuid ( ) ) 
__label__0 request.getPathInfo ( ) 
__label__1 ['Type.LONG_TYPE.equals'  '('  'typeInStack'  ')'] 
__label__0 location.equals ( BlockStoreLocation.anyDirInTier ( tierAlias ) ) 
__label__0 new ClosedByInterruptException ( ) 
__label__0 assertEquals ( 3 , historyService.createHistoricActivityInstanceQuery ( ) .finished ( ) .list ( ) .size ( ) ) 
__label__1 ['new'  'SwiftRange'  '('  'mPos'  ' '  'endPos'  ')'] 
__label__0 newName.putProp ( Node.ORIGINALNAME_PROP , qName ) 
__label__1 ['body.endsWith'  '('  '``'  '6'  "''"  ')'] 
__label__0 privObj.getObjectName ( ) .equals ( `` masking_test '' ) || privObj.getObjectName ( ) .startsWith ( `` masking_test_n '' ) 
__label__1 ['customerResourceLocator'  '('  'url'  ')'] 
__label__1 ['Configuration.getInt'  '('  'PropertyKey.MASTER_TTL_CHECKER_INTERVAL_MS'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'The'  'exception'  'thrown'  '('  'if'  'any'  ')'  'by'  'the'  'method'  'called'  'in'  '{'  '@'  'link'  '#'  'run'  '('  ')'  '}'  '*'  '/'  'protected'  'Throwable'  'exceptionThrown=null'  ';'] 
__label__1 ['HELSINKY'  '{'  '@'  'Override'  'public'  'ServiceNowProducer'  'get'  '('  'ServiceNowEndpoint'  'endpoint'  ')'  'throws'  'Exception'  '{'  'return'  'new'  'HelsinkiServiceNowProducer'  '('  'endpoint'  ')'  ';'  '}'  '}'] 
__label__1 ['dstPath.getPath'  '('  ')'] 
__label__0 CassandraSplitManager.class 
__label__1 ['mLockMode'  '=='  'InodeTree.LockMode.READ'] 
__label__0 selector.select ( 10 ) 
__label__0 Assert.assertEquals ( 4 , visitor.getConditions ( ) .size ( ) ) 
__label__1 ['new'  'MockResponse'  '('  ')'  '.setBody'  '('  '``'  'A'  "''"  ')'  '.setSocketPolicy'  '('  'SHUTDOWN_INPUT_AT_END'  ')'] 
__label__0 layout.setReleaseLabel ( label ) 
__label__1 ['logger.info'  '('  '``'  'fail-mock'  ':'  '``'  '+'  'invocation.getMethodName'  '('  ')'  '+'  '``'  'fail-mock'  'enabled'  ' '  'url'  ':'  '``'  '+'  'directory.getUrl'  '('  ')'  ' '  'e'  ')'] 
__label__0 fileInfo.getUfsPath ( ) 
__label__1 ['context.var'  '('  '``'  'double'  "''"  ')'] 
__label__0 pixmap.fillCircle ( x , y , radius , color ) 
__label__1 ['logger.debug'  '('  '``'  'myq'  'ReturnCode'  ':'  '{'  '}'  "''"  ' '  'returnCode'  ')'] 
__label__1 ['key.equals'  '('  'OAuthConstants.SCOPE'  ')'] 
__label__0 RetryHandlingBlockMasterClient.class 
__label__1 ['new'  'S3DataSegmentMover'  '('  'mockS3Client'  ')'] 
__label__1 ['Thread.sleep'  '('  '500'  ')'] 
__label__1 ['executor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'ping'  '%'  '08x'  '%'  '08x'  "''"  ' '  'hostName'  ' '  'payload1'  ' '  'payload2'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'writePing'  '('  'reply'  ' '  'payload1'  ' '  'payload2'  ' '  'ping'  ')'  ';'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__1 ['('  'byte'  ')'  '0xff'] 
__label__1 ['addRegionStateToPut'  '('  'putA'  ' '  'RegionState.State.CLOSED'  ')'] 
__label__0 GL15.glGetBufferParameteriv ( target , pname , params ) 
__label__1 ['cSet.getConcept'  '('  ')'] 
__label__0 new LinkedHashMap < String , JdbcSqlStat > ( maxSize,0.75f , false ) 
__label__0 new BroadcastAction ( message ) 
__label__1 ['name.startsWith'  '('  '``'  'java'  '.'  "''"  ')'  '||'  'name.startsWith'  '('  '``'  'javax'  '.'  "''"  ')'  '||'  'name.startsWith'  '('  '``'  'junit'  '.'  '``'  ')'  '||'  'name.startsWith'  '('  '``'  'sun'  '.'  '``'  ')'  '||'  'name.startsWith'  '('  '``'  'com.sun'  '.'  "''"  ')'] 
__label__0 DataStreamSink < OUT > 
__label__0 constructors [ TXN_REMOVE_ALL_BACKUP ] 
__label__0 option.getJavaType ( ) 
__label__1 ['/'  '*'  '*'  '*'  'Represents'  'the'  'formatter'  'for'  'log'  'message'  'which'  'is'  'used'  'in'  'UTs'  '.'  'Message'  'format'  'is'  ':'  'filePath'  ':'  'lineNo'  ':'  'columnNo'  ':'  'message'  '.'  '*'  '@'  'author'  'Andrei'  'Selkin'  '*'  '/'  'public'  'class'  'AuditEventUtFormatter'  'implements'  'AuditEvemtFormatter'  '{'  '/'  '*'  '*'  '*'  'Length'  'of'  'all'  'separators'  '.'  '*'  '/'  'private'  'static'  'final'  'int'  'LENGTH_OF_ALL_SEPARATORS=4'  ';'  '@'  'Override'  'public'  'String'  'format'  '('  'AuditEvent'  'event'  ')'  '{'  'final'  'String'  'fileName=event.getFileName'  '('  ')'  ';'  'final'  'String'  'message=event.getMessage'  '('  ')'  ';'  'final'  'int'  'bufLen=event.getFileName'  '('  ')'  '.length'  '('  ')'  '+'  'event.getMessage'  '('  ')'  '.length'  '('  ')'  '+'  'LENGTH_OF_ALL_SEPARATORS'  ';'  'final'  'StringBuilder'  'sb=new'  'StringBuilder'  '('  'bufLen'  ')'  ';'  'sb.append'  '('  'fileName'  ')'  '.append'  '('  "'"  ':'  "'"  ')'  '.append'  '('  'event.getLine'  '('  ')'  ')'  ';'  'if'  '('  'event.getColumn'  '('  ')'  '>'  '0'  ')'  '{'  'sb.append'  '('  "'"  ':'  "'"  ')'  '.append'  '('  'event.getColumn'  '('  ')'  ')'  ';'  '}'  'sb.append'  '('  '``'  ':'  '``'  ')'  '.append'  '('  'message'  ')'  ';'  'return'  'sb.toString'  '('  ')'  ';'  '}'  '}'] 
__label__1 ['this.loggingSystem.initialize'  '('  'null'  ' '  'null'  ')'] 
__label__0 queryParams ! = null & & ! queryParams.isEmpty ( ) 
__label__1 ['AbstractRanking.refreshMinMax'  '('  'this'  ' '  'graph'  ')'] 
__label__1 ['counter'  '+'  '2'] 
__label__0 Assert.assertEquals ( getNotAllowedExceptionMessage ( `` helloForNone '' ) , e.getCause ( ) .getMessage ( ) ) 
__label__1 ['new'  'StringBuilder'  '('  '561'  ')'] 
__label__1 ['totalConnections.incrementAndGet'  '('  ')'  '>'  'configuration.getMaximumPoolSize'  '('  ')'] 
__label__1 ['new'  'S3DataSegmentMover'  '('  'mockS3Client'  ')'] 
__label__1 ['config.getOrcMaxBufferSize'  '('  ')'] 
__label__0 infos == null || infos.length == 0 
__label__0 LOG.debug ( `` Finding all components using class resolver : { } - > { } '' , new Object [ ] { resolver } ) 
__label__1 ['getBinaryTupledSet'  '('  ')'] 
__label__1 ['System.arraycopy'  '('  'bytes 0'  ' '  'this.bytes 0'  ' '  'SIZE'  ')'] 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` solr '' ) 
__label__0 Long.parseLong ( args [ 1 ] ) 
__label__0 streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == ' '' ' 
__label__0 db.createIndex ( new BasicDBObject ( FIELD_UPDATED_AT,1 ) .append ( FIELD_UNCOMMITTED_ENTRIES,1 ) .append ( FIELD_WRITTEN_MESSAGES_1M,1 ) , new BasicDBObject ( `` name '' , '' compound_0 '' ) ) 
__label__1 ['logger.debug'  '('  '``'  'Illegal'  'argument'  'in'  'chart'  ':'  '{'  '}'  "''"  ' '  'e'  ')'] 
__label__0 propResource.get ( BOOT_TIME ) .asBoolean ( false ) 
__label__0 payload.getBodySources ( ) ! = null & & payload.getBodySources ( ) .size ( ) == 1 
__label__1 ['location.belongTo'  '('  'BlockStoreLocation.anyTier'  '('  ')'  ')'] 
__label__1 ['new'  'IncrementalIndexSegment'  '('  'rtIndex'  ')'] 
__label__0 methodsToImplement ( type , methods ) 
__label__0 `` http '' .equals ( protocol ) || `` ws '' .equals ( protocol ) 
__label__0 JavaConversions.mapAsJavaMap ( logManager.logsByTopicPartition ( ) ) 
__label__1 ['ConditionalOnEnablednHealthIndicator.class'] 
__label__0 final AuditEventFormatter formatter=new AuditEventDefaultFormatter ( ) ; 
__label__1 ['new'  'BuildSecondHashMatchIterator'  '('  'this.inputs'  '['  '0'  ']'  ' '  'this.inputs'  '['  '1'  ']'  ' '  'keyPositions1'  ' '  'keyPositions2'  ' '  'keyClasses'  ' '  'memoryManager'  ' '  'ioManager'  ' '  'this'  ' '  'availableMemory'  ')'] 
__label__1 ['ssl.has'  '('  'CommonAttributes.CA_REVOCATION_URL'  ')'] 
__label__0 endFunction ( `` delete_column_statistics_by_partition : `` , ret ! = false , null ) 
__label__0 { MAGIC_HIGH , MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0 } 
__label__0 boolean multiValueResponse ( ) default false ; 
__label__1 ['el.className'  '('  ')'] 
__label__1 ['AstUtils.hasLeastOneAnnotation'  '('  'classNode'  ' '  "''"  'Controller'  "''"  ' '  "''"  'EnableWebMvc'  "''"  ')'] 
__label__1 ['row'  '('  '``'  'p_comment'  "''"  ' '  'null 1.0 0.0'  ' '  'null'  ' '  'null'  ' '  'null'  ')'] 
__label__0 pId + BASE_FILE_NUMBER 
__label__0 mapper.setFilterProvider ( new SimpleFilterProvider ( ) .addFilter ( CGLIB_FILTER_ID , new CglibBeanPropertyFilter ( ) ) ) 
__label__0 assertThat ( response ) .isEqualTo ( `` Woop woop . yay\n '' ) 
__label__0 CommonUtils.randomAlphaNumString ( random.nextInt ( 10 ) ) 
__label__0 matched & & matcher.groupCount ( ) > 0 
__label__0 CommonUtils.randomAlphaNumString ( random.nextInt ( 10 ) ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['terms.facetFilter'  '('  'standardFilters'  '('  'range'  ' '  'filter'  ')'  ')'] 
__label__0 assertTrue ( `` reuse-address '' , networkConfig.isReuseAddress ( ) ) 
__label__0 new Duration ( 60 , TimeUnit.SECONDS ) 
__label__1 ['logger.warn'  '('  '``'  '{'  '}'  '{'  '}'  "''"  ' '  'errorCode'  ' '  'message'  ')'] 
__label__1 ['ResponseBody.create'  '('  'MediaType.get'  '('  '``'  'text/plain'  "''"  ')'  ' '  'new'  'byte'  '['  '0'  ']'  ')'] 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__0 PostgreSQLConnectorConfig.class 
__label__0 / * * * Converts the given object into a canonical JSON string . * @ param object an object * @ return { @ code object } as a JSON string * @ throws IOException if there is an error writing { @ code object } as JSON * / public static String asJson ( Object object ) throws IllegalArgumentException { return JSON.writeValueAsString ( object ) ; } 
__label__1 ['lineageInfo.getParents'  '('  ')'] 
__label__0 StatBuckets.prettyUptimeStr ( secs ) 
__label__0 new Duration ( 30 , SECONDS ) 
__label__1 ['IllegalStateException'  'ise'] 
__label__0 responseCode < OK || MULTIPLE_CHOICES < = responseCode 
__label__1 ['Class.forName'  '('  'className.replace'  '('  "'/"  "'"  ' '  "'"  '.'  "'"  ')'  ')'] 
__label__1 ['IOUtils.closeQuitely'  '('  'is'  ')'] 
__label__1 ['Integer.valueOf'  '('  'matcher.group'  '('  '1'  ')'  ')'] 
__label__1 ['new'  'IllegalStateException'  '('  '``'  'PLAIN'  'supports'  'neither'  'integrity'  'nor'  'privacy'  "''"  ')'] 
__label__1 ['new'  'SSL'  '('  '('  'short'  ')'  '0'  ' '  '('  'short'  ')'  'MIN_SSL_OPTIONS'  ' '  '('  'short'  ')'  'sslPort'  ')'] 
__label__1 ['assertClusterSize'  '('  '2'  ' '  'nodes'  '['  '0'  ']'  ')'] 
__label__0 conf.getRestBaseURL ( ) 
__label__0 LOG.debug ( `` Building gRPC server on `` + configuration.getHost ( ) + `` : '' + configuration.getPort ( ) ) 
__label__1 ['chain.filter'  '('  'exchange'  ')'  '.compose'  '('  '('  'call'  ')'  '-'  '>'  'filter'  '('  'exchange'  ' '  'call'  ')'  ')'] 
__label__1 ['length'  '%'  'dictionarySize'] 
__label__1 ['LOG.debug'  '('  '``'  'recovered'  'from'  '``'  '+'  'StringUtils.stringifyException'  '('  'e'  ')'  ')'] 
__label__0 nearCache.invalidate ( key ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class AtomicLongBasicLocalTest extends AtomicLongAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( ) { return createHazelcastInstanceFactory ( 1 ) .newInstances ( ) ; } } 
__label__0 new StringBuilder ( 734 ) 
__label__1 ['public'  'class'  'XpathRegressionDeclarationOrderTest'  'extends'  'AbstractXpathTestSupport'  '{'  '@'  'Test'  'public'  'void'  'testOne'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=DeclarationOrderCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionDeclarationOne.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'DeclarationOrderCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '5:5'  ':'  '``'  '+'  'getCheckMessage'  '('  'DeclarationOrderCheck.class'  ' '  'DeclarationOrderCheck.MSG_ACCESS'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Arrays.asList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionDeclarationOne"  "'"  ']'  "''"  '+'  '``'  '/OBJBLOCK/VARIABLE_DEF'  '['  '@'  "text='name"  "'"  ']'  "''"  ' '  "''"  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionDeclarationOne"  "'"  ']'  "''"  '+'  '``'  '/OBJBLOCK/VARIABLE_DEF'  '['  '@'  "text='name"  "'"  ']'  '/MODIFIERS'  "''"  ' '  "''"  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionDeclarationOne"  "'"  ']'  "''"  '+'  '``'  '/OBJBLOCK/VARIABLE_DEF'  '['  '@'  "text='name"  "'"  ']'  '/MODIFIERS/LITERAL_PUBLIC'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testTwo'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=DeclarationOrderCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionDeclarationTwo.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'DeclarationOrderCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '5:5'  ':'  '``'  '+'  'getCheckMessage'  '('  'DeclarationOrderCheck.class'  ' '  'DeclarationOrderCheck.MSG_STATIC'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Arrays.asList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionDeclarationTwo"  "'"  ']'  "''"  '+'  '``'  '/OBJBLOCK/VARIABLE_DEF'  '['  '@'  "text='MAX"  "'"  ']'  "''"  ' '  "''"  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionDeclarationTwo"  "'"  ']'  "''"  '+'  '``'  '/OBJBLOCK/VARIABLE_DEF'  '['  '@'  "text='MAX"  "'"  ']'  '/MODIFIERS'  "''"  ' '  "''"  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionDeclarationTwo"  "'"  ']'  "''"  '+'  '``'  '/OBJBLOCK/VARIABLE_DEF'  '['  '@'  "text='MAX"  "'"  ']'  '/MODIFIERS/LITERAL_PUBLIC'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '}'] 
__label__0 new InetSocketAddress ( configuration.getRestListenUri ( ) .getHost ( ) , configuration.getRestListenUri ( ) .getPort ( ) ) 
__label__1 ['TfsShell.convertMsToDate'  '('  'mTfs.getInfo'  '('  'mTfs.open'  '('  'tUri'  ')'  ')'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__0 ImmutableSet < Key < ? > > 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__0 assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { assertFalse ( lock.isLocked ( ) ) ; } } ,20 ) 
__label__0 handleSecurityPermissionActions ( child , permConfig ) 
__label__1 ['parser.parse'  '('  'INFO_OPTIONS'  ' '  'args'  ' '  'false'  ')'] 
__label__1 ['location.belongTo'  '('  'BlockStoreLocation.anyTier'  '('  ')'  ')'] 
__label__1 ['uncompressedProto.length'  '<'  '1000000'] 
__label__1 ['name'  '=='  'null'] 
__label__0 ImmutableList < Stats > 
__label__0 LOG.debug ( `` Creating short circuit input stream for block { } @ { } '' , blockId , address ) 
__label__1 ['Arrays.asList'  '('  '``'  'SuppressWithNearbyCommentFilter.fileContents'  "''"  ' '  "''"  'SuppressionCommentFilter.fileContents'  "''"  ' '  "''"  'MethodNameCheck.applyToPackage'  "''"  ' '  "''"  'MethodNameCheck.applyToPrivate'  "''"  ' '  "''"  'MethodNameCheck.applyToProtected'  "''"  ' '  "''"  'MethodNameCheck.applyToPublic'  "''"  ')'] 
__label__0 Long.parseLong ( args [ 2 ] ) 
__label__1 ['clearFromMember.start'  '('  ')'] 
__label__1 ['new'  'MethodInjectionTarget'  '('  'methodName'  ' '  'methodInfo.declaringClass'  '('  ')'  '.name'  '('  ')'  '.toString'  '('  ')'  ' '  'methodInfo.args'  '('  ')'  '['  '0'  ']'  '.name'  '('  ')'  '.toString'  '('  ')'  ')'] 
__label__0 getLog ( ) .warn ( `` register druid-driver mbean error '' , ex ) 
__label__0 mpline.substring ( 0 , p ) .trim ( ) .toLowerCase ( Locale.US ) 
__label__1 ['new'  'PrestoException'  '('  'INVALID_CAST_ARGUMENT'  ' '  'e'  ')'] 
__label__0 findModule ( moduleName ) 
__label__0 this.thrown.expectMessage ( `` File must exist '' ) 
__label__1 ['LOG.info'  '('  'getName'  '('  ')'  '+'  '``'  'caught'  ':'  '``'  ' '  'e'  ')'] 
__label__0 conf.getRestBaseURL ( ) 
__label__0 from ( `` direct : b '' ) .delay ( 4000 ) 
__label__0 status ( ) .isFound ( ) 
__label__1 ['channel.getPipeline'  '('  ')'  '.sendUpstream'  '('  'new'  'DefaultExceptionEvent'  '('  'channel'  ' '  'cause'  ')'  ')'] 
__label__1 ['bc.getExecutorService'  '('  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Node'  '``'  '+'  'path'  '+'  '``'  'already'  'exists'  'and'  'this'  'is'  'not'  'a'  '``'  '+'  '``'  'retry'  "''"  ')'] 
__label__0 postAgg.getName ( ) .equalsIgnoreCase ( metricName ) 
__label__1 ['gl.glDeleteBuffer'  '('  'depthStencilPackedBufferHandle'  ')'] 
__label__0 stat.st_mtim.tv_nsec.longValue ( ) 
__label__1 ['model.getBoundingBox'  '('  'bbox'  ')'] 
__label__0 new StringBuilder ( 238 ) 
__label__0 assignedServers.add ( holder ) 
__label__1 ['ArrayUtils.subarray'  '('  'args 4'  ' '  'args.length'  ')'] 
__label__1 ['log.debug'  '('  '``'  'PID'  'contains'  'identifier'  'with'  'no'  'assigning'  'authority'  "''"  ')'] 
__label__1 ['Arrays.asList'  '('  'STANFORD_TOKENIZE'  ' '  'STANFORD_SSPLIT'  ')'] 
__label__1 ['assertEquals'  '('  'fStopwatch.runtime'  '('  'MILLISECONDS'  ')'  ' 800d 250d'  ')'] 
__label__1 ['executor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'stream'  '%'  'd'  "''"  ' '  'hostname'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'writeSynReset'  '('  'streamId'  ' '  'errorCode'  ')'  ';'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__1 ['UnsupportedOperationException'  'ex'] 
__label__1 ['endpoint.expectedMessageCount'  '('  '1'  ')'] 
__label__0 assertEquals ( 3 , historyService.createHistoricActivityInstanceQuery ( ) .processDefinitionId ( processInstance.getProcessDefinitionId ( ) ) .list ( ) .size ( ) ) 
__label__0 processor.open ( w , request , AtmosphereResponse.newInstance ( framework.getAtmosphereConfig ( ) , request , w ) ) 
__label__1 ['assertTrue'  '('  'model.getUniqueItems'  '('  ')'  ')'] 
__label__1 ['new'  'StringInputRowParser'  '('  'new'  'JSONParseSpec'  '('  'new'  'TimestampSpec'  '('  '``'  'timestamp'  "''"  ' '  "''"  'auto'  "''"  ')'  ' '  'new'  'DimensionsSpec'  '('  'Arrays.asList'  '('  '``'  'dim1'  "''"  ' '  "''"  'dim2'  "''"  ')'  ' '  'null'  ' '  'null'  ')'  ')'  ' '  'null'  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'exist'  "''"  ')'] 
__label__0 RetryHandlingBlockMasterClient.class 
__label__1 ['additionalProperties.remove'  '('  'DATE_FORMAT'  ')'] 
__label__0 new UnilateralSortMerger < TestData.Key , TestData.Value > ( memoryManager , ioManager,40 * 1024 * 1024,1024 * 1024 * 1,10,2 , keySerialization , valSerialization , keyComparator , reader , parentTask,0.7f ) 
__label__1 ['PointLookupOptimizer.class'] 
__label__0 assertEquals ( 6358481l , received.get ( 0 ) [ 1 ] ) 
__label__1 ['LOCAL_OPTION.getOpt'  '('  ')'] 
__label__0 new Font ( edgeFontName , edgeFontStyle , edgeFontSize ) 
__label__0 metricName.toString ( ) 
__label__1 ['testTLS'  '('  'Cert.CLIENT_PEM_ROOT_CA'  ' '  'Trust.SERVER_JKS'  ' '  'Cert.SERVER_JKS'  ' '  'Trust.CLIENT_PEM_ROOT_CA'  ')'  '.requiresClientAuth'  '('  ')'  '.clientUsesCrl'  '('  ')'] 
__label__0 cSet.getConceptSet ( ) 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  'initializers'  '['  '0'  ']'  ' '  'initializers'  '['  '1'  ']'  ')'] 
__label__1 ['0'  '-'  'originY'] 
__label__1 ['getMockEndpoint'  '('  '``'  'mock'  ':'  'event'  "''"  ')'  '.expectedMessageCount'  '('  '5'  ')'] 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__0 pairs ! = null & & pairs.getKeyValues ( ) ! = null 
__label__1 ['sections.remove'  '('  'section'  ')'] 
__label__0 HttpHeaderValues.IDENTITY.contentEquals ( targetContentEncoding ) 
__label__0 _committedTo ! = lastCompletedOffset 
__label__1 ['FsDatasetImpl.LOG.info'  '('  '``'  'Completed'  'checkDirs'  '.'  'Removed'  '``'  '+'  'removedVols.size'  '('  ')'  '+'  '``'  'volumes'  '.'  'Current'  'volumes'  ':'  '``'  '+'  'this'  ')'] 
__label__0 conceptAnswer.getAnswerConcept ( ) 
__label__1 ['MathUtils.random'  '('  'height'  ')'] 
__label__1 ['getPreferences'  '('  ')'  '.setProperty'  '('  'key'  ' '  'value'  ')'] 
__label__1 ['edge.setType'  '('  'edgeDefault'  ')'] 
__label__1 ['public'  'abstract'  '<'  'T'  '>'  'SctpChannel'  'setOption'  '('  'SctpSocketOption'  '<'  'T'  '>'  'name'  ' '  'T'  'value'  ')'  'throws'  'IOException'  ';'] 
__label__0 @ Override public Response headers ( Map < String , Property > headers ) { throw new RuntimeException ( `` Not implemented '' ) ; } 
__label__1 ['new'  'FieldFrame'  '('  'currentFrame'  ' '  'isStaticInnerType'  ' '  'type'  ' '  'type'  '=='  'TokenTypes.CLASS_DEF'  '||'  'type'  '=='  'TokenTypes.ENUM_DEF'  '?'  'ast.findFirstToken'  '('  'TokenTypes.IDENT'  ')'  '.getText'  '('  ')'  ':'  'null'  ')'] 
__label__1 ['ImmutableList.of'  '('  ')'] 
__label__0 scanFeatures ( getKarafFeatureUrl ( ) , '' jetty '' ) 
__label__1 ['log.error'  '('  '``'  'Both'  'session'  '('  ')'  'and'  'unauthenticated'  '('  ')'  'are'  'set'  'for'  'this'  'request'  ' '  'this'  'is'  'a'  'bug'  ' '  'using'  'session'  'id'  '.'  "''"  ')'] 
__label__0 queryPurger.scheduleWithFixedDelay ( new PurgeQueriesRunnable ( queries.keySet ( ) , queryManager ) ,200,200 , TimeUnit.MILLISECONDS ) 
__label__1 ['n'  '<'  'count'  '('  'coll'  ')'] 
__label__0 new DefaultPropertyNamePatternsMatcher ( EXACT_DELIMITERS , true , names ) 
__label__0 node1.isEquivalentToTyped ( node2 ) 
__label__0 checkArgument ( prestoTypeParameters.size ( ) == fieldTypes.size ( ) , '' Schema mismatch , metastore schema for row column % s has % s fields but parquet schema has % s fields '' , columnName , prestoTypeParameters.size ( ) , fieldTypes.size ( ) ) 
__label__1 ['assertEquals'  '('  '0'  ' '  'beanInfo.getAttributes'  '('  ')'  '.length'  ')'] 
__label__1 ['raw.getParameters'  '('  ')'] 
__label__0 assertEquals ( conf , ( Configuration ) serializeDeserialize ( conf ) ) 
__label__0 Long.parseLong ( args [ 2 ] ) 
__label__0 GenericUDFEnforceConstraint.class 
__label__1 ['('  'ObjectDeserializer'  ')'  'value'] 
__label__1 ['Outcome.match'  '('  '``'  'missing'  'database'  'driver'  '``'  '+'  'driverClassName'  ')'] 
__label__0 new StringBuilder ( 238 ) 
__label__1 ['NettyAsyncHttpProvider.class'] 
__label__1 ['postAgg.getName'  '('  ')'  '.equals'  '('  'topNMetricName'  ')'] 
__label__1 ['retry.attemptRetry'  '('  ')'] 
__label__0 waitUntil ( ( ) - > pongsReceived.get ( ) == NODE_COUNT * NODE_COUNT * ADDRESSES_COUNT,60_000 ) 
__label__0 renderer.rect ( x + rect.x + settings.paddingX , y + rect.y + settings.paddingY , rect.width - settings.paddingX , rect.height - settings.paddingY ) 
__label__1 ['element.getNodeName'  '('  ')'] 
__label__1 ['DelimitedRecordHiveMapper.class'] 
__label__1 ['generator.generateX509Certificate'  '('  'signedByKeyPair.getPrivate'  '('  ')'  ')'] 
__label__1 ['ImmutableSet.of'  '('  'modules'  ')'] 
__label__1 ['``'  'Interrupted'  'when'  'attempting'  'to'  'close'  'writer'  'for'  'end'  'point'  ':'  '``'  '+'  'ep'] 
__label__1 ['LOG.error'  '('  '``'  'Unable'  'to'  'delete'  '{'  '}'  'because'  'listInternal'  'returns'  'null'  "''"  ' '  'path'  ')'] 
__label__0 ! isIgnoreUriScheme ( ) 
__label__0 index > = capacity ( ) 
__label__1 ['mapper.writeValueAsString'  '('  'segment'  ')'] 
__label__1 ['Thread.sleep'  '('  '200'  ')'] 
__label__1 ['public'  'DerivedBuilder'  'setRealmDomain'  '('  'String'  'domain'  ')'  '{'  'realm'  '('  ')'  '.setDomain'  '('  'domain'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__0 ImmutableList < Symbol > 
__label__0 GL20.glUniformMatrix2fv ( location , transpose , toFloatBuffer ( value , offset , count < < 2 ) ) 
__label__1 ['public'  'class'  'XpathRegressionNestedIfDepthTest'  'extends'  'AbstractXpathTestSupport'  '{'  '@'  'Test'  'public'  'void'  'testCorrect'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=NestedIfDepthCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionNestedIfDepth.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'NestedIfDepthCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '10:17'  ':'  '``'  '+'  'getCheckMessage'  '('  'NestedIfDepthCheck.class'  ' '  'NestedIfDepthCheck.MSG_KEY 2 1'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionNestedIfDepth"  "'"  ']'  '/OBJBLOCK'  "''"  '+'  '``'  '/METHOD_DEF'  '['  '@'  "text='test"  "'"  ']'  '/SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '}'] 
__label__1 ['Integer.valueOf'  '('  'st.nextToken'  '('  ')'  ')'] 
__label__1 ['RuntimeGlue'  'optionalGlue'] 
__label__0 start.expectedMessageCount ( 7 ) 
__label__1 ['new'  'ValueComparator'  '('  'sortOrderAscending'  ' '  'type'  ')'] 
__label__1 ['new'  'JSONParseSpec'  '('  'new'  'TimestampSpec'  '('  '``'  'timestamp'  "''"  ' '  "''"  'auto'  "''"  ')'  ' '  'new'  'DimensionsSpec'  '('  'null'  ' '  'null'  ' '  'null'  ')'  ' '  'JSONParseSpec.JSON'  ')'] 
__label__1 ['assertEquals'  '('  'response.getStatusCode'  '('  ')'  ' 302'  ')'] 
__label__1 ['mock.expectedBodiesReceived'  '('  '``'  'Hello'  'World'  '3'  "''"  ')'] 
__label__0 new StringBuilder ( 245 ) 
__label__1 ['taskService.createTaskQuery'  '('  ')'  '.or'  '('  ')'  '.taskInvolvedUser'  '('  '``'  'involvedUser'  "''"  ')'  '.taskInvolvedGroups'  '('  'groups'  ')'] 
__label__1 ['replicatedMapService.getReplicatedRecordStore'  '('  'mapName'  ' '  'false'  ')'] 
__label__0 ImmutableSet.of ( `` reportUnknownTypes '' , '' analyzerChecks '' ) 
__label__1 ['new'  'byte'  '['  '13'  ']'] 
__label__1 ['minPriority'  '=='  'null'  '?'  '1'  ':'  'minPriority'] 
__label__1 ['Thread.sleep'  '('  '100'  ')'] 
__label__0 override.asString ( ) 
__label__1 ['mock.expectedMessageCount'  '('  '2'  ')'] 
__label__1 ['editor.commit'  '('  ')'] 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS'  ')'] 
__label__1 ['Character.toLowerCase'  '('  'ch'  ')'] 
__label__1 ['dstPath.getValue'  '('  ')'] 
__label__0 new IncrementalIndexSegment ( rtIndex , null ) 
__label__0 serverSocket == null || ! serverSocket.isBound ( ) 
__label__1 ['offsetRepository'  '!'  '='  'null'] 
__label__1 ['assertTrueAllTheTime'  '('  '('  ')'  '-'  '>'  '{'  'assertTrue'  '('  'map.containsKey'  '('  '0'  ')'  ')'  ';'  'Collection'  '<'  'Employee'  '>'  'valuesNullCity=map.values'  '('  'predicateCityNull'  ')'  ';'  'assertEquals'  '('  '2'  ' '  'valuesNullCity.size'  '('  ')'  ')'  ';'  'Collection'  '<'  'Employee'  '>'  'valuesNotNullCity=map.values'  '('  'Predicates.equal'  '('  '``'  'city'  "''"  ' '  "''"  'cityname'  "''"  ')'  ')'  ';'  'assertEquals'  '('  '3'  ' '  'valuesNotNullCity.size'  '('  ')'  ')'  ';'  '}'  ' 5'  ')'] 
__label__0 assertEquals ( `` Unable to open `` . `` , iter.next ( ) .getMessage ( ) ) 
__label__0 converter.tryConvertTo ( rightValue.getClass ( ) , leftValue ) 
__label__0 logger.debug ( `` { } { } '' , errorCode , message ) 
__label__1 ['WebAppUtils.getResolvedRMWebAppURLWithoutScheme'  '('  'conf'  ')'] 
__label__0 factory.getOrCreateProxyByName ( packet.name ) 
__label__0 obj1.isLoose & & obj2.isLoose 
__label__0 new IllegalStateException ( `` Result is already complete : failed '' ) 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` mongo '' ) 
__label__0 page.getLogicalSizeInBytes ( ) 
__label__0 type.toLowerCase ( ENGLISH ) 
__label__1 ['reportMissingOverride.isOn'  '('  ')'  '&'  '&'  '!'  'declaredOverride'  '&'  '&'  'superClassHasDeclaredProperty'  '&'  '&'  'declaredLocally'] 
__label__1 ['region'  '!'  '='  'null'] 
__label__0 QuotaCache.this.tableQuotaCache.containsKey ( table ) 
__label__0 EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT ( target , attachment , pname , params ) 
__label__0 activeFrom.getTime ( ) 
__label__1 ['IOHelper.getCharsetName'  '('  'exchange'  ')'] 
__label__0 new ResourceProfile ( Double.MAX_VALUE , Integer.MAX_VALUE , Integer.MAX_VALUE , Integer.MAX_VALUE , Integer.MAX_VALUE , managedMemoryPerSlotMB , Collections.emptyMap ( ) ) 
__label__1 ['GL.glBindTextureEXT'  '('  'target'  ' '  'texture'  ')'] 
__label__0 localInputFuture.cancel ( mayInterruptIfRunning ) 
__label__1 ['channelIdle'  '('  'ctx'  ' '  'IdleState.WRITER_IDLE'  ' '  'lastReadTime'  ')'] 
__label__0 ! config.isAutoRead ( ) 
__label__0 generator.generate ( signedByKeyPair.getPrivate ( ) ) 
__label__0 assertEquals ( `` Was : `` + map + `` , no-auto-index : '' + functionalTestHelper.removeAnyAutoIndex ( map ) ,1 , functionalTestHelper.removeAnyAutoIndex ( map ) .size ( ) ) 
__label__1 ['Assert.assertEquals'  '('  'select.size'  '('  ')'  ' 1'  ')'] 
__label__0 assertEquals ( avDegree,1.0 ) 
__label__1 ['logger.trace'  '('  '``'  'Receive'  'queue'  'TAKE'  ':'  'Length='  '{'  '}'  "''"  ' '  'recvQueue.size'  '('  ')'  ')'] 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'diskspace'  "''"  ')'] 
__label__0 logger.debug ( `` [ { } ] : Websocket error : { } '' , connection.getHost ( ) , e.getMessage ( ) ) 
__label__0 engine.execute ( cypher ) .dumpToString ( ) 
__label__0 configure ( COMPONENT , '' cxf-jaxb '' ) 
__label__0 Latkes.getStaticServePath ( ) 
__label__1 ['statistics.addPutTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['new'  'DataSegment'  '('  '``'  'test'  "''"  ' '  'new'  'Interval'  '('  '``'  '2012-02-01/2012-02-02'  "''"  ')'  ' '  'new'  'DateTime'  '('  ')'  '.toString'  '('  ')'  ' '  'Maps.'  '<'  'String'  ' '  'Object'  '>'  'newHashMap'  '('  ')'  ' '  'Lists.'  '<'  'String'  '>'  'newArrayList'  '('  ')'  ' '  'Lists.'  '<'  'String'  '>'  'newArrayList'  '('  ')'  ' '  'new'  'NoneShardSpec'  '('  ')'  ' 1'  ')'] 
__label__0 Bytes.toBytes ( tableNameOrRegionName ) 
__label__0 retVal.setProperty ( entry.getKey ( ) , value ) 
__label__1 ['assertEquals'  '('  '2'  ' '  'historyService.createHistoricActivityInstanceQuery'  '('  ')'  '.processInstanceId'  '('  'processInstance.getId'  '('  ')'  ')'  '.count'  '('  ')'  ')'] 
__label__1 ['ran.nextInt'  '('  '500'  ')'] 
__label__1 ['maxPendingPersists'  '>'  '0'] 
__label__0 f.getAttrs ( ) .getMTime ( ) * 1000L 
__label__1 ['assertTrue'  '('  'jmsTemplate.isPubSubDomain'  '('  ')'  ')'] 
__label__1 ['('  'a'  '&'  '0xe0'  ')'  '=='  '0xb0'] 
__label__1 ['EnterpriseMapPublisherCreateCodec.decodeResponse'  '('  'response'  ')'  '.list'] 
__label__0 recursiveUFSDeletes.remove ( ancestorPair ) 
__label__1 ['ownedEntryCount'  '>'  '='  'nearCacheSize'] 
__label__0 mock.expectedBodiesReceivedInAnyOrder ( `` c '' , '' b '' , '' a '' ) 
__label__0 LinkedHashMap < String , Operator < ? extends Serializable > > 
__label__0 conf.getRestBaseURL ( ) 
__label__0 ! isCancelled0 ( result ) 
__label__1 ['interceptors.addFirst'  '('  'newAInterceptor'  '('  'a'  ')'  ')'] 
__label__1 ['getPath'  '('  '``'  'InputPackageDeclarationDiffDirectory.java'  "''"  ')'] 
__label__1 ['resultEndpoint.expectedBodiesReceived'  '('  '``'  'one'  "''"  ' '  "''"  'two'  "''"  ' '  "''"  'three'  "''"  ')'] 
__label__0 indexOutURI.toString ( ) 
__label__1 ['container.getAttributeModel'  '('  ')'  '.getNodeTable'  '('  ')'] 
__label__0 MessageOutput.Factory < DiscardMessageOutput > 
__label__1 ['getRedeliverDelay'  '('  ')'] 
__label__0 CommonUtils.randomAlphaNumString ( random.nextInt ( 10 ) ) 
__label__0 assertThat ( request.getBody ( ) .readUtf8 ( ) ) .isIn ( `` < my-object > < message > hello world < /message > < count > 10 < /count > < /my-object > '' , '' < my-object > < count > 10 < /count > < message > hello world < /message > < /my-object > '' ) 
__label__0 ! ( ( ExchangeIdempotentRepository < String > ) idempotentRepository ) .contains ( exchange , messageId ) 
__label__1 ['new'  'ChannelHandlerAdapter'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'channelWritabilityChanged'  '('  'ChannelHandlerContext'  'ctx'  ')'  'throws'  'Exception'  '{'  'buf.append'  '('  'ctx.channel'  '('  ')'  '.isWritable'  '('  ')'  ')'  ';'  'buf.append'  '('  "'"  "'"  ')'  ';'  '}'  '}'] 
__label__0 getLsNoAclResultStr ( `` /testRoot/testDir '' , files [ 1 ] .getCreationTimeMs ( ) ,1 , LsCommand.STATE_FOLDER ) 
__label__0 LOG.isDebugEnabled ( ) 
__label__1 ['superClass'  '=='  'Object.class'] 
__label__1 ['c.getPath'  '('  ')'  '=='  'null'] 
__label__0 / * * * The package controller for the current file . Used for performance optimisation . * / private ImportControl currentLeaf ; 
__label__1 ['part.getDataLocation'  '('  ')'] 
__label__0 obj.getRequiredTokens ( ) 
__label__0 logger.debug ( `` [ { } ] : Websocket error : { } '' , connection.getHost ( ) , e.getMessage ( ) ) 
__label__0 HELSINKI { @ Override public ServiceNowProducer get ( ServiceNowEndpoint endpoint ) throws Exception { return new HelsinkiServiceNowProducer ( endpoint ) ; } } 
__label__1 ['Long.valueOf'  '('  'args'  '['  '1'  ']'  ')'] 
__label__1 ['Callable'  '<'  'Integer'  '>'] 
__label__1 ['future.isCancelled'  '('  ')'] 
__label__1 ['failOrAccept'  '('  'prevAccept'  ' '  'input'  ' '  'reach'  ' '  't'  ')'] 
__label__0 minPriority == null ? 0 : minPriority 
__label__0 invocation.logger.finest ( `` Asking if operation execution has been started : `` + invocation ) 
__label__1 ['Assert.assertFalse'  '('  '``'  'reload-required'  "''"  '.equals'  '('  'result.get'  '('  'RESPONSE_HEADERS'  ')'  '.get'  '('  'PROCESS_STATE'  ')'  '.asString'  '('  ')'  ')'  ')'] 
__label__0 Assert.assertEquals ( getNotAllowedExceptionMessage ( `` helloForRoles '' ) , e.getCause ( ) .getMessage ( ) ) 
__label__1 ['new'  'FileWrapper'  '('  'token'  ')'  '.exists'  '('  ')'] 
__label__0 bean.getCollectionTime ( ) 
__label__0 GL.glGenTextures ( n , toBuffer ( textures , offset ) ,0 ) 
__label__0 Bytes.toBytes ( tableNameOrRegionName ) 
__label__1 ['connection.setFollowRedirects'  '('  'httpRequest.getFollowRedirects'  '('  ')'  ')'] 
__label__0 grammar.getTokenDisplayNames ( ) 
__label__1 ['getLsResultStr'  '('  '``'  '/testRoot/testDir'  "''"  ' '  'files'  '['  '1'  ']'  '.getCreationTimeMs'  '('  ')'  ' 0'  ' '  'LsCommand.STATE_FOLDER'  ' '  'testUser'  ' '  'testUser'  ' '  'files'  '['  '1'  ']'  '.getPermission'  '('  ')'  ' '  'files'  '['  '1'  ']'  '.isFolder'  '('  ')'  ')'] 
__label__0 factory.terminateAll ( ) 
__label__0 new ProcessBuilder ( java , vmArguments , '' -cp '' , h2jar.getAbsolutePath ( ) , Server.class.getName ( ) , '' -tcp '' , '' -ifNotExists '' , '' -baseDir '' , tempDir.resolve ( `` database-in-time-zone '' ) .toString ( ) ) 
__label__1 ['endPosition.getPosition'  '('  ')'  '<'  'logfileoffset'] 
__label__0 Error|ClassNotFoundException 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectoryAtSubpackage.java '' ) 
__label__1 ['out.writeDouble'  '('  '('  'Float'  ')'  'obj'  ')'] 
__label__1 ['GL20.glUniform4'  '('  'location'  ' '  'toIntBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '<'  '<'  '2'  ')'  ')'] 
__label__1 ['registry.put'  '('  '``'  'amazonSQSClient'  "''"  ' '  'clientMock'  ')'] 
__label__0 resource.removeExtractor ( input.getId ( ) , extractorId ) 
__label__1 ['builder.add'  '('  'new'  'ImplementSampleAsFilter'  '('  ')'  ' '  'new'  'SimplifyExpressions'  '('  'metadata'  ')'  ' '  'new'  'UnaliasSymbolReferences'  '('  ')'  ' '  'new'  'PruneRedundantProjections'  '('  ')'  ' '  'new'  'SetFlatteningOptimizer'  '('  ')'  ' '  'new'  'LimitPushDown'  '('  ')'  ' '  'new'  'PredicatePushDown'  '('  'metadata'  ' '  'splitManager'  ')'  ' '  'new'  'PredicatePushDown'  '('  'metadata'  ' '  'splitManager'  ')'  ' '  'new'  'MergeProjections'  '('  ')'  ' '  'new'  'SimplifyExpressions'  '('  'metadata'  ')'  ' '  'new'  'UnaliasSymbolReferences'  '('  ')'  ' '  'new'  'PruneRedundantProjections'  '('  ')'  ' '  'new'  'PruneUnreferencedOutputs'  '('  ')'  ')'] 
__label__0 holder.addCallback ( callback ) 
__label__1 ['fields'  '['  'i'  ']'  '>'  '='  '0'] 
__label__1 ['Calendar.getInstance'  '('  'JSON.defaultLocale'  ')'] 
__label__0 new MaterializingOperator ( operatorContext , sourceTypes ) 
__label__1 ['Preconditions.checkNotNull'  '('  'uri'  ')'] 
__label__0 getConnectTimeout ( ) 
__label__0 promise.trySuccess ( null ) 
__label__1 ['args.length'  '>'  '1'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 event.isCancelled ( ) 
__label__0 boolean injvm ( ) default true ; 
__label__1 ['new'  'DataSize'  '('  '42'  ' '  'Unit.MEGABYTE'  ')'] 
__label__0 maxActiveSessions == null & & servletContainerService ! = null 
__label__0 registry.bind ( `` blogService '' , new BlogService ( ) ) 
__label__0 mock.setResultWaitTime ( 4000 ) 
__label__0 new CacheCreateConfigRequest ( cacheConfig , false , partitionId ) 
__label__0 new GeneralDataCoding ( false , true , MessageClass.CLASS1 , Alphabet.ALPHA_8_BIT ) 
__label__1 ['target'  '!'  '='  'null'] 
__label__1 ['i'  '<'  'maxIndex'] 
__label__1 ['this.connectTo'  '('  'vertex'  ' '  'null'  ' '  'null'  ' '  '-1'  ' '  '-1'  ' '  'DistributionPattern.BIPARTITE'  ' '  'false'  ')'] 
__label__0 new FileWrapper ( token ) .exists ( ) || new FileWrapper ( token ) .mkdirs ( ) 
__label__0 new StormBoundedExponentialBackoffRetry ( Utils.getInt ( conf.get ( Config.STORM_ZOOKEEPER_RETRY_INTERVAL ) ) , Utils.getInt ( conf.get ( Config.STORM_ZOOKEEPER_RETRY_INTERVAL_CEILING ) ) , Utils.getInt ( conf.get ( Config.STORM_ZOOKEEPER_RETRY_TIMES ) ) ) 
__label__1 ['securityDomain'  '!'  '='  'null'] 
__label__0 ! isCancelled0 ( result ) 
__label__0 entry.getKey ( ) .getServerName ( ) 
__label__1 ['GL20.glGetVertexAttrib'  '('  'index'  ' '  'pname'  ' '  'params'  ')'] 
__label__1 ['profileCluster.clear'  '('  ')'] 
__label__1 ['instance2.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 RedisTemplate < Object , Object > 
__label__1 ['new'  'byte'  '['  '13'  ']'] 
__label__1 ['ufsPath.getPath'  '('  ')'] 
__label__1 ['startTest'  '('  'getMethodName'  '('  ')'  ' '  'false'  ')'] 
__label__1 ['!'  'method.getName'  '('  ')'  '.equals'  '('  'methodToSearch'  ')'  '||'  '!'  'method.getReturnType'  '('  ')'  '.isAssignableFrom'  '('  'methodToFind.getReturnType'  '('  ')'  ')'] 
__label__1 ['checkArgument'  '('  'prestoTypeParameters.size'  '('  ')'  '=='  'fieldTypes.size'  '('  ')'  ')'] 
__label__0 REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet ( this , nanos , nanos + duration ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '674'  ')'] 
__label__0 getPath ( `` InputGenericWhitespaceEndsTheLine.java '' ) 
__label__0 superClass == Object.class || superClass == null 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'not'  'be'  'null'  "''"  ')'] 
__label__0 lookup=Resources.REQUEST_QUEUE 
__label__0 LOG.debug ( `` Creating short circuit input stream for block { } @ { } '' , blockId , address ) 
__label__0 cache.setColors ( style.fontColor == null ? color : Color.tmp.set ( color ) .mul ( style.fontColor ) ) 
__label__1 ['model.getSelectedLayout'  '('  ')'  '!'  '='  'null'] 
__label__1 ['type.equalsIgnoreCase'  '('  '``'  'boolean'  "''"  ')'] 
__label__1 ['config.getServerNumThreads'  '('  ')'] 
__label__0 new LwjglPreferences ( name , '' .prefs/ '' ) 
__label__1 ['public'  'DerivedBuilder'  'setRealmUsePreemptiveAuth'  '('  'boolean'  'usePreemptiveAuth'  ')'  '{'  'realm'  '('  ')'  '.setUsePreemptiveAuth'  '('  'usePreemptiveAuth'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__0 config.getIdleConnectionInPoolTimeoutInMs ( ) 
__label__1 ['createRecord'  '('  'value'  ' '  'expiryTime'  ')'] 
__label__1 ['Integer.toString'  '('  '1'  ')'] 
__label__0 LOG.debug ( `` Finding all components using class resolver : { } - > { } '' , new Object [ ] { resolver } ) 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__0 otherWriter.write ( line ) 
__label__1 ['tableMetadataBuilder'  '('  'DEFAULT_TEST_LINEITEMS'  ')'  '.column'  '('  '``'  'orderkey'  "''"  ' '  'BIGINT'  ')'  '.column'  '('  '``'  'partkey'  "''"  ' '  'BIGINT'  ')'  '.column'  '('  '``'  'quantity'  "''"  ' '  'BIGINT'  ')'] 
__label__1 ['logger.info'  '('  '``'  'Recording'  'function'  'information'  "''"  ')'] 
__label__0 l.onResume ( request , response ) 
__label__1 ['GL.glDeleteTexturesEXT'  '('  'n'  ' '  'textures'  ' '  'Memory.getPosition'  '('  'textures'  ')'  ')'] 
__label__1 ['file.getAbsoluteFile'  '('  ')'] 
__label__1 ['@'  'InputIntMethodAnnotation'  '('  '-44'  ')'] 
__label__1 ['Mockito.doNothing'  '('  ')'  '.when'  '('  'mFileSystemMasterClient'  ')'  '.mount'  '('  'alluxioPath'  ' '  'ufsPath'  ')'] 
__label__0 LOG.debug ( `` EOL ( end-of-line ) defined for the CSV : { } '' , eol ) 
__label__1 ['new'  'IllegalStateException'  '('  ')'] 
__label__1 ['Arrays.asList'  '('  'CoreAnnotations.TextAnnotation.class'  ' '  'CoreAnnotations.TokensAnnotation.class'  ' '  'CoreAnnotations.SentencesAnnotation.class'  ' '  'CoreAnnotations.CharacterOffsetBeginAnnotation.class'  ' '  'CoreAnnotations.CharacterOffsetEndAnnotation.class'  ' '  'CoreAnnotations.BeforeAnnotation.class'  ' '  'CoreAnnotations.AfterAnnotation.class'  ' '  'CoreAnnotations.TokenBeginAnnotation.class'  ' '  'CoreAnnotations.TokenEndAnnotation.class'  ' '  'CoreAnnotations.IndexAnnotation.class'  ' '  'CoreAnnotations.OriginalTextAnnotation.class'  ' '  'CoreAnnotations.SentenceIndexAnnotation.class'  ' '  'CoreAnnotations.IsNewlineAnnotation.class'  ')'] 
__label__1 ['TfsShell.convertMsToDate'  '('  'files'  '['  '0'  ']'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/friends_timeline.json'  "''"  ' '  'true'  ')'  ')'] 
__label__0 Objects.hashCode ( mLocationPolicy , mReadType , mCacheIncompleteBlock ) 
__label__1 ['status.isDir'  '('  ')'] 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__1 ['privObj.getObjectName'  '('  ')'  '.equals'  '('  '``'  'masking_test_subq'  "''"  ')'] 
__label__0 graph.getEdgesAndMetaEdges ( ) 
__label__0 getRegistry ( ) .bind ( `` hb '' , hb ) 
__label__1 ['Arrays.asList'  '('  '``'  'Int'  "''"  ' '  "''"  'Float'  "''"  ' '  "''"  'Double'  "''"  ' '  "''"  'Bool'  "''"  ' '  "''"  'Void'  "''"  ' '  "''"  'String'  "''"  ' '  "''"  'Character'  "''"  ')'] 
__label__0 node.getLifecycleService ( ) .shutdown ( ) 
__label__0 KeySequenceNumber.class 
__label__0 `` Excluding secondary region `` + bestRegionReplica + `` - trying to find a different region to refresh files . '' 
__label__1 ['basicGraph.getShortestPath'  '('  'root'  ' '  't'  ' '  'true'  ')'] 
__label__1 ['log.warn'  '('  '``'  'Annotation'  'scanning'  'mode'  'loaded'  '{'  '}'  'type'  'converters'  '.'  'Its'  'recommended'  'to'  'migrate'  'to'  '@'  'Converter'  '('  'loader'  '='  'true'  ')'  'for'  'fast'  'type'  'converter'  'mode'  '.'  "''"  ')'] 
__label__0 DataStreamSink < OUT > 
__label__0 test ( externs , js , ( String ) null , null , ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) 
__label__1 ['new'  'GetExecutionVariableInstancesCmd'  '('  'executionId'  ' '  'variableNames'  ' '  'false'  ')'] 
__label__0 graphModel.getGraph ( ) .getNodeCount ( ) 
__label__0 activeFrom.getTime ( ) 
__label__0 Status.createStatuseList ( http.get ( `` http : //yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json '' ) ) 
__label__1 ['IOUtils.closeQuitely'  '('  'is'  ')'] 
__label__1 ['registry.put'  '('  '``'  'params'  "''"  ' '  'params'  ')'] 
__label__0 beansXml.getOrCreateAlternatives ( ) 
__label__1 ['items'  '['  '29'  ']'] 
__label__1 ['retVal.put'  '('  'entry.getKey'  '('  ')'  ' '  'value'  ')'] 
__label__0 invocation.pendingResponse ! = null 
__label__0 createOrcWriterOptions ( oi , conf , cacheWriter , allocSize ) 
__label__1 ['UserGroupInformation.getCurrentUser'  '('  ')'  '.reloginFromKeytab'  '('  ')'] 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__1 ['size'  '*'  '1.75f'] 
__label__0 defaultCamelContext.removeRoute ( id ) 
__label__1 ['Assert.assertEquals'  '('  'select.size'  '('  ')'  ' 1'  ')'] 
__label__1 ['configuration.addClientInterceptor'  '('  'method'  ' '  'factory'  ' '  'InterceptorOrder.View.COMPONENT_DISPATCHER'  ')'] 
__label__1 ['notifier.getConfiguration'  '('  ')'  '.setPort'  '('  '25667'  ')'] 
__label__1 ['new'  'FunctionCall'  '('  '``'  'substring'  "''"  ' '  'new'  'PathExpression'  '('  'new'  'ObjectAccess'  '('  '``'  'addresses'  "''"  ')'  ' '  'new'  'ArrayAccess'  '('  '0'  ')'  ' '  'new'  'ObjectAccess'  '('  '``'  'zipCode'  "''"  ')'  ')'  ')'] 
__label__1 ['CamelCloudServiceCallConfiguration.class'] 
__label__0 new StringBuilder ( 560 ) 
__label__0 srcActivity.getParent ( ) == null || ! ( srcActivity.getParent ( ) instanceof PvmActivity ) 
__label__1 ['new'  'DeserializationException'  '('  'e'  ')'] 
__label__1 ['z.next_in'  '['  'z.next_in_index++'  ']'  '=='  '0'] 
__label__1 ['getDatabaseCatalog'  '('  ')'  '!'  '='  'null'] 
__label__0 ( xmin > x & & xmin < x + width ) & & ( xmax > x & & xmax < x + width ) 
__label__0 mock.expectedBodiesReceivedInAnyOrder ( `` Hello World 3 '' ) 
__label__1 ['('  'long'  ')'  'y'  '&'  '0xFFFFFFFL'] 
__label__0 ! Objects.equals ( builtInVersion , configuredVersion ) 
__label__1 ['Thread.sleep'  '('  '500'  ')'] 
__label__0 statistics.addPutTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['Exception'  'exception'] 
__label__1 ['waitLatch.await'  '('  '25'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__1 ['mapJoinTables'  '!'  '='  'null'] 
__label__0 `` source '' .equals ( key ) || `` target '' .equals ( key ) || `` value '' .equals ( key ) || `` weight '' .equals ( key ) || `` label '' .equals ( key ) 
__label__1 ['Thread.sleep'  '('  '200'  ')'] 
__label__1 ['Mono.just'  '('  'entry.getKey'  '('  ')'  ')'  '.and'  '('  'entry.getValue'  '('  ')'  '.health'  '('  ')'  '.compose'  '('  'this.timeoutCompose'  ')'  ')'] 
__label__0 System.currentTimeMillis ( ) 
__label__1 ['sX'  '!'  '='  '0'] 
__label__1 ['types.length'  '>'  '='  'Tuple.MAX_ARITY'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 status.getLastModificationTimeMs ( ) 
__label__1 ['assertThat'  '('  'page1reverse.pagination'  '('  ')'  '.getGlobalTotal'  '('  ')'  ')'  '.isEqualTo'  '('  '7'  ')'] 
__label__1 ['this.transactionsRepository.removeTransaction'  '('  'this.xidTransactionID'  ')'] 
__label__1 ['superClass'  '=='  'Object.class'] 
__label__1 ['DefaultManagementAgent.class'] 
__label__1 ['headerRow'  '!'  '='  'null'] 
__label__1 ['conn.getResponseCode'  '('  ')'  '=='  '201'] 
__label__1 ['LOG.error'  '('  '``'  'I/O'  'error'  'when'  'running'  'rpc'  "''"  ' '  'e'  ')'] 
__label__1 ['width'  '-'  'originY'] 
__label__1 ['config.setPort'  '('  '25667'  ')'] 
__label__0 super.getFamilyCellMap ( ) 
__label__1 ['final'  'StringBuffer'  'result=new'  'StringBuffer'  '('  '20'  ')'  ';'] 
__label__1 ['processInstance.getId'  '('  ')'] 
__label__1 ['minIdle'  '<'  '0'] 
__label__0 jsonHotRestartState ! = null 
__label__1 ['new'  'ModelNode'  '('  '10'  ')'] 
__label__1 ['element.getNodeName'  '('  ')'] 
__label__1 ['processInstanceArray.size'  '('  ')'  '=='  '0'] 
__label__0 deletionRetentionStrategyConfig == null 
__label__1 ['lock.lock'  '('  '1000'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__1 ['ImmutableList.of'  '('  'new'  'Identifier'  '('  '``'  'a'  "''"  ')'  ')'] 
__label__1 ['Mockito.any'  '('  ')'] 
__label__0 Wt.getSlice ( slice ) .plus ( Wt.getSlice ( slice ) .transpose ( ) ) 
__label__0 assertEquals ( 2 , scheduler.getQueueManager ( ) .getQueues ( ) .size ( ) ) 
__label__1 ['offset'  '('  '1.0'  ')'] 
__label__1 ['executionJobVertex.getParallelism'  '('  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__0 start.expectedMessageCount ( 7 ) 
__label__1 ['registry.put'  '('  '``'  'kinesisClient'  "''"  ' '  'amazonKinesisClient'  ')'] 
__label__0 expirationTime == Long.MAX_VALUE || expirationTime < 0 
__label__1 ['LOG.error'  '('  '``'  'Can'  'not'  'create'  'writer'  'for'  'app'  '``'  '+'  'this.applicationId'  '+'  '``'  '.'  'Skip'  'log'  'upload'  'this'  'time.'  '``'  ')'] 
__label__1 ['GatherGettersAndSetterProperties.gather'  '('  'compiler'  ' '  'externsRoot'  ')'] 
__label__0 i > = BY_WOOL_DATA.length 
__label__0 sectionStartTagToken.word ( ) 
__label__0 version == null || version.equals ( `` '' ) 
__label__1 ['scanFeatures'  '('  'getCamelKarafFeatureUrl'  '('  ')'  ' '  "''"  'camel-core'  "''"  ' '  "''"  'camel-spring'  "''"  ' '  "''"  'camel-'  "''"  '+'  'feature'  ')'] 
__label__1 ['0'  '-'  'originY'] 
__label__1 ['getLsNoAclResultStr'  '('  '``'  '/testRoot/testDir'  "''"  ' '  'files'  '['  '1'  ']'  '.getCreationTimeMs'  '('  ')'  ' 0'  ' '  'LsCommand.STATE_FOLDER'  ')'] 
__label__0 config.setSslProtocol ( ssl.get ( CommonAttributes.PROTOCOL ) .asString ( ) ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__1 ['client.get'  '('  'path'  ')'] 
__label__0 Configuration.getMs ( PropertyKey.USER_FILE_LOAD_TTL ) 
__label__1 ['contentLength'  '>'  '0'] 
__label__1 ['new'  'BindException'  '('  'concept'  ' '  "''"  'concept'  "''"  ')'] 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__0 TestUtils.randomByte ( ) + 128 
__label__1 ['HazelcastInstanceFactory.terminateAll'  '('  ')'] 
__label__0 logger.trace ( `` Session created '' ) 
__label__0 `` Ca n't have more than 32767 vertices per batch : `` + maxVertices 
__label__0 nlDataOutNodes ! = null & & nlDataOutNodes.getLength ( ) > 0 
__label__1 ['?'  'extends'  'Exception'] 
__label__1 ['pm.runMigrationTasks'  '('  'this'  ' '  'tasks'  ' '  'partitionId'  ' '  'replicaIndex'  ' '  'from'  ')'] 
__label__1 ['registerConsumer'  '('  'newUUIDString'  '('  ')'  ' '  'newUUIDString'  '('  ')'  ' '  'owner'  ' '  'attributes'  ')'] 
__label__1 ['EmitterProcessor.create'  '('  '1'  ')'] 
__label__1 ['deploymentInfo.setDefaultEncoding'  '('  'servletContainer.getDefaultEncoding'  '('  ')'  ')'] 
__label__0 new StringTypeHandler ( ) 
__label__0 public abstract < T > SctpServerChannel setOption ( SctpSocketOption < T > name , T value ) throws IOException ; 
__label__0 Long.parseLong ( args [ 2 ] ) 
__label__0 getLog ( ) .warn ( `` register druid-driver mbean error '' , ex ) 
__label__1 ['mFileLength'  '<'  'mBlockSize'] 
__label__1 ['reg.put'  '('  '``'  'localhost'  ':'  "''"  '+'  'port'  ' '  'ctx'  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'Failed'  'to'  'write'  'to'  'TachyonStore'  'stream'  ' '  'block'  '``'  '+'  'getCurrentBlockId'  '('  ')'  '+'  '``'  'will'  'not'  'be'  'in'  'TachyonStorage'  '.'  '``'  ' '  'ioe'  ')'] 
__label__1 ['targetClass'  '!'  '='  'null'] 
__label__1 ['titleCache.setColor'  '('  'Color.tmp.set'  '('  'getColor'  '('  ')'  ')'  '.mul'  '('  'style.titleFontColor'  ')'  ')'] 
__label__0 assertThat ( response ) .isEqualTo ( `` Ok.\n '' ) 
__label__1 ['ObjectStore.isCurrentStatsValidForTheQuery'  '('  'conf'  ' '  'db'  ' '  'tbl'  ' '  'params'  ' '  'statsWriteId'  ' '  'writeIdString'  ' '  'false'  ')'] 
__label__1 ['javaWriter.emitSingleLineCOmment'  '('  '``'  'foo'  "''"  ')'] 
__label__1 ['subtypeProps.isEmpty'  '('  ')'] 
__label__0 from ( `` direct : start '' ) .multicast ( new AggregationStrategy ( ) { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { if ( oldExchange == null ) { return newExchange ; } String body=oldExchange.getIn ( ) .getBody ( String.class ) ; oldExchange.getIn ( ) .setBody ( body + newExchange.getIn ( ) .getBody ( String.class ) ) ; return oldExchange ; } } ) .parallelProcessing ( ) .timeout ( 1000 ) 
__label__1 ['elements.size'  '('  ')'  '>'  'i'] 
__label__1 ['{'  '11 6.5f'  '}'] 
__label__1 ['noPendingBlockIteration'  '>'  '='  'MAX_NO_PENDING_BLOCK_INTERATIONS'] 
__label__0 propResource.get ( BOOT_TIME ) .asBoolean ( false ) 
__label__0 AsyncResult < Inet4Address > 
__label__1 ['new'  'GdxRuntimeException'  '('  '``'  'Failure'  'reading'  'Vorbis'  '.'  "''"  ')'] 
__label__0 exportStatusCounts ( exporter ) 
__label__1 ['Bytes.toBytesBinary'  '('  'tableNameOrRegionName'  ')'] 
__label__0 getPreferences ( ) .put ( key , value ) 
__label__1 ['failure'  '!'  '='  'null'] 
__label__1 ['failureDesc.contains'  '('  '``'  '14807'  "''"  ')'  '||'  'failureDesc.contains'  '('  '``'  '14883'  "''"  ')'  '||'  'failureDesc.contains'  '('  '``'  '13456'  "''"  ')'] 
__label__0 public Builder setRealmName ( String realmName ) { realm ( ) .setRealmName ( realmName ) ; return this ; } 
__label__1 ['HazelcastInstanceFactory.terminateAll'  '('  ')'] 
__label__0 visitor.visitMethodInsn ( opCode.getOpCode ( ) , target.getClassName ( ) , name , getMethodDescription ( ) , target.isInterface ( ) ) 
__label__1 ['new'  'GenericAggregationFunction'  '('  'NAME'  ' '  'inputTypes'  ' '  'intermediateType'  ' '  'valueType'  ' '  'false'  ' '  'false'  ' '  'factory'  ')'] 
__label__0 LOG.fatal ( `` Can not run ThriftServer '' , e ) 
__label__0 optionsOverride.getLambdaRole ( ) 
__label__0 RestartStrategies.fixedDelayRestart ( 1,0 ) 
__label__1 ['writeUnlock'  '('  ')'] 
__label__0 new ChannelInboundHandlerAdapter ( ) { @ Override public void channelWritabilityChanged ( ChannelHandlerContext ctx ) throws Exception { buf.append ( ctx.channel ( ) .isWritable ( ) ) ; buf.append ( ' ' ) ; } } 
__label__1 ['node1.checkTreeTypeAwareEqualsSilent'  '('  'node2'  ')'] 
__label__1 ['Thread.currentThread'  '('  ')'  '.isInterrupted'  '('  ')'] 
__label__1 ['GL11.glTexParameter'  '('  'target'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 ( ZWaveAssociationCommandClass ) node.getCommandClass ( CommandClass.ASSOCIATION ) 
__label__1 ['sr0.getValue'  '('  ')'  '.f1'] 
__label__1 ['new'  'DescribeInstances'  '('  'awsConfig'  ')'  '.execute'  '('  'endpoint'  ')'] 
__label__1 ['Boolean'  'ignored'] 
__label__1 ['LOG.info'  '('  '``'  'Date'  'could'  'not'  'be'  'parsed'  '.'  'Was'  'set'  'to'  'NOW'  'because'  '{'  '}'  'is'  'true'  '.'  '``'  ' '  'SyslogInputBase.CK_ALLOW_OVERRIDE_DATE'  ')'] 
__label__0 logger.error ( `` table : { } column : { } , failed convert type { } to { } '' , tableName , columnName , value , sqlType ) 
__label__0 hashSymbols.values ( ) 
__label__1 ['return'  '30'  ';'] 
__label__1 ['invoke'  '('  'args'  ')'] 
__label__1 ['zkWorker.getWorker'  '('  ')'] 
__label__0 ! Objects.isNull ( value ) 
__label__0 Assert.assertTrue ( mFileSystem.getStatus ( uri ) .getInMemoryPercentage ( ) == 100 ) 
__label__0 / * * * The resource . * / private R mResource ; 
__label__1 ['prevNerEndIndex'  '!'  '='  '('  'start'  '-'  '1'  ')'  '&'  '&'  'nextNerStartIndex'  '!'  '='  'end'] 
__label__0 value.getType ( ) .getName ( ) 
__label__0 node.getLifecycleService ( ) .shutdown ( ) 
__label__1 ['mkdirs'  '('  'mBaseDir'  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  'blockWorker'  ')'] 
__label__0 QuotaCache.this.namespaceQuotaCache.containsKey ( ns ) 
__label__1 ['assertNotPresent'  '('  'GsonConverter.class'  ')'] 
__label__1 ['page.getSizeInBytes'  '('  ')'] 
__label__0 logger.severe ( `` Failed to process response : `` + responsePacket + `` on response thread : '' + getName ( ) , e ) 
__label__0 Integer.parseInt ( quantifier ) 
__label__1 ['timelineObjectHolder.getObject'  '('  ')'  '.getChunk'  '('  '0'  ')'  '.getObject'  '('  ')'  '.getDimensions'  '('  ')'] 
__label__1 ['checkNotNull'  '('  'getPropDefFromClass'  '('  'superType'  ' '  'pname'  ')'  ')'] 
__label__1 ['tokens.toString'  '('  ')'] 
__label__1 ['Latkes.getStaticPath'  '('  ')'] 
__label__1 ['processor.getOrCreateManifest'  '('  'archive'  ')'] 
__label__0 nlDataOutNodes ! = null & & nlDataOutNodes.getLength ( ) > 0 
__label__0 new String ( bytes2 , '' UTF8 '' ) 
__label__1 ['is'  '('  '``'  '/home/source'  "''"  ')'] 
__label__1 ['className.indexOf'  '('  '``'  'org.openmrs'  '.'  "''"  ')'] 
__label__1 ['promise.setFailure'  '('  'cause'  ')'] 
__label__0 lookup= '' java : /TransactionManager '' 
__label__0 dimensionsSpec.getDimensionNames ( ) 
__label__0 result.expectedBodiesReceivedInAnyOrder ( `` A+C+E+G+I '' , '' B+D+F+H+J '' ) 
__label__0 300 * Constants.SECOND_MS 
__label__0 CacheManagerCheck.class 
__label__0 request.getContentType ( ) .startsWith ( `` application/x-www-form-urlencoded '' ) 
__label__1 ['subProperties.put'  '('  'subName'  ' '  'value'  ')'] 
__label__1 ['GatherGettersAndSetterProperties.gather'  '('  'compiler'  ' '  'mainRoot'  ')'] 
__label__1 ['log.error'  '('  '``'  'activitiy'  'or'  'FailedJobRetryTimerCycleValue'  'is'  'null'  'in'  'job'  '``'  '+'  'jobId'  '+'  '``'  "'"  '.'  'only'  'decrementing'  'retries'  '.'  "''"  ')'] 
__label__0 builder.addDependency ( DependencyType.OPTIONAL , RegistryInstallerService.SERVICE_NAME ) 
__label__0 CellUtil.estimatedHeapSizeOfWithoutTags ( cell ) 
__label__1 ['bindingConfiguration.getSource'  '('  ')'  '.getResourceValue'  '('  'serviceBuilder'  ' '  'phaseContext'  ' '  'service.getManagedObjectInjector'  '('  ')'  ')'] 
__label__1 ['mCurrentBlockLeftByte'  '>'  'tLen'] 
__label__0 eventJournalConfig.getCacheName ( ) 
__label__1 ['new'  'CSVFilter'  '('  '``'  "''"  ')'] 
__label__0 LOG.warn ( `` OpenTracing : Failed to capture tracing data '' , t ) 
__label__1 ['containedToken.get'  '('  'TokenizerBenchmarkTestCase.MWTTokenCharacterOffsetEndAnnotation.class'  ')'] 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  ')'] 
__label__1 ['failure'  '!'  '='  'null'] 
__label__0 new RuntimeException ( `` to length : '' + to.length + `` from length : '' + from.length ) 
__label__0 new NotSupportedException ( `` getResultSetInfo ( ) is not supported by this resource adapter as per spec 15.11.3 '' ) 
__label__0 new DynamicAwareEntry ( `` http4 : //localhost/test '' , null , null , null ) 
__label__1 ['Sets.newHashSet'  '('  ')'] 
__label__1 ['TrustManagerFactory.getDefaultAlgorithm'  '('  ')'] 
__label__0 Arrays.asList ( `` onThreadPoolAdd '' , '' onContextStart '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onComponentAdd '' , '' onEndpointAdd '' , '' onComponentRemove '' , '' onContextStop '' ) 
__label__1 ['mTfs.getFile'  '('  'fileId'  ')'] 
__label__1 ['BlockMasterClient.class'] 
__label__0 undertowHost.getServer ( ) .getListeners ( ) .get ( 0 ) .getBinding ( ) .getValue ( ) .getAbsolutePort ( ) 
__label__0 servletClass ! = null || filterClass ! = null 
__label__1 ['_maxTransactionActive=0'] 
__label__1 ['item.getClass'  '('  ')'] 
__label__0 new ArrayList < Object > ( literalList.size ( ) ) 
__label__1 ['CollectionUtils.isNotEmpty'  '('  'elements'  ')'] 
__label__1 ['getCode'  '('  ')'  '.split'  '('  '``'  '\\n'  "''"  ')'] 
__label__1 ['logger.debug'  '('  '``'  'Removing'  ':'  '{'  '}'  "''"  ' '  'r'  ')'] 
__label__1 ['nodeManager.getAllNodes'  '('  ')'] 
__label__1 ['mapper.writeValueAsString'  '('  'segment'  ')'] 
__label__1 ['serverQueue.add'  '('  'holder'  ')'] 
__label__1 ['computeSemiJoin'  '('  'inputStatistics'  ' '  'inputStatistics'  ' '  'unknown'  ' '  'u'  ')'] 
__label__1 ['return'  'true'  ';'] 
__label__0 localAddress ! = null & & getParent ( ) == null 
__label__0 synchronized ( mBlocks ) { return ImmutableSet.copyOf ( mLostBlocks ) ; } 
__label__1 ['computeSemiJoin'  '('  'inputStatistics'  ' '  'inputStatistics'  ' '  'x'  ' '  'unknown'  ')'] 
__label__0 getCamelContext ( ) .getTypeConverter ( ) .convertTo ( int.class , timeout ) 
__label__1 ['catalog.validateLanguagePredicate'  '('  'null'  ' '  "''"  'simple'  "''"  ' '  'detail.getSimple'  '('  ')'  ')'] 
__label__0 this.context.getLogAggregationStatusForApps ( ) .add ( finalReport ) 
__label__1 ['SimpleAttributeDefinitionBuilder.create'  '('  '``'  'new-level'  "''"  ' '  'ModelType.STRING'  ')'] 
__label__1 ['future.get'  '('  '30'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['assertEquals'  '('  '12'  ' '  'tokens.size'  '('  ')'  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__0 endFunction ( `` write_partition_column_statistics : `` , ret ! = false , null ) 
__label__1 ['new'  'ModelNode'  '('  ')'  '.set'  '('  '600000'  ')'] 
__label__0 Flux.create ( camelSink : :set , FluxSink.OverflowStrategy.IGNORE ) 
__label__0 `` GET '' .equalsIgnoreCase ( httpMethod ) 
__label__0 new GeneralDataCoding ( false , true , MessageClass.CLASS1 , Alphabet.ALPHA_DEFAULT ) 
__label__1 ['new'  'GetExecutionVariableInstancesCmd'  '('  'executionId'  ' '  'variableNames'  ' '  'false'  ' '  'locale'  ' '  'withLocalizationFallback'  ')'] 
__label__1 ['pushExecutor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'Push'  'Headers'  '['  '%'  's'  ']'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'boolean'  'cancel=pushObserver.onHeaders'  '('  'streamId'  ' '  'requestHeaders'  ' '  'inFinished'  ')'  ';'  'try'  '{'  'if'  '('  'cancel'  ')'  'frameWriter.rstStream'  '('  'streamId'  ' '  'ErrorCode.CANCEL'  ')'  ';'  'if'  '('  'cancel'  '||'  'inFinished'  ')'  '{'  'synchronized'  '('  'SpdyConnection.this'  ')'  '{'  'currentPushRequests.remove'  '('  'streamId'  ')'  ';'  '}'  '}'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__1 ['nextRequest'  '('  'request'  ' '  'future'  ')'] 
__label__1 ['log.info'  '('  '``'  'Performing'  'lookup'  ':'  '%'  's'  '--'  '>'  '%'  's'  "''"  ' '  'ips'  ' '  'retVal'  ')'] 
__label__1 ['nameLength'  '>'  'maxHeadersLength'  '-'  'headersLength'] 
__label__0 logger.debug ( `` Trying to map { } to { } '' , t , path ) 
__label__1 ['new'  'Neo4jGraph'  '('  'database.graph'  ')'] 
__label__1 ['AlluxioWorker.class'] 
__label__1 ['type'  '=='  'VertexDataType.VertexBufferObject'] 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['endFunction'  '('  '``'  'delete_column_statistics_by_table'  ':'  '``'  ' '  'ret'  '!'  '='  'false'  ')'] 
__label__0 @ SuppressWarnings ( `` unused '' ) private final WeakSafeReadWriteLock strongReference ; 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'throw'  'new'  'UnsupportedOperationException'  '('  ')'  ';'  '}'] 
__label__0 setop.getJavaName ( ) 
__label__0 messageHandler.responder ( ) 
__label__0 new StringBuilder ( 256 ) 
__label__1 ['LOG.info'  '('  '``'  'Finding'  'all'  'components'  'using'  'class'  'resolver'  ':'  '{'  '}'  '-'  '>'  '{'  '}'  "''"  ' '  'new'  'Object'  '['  ']'  '{'  'resolver'  '}'  ')'] 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__1 ['data.limit'  '('  ')'] 
__label__1 ['toByteBuffer'  '('  ')'] 
__label__0 expectedMapSize / HASHMAP_DEFAULT_LOAD_FACTOR 
__label__0 twitter1.getRetweets ( 1021608606934822912L ) 
__label__0 assertEquals ( 6358482l , received.get ( 0 ) [ 1 ] ) 
__label__0 connectionTimeout / 4 
__label__0 strategiesBuilder : :customMessageReader 
__label__0 FlatJoinFunction.class 
__label__1 ['in.readObject'  '('  ')'] 
__label__1 ['expected.getType'  '('  ')'  '.equals'  '('  'actual.getType'  '('  ')'  '.toString'  '('  ')'  ')'] 
__label__0 queueLength.asString ( ) 
__label__0 ReactiveHelper.schedule ( ( ) - > { if ( uow ! = null ) { uow.afterProcess ( processor , exchange , callback , false ) ; } if ( log.isTraceEnabled ( ) ) { log.trace ( `` Exchange processed and is continued routed asynchronously for exchangeId : { } - > { } '' , exchange.getExchangeId ( ) , exchange ) ; } } , '' CamelInternalProcessor - UnitOfWork - afterProcess - `` + processor + `` - `` + exchange.getExchangeId ( ) ) 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__1 ['Assert.assertEquals'  '('  'msg'  ' '  "''"  'Unexpected'  'token'  'type'  ':'  'methodStub'  "''"  ')'] 
__label__1 ['getJSDocTypeWithBraces'  '('  'cm'  ' '  'var'  ')'] 
__label__0 assertEquals ( expected , actual ) 
__label__0 standardSearchRequest ( query , IndexHelper.determineAffectedIndices ( indexRangeService , deflector , range ) , range ) 
__label__1 ['assertEquals'  '('  'q.toString'  '('  ')'  ' '  "''"  '['  ']'  "''"  ')'] 
__label__0 UserGroupInformation.getLoginUser ( ) .checkTGTAndReloginFromKeytab ( ) 
__label__0 Nd4j.getAffinityManager ( ) .getDeviceForCurrentThread ( ) 
__label__0 mock.expectedMinimumMessageCount ( 10 ) 
__label__0 JsonObject.createObjectMapper ( ) .getFactory ( ) 
__label__1 ['logger.error'  '('  '``'  'InfluxDB'  'is'  'not'  'yet'  'connected'  "''"  ')'] 
__label__0 webSocketConnection.getRemote ( ) .sendStringByFuture ( s ) 
__label__1 ['/'  '*'  '*'  '*'  'Returns'  'a'  'duplicate'  'of'  'this'  'resource'  'record'  '.'  '*'  '/'  '@'  'Override'  'public'  'ByteBufHolder'  'duplicate'  '('  ')'  '{'  'return'  'new'  'DnsResource'  '('  'name'  '('  ')'  ' '  'type'  '('  ')'  ' '  'dnsClass'  '('  ')'  ' '  'ttl'  ' '  'content.duplicate'  '('  ')'  ')'  ';'  '}'] 
__label__0 mock.expectedMinimumMessageCount ( 3 ) 
__label__1 ['GL20.glGetUniform'  '('  'program'  ' '  'location'  ' '  'params'  ')'] 
__label__0 partition.getParameters ( ) 
__label__1 ['context.reloadRequired'  '('  ')'] 
__label__0 Utils.isZkAuthenticationConfiguredTopology ( topoConf ) 
__label__1 ['currentlyProcessing.addCallback'  '('  'callback'  ')'] 
__label__0 statistics.addPutTimeNanos ( System.nanoTime ( ) - start ) 
__label__0 XMLInputFactory.newInstance ( ) 
__label__0 targetDescription.getDeclaredValueClassName ( ) 
__label__1 ['item.getClass'  '('  ')'] 
__label__1 ['Subqueries.gt'  '('  '0L'  ' '  'subquery'  ')'] 
__label__1 ['@'  'Override'  'public'  'ResponseImpl'  'schema'  '('  'Property'  'property'  ')'  '{'  'throw'  'new'  'RuntimeException'  '('  '``'  'Not'  'implemented'  "''"  ')'  ';'  '}'] 
__label__0 handlers.length == 0 || handlers [ 0 ] == null 
__label__1 ['assertEquals'  '('  'mock.getExchanges'  '('  ')'  '.get'  '('  '0'  ')'  '.getIn'  '('  ')'  '.getHeader'  '('  'ChronicleEngineConstants.MAP_EVENT_TYPE'  ')'  ' '  'ChronicleEngineMapEventType.INSERT'  ')'] 
__label__1 ['url.getServiceInterface'  '('  ')'] 
__label__1 ['Object'  'message'] 
__label__0 buffer.writeBytes ( content , content.readerIndex ( ) , content.readableBytes ( ) ) 
__label__0 this.cli.jar ( `` secure.groovy '' , '' data-jpa.groovy '' ) 
__label__0 new Tag ( line , column , text , on , this ) 
__label__1 ['Utilities.LOG14535.info'  '('  '``'  'creating'  'new'  'paths'  '``'  '+'  'System.identityHashCode'  '('  'fsp2'  ')'  '+'  '``'  'for'  '``'  '+'  'dirName+'  '``'  ' '  'childSpec'  '``'  '+'  'unionPath+'  '``'  ':'  'tmpPath'  '``'  '+'  'fsp2.getTmpPath'  '('  ')'  '+'  '``'  ' '  'task'  'path'  '``'  '+'  'fsp2.getTaskOutputTempPath'  '('  ')'  ' '  'new'  'Exception'  '('  ')'  ')'] 
__label__1 ['headerFilterStrategy.applyFilterToCamelHeaders'  '('  'entry.getKey'  '('  ')'  ' '  'entry.getValue'  '('  ')'  ' '  'camelExchange'  ')'] 
__label__1 ['invoke'  '('  'agentInfo'  ' '  'payload'  ' '  'DEFUALT_FUTURE_TIMEOUT'  ')'] 
__label__1 ['getter.getRawReturnType'  '('  ')'] 
__label__1 ['enchantments.putAll'  '('  'stack.enchantments'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'favorites.json'  "''"  ' '  "''"  'page'  "''"  ' '  'String.valueOf'  '('  'page'  ')'  ' '  'true'  ')'  ')'] 
__label__1 ['Thread.sleep'  '('  '3000'  ')'] 
__label__1 ['new'  'IdentityHashMap'  '<'  '>'  '('  'values.length'  ')'] 
__label__1 ['row.size'  '('  ')'  '=='  '0'] 
__label__0 sname.getParent ( ) .getSimpleName ( ) .substring ( 8 ) 
__label__0 new ConversionException ( `` Expected a proto but was : `` + body.mimeType ( ) ) 
__label__0 DEFAULT_DATA_SIZE_PER_COLUMN=50 
__label__0 LOG.debug ( `` Getting synchronous method stub from channel '' ) 
__label__0 new StringBuilder ( 729 ) 
__label__0 public Integer getPort ( ) { return this.port ; } 
__label__0 new StringBuilder ( 1024 ) 
__label__0 sendCommand ( CLIENT , Keyword.GETNAME.raw ) 
__label__0 COUNT_DATABASE.put ( key , newVal ) 
__label__0 cf.getCompressionType ( ) == null || cf.getCompressionType ( ) == Compression.Algorithm.NONE 
__label__1 ['20'  '<'  'statuses.size'  '('  ')'] 
__label__1 ['IllegalArgumentException.class'] 
__label__1 ['Assert.assertTrue'  '('  '``'  'Was'  'not'  'expecting'  'this'  'output'  '``'  '+'  'acc'  ' '  'System.currentTimeMillis'  '('  ')'  '-'  'now'  '<'  '5000'  ')'] 
__label__0 Integer.toString ( 9 ) 
__label__0 AdviceWithTasks.removeByType ( route , type , selectFirst , selectLast , selectFrom , selectTo , maxDeep ) 
__label__1 ['new'  'UnlockHandler'  '('  'this'  ')'] 
__label__0 new SpdySessionStatus ( 2 , '' INTERNAL_ERROR '' ) 
__label__1 ['setColor'  '('  'color'  ')'] 
__label__1 ['Assert.assertEquals'  '('  '3'  ' '  'providers.size'  '('  ')'  ')'] 
__label__0 GatherGetterAndSetterProperties.gather ( compiler , externsRoot ) 
__label__0 DataStreamSink < OUT > 
__label__0 DataStreamSink < OUT > 
__label__1 ['factory.getSemaphore'  '('  'packet.name'  ')'] 
__label__0 GL11.glGetIntegerv ( pname , params ) 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__0 mMountTable.resolve ( getPath ( next ) ) .toString ( ) 
__label__1 ['System.nanoTime'  '('  ')'] 
__label__1 ['logger.error'  '('  '``'  '{'  '}'  'unsupported'  'item'  'type'  '{'  '}'  'for'  'item'  '{'  '}'  "''"  ' '  'LoggerConstants.TFMODELUPDATE'  ' '  'provider.getItem'  '('  'itemName'  ')'  ' '  'itemName'  ')'] 
__label__1 ['ProtobufUtil.createSnapshotDesc'  '('  'reqSnapshot'  ')'] 
__label__0 tfs.ls ( Constants.PATH_SEPARATOR , true ) 
__label__1 ['statistics.addRemoveTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__0 BIG_ENOUGH_INT + 0.99999999 
__label__1 ['error.expectedMessageCount'  '('  '1'  ')'] 
__label__0 new Jackson2HalModule.HalHandlerInstantiator ( HalObjectMapperConfiguration.this.relProvider , HalObjectMapperConfiguration.this.curieProvider , null ) 
__label__1 ['assertEquals'  '('  'response.getStatusCode'  '('  ')'  ' 301'  ')'] 
__label__1 ['new'  'CacheCreateConfigRequest'  '('  'cacheConfig'  ' '  'true'  ' '  'partitionId'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Ignoring'  'duplicate'  'class'  '``'  '+'  'className'  ')'] 
__label__1 ['delegate.getChild'  '('  'element'  ')'] 
__label__0 _committedTo ! = lastCompletedOffset 
__label__0 new Interval ( startTime , endTime , ISOChronology.getInstanceUTC ( ) ) 
__label__1 ['testWarning'  '('  '``'  'goog.require'  '('  "'"  'a.c'  "'"  ')'  ';'  '\\ngoog.require'  '('  "'"  'a.b'  "'"  ')'  "''"  ' '  'REQUIRES_NOT_SORTED'  ' '  "''"  'goog.require'  '('  ')'  'statements'  'are'  'not'  'sorted'  '.'  'The'  'correct'  'order'  'is'  ':'  '\\n\\n'  "''"  '+'  '``'  'goog.require'  '('  "'"  'a.b'  "'"  ')'  ';'  '\\ngoog.require'  '('  "'"  'a.c'  "'"  ')'  ';'  '\\n\\n'  "''"  ')'] 
__label__1 ['edge.setType'  '('  'EdgeDirection.DIRECTED'  ')'] 
__label__0 request.getDueAfter ( ) 
__label__0 assertEquals ( id1 , new Twitter ( id3 , pass3 ) .verifyCredentials ( ) .getName ( ) ) 
__label__0 logger.error ( `` Endpoint { } not found on node { } . Can not set command classes . `` , endpointId , this.getNode ( ) .getNodeId ( ) ) 
__label__1 ['Thread.sleep'  '('  '1000'  ')'] 
__label__1 ['FilterAndProjectOperator.class'] 
__label__1 ['logger.info'  '('  '``'  'Optimized'  'Selector'  ':'  '``'  '+'  'selector.getClass'  '('  ')'  '.getName'  '('  ')'  ')'] 
__label__1 ['getExecutorServiceManager'  '('  ')'  '.shutdown'  '('  'errorHandlerExecutorService'  ')'] 
__label__1 ['Mockito.verify'  '('  'mFileSystemMasterClient'  ')'  '.rename'  '('  'src'  ' '  'dst'  ')'] 
__label__1 ['AnimationAdapter'  '<'  'T'  '>'] 
__label__1 ['new'  'SSL'  '('  '('  'short'  ')'  '0'  ' '  '('  'short'  ')'  'MIN_SSL_OPTIONS'  ' '  '('  'short'  ')'  'sslPort'  ')'] 
__label__0 type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType 
__label__1 ['new'  'Date'  '('  '0'  ')'] 
__label__1 ['mMountTable.resolve'  '('  'getPath'  '('  'dir'  ')'  ')'  '.getPath'  '('  ')'] 
__label__1 ['ChannelBuffers.buffer'  '('  'length'  ')'] 
__label__1 ['processEngineConfiguration.setEnableSafeBpmnXml'  '('  'false'  ')'] 
__label__1 ['client.getVertx'  '('  ')'  '.setTimer'  '('  '1'  ' '  'id'  '-'  '>'  'checkExpired'  '('  ')'  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['setMinHeight'  '('  'minWidth'  ')'] 
__label__0 @ Override protected Block getBlock ( ) { return blockBuilder ; } 
__label__0 logger.debug ( `` Queue length is { } - deferring HEAL . `` , zController.getSendQueueLength ( ) ) 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'helloForNone'  "''"  ')'  ')'] 
__label__0 @ RunWith ( HazelcastSerialClassRunner.class ) @ Category ( SlowTest.class ) public class ReplicatedMapTtlTest extends ReplicatedMapAbstractTest { @ Test public void testPutWithTTL_withMigration ( ) throws Exception { int nodeCount=1 ; int keyCount=10000 ; int operationCount=10000 ; int threadCount=15 ; int ttl=500 ; testPutWithTTL ( nodeCount , keyCount , operationCount , threadCount , ttl , true ) ; } @ Test public void testPutWithTTL_withoutMigration ( ) throws Exception { int nodeCount=5 ; int keyCount=10000 ; int operationCount=10000 ; int threadCount=10 ; int ttl=500 ; testPutWithTTL ( nodeCount , keyCount , operationCount , threadCount , ttl , false ) ; } private void testPutWithTTL ( int nodeCount , int keyCount , int operationCount , int threadCount , int ttl , boolean causeMigration ) throws InterruptedException { TimeUnit timeUnit=TimeUnit.MILLISECONDS ; TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory ( ) ; HazelcastInstance [ ] instances=factory.newInstances ( null , nodeCount ) ; String mapName=randomMapName ( ) ; List < ReplicatedMap > maps=createMapOnEachInstance ( instances , mapName ) ; ArrayList < Integer > keys=generateRandomIntegerList ( keyCount ) ; Thread [ ] threads=createThreads ( threadCount , maps , keys , ttl , timeUnit , operationCount ) ; for ( Thread thread : threads ) { thread.start ( ) ; } HazelcastInstance instance=null ; if ( causeMigration ) { instance=factory.newHazelcastInstance ( ) ; } for ( Thread thread : threads ) { thread.join ( ) ; } if ( causeMigration ) { ReplicatedMap < Object , Object > map=instance.getReplicatedMap ( mapName ) ; maps.add ( map ) ; } for ( ReplicatedMap map : maps ) { assertSizeEventually ( 0 , map,60 ) ; } } private Thread [ ] createThreads ( int count , List < ReplicatedMap > maps , ArrayList < Integer > keys , long ttl , TimeUnit timeunit , int operations ) { Thread [ ] threads=new Thread [ count ] ; int size=maps.size ( ) ; for ( int i=0 ; i < count ; i++ ) { threads [ i ] =createPutOperationThread ( maps.get ( i % size ) , keys , ttl , timeunit , operations ) ; } return threads ; } private Thread createPutOperationThread ( final ReplicatedMap < String , Object > map , final ArrayList < Integer > keys , final long ttl , final TimeUnit timeunit , final int operations ) { return new Thread ( new Runnable ( ) { @ Override public void run ( ) { Random random=new Random ( ) ; int size=keys.size ( ) ; for ( int i=0 ; i < operations ; i++ ) { int index=i % size ; String key= '' foo- '' + keys.get ( index ) ; map.put ( key , random.nextLong ( ) ,1 + random.nextInt ( ( int ) ttl ) , timeunit ) ; } } } ) ; } } 
__label__0 uncollectedPointCreator.createUnCollectedPoint ( timestamp ) 
__label__1 ['serverSocket.setReuseAddress'  '('  'false'  ')'] 
__label__0 new ScheduledJob ( job , jobName , delay , period ) 
__label__1 ['entry.getValue'  '('  ')'  '.health'  '('  ')'  '.compose'  '('  'this.timeoutCompose'  ')'] 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['log.info'  '('  '``'  'Performing'  'lookup'  ':'  '%'  's'  '--'  '>'  '%'  's'  "''"  ' '  'ips'  ' '  'retVal'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` favorites.json '' , '' page '' , String.valueOf ( page ) , true ) ) 
__label__1 ['GL20.glUniform4'  '('  'location'  ' '  'v'  ')'] 
__label__1 ['DefaultAtmosphereRequest'  'request'] 
__label__0 new UnsupportedOperationException ( `` PLAIN does n't support wrap or unwrap operation '' ) 
__label__0 propMember.getType ( ) 
__label__1 ['User.createCursorSupportUserList'  '('  'http.get'  '('  '``'  'http'  ':'  '//yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json'  "''"  ')'  ')'] 
__label__0 stat.st_ctim.tv_nsec.longValue ( ) 
__label__0 new Duration ( 30 , SECONDS ) 
__label__0 log.debug ( currentThread ( ) + String.format ( `` Trying to recover from dead Channel : % s `` , channel ) ) 
__label__1 ['this.isDefaultAutoCommit'  '('  ')'] 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__0 events == null & & this.calDavLoader ! = null 
__label__0 new RuntimeException ( `` Could not create TypeInformation for type `` + type.getName ( ) + `` ; please specify the TypeInformation manually via `` + `` ExecutionEnvironment # fromElements ( Collection , TypeInformation ) '' , e ) 
__label__0 CommonUtils.sleepMs ( 200 ) 
__label__0 pId + BASE_FILE_NUMBER 
__label__1 ['target.addTask'  '('  'task'  ')'] 
__label__0 mapper.getFactory ( ) 
__label__1 ['TestSuiteEnvironment.getServerAddress'  '('  ')'] 
__label__1 ['``'  'Content-Type'  "''"  '.equals'  '('  'name'  ')'] 
__label__0 assertTrue ( user.isGeoEnabled ( ) ) 
__label__0 ctx.sendUpstream ( e ) 
__label__1 ['status'  '('  ')'  '.isMovedTemporarily'  '('  ')'] 
__label__1 ['new'  'Entry'  '['  '0xff'  ']'] 
__label__0 ImmutableSet < ImplementationMethodDescriptor > 
__label__0 partition.getParameters ( ) 
__label__0 page.getRetainedSizeInBytes ( ) 
__label__0 Mockito.any ( ProducerRecord.class ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ReliableTopicBasicDistributedTest'  'extends'  'ReliableTopicBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '2'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__1 ['('  'Long'  ')'  'strategy.getOrNull'  '('  'third'  ')'] 
__label__0 new ChannelInboundHandlerAdapter ( ) { @ Override public void channelWritabilityChanged ( ChannelHandlerContext ctx ) throws Exception { buf.append ( ctx.channel ( ) .isWritable ( ) ) ; buf.append ( ' ' ) ; } } 
__label__0 new UnsupportedOperationException ( getClass ( ) .getName ( ) ) 
__label__0 LoopContextStateRetrieval retrievalToAdapt 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs'  '('  '10000 200'  ')'] 
__label__0 public void testJobQueues ( ) throws Exception { JobClient jc=new JobClient ( mrCluster.createJobConf ( ) ) ; String expectedQueueInfo= '' Maximum Tasks Per Job : : 10 '' ; JobQueueInfo [ ] queueInfos=jc.getQueues ( ) ; assertNotNull ( queueInfos ) ; assertEquals ( 1 , queueInfos.length ) ; assertEquals ( `` default '' , queueInfos [ 0 ] .getQueueName ( ) ) ; assertEquals ( QueueState.RUNNING.getStateName ( ) , queueInfos [ 0 ] .getQueueState ( ) ) ; JobConf conf=mrCluster.createJobConf ( ) ; FileSystem fileSys=dfsCluster.getFileSystem ( ) ; conf=configureWaitingJob ( conf ) ; conf.setJobName ( `` test-job-queue-info-test '' ) ; fileSys.delete ( SHARE_DIR , true ) ; RunningJob rJob=jc.submitJob ( conf ) ; while ( rJob.getJobState ( ) ! = JobStatus.RUNNING ) { UtilsForTests.waitFor ( 10 ) ; } int numberOfJobs=0 ; for ( JobQueueInfo queueInfo : queueInfos ) { JobStatus [ ] jobStatusList=jc.getJobsFromQueue ( queueInfo.getQueueName ( ) ) ; assertNotNull ( queueInfo.getQueueName ( ) ) ; assertNotNull ( queueInfo.getSchedulingInfo ( ) ) ; assertEquals ( expectedQueueInfo , queueInfo.getSchedulingInfo ( ) ) ; numberOfJobs+=jobStatusList.length ; for ( JobStatus status : jobStatusList ) { assertEquals ( JOB_SCHEDULING_INFO , status.getSchedulingInfo ( ) ) ; } } assertEquals ( 1 , numberOfJobs ) ; UtilsForTests.signalTasks ( dfsCluster , fileSys , getSignalFile ( ) , getSignalFile ( ) ,4 ) ; } 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__1 ['webSocketConnection.getRemote'  '('  ')'  '.sendBytes'  '('  'ByteBuffer.wrap'  '('  'b'  ' '  'offset'  ' '  'length'  ')'  ')'] 
__label__0 line.toString ( charset ) 
__label__1 ['new'  'CSVFilter'  '('  'columns'  ')'] 
__label__1 ['ImmutableList.of'  '('  'modules'  ')'] 
__label__1 ['Long.valueOf'  '('  'args'  '['  '2'  ']'  ')'] 
__label__1 ['assertThat'  '('  'getField'  '('  'graphite'  ' '  "''"  'port'  "''"  ')'  ')'  '.isEqualTo'  '('  '8080'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Remove'  'a'  '{'  '@'  'link'  'AtmosphereResource'  '}'  'from'  'the'  'list'  'of'  'item'  'to'  'be'  'notified'  'whenthe'  '{'  '@'  'link'  'Broadcaster'  '#'  'broadcast'  '}'  'is'  'invoked'  '.'  '*'  '@'  'param'  'resource'  'an'  '{'  '@'  'link'  'AtmosphereResource'  '}'  '*'  '@'  'return'  '{'  '@'  'link'  'AtmosphereResource'  '}'  'if'  'removed'  ' '  'or'  'null'  'if'  'it'  'was'  'not'  '.'  '*'  '/'  'AtmosphereResource'  'removeAtmosphereResource'  '('  'AtmosphereResource'  'resource'  ')'  ';'] 
__label__1 ['getJSDocTypeWithBraces'  '('  'operation'  ')'] 
__label__1 ['new'  'IncrementalIndexSegment'  '('  'rtIndex'  ')'] 
__label__1 ['table.getParameters'  '('  ')'] 
__label__1 ['min1'  '<'  'min2'] 
__label__0 controller.handleSubmission ( request , new MockHttpSession ( ) , new ModelMap ( ) , '' Save User '' , '' pass123 '' , '' pass123 '' , new String [ 0 ] , '' true '' , user , new BindException ( user , '' user '' ) ) 
__label__0 nextRequest ( newRequest , future ) 
__label__1 ['logger.debug'  '('  '``'  'rapidRefreshFuture'  'scheduleing'  'for'  '{'  '}'  'millis'  "''"  ' '  'millis'  ')'] 
__label__0 format ( conf , true ) 
__label__0 getConcept ( ) ! = null & & getConcept ( ) .getName ( ) ! = null 
__label__0 CompletableFuture < Void > 
__label__1 ['connection.remote'  '('  ')'  '.nextStreamId'  '('  ')'] 
__label__1 ['metastore.getHostText'  '('  ')'] 
__label__0 LocalEjbReceiver.clone ( resultCloner , exception ) 
__label__1 ['reg.put'  '('  'LDAP_CONN_NAME'  ' '  'getWiredConnection'  '('  'ldapServer'  ')'  ')'] 
__label__1 ['className.indexOf'  '('  '``'  'org.openmrs'  '.'  "''"  ')'] 
__label__0 server.getSegment ( segment.getIdentifier ( ) ) ! = null || peon.getSegmentsToLoad ( ) .contains ( segment ) 
__label__0 new IOException ( ExceptionMessage.BLOCK_UNAVAILABLE.getMessage ( blockId ) , e ) 
__label__1 ['Sets.newHashSet'  '('  'BUFFERS_READ'  ' '  'FIELDNAMES_READ'  ' '  'INDEXERCLUSTER_READ'  ' '  'INPUTS_READ'  ' '  'JVMSTATS_READ'  ' '  'MESSAGECOUNT_READ'  ' '  'MESSAGES_READ'  ' '  'METRICS_READ'  ' '  'SYSTEM_READ'  ' '  'THROUGHPUT_READ'  ')'] 
__label__0 IOConverter.toString ( out , null ) 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_FILE_WAITCOMPLETED_POLL_MS'  ')'] 
__label__1 ['filteredSearchRequest'  '('  'query'  ' '  'filter'  ' '  'IndexHelper.determineAffectedIndices'  '('  'indexRangeService'  ' '  'deflector'  ' '  'range'  ')'  ')'] 
__label__0 Context.getEncounterService ( ) .saveEncounter ( encounter ) 
__label__1 ['i'  '<'  '='  'repeatCount'] 
__label__1 ['result.addEnchantment'  '('  'enchantment'  ' '  '('  'Integer'  ')'  'entry.getValue'  '('  ')'  ')'] 
__label__0 ssl.hasDefined ( CommonAttributes.PROTOCOL ) 
__label__1 ['new'  'AutoValue_RegistrationResponse'  '('  'sidecarRegistrationConfiguration'  ' '  'configurationOverride'  ' '  'actions'  ' '  'assignments'  ')'] 
__label__0 assertThat ( page2.pagination ( ) .getGlobalTotal ( ) ) .isEqualTo ( 5 ) 
__label__0 this.loggingSystem.initialize ( this.initializationContext , null , null ) 
__label__1 ['JSError.make'  '('  'AbstractCompiler.READ_ERROR'  ' '  'sourceFile.getName'  '('  ')'  ')'] 
__label__0 System.arraycopy ( src,0 , this.bytes,0 , SIZE ) 
__label__0 Color.fromRGB ( 0x1E1B1B ) 
__label__1 ['assertEquals'  '('  '12'  ' '  'tokens.size'  '('  ')'  ')'] 
__label__1 ['beansXml.createAlternatives'  '('  ')'] 
__label__1 ['setParams'  '('  ')'  '.nx'  '('  ')'] 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'exist'  "''"  ')'] 
__label__1 ['hz1.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__1 ['mpline.substring'  '('  '0'  ' '  'p'  ')'  '.trim'  '('  ')'  '.toLowerCase'  '('  ')'] 
__label__0 registry.bind ( `` params '' , params ) 
__label__0 compressedSliceInput.getRetainedSize ( ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class QueueBasicDistributedTest extends QueueAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 2 ) .newInstances ( config ) ; } } 
__label__0 context.var ( `` double '' ,2 ) 
__label__1 ['sections.remove'  '('  'section'  ')'] 
__label__1 ['mockRegionInfo.isMetaRegion'  '('  ')'] 
__label__0 connection.hlen ( key ) 
__label__1 ['Objects.isNull'  '('  'value'  ')'] 
__label__1 ['props.getProperty'  '('  '``'  'exporter'  "''"  ')'] 
__label__1 ['new'  'UnsupportedOperationException'  '('  ')'] 
__label__0 timelineObjectHolder.getObject ( ) .getChunk ( 0 ) .getObject ( ) .getMetrics ( ) 
__label__0 Ordered.LOWEST_PRECEDENCE - 5 
__label__0 from ( `` direct : start '' ) .aggregator ( ) .header ( `` id '' ) .batchTimeout ( 500L ) 
__label__0 new Font ( nodeFontName , nodeFontStyle , nodeFontSize ) 
__label__0 new S3DataSegmentMover ( mockS3Client , new S3DataSegmentPusherConfig ( ) ) 
__label__0 Integer.parseInt ( tokens [ 3 ] ) 
__label__0 assertEquals ( 8 , LambdaOperations.values ( ) .length ) 
__label__0 LOG.warn ( `` Storage directory `` + rootPath + `` does not exist '' ) 
__label__1 ['gen.get'  '('  ')'  '.document'  '('  ')'] 
__label__1 ['Math.abs'  '('  'diff'  '-'  'maxAge'  ')'  '<'  '='  '1'] 
__label__0 LOG.debug ( `` Exception while fetching metrics . `` , e ) 
__label__0 new MalformedException ( `` Unrecognized message placeholder referenced : `` + phName , node ) 
__label__1 ['SOURCE.deref'  '('  ')'] 
__label__1 ['GL20.glVertexAttribPointer'  '('  'indx'  ' '  'size'  ' '  'normalized'  ' '  'stride'  ' '  '('  'FloatBuffer'  ')'  'buffer'  ')'] 
__label__0 logPageUrl ! = null & & logPageUrl.length ( ) > 0 
__label__1 ['callTimeoutMillis=3000'] 
__label__0 CloudScanConfiguration.class 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__1 ['executeCommand'  '('  '``'  'EXPLAIN'  'OPTIONAL'  'MATCH'  '('  'n'  ')'  'RETURN'  'n'  ';'  "''"  ' '  "''"  'DbHits'  "''"  ' '  "''"  'No'  'data'  'returned'  "''"  ')'] 
__label__1 ['return'  'false'  ';'] 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__1 ['Arrays.asList'  '('  'RFXComValueSelector.RAW_DATA'  ' '  'RFXComValueSelector.SIGNAL_LEVEL'  ' '  'RFXComValueSelector.COMMAND'  ')'] 
__label__0 element.getLocalName ( ) 
__label__1 ['i'  '>'  'BY_WOOL_DATA.length'] 
__label__0 actor.addCaptureListener ( listener ) 
__label__1 ['grammar.getTokenNames'  '('  ')'] 
__label__1 ['deployment.addServletContainerInitalizer'  '('  'new'  'ServletContainerInitializerInfo'  '('  'Initializer.class'  ' '  'new'  'ImmediateInstanceFactory'  '<'  'ServletContainerInitializer'  '>'  '('  'initializer'  ')'  ' '  'NO_CLASSES'  ')'  ')'] 
__label__1 ['processSelectedKeys'  '('  ')'] 
__label__1 ['public'  'class'  'XpathRegressionMethodParamPadTest'  'extends'  'AbstractXpathTestSupport'  '{'  '@'  'Test'  'public'  'void'  'testOne'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=MethodParamPadCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionMethodParamPadOne.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'MethodParamPadCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '4:37'  ':'  '``'  '+'  'getCheckMessage'  '('  'MethodParamPadCheck.class'  ' '  'MethodParamPadCheck.MSG_WS_PRECEDED'  ' '  "''"  '('  '``'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionMethodParamPadOne"  "'"  ']'  '/OBJBLOCK'  "''"  '+'  '``'  '/METHOD_DEF'  '['  '@'  "text='InputMethodParamPad"  "'"  ']'  '/LPAREN'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testTwo'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=MethodParamPadCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionMethodParamPadTwo.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'MethodParamPadCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '5:13'  ':'  '``'  '+'  'getCheckMessage'  '('  'MethodParamPadCheck.class'  ' '  'MethodParamPadCheck.MSG_LINE_PREVIOUS'  ' '  "''"  '('  '``'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionMethodParamPadTwo"  "'"  ']'  '/OBJBLOCK'  "''"  '+'  '``'  '/METHOD_DEF'  '['  '@'  "text='sayHello"  "'"  ']'  '/LPAREN'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testThree'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=MethodParamPadCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionMethodParamPadThree.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'MethodParamPadCheck.class'  ')'  ';'  'moduleConfig.addAttribute'  '('  '``'  'option'  "''"  ' '  "''"  'space'  "''"  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '4:25'  ':'  '``'  '+'  'getCheckMessage'  '('  'MethodParamPadCheck.class'  ' '  'MethodParamPadCheck.MSG_WS_NOT_PRECEDED'  ' '  "''"  '('  '``'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionMethodParamPadThree"  "'"  ']'  '/OBJBLOCK'  "''"  '+'  '``'  '/METHOD_DEF'  '['  '@'  "text='sayHello"  "'"  ']'  '/LPAREN'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '}'] 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__0 customResourceLocator ( url ) 
__label__0 ModuleFactory.stopModule ( mod , true , true ) 
__label__1 ['sorted_files.get'  '('  'i'  ')'  '.createReader'  '('  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['setMode'  '('  'mode'  ')'] 
__label__0 ( new Path ( testBucket.getParent ( ) , '' .test.inprogress '' ) ) .getPath ( ) 
__label__0 uri.toString ( ) .equals ( future.getURI ( ) .toString ( ) ) 
__label__1 ['TupleDomain.none'  '('  ')'] 
__label__0 userGroupMember.getUserGroupId ( ) 
__label__1 ['status.getCreationTimeMs'  '('  ')'] 
__label__0 node1.isEquivalentToTyped ( node2 ) 
__label__1 ['Mockito.any'  '('  ')'] 
__label__0 theClass.getConstructor ( ) 
__label__0 excludesPattern == null || requestURI == null 
__label__1 ['o'  'instanceof'  'CreateOptions'] 
__label__1 ['put.writeToWAL'  '('  ')'] 
__label__1 ['deployOneTaskProcess'  '('  ')'] 
__label__0 GL20.glUniform3iv ( location , v ) 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getApiBaseURL'  '('  ')'  '+'  'V1'  '+'  'user+'  '``'  '/lists/'  "''"  '+'  'id+'  '``'  '/statuses.json'  "''"  ' '  'new'  'PostParameter'  '['  '0'  ']'  ' '  'paging.asPostParameterList'  '('  'Paging.SMCP'  ' '  'Paging.PER_PAGE'  ')'  ' '  'true'  ')'  ')'] 
__label__1 ['toHeapData'  '('  'key'  ')'] 
__label__1 ['element.getChildByName'  '('  '``'  'properties'  "''"  ')'] 
__label__1 ['attribute.getDefinition'  '('  ')'  '.getAttributeMarshaller'  '('  ')'] 
__label__1 ['contentType'  '!'  '='  'null'] 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__0 JSError.make ( callNode , NOT_UNIQUE_INSTANTIATION , funType.toString ( ) , UniqueNameGenerator.getOriginalName ( typeParam ) , types.toString ( ) , funType.toString ( ) ) 
__label__1 ['DEFAULT_NUMBER_OF_WRITE_BUFFERS=128'] 
__label__1 ['new'  'DeleteOptions.Builder'  '('  'ClientContext.getConf'  '('  ')'  ')'] 
__label__1 ['resetTimeInSeconds'  '*'  '1000'] 
__label__0 public class XpathRegressionMultipleVariableDeclarationsTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionMultipleVariableDeclarationOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( MultipleVariableDeclarationsCheck.class ) ; final String [ ] expectedViolation= { `` 4:5 : `` + getCheckMessage ( MultipleVariableDeclarationsCheck.class , MultipleVariableDeclarationsCheck.MSG_MULTIPLE_COMMA ) } ; final List < String > expectedXpathQueries=Arrays.asList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationOne ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text= ' i ' ] '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationOne ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text= ' i ' ] /MODIFIERS '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationOne ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text= ' i ' ] /TYPE '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationOne ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text= ' i ' ] /TYPE/LITERAL_INT '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationOne ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text= ' j ' ] '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationOne ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text= ' j ' ] /MODIFIERS '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationOne ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text= ' j ' ] /TYPE '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationOne ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text= ' j ' ] /TYPE/LITERAL_INT '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=MultipleVariableDeclarationsCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionMultipleVariableDeclarationTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( MultipleVariableDeclarationsCheck.class ) ; final String [ ] expectedViolation= { `` 4:5 : `` + getCheckMessage ( MultipleVariableDeclarationsCheck.class , MultipleVariableDeclarationsCheck.MSG_MULTIPLE ) } ; final List < String > expectedXpathQueries=Arrays.asList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationTwo ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text='i1 ' ] '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationTwo ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text='i1 ' ] /MODIFIERS '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationTwo ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text='i1 ' ] /TYPE '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionMultipleVariableDeclarationTwo ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text='i1 ' ] /TYPE/LITERAL_INT '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['cookies.columnMap'  '('  ')'] 
__label__1 ['StringBuffer'  'result'] 
__label__1 ['e.getMessage'  '('  ')'] 
__label__0 mock.expectedBodiesReceivedInAnyOrder ( `` B+END '' , '' A+END '' ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__1 ['FISHING_ROD'  '('  '346 1 64'  ')'] 
__label__1 ['('  '('  'ChannelProgressivePromise'  ')'  'promise'  ')'  '.setProgress'  '('  'progress'  ' '  '-1'  ')'] 
__label__0 cluster.getTypeFactory ( ) .createSqlType ( SqlTypeName.DECIMAL , unscaled.toString ( ) .length ( ) , bd.scale ( ) ) 
__label__0 checkpointPath.toString ( ) 
__label__0 new Duration ( 30 , SECONDS ) 
__label__0 from ( `` jms : queue : order '' ) .to ( `` bean : validateOrder '' ) .to ( `` mock : validate '' ) .threads ( 20 ) .unmarshal ( mySecureDataFormat ) .delay ( 1000 ) 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__1 ['globalExecutionStats.getSplits'  '('  ')'] 
__label__0 newHighlyAvailableDatabaseBuilder ( path ) 
__label__1 ['logger.info'  '('  '``'  'Named'  '``'  '+'  'namedCount'  '+'  '``'  'anon'  'functions'  'using'  '``'  '+'  'bytesUsed+'  '``'  'bytes'  "''"  ')'] 
__label__1 ['new'  'ConsoleRenderer'  '('  'context'  ' '  "''"  'start.ftl'  "''"  ')'] 
__label__1 ['font.drawMultiLine'  '('  'batch'  ' '  'results 20 300'  ')'] 
__label__1 ['HiveFileFormatUtils.getOutputFormatSubstitute'  '('  'outputFormatClass'  ')'  '.toString'  '('  ')'] 
__label__0 new JSONParseSpec ( new TimestampSpec ( `` timestamp '' , '' auto '' ) , new DimensionsSpec ( Arrays.asList ( `` dim1 '' , '' dim2 '' ) , null , null ) ) 
__label__0 maxSize < ( used / 1024 / 1024 ) 
__label__1 ['Map'  '<'  'K'  ' '  '?'  'extends'  'V'  '>'] 
__label__1 ['new'  'ScheduledJob'  '('  'job'  ' '  'jobName'  ' '  'period'  ')'] 
__label__0 resultEndpoint.assertIsSatisfied ( ) 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__0 new RuntimeException ( `` Could not create TypeInformation for type `` + type.getName ( ) + `` ; please specify the TypeInformation manually via `` + `` StreamExecutionEnvironment # fromElements ( Collection , TypeInformation ) '' , e ) 
__label__1 ['GL.glCopyTexSubImage2DEXT'  '('  'target'  ' '  'level'  ' '  'xoffset'  ' '  'yoffset'  ' '  'x'  ' '  'y'  ' '  'width'  ' '  'height'  ')'] 
__label__1 ['Ordered.LOWEST_PRECEDENCE'  '-'  '20'] 
__label__1 ['return'  'true'  ';'] 
__label__0 pushExecutor.execute ( new NamedRunnable ( `` OkHttp % s Push Data [ % s ] '' , hostName , streamId ) { @ Override public void execute ( ) { try { boolean cancel=pushObserver.onData ( streamId , buffer , byteCount , inFinished ) ; if ( cancel ) frameWriter.rstStream ( streamId , ErrorCode.CANCEL ) ; if ( cancel || inFinished ) { synchronized ( SpdyConnection.this ) { currentPushRequests.remove ( streamId ) ; } } } catch ( IOException ignored ) { } } } ) 
__label__0 processEngineConfiguration.setEnableSafeBpmnXml ( true ) 
__label__1 ['new'  'ChannelHandlerAdapter'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'channelWritabilityChanged'  '('  'ChannelHandlerContext'  'ctx'  ')'  'throws'  'Exception'  '{'  'buf.append'  '('  'ctx.channel'  '('  ')'  '.isWritable'  '('  ')'  ')'  ';'  'buf.append'  '('  "'"  "'"  ')'  ';'  '}'  '}'] 
__label__1 ['hz1.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__1 ['new'  'SemanticException'  '('  'generateErrorMessage'  '('  'tabref'  ' '  "''"  'Schema'  'of'  'both'  'sides'  'of'  'union'  'should'  'match'  ':'  'Column'  '``'  '+'  'field'  '+'  '``'  'is'  'of'  'type'  '``'  '+'  'lInfo.getType'  '('  ')'  '.getTypeName'  '('  ')'  '+'  '``'  'on'  'first'  'table'  'and'  'type'  '``'  '+'  'rInfo.getType'  '('  ')'  '.getTypeName'  '('  ')'  '+'  '``'  'on'  'second'  'table'  "''"  ')'  ')'] 
__label__1 ['assertClusterSize'  '('  '2'  ' '  'data2'  ' '  'data3'  ')'] 
__label__0 factory.getEmbeddedServletContainer ( exampleServletRegistration ( ) , new FilterRegistrationBean ( new ExampleFilter ( ) ) ) 
__label__1 ['glyphPositions'  '['  'i'  ']'  '-'  'x'  '<'  '='  'x'  '-'  'glyphPositions'  '['  'i'  '-'  '1'  ']'] 
__label__0 new IndexOutOfBoundsException ( `` negative offset : '' + offset ) 
__label__1 ['Mockito.verify'  '('  'mRMClient'  ')'  '.start'  '('  ')'] 
__label__1 ['ps.createRelationship'  '('  'rel'  ')'] 
__label__1 ['path'  '('  '11'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/home_timeline.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  'initializers'  '['  '0'  ']'  ' '  'initializers'  '['  '1'  ']'  ')'] 
__label__1 ['result.expectedMessageCount'  '('  '2'  ')'] 
__label__0 props.getProperty ( `` exporter '' , '' com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter '' ) 
__label__0 this.r ! = null & & r ! = null 
__label__0 LOG.debug ( `` Requesting paths for query services failed . `` , throwable ) 
__label__1 ['ctx.alloc'  '('  ')'  '.heapBuffer'  '('  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'PriviledgedActionException'  'as'  ':'  "''"  '+'  'this'  '+'  '``'  'cause'  ':'  "''"  '+'  'cause'  ')'] 
__label__0 ! unsafeBuffers.contains ( buffer , true ) 
__label__0 logger.fine ( `` Remove try/catch/finally '' ) 
__label__1 ['logger.info'  '('  '``'  'Computing'  'Control'  'Flow'  'Graph'  "''"  ')'] 
__label__0 tfs.getFile ( fileId ) 
__label__0 logger.error ( `` NODE { } : DeleteReturnRoute command failed . `` , nodeId ) 
__label__0 new UnsupportedOperationException ( getClass ( ) .getName ( ) ) 
__label__0 new CustomChangeException ( `` Failed to insert one or more concept map types '' , be ) 
__label__1 ['DefaultAtmosphereRequest.newInstance'  '('  ')'] 
__label__1 ['registry.put'  '('  '``'  'myConfigurer'  "''"  ' '  'configurer'  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__0 connection.zrevrangeByLex ( key , max , min ) 
__label__1 ['src'  '['  'srcIdx'  ']'] 
__label__0 t.report ( n , UNUSED_PRIVATE_PROPERTY , propName ) 
__label__1 ['MenuInflater.this.getClass'  '('  ')'] 
__label__1 ['AtmosphereResponse.create'  '('  ')'] 
__label__0 / * * * Loads the value of a given key . If distributed map does n't contain the value for the given key then Hazelcast will call implementation 's load ( key ) method to obtain the value . Implementation can use any means of loading the given key ; such as an O/R mapping tool , simple SQL or reading a file etc . * @ param key * @ return value of the key * / V load ( K key ) ; 
__label__1 ['webSocketProcessor.close'  '('  'webSocket 0'  ')'] 
__label__1 ['SimpleAttributeDefinitionBuilder.create'  '('  'ModelDescriptionConstants.ANY_IPV4_ADDRESS'  ' '  'ModelType.BOOLEAN'  ')'  '.setAllowExpression'  '('  'false'  ')'  '.setAllowNull'  '('  'false'  ')'] 
__label__0 times + BASE_FILE_NUMBER 
__label__1 ['Arrays.asList'  '('  'RFXComValueSelector.RAW_DATA'  ' '  'RFXComValueSelector.SIGNAL_LEVEL'  ' '  'RFXComValueSelector.COMMAND'  ')'] 
__label__0 LOG.debug ( `` Creating short circuit input stream for block { } @ { } '' , blockId , address ) 
__label__1 ['position'  '=='  'buffer.length'] 
__label__0 assertEquals ( 9 , tokens.size ( ) ) 
__label__0 saveTaskDefinition ( taskDefinition ) 
__label__1 ['knownType'  '!'  '='  'null'] 
__label__1 ['new'  'StringLengthValidator'  '('  '1'  ')'] 
__label__0 modifiers.branchContains ( TokenTypes.LITERAL_PRIVATE ) || modifiers.branchContains ( TokenTypes.ABSTRACT ) || modifiers.branchContains ( TokenTypes.FINAL ) || modifiers.branchContains ( TokenTypes.LITERAL_STATIC ) 
__label__0 uncollectedPointCreator.createUnCollectedPoint ( timestamp ) 
__label__0 MAX_CACHED_HBASE_INSTANCES=2001 
__label__1 ['instance.connect'  '('  'null'  ' '  'null'  ' '  "''"  'localhost'  "''"  ' '  "''"  'graylog2test'  "''"  ' '  'Integer.valueOf'  '('  '27017'  ')'  ' '  "''"  'false'  "''"  ')'] 
__label__1 ['FlinkKafkaProducerBase.class'] 
__label__1 ['waitYieldLatch.await'  '('  '25'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__0 tFAgentStatMapper.map ( agentStatBo ) 
__label__0 camelContext.getExecutorServiceManager ( ) .shutdown ( timeoutCheckerExecutorService ) 
__label__1 ['GatherGettersAndSetterProperties.gather'  '('  'compiler'  ' '  'mainRoot'  ')'] 
__label__1 ['('  'offset'  '>'  '='  'start'  '&'  '&'  'offset'  '<'  '='  'start'  '+'  'len'  ')'  '||'  '('  'end'  '>'  '='  'start'  '&'  '&'  'end'  '<'  '='  'start'  '+'  'len'  ')'] 
__label__1 ['@'  'Override'  'public'  'Object'  'getValue'  '('  ')'  '{'  'return'  'getThreadCount'  '('  'state'  ')'  ';'  '}'] 
__label__0 logger.debug ( `` [ { } ] : Websocket error : { } '' , connection.getHost ( ) , e.getMessage ( ) ) 
__label__0 superClass == Object.class || superClass == null 
__label__1 ['/'  '*'  '*'  '*'  'Changes'  'the'  'owner'  'of'  'a'  'file'  'or'  'directory'  'specified'  'by'  'args'  '.'  '*'  '/'  'public'  'final'  'class'  'ChownCommand'  'extends'  'AbstractACLCommand'  '{'  'public'  'ChownCommand'  '('  'TachyonConf'  'conf'  ' '  'TachyonFileSystem'  'tfs'  ')'  '{'  'super'  '('  'conf'  ' '  'tfs'  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'getCommandName'  '('  ')'  '{'  'return'  '``'  'chown'  "''"  ';'  '}'  '@'  'Override'  'protected'  'int'  'getNumOfArgs'  '('  ')'  '{'  'return'  '2'  ';'  '}'  '@'  'Override'  'public'  'void'  'run'  '('  'String'  '...'  'args'  ')'  'throws'  'IOException'  '{'  'String'  'owner=args'  '['  '0'  ']'  ';'  'TachyonURI'  'path=new'  'TachyonURI'  '('  'args'  '['  '1'  ']'  ')'  ';'  'chown'  '('  'path'  ' '  'owner'  ' '  'false'  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'getUsage'  '('  ')'  '{'  'return'  '``'  'chown'  '<'  'owner'  '>'  '<'  'path'  '>'  "''"  ';'  '}'  '}'] 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__1 ['Preconditions.checkNotNull'  '('  'timer'  ')'] 
__label__1 ['resource.terminate'  '('  'input.getId'  '('  ')'  ' '  'extractorId'  ')'] 
__label__0 node1.isEquivalentToTyped ( node2 ) 
__label__1 ['encounter.getObsAtTopLevel'  '('  'false'  ')'] 
__label__0 level < RF_STATUS_MEDIUM_SIGNAL 
__label__0 FiltersTopComponent.findInstance ( ) .getUiModel ( ) .getSelectedRoot ( ) 
__label__0 getExecutorServiceManager ( ) .shutdownNow ( errorHandlerExecutorService ) 
__label__0 dateOfBirth == null || dateOfBirth.getTime ( ) == null || dateOfBirth.getTime ( ) .getValue ( ) == null 
__label__0 registry.bind ( `` myManager '' , cacheManager ) 
__label__1 ['request.getLocalAddr'  '('  ')'] 
__label__1 ['assertEquals'  '('  'model.getProperties'  '('  ')'  '.get'  '('  'NAME'  ')'  '.getType'  '('  ')'  ' '  "''"  'string'  "''"  ')'] 
__label__1 ['LOGGER.error'  '('  '``'  'no'  'property'  'for'  '``'  '+'  'type'  '+'  '``'  ' '  '``'  '+'  'format'  ')'] 
__label__1 ['dis.read'  '('  'serializedData 0'  ' '  'length'  ')'] 
__label__0 container.getTimeFormat ( ) .equals ( TimeFormat.DATE ) || container.getTimeFormat ( ) .equals ( TimeFormat.DATETIME ) 
__label__0 new Path ( testBucket.getParent ( ) , '' .test-2.inprogress '' ) .getPath ( ) 
__label__1 ['table'  '!'  '='  'null'] 
__label__0 this.uncollectedPointCreator 
__label__1 ['Thread.sleep'  '('  '3000'  ')'] 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__0 new UnsupportedOperationException ( getClass ( ) .getName ( ) ) 
__label__1 ['mapConfig.getTotalBackupCount'  '('  ')'] 
__label__0 assertFalse ( CompressionTest.testCompression ( `` SNAPPY '' ) ) 
__label__0 times + BASE_FILE_NUMBER 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  ')'] 
__label__1 ['``'  'Excluding'  'secondary'  'region'  '``'  '+'  'regionToFlush'  '+'  '``'  '-'  'trying'  'to'  'find'  'a'  'different'  'region'  'to'  'refresh'  'files'  '.'  "''"] 
__label__1 ['logger.info'  '('  '``'  'Future'  'response'  'is'  'already'  'set'  '!'  'Current'  'response'  ':'  '``'  '+'  'response'  '+'  '``'  ' '  'Offered'  'response'  ':'  '``'  '+'  'offeredResponse+'  '``'  ' '  'Invocation'  ':'  '``'  '+'  'invocation'  ')'] 
__label__1 ['REPLACE_IS_SAME'  '('  '7'  ')'] 
__label__1 ['relationship'  '('  '18'  ' '  'c'  ' '  "''"  'KNOWS'  "''"  ' '  'd'  ')'] 
__label__0 rsMeta.getColumnLabel ( i + 1 ) 
__label__1 ['future1.get'  '('  '1'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['op.getJavaName'  '('  ')'] 
__label__0 new IllegalStateException ( ex ) 
__label__0 Integer.toString ( types.size ( ) ) 
__label__0 new CommandLineException ( result.toString ( ) ) 
__label__1 ['('  'ResourceAdapterDeploymentService'  ')'  'controller.getService'  '('  ')'] 
__label__0 new IllegalStateException ( `` Test IllegalStateException '' ) 
__label__0 tfs.getFile ( fileId ) 
__label__0 HiveFileFormatUtils.getOutputFormatSubstitute ( outputFormatClass ) .getName ( ) 
__label__0 public CombinedMetric registerMetric ( String name , ICombiner combiner , int timeBucketSizeInSecs ) { return registerMetric ( name , new CombinedMetric ( combiner ) , timeBucketSizeInSecs ) ; } 
__label__0 toByteBuffer ( index , length ) 
__label__0 protected abstract Block getBlock ( ) ; 
__label__1 ['case'  'BOLD'  ':'] 
__label__0 javaWriter.emitSingleLineComment ( `` foo '' ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  'value='  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ReplicatedMapAntiEntropyTest'  'extends'  'ReplicatedMapBaseTest'  '{'  '@'  'After'  'public'  'void'  'cleanup'  '('  ')'  '{'  'System.clearProperty'  '('  '``'  'hazelcast.serialization.custom.override'  "''"  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testMapConvergesToSameValueWhenMissingReplicationUpdate'  '('  ')'  'throws'  'Exception'  '{'  'Config'  'config=new'  'Config'  '('  ')'  ';'  'SerializationConfig'  'serializationConfig=new'  'SerializationConfig'  '('  ')'  ';'  'SerializerConfig'  'serializerConfig=new'  'SerializerConfig'  '('  ')'  ';'  'serializerConfig.setTypeClassName'  '('  'PutOperation.class.getName'  '('  ')'  ')'  ';'  'serializerConfig.setImplementation'  '('  'new'  'PutOperationWithNoReplicationSerializer'  '('  ')'  ')'  ';'  'serializationConfig.addSerializerConfig'  '('  'serializerConfig'  ')'  ';'  'config.setSerializationConfig'  '('  'serializationConfig'  ')'  ';'  'System.setProperty'  '('  '``'  'hazelcast.serialization.custom.override'  "''"  ' '  "''"  'true'  "''"  ')'  ';'  'String'  'mapName=randomMapName'  '('  ')'  ';'  'TestHazelcastInstanceFactory'  'factory=createHazelcastInstanceFactory'  '('  ')'  ';'  'HazelcastInstance'  'instance1=factory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=factory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance3=factory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Object'  ' '  'Object'  '>'  'map1=instance1.getReplicatedMap'  '('  'mapName'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Object'  ' '  'Object'  '>'  'map2=instance2.getReplicatedMap'  '('  'mapName'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Object'  ' '  'Object'  '>'  'map3=instance3.getReplicatedMap'  '('  'mapName'  ')'  ';'  'final'  'String'  'key=generateKeyOwnedBy'  '('  'instance2'  ')'  ';'  'final'  'String'  'value=randomString'  '('  ')'  ';'  'map1.put'  '('  'key'  ' '  'value'  ')'  ';'  'assertEquals'  '('  'value'  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertEquals'  '('  'value'  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  'assertEquals'  '('  'value'  ' '  'map3.get'  '('  'key'  ')'  ')'  ';'  '}'  '}'  ')'  ';'  '}'  'public'  'class'  'PutOperationWithNoReplicationSerializer'  'implements'  'StreamSerializer'  '<'  'PutOperation'  '>'  '{'  '@'  'Override'  'public'  'void'  'write'  '('  'ObjectDataOutput'  'out'  ' '  'PutOperation'  'object'  ')'  'throws'  'IOException'  '{'  'object.writeData'  '('  'out'  ')'  ';'  '}'  '@'  'Override'  'public'  'PutOperation'  'read'  '('  'ObjectDataInput'  'in'  ')'  'throws'  'IOException'  '{'  'final'  'PutOperationWithNoReplication'  'operation=new'  'PutOperationWithNoReplication'  '('  ')'  ';'  'operation.readData'  '('  'in'  ')'  ';'  'return'  'operation'  ';'  '}'  '@'  'Override'  'public'  'int'  'getTypeId'  '('  ')'  '{'  'return'  '8778'  ';'  '}'  '@'  'Override'  'public'  'void'  'destroy'  '('  ')'  '{'  '}'  '}'  'class'  'PutOperationWithNoReplication'  'extends'  'PutOperation'  '{'  'public'  'PutOperationWithNoReplication'  '('  ')'  '{'  '}'  '@'  'Override'  'protected'  'Collection'  '<'  'Address'  '>'  'getMemberAddresses'  '('  ')'  '{'  'return'  'Collections.emptyList'  '('  ')'  ';'  '}'  '}'  '}'] 
__label__0 from ( `` jms : queue2 : parallelLoanRequestQueue '' ) .process ( new CreditAgency ( ) ) .multicast ( new BankResponseAggregationStrategy ( ) .setAggregatingOutMessage ( true ) ) .parallelProcessing ( true ) 
__label__1 ['indexFile.exists'  '('  ')'] 
__label__0 TypeUtils.getKoltinConstructor ( constructors , paramNames ) 
__label__1 ['logger.debug'  '('  '``'  'defineClass'  'pluginClass'  ':'  '{'  '}'  'cl'  ':'  '{'  '}'  "''"  ' '  'className'  ' '  'classLoader'  ')'] 
__label__0 ! Values.UPGRADE.equalsIgnoreCase ( connection ) 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__1 ['makeResponse'  '('  'new'  'AuthorizationException'  '('  '``'  'UI'  'request'  "'"  "''"  '+'  'op'  '+'  '``'  "'"  'for'  "'"  "''"  '+'  'user+'  '``'  "'"  'user'  'is'  'not'  'authorized'  "''"  ')'  ' '  'containerRequestContext 401'  ')'] 
__label__0 uri == null || uri.equals ( `` / '' ) 
__label__0 ! fields.contains ( name ) 
__label__0 this.nameDefinitionMultimap.remove ( name , def ) 
__label__1 ['url.toServiceString'  '('  ')'] 
__label__0 index < mInUseLocks.length ( ) 
__label__1 ['element.getNodeName'  '('  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['new'  'IOException'  '('  'badLine'  ')'] 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__1 ['Thread.sleep'  '('  '100'  ')'] 
__label__1 ['message'  '+'  'END'] 
__label__1 ['List'  '<'  'SuggestedFix'  '>'] 
__label__1 ['ps.createRelationship'  '('  'rel'  ')'] 
__label__1 ['new'  'RuntimeException'  '('  ')'] 
__label__1 ['dic.buildRouterChain'  '('  'invokers'  ')'] 
__label__0 mavenBundle ( `` info.cukes '' , '' cucumber-jvm-deps '' ) 
__label__1 ['size'  '*'  '1.75f'] 
__label__1 ['config.setBeanCache'  '('  'model.get'  '('  'EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE'  ')'  '.asString'  '('  ')'  ')'] 
__label__1 ['buffer.put'  '('  'indices'  ')'] 
__label__1 ['ENTER_PORTAL_FRAME'  '('  '120'  ')'] 
__label__0 maxActiveSessions == null & & servletContainerService ! = null 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweets/'  "''"  '+'  'statusId+'  '``'  '.json'  "''"  ' '  'true'  ')'  ')'] 
__label__0 view.getClusteredLayerDegree ( absNode ) 
__label__0 row == null || row.size ( ) == 0 
__label__0 child.getProperties ( ) .isStreamPartitionedOn ( partitioningRequirement ) 
__label__1 ['e.getCause'  '('  ')'] 
__label__1 ['idleConnectionTimeout'  '-'  'nettyResponseFuture.getLastTouch'  '('  ')'] 
__label__1 ['host.getHostText'  '('  ')'] 
__label__1 ['metricName.getName'  '('  ')'] 
__label__1 ['addProperty'  '('  'firstNode'  ' '  "''"  'band'  "''"  ' '  "''"  'The'  'Clash'  "''"  ')'] 
__label__0 annotations.remove ( node ) 
__label__0 new TypeException ( `` TypeHandler ' '' + getClass ( ) + `` ' extends TypeReference but misses the type parameter . `` + `` Remove the extension or add a type parameter to it . '' ) 
__label__0 this.thrown.expect ( IllegalStateException.class ) 
__label__1 ['ChannelBuffers.copiedBuffer'  '('  'request.getByteData'  '('  ')'  ')'] 
__label__0 new FunctionCall ( `` substring '' , new PathExpression ( new ObjectAccess ( `` addresses '' ) , new ArrayAccess ( 0 ) , new ObjectAccess ( `` zipCode '' ) ) , new ConstantExpression ( 0 ) , new ConstantExpression ( 2 ) ) 
__label__0 logger.fine ( `` Moving functions + variable into deeper modules '' ) 
__label__0 resource.removeExtractor ( input.getId ( ) , extractorId ) 
__label__1 ['wizardModel.databaseConnection.contains'  '('  '``'  'localhost'  "''"  ')'] 
__label__0 new StringBuilder ( 256 ) 
__label__1 ['context.setDelayer'  '('  '1000'  ')'] 
__label__1 ['t.add'  '('  'R.id.frame'  ' '  'new'  'SampleListFragment'  '('  ')'  ')'] 
__label__0 contact.getWorldManifold ( ) 
__label__1 ['cr.session_timeout_ms'  '!'  '='  '0'] 
__label__1 ['when'  '('  'rs.wasNull'  '('  ')'  ')'  '.thenReturn'  '('  'false'  ')'] 
__label__0 promise.setFailure ( new ClosedChannelException ( ) ) 
__label__1 ['new'  'IOException'  '('  ')'] 
__label__0 registry.bind ( `` firehoseClient '' , amazonKinesisFirehoseClient ) 
__label__0 notifierFuture.cancel ( false ) 
__label__1 ['new'  'IncrementalIndexSegment'  '('  'index'  ')'] 
__label__0 Optional.fromNullable ( resourceManagementScheduler ) 
__label__0 d.setMinorVersion ( 1 ) 
__label__0 timer.isActive ( ) || ( ! timer.isActive ( ) & & timer.getState ( ) == TimerState.ACTIVE ) 
__label__0 registry.bind ( `` params '' , params ) 
__label__0 hz1.getLifecycleService ( ) .shutdown ( ) 
__label__0 props.setProperty ( JdbcConnectionParams.PROPERTY_URL , saveUrl ) 
__label__0 log.error ( `` Failed to transfer file from TaskExecutor { } . `` , taskManagerId , throwable ) 
__label__0 Map < String , Object > 
__label__0 IOUtils.toString ( stencilsetStream , '' utf-8 '' ) 
__label__1 ['factory.get'  '('  'sBodyClass'  ' '  'NO_ANNOTATIONS'  ' '  'retrofit'  ')'] 
__label__0 mock.expectedMinimumMessageCount ( 10 ) 
__label__0 getParser ( ) .parse ( argsToUse ) 
__label__1 ['name='  "''"  'java'  ':'  '/topic/myAwesomeTopic'  "''"] 
__label__1 ['maxInvocationCountObservedDuringWarmup'  '*'  '1.2'] 
__label__0 endsWith ( `` /home/source '' ) 
__label__0 EXTFramebufferObject.glGetFramebufferAttachmentParameterivEXT ( target , attachment , pname , params ) 
__label__1 ['rowsRet'  '<'  '='  '0'] 
__label__0 / * * * Call WebModuleUtil.startModule on each started module * @ param servletContext * @ throws ModuleMustStartException if the context can not restart due to a { @ link MandatoryModuleException } or { @ link OpenmrsCoreModuleException } * / public static void performWebStartOfModules ( ServletContext servletContext ) throws ModuleMustStartException , Exception { Log log=LogFactory.getLog ( Listener.class ) ; List < Module > startedModules=new ArrayList < Module > ( ) ; startedModules.addAll ( ModuleFactory.getStartedModules ( ) ) ; boolean someModuleNeedsARefresh=false ; for ( Module mod : startedModules ) { try { boolean thisModuleCausesRefresh=WebModuleUtil.startModule ( mod , servletContext , true ) ; someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh ; } catch ( Exception e ) { mod.setStartupErrorMessage ( `` Unable to start module '' , e ) ; } } if ( someModuleNeedsARefresh ) { try { WebModuleUtil.refreshWAC ( servletContext , true , null ) ; } catch ( ModuleMustStartException ex ) { throw ex ; } catch ( Exception e ) { Throwable rootCause=getActualRootCause ( e , true ) ; if ( rootCause ! = null ) { log.fatal ( `` Unable to refresh the spring application context . Root Cause was : '' , rootCause ) ; } else { log.fatal ( `` Unable to refresh the spring application context . Unloading all modules , Error was : '' , e ) ; } try { WebModuleUtil.shutdownModules ( servletContext ) ; for ( Module mod : ModuleFactory.getLoadedModules ( ) ) { if ( ! mod.isCoreModule ( ) & & ! mod.isMandatory ( ) ) { try { ModuleFactory.stopModule ( mod , true , true ) ; } catch ( Throwable t3 ) { log.trace ( `` Unable to shutdown module : '' + mod , t3 ) ; } } } WebModuleUtil.refreshWAC ( servletContext , true , null ) ; } catch ( MandatoryModuleException ex ) { throw new MandatoryModuleException ( ex.getModuleId ( ) , '' Got an error while starting a mandatory module : `` + e.getMessage ( ) + `` . Check the server logs for more information '' ) ; } catch ( Throwable t2 ) { log.warn ( `` caught another error : `` , t2 ) ; throw t2 ; } } } for ( Module mod : ModuleFactory.getStartedModules ( ) ) { WebModuleUtil.loadServlets ( mod , servletContext ) ; WebModuleUtil.loadFilters ( mod , servletContext ) ; } } 
__label__1 ['new'  'HttpDigestAuthFilter'  '('  'DIGEST_TEST_LOGIN'  ' '  'DIGEST_TEST_PASS 1'  ')'] 
__label__0 bulkInsertableMap.containsKey ( persistentObjectClass ) 
__label__1 ['Assert.assertEquals'  '('  'masterAddress'  ' '  'new'  'InetSocketAddress'  '('  'defaultHostname'  ' '  'defaultPort'  ')'  ')'] 
__label__0 new CommandLineException ( `` Parsed request is n't available . '' ) 
__label__1 ['prefSize'  '('  'new'  'Fixed'  '('  'width'  ')'  ')'] 
__label__1 ['new'  'ArrayList'  '<'  '>'  '('  'modifiers.length'  '('  ')'  ')'] 
__label__1 ['new'  'ChannelInboundHandlerAdapter'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'userEventTriggered'  '('  'ChannelHandlerContext'  'ctx'  ' '  'Object'  'evt'  ')'  'throws'  'Exception'  '{'  'if'  '('  'evt'  'instanceof'  'WebSocketServerProtocolHandler.HandshakeComplete'  ')'  '{'  'assertNull'  '('  'ctx.pipeline'  '('  ')'  '.context'  '('  'WebSocketServerProtocolHandshakeHandler.class'  ')'  ')'  ';'  '}'  '}'  '}'] 
__label__1 ['Preconditions.checkNotNull'  '('  'mBlockIdsOnTiers'  ')'] 
__label__1 ['AbstactStoreHandler'  '<'  'DelayedEntry'  '>'] 
__label__1 ['autoCommit'  '!'  '='  'conn.getAutoCommit'  '('  ')'] 
__label__0 new PooledCFAttribute ( LOAD_BALANCING_CLASS_NAME , LOAD_BALANCING_POLICY_CLASS_NAME_METHOD ) 
__label__1 ['assertEquals'  '('  '70011'  ' '  'exchange.getIn'  '('  ')'  '.getBody'  '('  ')'  '.toString'  '('  ')'  '.length'  '('  ')'  ')'] 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__0 new StringBuilder ( 246 ) 
__label__1 ['Preconditions.checkNotNull'  '('  'mBlockIdsOnTiers'  ')'] 
__label__0 processSelectedKeys ( ) 
__label__1 ['exchange.addRequestHeader'  '('  'HttpHeaders.AUTHORIZATION'  ' '  "''"  'OAuth'  '``'  '+'  'accessToken'  ')'] 
__label__0 / * * * Add a { @ link AtmosphereResource } to the list of item to be notified whenthe { @ link Broadcaster # broadcast } is invoked . * @ param resource an { @ link AtmosphereResource } * @ return { @ link AtmosphereResource } if added , or null if it was already there . * / Broadcaster addAtmosphereResource ( AtmosphereResource resource ) ; 
__label__0 taskService.createTaskQuery ( ) .orderByExecutionId ( ) 
__label__1 ['floatBuffer.clear'  '('  ')'] 
__label__0 curTime == 0 || totalTime / curTime == curOps 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__0 new ModelNode ( ) .set ( 60000L ) 
__label__1 ['ImmutableMap.'  '<'  'String'  ' '  'Type'  '>'  'of'  '('  'StandardTypes.BOOLEAN'  ' '  'BOOLEAN'  ' '  'StandardTypes.BIGINT'  ' '  'BIGINT'  ' '  'StandardTypes.DOUBLE'  ' '  'DOUBLE'  ' '  'StandardTypes.VARCHAR'  ' '  'VARCHAR'  ' '  'VARCHAR.getTypeSignature'  '('  ')'  '.toString'  '('  ')'  ' '  'VARCHAR'  ')'] 
__label__0 context.registerSubsystem ( SUBSYSTEM_NAME,1,1 ) 
__label__0 AstUtils.hasAtLeastOneAnnotation ( classNode , '' MessageEndpoint '' , '' EnableIntegrationPatterns '' ) 
__label__0 { 189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691 } 
__label__1 ['Dagger_AutoFactoryProcessorComponent.builder'  '('  ')'] 
__label__0 HeadArraySchema schema=new HeadArraySchema ( ) ; 
__label__1 ['obj.getAcceptableTokens'  '('  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweeted_by_me.json'  "''"  ' '  'null'  ' '  'true'  ')'  ')'] 
__label__0 private final ReloadAction reloadAction ; 
__label__0 ImmutableList < PairedStats > 
__label__1 ['mDir.getDirId'  '('  ')'] 
__label__0 expectedValue.equals ( oldObject ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['OptionalIdentifiedType'  '<'  'Type'  '>'] 
__label__1 ['Assert.assertEquals'  '('  '3'  ' '  'visitor.getConditions'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__1 ['new'  'IllegalArgumentException'  '('  'e'  ')'] 
__label__1 ['('  'color'  '&'  '0x00FFFFFF'  ')'  '&'  '('  'alpha'  '<'  '<'  '24'  ')'] 
__label__0 path.lastIndexOf ( `` / '' ) < = 0 
__label__0 raw.getOutParameters ( ) 
__label__1 ['DIODE'  '('  '100'  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 hazelcastFactory.newHazelcastInstance ( newConfig ( ) ) 
__label__0 log.debug ( `` Checking bounds key : [ { } , { } ) & col : [ { } , { } ) ( expect { } keys ) '' , new Object [ ] { keyStart , keyEnd , startCol , endCol , expected.size ( ) } ) 
__label__0 file.getAbsolutePath ( ) 
__label__0 logger.info ( getName ( ) + `` has been started '' ) 
__label__1 ['logger.warn'  '('  '``'  '{'  '}'  '{'  '}'  "''"  ' '  'errorCode'  ' '  'message'  ')'] 
__label__1 ['FsDatasetImpl.LOG.info'  '('  '``'  'Completed'  'checkDirs'  '.'  'Removed'  '``'  '+'  'removedVols.size'  '('  ')'  '+'  '``'  'volumes'  '.'  'Current'  'volumes'  ':'  '``'  '+'  'this'  ')'] 
__label__1 ['gran.next'  '('  'timeStart'  ')'] 
__label__0 exchange.getContext ( ) .getTypeConverter ( ) .mandatoryConvertTo ( InputStream.class , exchange , graph ) 
__label__1 ['request.getTaskDefinitionKey'  '('  ')'] 
__label__0 new ArrayList < Data > ( entries.size ( ) ) 
__label__0 route.getOutputs ( ) == null || route.getOutputs ( ) .isEmpty ( ) 
__label__1 ['items'  '['  '25'  ']'] 
__label__1 ['privObj.getObjectName'  '('  ')'  '.equals'  '('  '``'  'masking_acid_no_masking'  "''"  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['NodeUtil.getFunctionNameNode'  '('  'enclosingFunction'  ')'] 
__label__0 currentModelTransform=renderable.modelTransform 
__label__1 ['new'  'StringBuilder'  '('  '561'  ')'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['testError'  '('  'js'  ' '  'VariableReferenceCheck.REDECLARED_VARIABLE'  ')'] 
__label__1 ['query.getDimensionSpec'  '('  ')'  '.preservesOrdering'  '('  ')'] 
__label__1 ['testComplete'  '('  ')'] 
__label__1 ['assertThat'  '('  'configs.get'  '('  'ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG'  ')'  ')'  '.isEqualTo'  '('  '123L'  ')'] 
__label__1 ['context.getStreamCachingStrategy'  '('  ')'  '.getSpoolChiper'  '('  ')'] 
__label__1 ['elementClass'  '!'  '='  'null'] 
__label__1 ['executor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'ACK'  'Settings'  "''"  ' '  'hostName'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'frameWriter.ackSettings'  '('  'peerSettings'  ')'  ';'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__1 ['interceptorParamTypes.length'  '-'  '1'] 
__label__0 log.debug ( `` Metric= [ % s ] has no StatsD type mapping '' , statsDMetric ) 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'solr'  "''"  ')'] 
__label__1 ['case'  'JOIN'  ':'] 
__label__1 ['parameterIsPrimitiveOrNullable'  '('  'func'  ' '  'indexOfParamToSetToNull'  ')'] 
__label__0 node.getLifecycleService ( ) .shutdown ( ) 
__label__0 MathUtils.PI * ( this.width * this.height ) / 4 
__label__1 ['``'  'Stream'  '``'  '+'  'importer'] 
__label__0 ! entry.getKey ( ) .isEmpty ( ) 
__label__1 ['Long.valueOf'  '('  'timeout'  ')'] 
__label__1 ['public'  'class'  'XpathRegressionOuterTypeNumberTest'  'extends'  'AbstractXpathTestSupport'  '{'  '@'  'Test'  'public'  'void'  'testOne'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=OuterTypeNumberCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionOuterTypeNumber.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'OuterTypeNumberCheck.class'  ')'  ';'  'moduleConfig.addAttribute'  '('  '``'  'max'  "''"  ' '  "''"  '0'  "''"  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '1:1'  ':'  '``'  '+'  'getCheckMessage'  '('  'OuterTypeNumberCheck.class'  ' '  'OuterTypeNumberCheck.MSG_KEY 3 0'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/PACKAGE_DEF'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '}'] 
__label__1 ['items'  '['  '33'  ']'] 
__label__1 ['assertEquals'  '('  '6'  ' '  'set.size'  '('  ')'  ')'] 
__label__1 ['targetCondn'  '=='  'null'] 
__label__1 ['annotation'  '=='  'OriginalType.MAP'] 
__label__0 attribute.startsWith ( keyPrefix ) & & attribute.length ( ) > keyPrefix.length ( ) 
__label__1 ['List'  '<'  'PairedStats'  '>'] 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  ')'] 
__label__0 methodName.equalsIgnoreCase ( `` scan '' ) 
__label__1 ['DiagnosticType.warning'  '('  '``'  'JSC_BAD_PRIVATE_GLOBAL_ACCESS'  "''"  ' '  "''"  'Access'  'to'  'private'  'variable'  '{'  '0'  '}'  'not'  'allowed'  'outside'  'file'  '{'  '1'  '}'  '.'  "''"  ')'] 
__label__1 ['RouteContext'  'key'] 
__label__1 ['instance.managementService.unregister'  '('  ')'] 
__label__1 ['TEST_UTIL.waitTableEnabled'  '('  'tableName'  ')'] 
__label__0 patientExitObs ! = null & & patientExitObs.size ( ) > 0 
__label__1 ['new'  'TableException'  '('  'String.format'  '('  '``'  'Unable'  'to'  'generate'  'a'  'string'  'representation'  'of'  'the'  'serializer'  'snapshot'  'of'  "'"  '%'  's'  "'"  '``'  '+'  '``'  'describing'  'the'  'class'  "'"  '%'  's'  "'"  'for'  'the'  'ANY'  'type'  '.'  '``'  ' '  'serializer.getClass'  '('  ')'  '.getName'  '('  ')'  ' '  'clazz.toString'  '('  ')'  ')'  ')'] 
__label__1 ['await'  '('  ')'  '.atMost'  '('  '5'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__0 new KernelStatement ( mock ( KernelTransactionImplementation.class ) , mock ( IndexReaderFactory.class ) , scanStore , null , null , null ) 
__label__0 registry.bind ( `` dummy '' , new ReactiveStreamsTestService ( `` from-registry '' ) ) 
__label__0 target.addTaskAndWakeup ( task ) 
__label__0 new StringBuilder ( 726 ) 
__label__0 modulePath.split ( File.pathSeparator ) [ 0 ] 
__label__1 ['database.FindProduct'  '('  'node.getManufacturer'  '('  ')'  ' '  'node.getDeviceType'  '('  ')'  ' '  'node.getDeviceId'  '('  ')'  ')'] 
__label__0 input.getDouble ( 0 ) < 0.05 
__label__0 FileSystem.getLocal ( conf ) .delete ( localScratchDir , true ) 
__label__1 ['WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS'  '('  'Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS 10000'  ')'] 
__label__0 KeyManagerFactory.getDefaultAlgorithm ( ) 
__label__0 TimeUnit.SECONDS.toMillis ( 5 ) 
__label__0 log.error ( `` PID contains identifier with no assigning authority '' ) 
__label__0 ImmutableMultiset < String > 
__label__0 logger.fine ( `` Expanding Jquery Aliases '' ) 
__label__0 @ UriParam ( label= '' producer '' , defaultValue= '' true '' ) 
__label__1 ['testClass.getMethod'  '('  'SUITE_METHODNAME'  ' '  'new'  'Class'  '['  '0'  ']'  ')'] 
__label__1 ['LOGGER.warn'  '('  '``'  '{'  '}'  '-'  'Failed'  'to'  'execute'  'connection'  'test'  'query'  '.'  '('  '{'  '}'  ')'  "''"  ' '  'poolName'  ' '  'e.getMessage'  '('  ')'  ')'] 
__label__0 { 189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691 } 
__label__0 new DatabaseFormatterPostgres ( ) 
__label__0 client.getState ( ) .setProxyCredentials ( new AuthScope ( null , -1 , AuthScope.ANY_REALM ) , defaultcreds ) 
__label__0 ! BlockStoreContext.INSTANCE.hasLocalWorker ( ) 
__label__1 ['DiagnosticType.disabled'  '('  '``'  'JSC_TOO_MANY_TEMPLATE_PARAMS'  "''"  ' '  "''"  '{'  '0'  '}'  "''"  ')'] 
__label__1 ['patientState.getState'  '('  ')'  '.getId'  '('  ')'] 
__label__0 / * * * Gets the exception thrown ( if any ) by the method called in { @ link # run ( ) } * @ return the thrown exception ( if any ) . * / public Exception getExceptionThrown ( ) { return exceptionThrown ; } 
__label__1 ['n.intValue'  '('  ')'] 
__label__1 ['new'  'RuntimeException'  '('  'e'  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['runningTasks.get'  '('  'assignedTask'  ')'] 
__label__1 ['line.substring'  '('  '0'  ' '  'p'  ')'  '.trim'  '('  ')'  '.toLowerCase'  '('  ')'] 
__label__0 ImmutableSortedSet.of ( `` a '' , '' abbr '' , '' acronym '' , '' address '' , '' area '' , '' b '' , '' bdo '' , '' big '' , '' blockquote '' , '' br '' , '' caption '' , '' cite '' , '' code '' , '' colgroup '' , '' dd '' , '' del '' , '' div '' , '' dfn '' , '' dl '' , '' dt '' , '' em '' , '' fieldset '' , '' font '' , '' h1 '' , '' h2 '' , '' h3 '' , '' h4 '' , '' h5 '' , '' h6 '' , '' hr '' , '' i '' , '' img '' , '' ins '' , '' kbd '' , '' li '' , '' ol '' , '' p '' , '' pre '' , '' q '' , '' samp '' , '' small '' , '' span '' , '' strong '' , '' style '' , '' sub '' , '' sup '' , '' table '' , '' tbody '' , '' td '' , '' tfoot '' , '' th '' , '' thead '' , '' tr '' , '' tt '' , '' ul '' ) 
__label__0 ( outputFolder + File.separator + apiFolder ) .replace ( `` / '' , File.separator ) 
__label__0 logger.debug ( `` Receive queue ADD : Length= { } '' , recvQueue.size ( ) ) 
__label__0 DirectMessage.createDirectMessageList ( get ( getBaseURL ( ) + `` direct_messages.json '' , true ) ) 
__label__0 cacheDirectory.mkdirs ( ) 
__label__1 ['headerFilterStrategy.applyFilterToCamelHeaders'  '('  'entry.getKey'  '('  ')'  ' '  'entry.getValue'  '('  ')'  ' '  'camelExchange'  ')'] 
__label__0 future.get ( 120 , TimeUnit.SECONDS ) 
__label__0 BufferUtils.disposeUnsafeByteBuffer ( bytebuffer ) 
__label__1 ['executor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'stream'  '%'  'd'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'handler.receive'  '('  'newStream'  ')'  ';'  '}'  'catch'  '('  'IOException'  'e'  ')'  '{'  'throw'  'new'  'RuntimeException'  '('  'e'  ')'  ';'  '}'  '}'  '}'  ')'] 
__label__0 new IntRangeValidator ( 0 , true , true ) 
__label__1 ['applicationStatistics.incrUpdateUserTimes'  '('  ')'] 
__label__1 ['writer.write'  '('  'line'  ')'] 
__label__0 setLowHighExpected ( lowResults , highResults , expectedResults , MENTION_F1,55.5,55.7,55.6 ) 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 routes.BuffersResource ( ) 
__label__0 LOGGER.debug ( `` no property for `` + type + `` , `` + format ) 
__label__0 m_data.getFixString ( ( int ) m_length , charsetName ) 
__label__0 context.var ( `` double '' ,2 ) 
__label__0 potentialResponse ! = null 
__label__1 ['telegram.getTimestamp'  '('  ')'  '<'  'currentTime'] 
__label__1 ['endFunction'  '('  '``'  'delete_column_statistics_by_partition'  ':'  '``'  ' '  'ret'  '!'  '='  'false'  ')'] 
__label__1 ['assertClusterSize'  '('  '2'  ' '  'nodes'  '['  '0'  ']'  ')'] 
__label__1 ['warnings.append'  '('  'LocalizationMessages.HINT_MSG'  '('  'error.getMessage'  '('  ')'  ')'  ')'] 
__label__0 remoteTableHandle.isPresent ( ) 
__label__0 new GeoLocation ( array.getDouble ( 1 ) , array.getDouble ( 0 ) ) 
__label__1 ['!'  'method.getName'  '('  ')'  '.equals'  '('  'methodToSearch'  ')'  '||'  '!'  'method.getReturnType'  '('  ')'  '.isAssignableFrom'  '('  'methodToFind.getReturnType'  '('  ')'  ')'] 
__label__1 ['deploymentInfo.setDefaultEncoding'  '('  'mergedMetaData.getDefaultEncoding'  '('  ')'  ')'] 
__label__1 ['new'  'JedisClusterCommand'  '<'  'Set'  '<'  'String'  '>'  '>'  '('  'connectionHandler'  ' '  'timeout'  ' '  'maxRedirections'  ')'  '{'  '@'  'Override'  'public'  'Set'  '<'  'String'  '>'  'execute'  '('  'Jedis'  'connection'  ')'  '{'  'return'  'connection.spop'  '('  'key'  ' '  'count'  ')'  ';'  '}'  '}'] 
__label__1 ['value.getType'  '('  ')'  '.getCanonicalName'  '('  ')'] 
__label__1 ['a.getTypeByte'  '('  ')'] 
__label__1 ['javaClass.addNestedType'  '('  ')'  '.setPublic'  '('  ')'] 
__label__0 LOG.debug ( `` Creating netty input stream for block { } @ { } from client { } '' , blockId , address , NetworkAddressUtils.getClientHostName ( ) ) 
__label__1 ['MANAGEMENT_API_MICRO_VERSION=0'] 
__label__1 ['mapper.setFilters'  '('  'new'  'SimpleFilterProvider'  '('  ')'  '.addFilter'  '('  'CGLIB_FILTER_ID'  ' '  'new'  'CglibBeanPropertyFilter'  '('  ')'  ')'  ')'] 
__label__0 retries == 0 & & totalConnections.incrementAndGet ( ) > configuration.getMaximumPoolSize ( ) 
__label__1 ['new'  'BindException'  '('  'concept'  ' '  "''"  'concept'  "''"  ')'] 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__0 null == batch || batch.isEmpty ( ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['Tuple2.of'  '('  'timeoutPattern4 13L'  ')'] 
__label__0 metaData.getColumnLabel ( 1 ) 
__label__1 ['s.contains'  '('  'a.getName'  '('  ')'  ')'] 
__label__0 mAbsListView.getPositionForView ( childView ) == position & & childView.getTag ( ) instanceof ViewHolder 
__label__0 Time.currentTimeMillis ( ) 
__label__1 ['logger.error'  '('  '``'  'Error'  'connecting'  'to'  'Plex'  "''"  ' '  'e'  ')'] 
__label__1 ['meta.setContentEncoding'  '('  'Mimetypes.MIMETYPE_OCTET_STREAM'  ')'] 
__label__0 ! key.equals ( PropertyKey.ZOOKEEPER_ENABLED ) 
__label__0 c.admin ( ) .indices ( ) .aliasesExist ( new IndicesGetAliasesRequest ( alias ) ) 
__label__1 ['logger.trace'  '('  '``'  'Receive'  'queue'  'ADD'  ':'  'Length='  '{'  '}'  "''"  ' '  'recvQueue.size'  '('  ')'  ')'] 
__label__0 ImmutableList.copyOf ( result ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/friends_timeline.json '' , true ) ) 
__label__1 ['oldestUnflushedStoreSequenceIds.put'  '('  'encodedRegionName'  ' '  'oldestUnflushedStoreSequenceIdsOfRegion'  ')'] 
__label__1 ['child.getProperties'  '('  ')'  '.isNodePartitionedOn'  '('  'partitioningRequirement'  ')'] 
__label__1 ['getPreferences'  '('  ')'  '.store'  '('  'fos'  ' '  "''"  "''"  ')'] 
__label__1 ['logger.error'  '('  '``'  'Configuration'  'for'  'influxdb'  'not'  'yet'  'loaded'  'or'  'broken'  '.'  "''"  ')'] 
__label__0 new LwjglPreferences ( name , '' .prefs/ '' ) 
__label__0 new FilterConfiguration ( filterClass , filterParams ) 
__label__0 startOffset > = pages.size ( ) 
__label__0 log.debug ( `` Checking bounds [ { } , { } ) ( expect { } keys ) '' , new Object [ ] { startCol , endCol , expected.size ( ) } ) 
__label__0 from ( `` direct : start '' ) .recipientList ( header ( `` slip '' ) ) .aggregationStrategy ( new AggregationStrategy ( ) { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { if ( oldExchange == null ) { return newExchange ; } String body=oldExchange.getIn ( ) .getBody ( String.class ) ; oldExchange.getIn ( ) .setBody ( body + newExchange.getIn ( ) .getBody ( String.class ) ) ; return oldExchange ; } } ) .parallelProcessing ( ) .timeout ( 1000 ) 
__label__1 ['packed'  '['  'j'  ']'] 
__label__0 report ( n , MISPLACED_ANNOTATION , '' @ abstract '' , '' function with a non-empty body can not be abstract '' ) 
__label__1 ['UrlUtils.getIdleTimeout'  '('  'getUrl'  '('  ')'  ')'] 
__label__0 new JSONParseSpec ( new TimestampSpec ( `` timestamp '' , '' auto '' ) , new DimensionsSpec ( null , null , null ) ) 
__label__1 ['log.warn'  '('  '``'  'Could'  'not'  'annotate'  'via'  'server'  '!'  'Trying'  'to'  'annotate'  'locally'  '...'  "''"  ' '  't'  ')'] 
__label__0 transitiveClosure.setNumberOfPartitions ( 3 ) 
__label__0 final ColumnFamilyDescriptor hcd=htd.getColumnFamily ( familyName ) ; 
__label__1 ['private'  'final'  'DynamicTrnasformerRegistry'  'dynamicTransformerRegistry'  ';'] 
__label__0 f.getAttrs ( ) .getMTime ( ) 
__label__0 instance2.getLifecycleService ( ) .shutdown ( ) 
__label__1 ['HashSet'  '<'  'String'  '>'] 
__label__1 ['result.expectedBodiesReceived'  '('  '``'  'A+C+E+G+I'  "''"  ' '  "''"  'B+D+F+H+J'  "''"  ')'] 
__label__1 ['attributeModel'  '!'  '='  'null'] 
__label__0 setDiskPersistent ( Boolean.valueOf ( ( String ) cacheSettings.get ( `` diskPersistent '' ) ) ) 
__label__1 ['('  'new'  'Path'  '('  'testBucket.getParent'  '('  ')'  ' '  "''"  '.test.inprogress'  "''"  ')'  ')'  '.toString'  '('  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Ignoring'  'duplicate'  'journal'  'entry'  'with'  'SN'  '{'  '}'  'when'  'next'  'SN'  'is'  '{'  '}'  "''"  ' '  'newSN'  ' '  'mNextSequenceNumberToRead'  ')'] 
__label__1 ['executor.scheduleWithFixedDelay'  '('  'this'  ' '  'period'  ' '  'period'  ' '  'unit'  ')'] 
__label__1 ['TestSuiteEnvironment.getServerAddress'  '('  ')'] 
__label__0 MetricMonitorValues.getMetric ( metrics , TRANSACTION_UNSAMPLED_CONTINUATION , UNSUPPORTED_GAUGE ) 
__label__1 ['nodeEngine.getPartitionService'  '('  ')'] 
__label__0 ImmutableList < String > 
__label__1 ['userGroupMember.getMemberId'  '('  ')'] 
__label__1 ['entry.getHeader'  '('  ')'  '.getEventLength'  '('  ')'  '*'  '3'] 
__label__0 assertEquals ( 303 , t.request ( ) .get ( ) .getStatus ( ) ) 
__label__0 logger.fine ( sb.toString ( ) ) 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectory.java '' ) 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__1 ['assertThat'  '('  'request.getBody'  '('  ')'  '.readUtf8'  '('  ')'  ')'  '.isEqualTo'  '('  '``'  '<'  'my-object'  '>'  '<'  'message'  '>'  'hello'  'world'  '<'  '/message'  '>'  '<'  'count'  '>'  '10'  '<'  '/count'  '>'  '<'  '/my-object'  '>'  "''"  ')'] 
__label__0 LOG.error ( `` XMLStreamReader { } not supporting Location '' , reader ) 
__label__1 ['ps.createRelationship'  '('  'rel'  ')'] 
__label__0 UnderFileSystem.get ( tmpFolder , ufsConf ) 
__label__0 LOG.error ( `` Can not create writer for app `` + this.applicationId + `` . Skip log upload this time . `` , e1 ) 
__label__1 ['fMethodDescriptions.put'  '('  'method'  ' '  'description'  ')'] 
__label__1 ['cf.getCompressionType'  '('  ')'  '=='  'null'] 
__label__1 ['Bytes.toBytesBinary'  '('  'tableOrRegionName'  ')'] 
__label__0 getConfiguration ( ) .getOrCreateConnectionFactory ( ) 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'output'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__0 setAttributeInternal ( inodePath , false , opTimeMs , options ) 
__label__0 path.lastIndexOf ( `` / '' ) < = 0 
__label__0 maxSize ( new Fixed ( width ) , new Fixed ( height ) ) 
__label__0 new IOException ( `` Mocked failed close ! '' ) 
__label__1 ['Calendar.getInstance'  '('  'JSON.defaultLocale'  ')'] 
__label__1 ['war.addAsWebInfResource'  '('  'SimpleWebTestCase.class.getPackage'  '('  ')'  ' '  "''"  'web.xml'  "''"  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Checkstyle'  'frame'  'model'  '.'  '*'  '/'  'private'  'final'  'transient'  'CheckstyleFrameModel'  'model=new'  'CheckstyleFrameModel'  '('  ')'  ';'] 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectoryAtParent.java '' ) 
__label__1 ['config.getMaxRedirects'  '('  ')'] 
__label__1 ['currentTime.get'  '('  ')'  '/'  '1_000L'] 
__label__0 connector.getFilterChain ( ) 
__label__1 ['heartBeatTimerTask'  '!'  '='  'null'] 
__label__1 ['element.getNodeName'  '('  ')'] 
__label__0 serverService.getOutgoingInterceptors ( ) 
__label__0 websocketComponent.setMaxThreads ( 20 ) 
__label__1 ['logger.debug'  '('  '``'  'Illegal'  'argument'  'in'  'chart'  ':'  '{'  '}'  "''"  ' '  'e'  ')'] 
__label__1 ['refreshableViewWrapper.addView'  '('  'newEmptyView'  ' '  'ViewGroup.LayoutParams.MATCH_PARENT'  ' '  'ViewGroup.LayoutParams.MATCH_PARENT'  ')'] 
__label__0 maxSize < ( used / total ) 
__label__1 ['new'  'GeoLocation'  '('  'array.getDouble'  '('  '0'  ')'  ' '  'array.getDouble'  '('  '1'  ')'  ')'] 
__label__0 visitStatement ( node , context ) 
__label__1 ['level'  '<'  '='  'RF_STATUS_MEDIUM_SIGNAL'] 
__label__0 StringUtils.isEmpty ( finalFormKey ) 
__label__0 ChannelHandler handler=new ChannelHandler ( ) { @ Override public void channelActive ( ChannelHandlerContext ctx ) throws Exception { ctx.fireChannelActive ( ) ; peerRef.exchange ( ctx.channel ( ) ,1L , SECONDS ) ; } @ Override public void channelRead ( ChannelHandlerContext ctx , Object msg ) { latch.countDown ( ) ; ctx.read ( ) ; } @ Override public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) { causeRef.set ( cause ) ; } } ; 
__label__1 ['getSSLContext'  '('  ')'  '.getSocketFactory'  '('  ')'  '.createSocket'  '('  ')'] 
__label__1 ['getBooleanValue'  '('  'ASYNC_CLIENT'  '+'  '``'  'acceptAnyCertificate'  "''"  ' '  'false'  ')'] 
__label__1 ['Long.valueOf'  '('  'args'  '['  '2'  ']'  ')'] 
__label__0 Integer.parseInt ( matcher.group ( 1 ) ) 
__label__0 assertEquals ( 4 , AccessControlLists.getTablePermissions ( conf , TEST_TABLE ) .size ( ) ) 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  'exampleServletRegistration'  '('  ')'  ' '  'new'  'FilterRegistrationBean'  '('  'new'  'ExampleFilter'  '('  ')'  ')'  ')'] 
__label__1 ['10'  '*'  'Constants.SECOND_MS'] 
__label__1 ['qs.isEmpty'  '('  ')'] 
__label__1 ['removeQuote'  '('  'timestring.trim'  '('  ')'  ')'] 
__label__0 WeakSafeReadWriteLock strongReference 
__label__0 getDatabaseCatalog ( ) ! = null & & getDatabaseCatalog ( ) .length ( ) > 0 
__label__1 ['entry.getValue'  '('  ')'  '.acccessibleNodeLabels'] 
__label__0 Assert.assertEquals ( 4 , providers.size ( ) ) 
__label__1 ['req.getSession'  '('  ')'  '.getMaxInactiveInterval'  '('  ')'  '*'  '1000'] 
__label__1 ['getSslStoreProvider'  '('  ')'  '.getKeyStore'  '('  ')'] 
__label__1 ['logger.debug'  '('  '``'  'myq'  'securityToken'  ':'  '{'  '}'  "''"  ' '  'securityToken'  ')'] 
__label__0 ConditionalOnEnabledHealthIndicator.class 
__label__1 ['stat.st_ctim.tv_nsec.get'  '('  ')'] 
__label__0 metastore.getHost ( ) 
__label__1 ['Expression.eq'  '('  '``'  'searchable'  "''"  ' '  'format'  ')'] 
__label__1 ['xtw.writeCharacters'  '('  'customProperty.getSimpleValue'  '('  ')'  ')'] 
__label__0 DEFAULT_ALLOW_SPILLING=true 
__label__0 war.setWebXML ( ClusteredWebTestCase.class.getPackage ( ) , '' web.xml '' ) 
__label__1 ['p'  '+'  '``'  '.'  "''"  '+'  'M_ITERATOR'] 
__label__1 ['ImmutableList.of'  '('  ')'] 
__label__0 targetCondn == null || ( nodeCondn.size ( ) ! = targetCondn.size ( ) ) 
__label__0 @ Override public Response example ( String type , Object example ) { throw new RuntimeException ( `` Not implemented '' ) ; } 
__label__1 ['new'  'StringBuilder'  '('  '639'  ')'] 
__label__1 ['logger.error'  '('  '``'  'Endpoint'  '{'  '}'  'not'  'found'  'on'  'node'  '{'  '}'  '.'  'Can'  'not'  'set'  'command'  'classes'  '.'  '``'  ' '  'endpoint'  ' '  'this.getNode'  '('  ')'  '.getNodeId'  '('  ')'  ')'] 
__label__1 ['Lists.newArrayList'  '('  'stream1'  ')'] 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['block.useSourceInfoFromForTree'  '('  'exprRoot'  ')'] 
__label__0 locations.isDefined ( ) 
__label__1 ['connection.zrangeByLex'  '('  'key'  ' '  'max'  ' '  'min'  ')'] 
__label__1 ['FILES_BYTES'  '*'  '1000L'] 
__label__1 ['hz.getCluster'  '('  ')'  '.getLocalMember'  '('  ')'  '.isSuperClient'  '('  ')'] 
__label__1 ['CollectionUtils.isNotEmpty'  '('  'elements'  ')'] 
__label__0 removeBlock ( sessionId , blockId , BlockStoreLocation.anyTier ( ) ) 
__label__1 ['registry.put'  '('  '``'  'eventBus'  "''"  ' '  'new'  'EventBus'  '('  ')'  ')'] 
__label__0 assertEquals ( 5 , set.size ( ) ) 
__label__1 ['64'  '*'  '1024'  '*'  '0124'] 
__label__1 ['to'  '('  '``'  'bar'  "''"  ')'] 
__label__1 ['new'  'SslContextBuilder'  '('  'false'  ')'] 
__label__0 new IllegalStateException ( `` Result is already complete : succeeded '' ) 
__label__0 hz1.getLifecycleService ( ) .shutdown ( ) 
__label__0 logger.trace ( `` Requsting URL { } '' , url ) 
__label__0 new CommandLineException ( `` ModelNode request is incomplete '' , e ) 
__label__1 ['writeDelaySeconds=2'] 
__label__0 nodeEngine.getClusterService ( ) 
__label__1 ['``'  'streams'  ':'  "''"  '+'  'filter'] 
__label__0 tempBlock.getPath ( ) 
__label__0 connection.psubscribe ( jedisPubSub , patterns ) 
__label__1 ['idAnnotation'  '!'  '='  'null'] 
__label__1 ['getIntProperty'  '('  '``'  'tachyon.master.web.threads'  "''"  ' 5'  ')'] 
__label__1 ['DUPLICATE_OPS_TOLERANCE=5'] 
__label__1 ['conf.set'  '('  '``'  'tez.queue.name'  "''"  ' '  'null'  ')'] 
__label__1 ['delegate.tokenize'  '('  'token'  ' '  'regex'  ')'] 
__label__1 ['Map'  '<'  'String'  ' '  'String'  '>'] 
__label__0 getLsResultStr ( `` /testRoot/testDir '' , files [ 1 ] .getCreationTimeMs ( ) ,1 , LsCommand.STATE_FOLDER , testUser , testUser , files [ 1 ] .getPermission ( ) , files [ 1 ] .isFolder ( ) ) 
__label__1 ['getBinaryTupledSet'  '('  ')'] 
__label__1 ['type'  '!'  '='  'EventType.QUERY'] 
__label__1 ['Status.constructStatuses'  '('  'http.get'  '('  '``'  'http'  ':'  '//yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json'  "''"  ')'  ')'] 
__label__1 ['memoryReservation.getAndAdd'  '('  'bytes'  ')'] 
__label__0 mListView.getListChildAt ( index ) 
__label__0 IllegalStateException nsee 
__label__0 ( ObjectSerializer ) value 
__label__0 doAnswer ( new Answer < Object > ( ) { @ Override public Object answer ( InvocationOnMock invocation ) throws Throwable { sem.release ( ) ; return null ; } } ) .when ( loggerMock ) .warn ( anyString ( ) ) 
__label__1 ['nameDefinitionMultimap.keySet'  '('  ')'] 
__label__1 ['region.getRegionId'  '('  ')'] 
__label__1 ['sr0.getValue'  '('  ')'  '.f1'] 
__label__1 ['GL20.glVertexAttribPointer'  '('  'indx'  ' '  'size'  ' '  'normalized'  ' '  'stride'  ' '  '('  '('  'ByteBuffer'  ')'  'buffer'  ')'  '.asFloatBuffer'  '('  ')'  ')'] 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class IdGeneratorBasicDistributedTest extends IdGeneratorAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( ) { return createHazelcastInstanceFactory ( 2 ) .newInstances ( ) ; } } 
__label__0 public String getRequestRequiredAcks ( ) { return requestRequiredAcks ; } 
__label__1 ['GL.glCopyTexSubImage2DEXT'  '('  'target'  ' '  'level'  ' '  'xoffset'  ' '  'yoffset'  ' '  'x'  ' '  'y'  ' '  'width'  ' '  'height'  ')'] 
__label__1 ['exchange.addRequestHeader'  '('  'HttpHeaders.AUTHORIZATION'  ' '  "''"  'OAuth'  '``'  '+'  'currentToken'  ')'] 
__label__0 new DynamicAwareEntry ( `` http : //localhost:8080/test '' , null , null , null ) 
__label__1 ['('  '('  'Number'  ')'  's.first'  '('  ')'  ')'  '.intValue'  '('  ')'] 
__label__0 request.getRemoteAddr ( ) 
__label__0 invocation.logger.finest ( `` Asking if operation execution has been started : `` + invocation ) 
__label__0 assertCompositeByteBufIsBufferCopyNeededForWrite ( alloc,2,0 , true ) 
__label__0 LOG.info ( `` Table { } is disabled , give up reopening its regions '' , tableName ) 
__label__1 ['EndpointOption'  'that='  '('  'EndpointOption'  ')'  'o'  ';'] 
__label__0 public Long getOlderThan ( ) { return olderThan ; } 
__label__0 public class XpathRegressionNestedTryDepthTest extends XpathTestSupport { @ Test public void testCorrect ( ) throws Exception { final String checkName=NestedTryDepthCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionNestedTryDepth.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( NestedTryDepthCheck.class ) ; final String [ ] expectedViolation= { `` 7:17 : `` + getCheckMessage ( NestedTryDepthCheck.class , NestedTryDepthCheck.MSG_KEY,2,1 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionNestedTryDepth ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['connection.zrangeByLex'  '('  'key'  ' '  'max'  ' '  'min'  ')'] 
__label__0 localCache.put ( name , cacheEntry ) 
__label__0 new RequestManager ( testTimer,3000 ) 
__label__0 executor.execute ( new NamedRunnable ( `` OkHttp Window Update % s stream % d '' , hostName , streamId ) { @ Override public void execute ( ) { try { frameWriter.windowUpdate ( streamId , unacknowledgedBytesRead ) ; } catch ( IOException ignored ) { } } } ) 
__label__1 ['r.getRequest'  '('  ')'] 
__label__0 Assert.assertEquals ( 1455 , details.get ( 6 ) .getAbsolutePosition ( ) ) 
__label__0 Color.rgba8888ToColor ( color , colorInt ) 
__label__1 ['config.getIdleConnectionTimeoutInMs'  '('  ')'] 
__label__0 DATABASE_TYPE_MSSQL.equals ( databaseType ) 
__label__0 JsonRecordHiveMapper.class 
__label__1 ['javaWriter.emitSingleLineCOmment'  '('  '``'  'foo'  "''"  ')'] 
__label__1 ['new'  'IntRangeValidator'  '('  '1'  ' '  'true'  ' '  'true'  ')'] 
__label__1 ['MESSAGES.unknownMessageListenerType'  '('  'resourceAdapterName'  ' '  'messageListenerInterface.getName'  '('  ')'  ')'] 
__label__1 ['child.getProperties'  '('  ')'  '.isNodePartitionedOn'  '('  'partitioningRequirement'  ')'] 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['attribute.getDefinition'  '('  ')'  '.getAttributeMarshaller'  '('  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Getting'  'asynchronous'  'method'  'stub'  'from'  'channel'  "''"  ')'] 
__label__0 cr.session_timeout_ms ! = null & & cr.session_timeout_ms ! = 0 
__label__1 ['srcActivity.getParent'  '('  ')'  '=='  'null'] 
__label__1 ['return'  'true'  ';'] 
__label__1 ['scrollbarsOnTop'  '&'  '&'  'scrollX'] 
__label__1 ['keys.isEmpty'  '('  ')'] 
__label__0 GL20.glGetVertexAttribfv ( index , pname , params ) 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__1 ['builder.addDependency'  '('  'RegistryInstallerService.SERVICE_NAME'  ')'] 
__label__0 decodeLast ( ctx , e.getChannel ( ) , replayable , state ) 
__label__1 ['contentType'  '!'  '='  'null'] 
__label__1 ['primitiveType'  '!'  '='  'null'] 
__label__0 mock.expectedMinimumMessageCount ( 2 ) 
__label__1 ['annotations.get'  '('  'node'  ')'] 
__label__1 ['s'  '!'  '='  'null'] 
__label__1 ['assertEquals'  '('  '0'  ' '  'deserialized.getOwnedEntryMemoryCost'  '('  ')'  ')'] 
__label__0 GL20.glGetUniformiv ( program , location , params ) 
__label__0 MessageFormat.format ( TEMPLATE , path , metricsUri , path , pingUri , path , threadsUri , path , healthcheckUri ) 
__label__0 testWarning ( js , ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) 
__label__0 logger.trace ( `` Received MyQ JSON : { } '' , dataString ) 
__label__1 ['row.size'  '('  ')'  '=='  '0'] 
__label__0 Calendar.getInstance ( JSON.defaultTimeZone , JSON.defaultLocale ) 
__label__1 ['ufsPath.getPath'  '('  ')'] 
__label__1 ['relations.replace'  '('  'oldName'  ' '  'newTable'  ')'  '!'  '='  'null'] 
__label__1 ['a.getTypeByte'  '('  ')'] 
__label__0 LOG.warn ( `` Can not access storage directory `` + rootPath ) 
__label__1 ['registry.put'  '('  '``'  'kinesisClient'  "''"  ' '  'amazonKinesisClient'  ')'] 
__label__0 DEFAULT_BLOCK_SIZE=100 
__label__1 ['results.expectedMessageCount'  '('  '2'  ')'] 
__label__1 ['Lists.newArrayListWithExpectedSize'  '('  'resultMessages.size'  '('  ')'  ')'] 
__label__0 ! content.readable ( ) 
__label__1 ['repo.setRecoveryInterval'  '('  '500'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__0 @ Override public Response description ( String description ) { throw new RuntimeException ( `` Not implemented '' ) ; } 
__label__0 JavaConversions.asJavaIterable ( logManager.allLogs ( ) ) 
__label__0 field.getFieldName ( ) .equalsIgnoreCase ( s ) 
__label__1 ['LOG.warn'  '('  '``'  'Promotion'  'of'  'block'  '``'  '+'  'blockId'  '+'  '``'  'failed'  '.'  '``'  ' '  'ioe'  ')'] 
__label__1 ['ar.cause'  '('  ')'] 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['runAllTasks'  '('  ')'] 
__label__0 new IOException ( `` should execute connector.connect ( ) first '' ) 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` jms '' ) 
__label__0 INVISIBILITY ( 14 , PotionEffectType.INVISIBILITY,1 ) 
__label__0 ! taskOutput.getState ( ) .isDone ( ) 
__label__0 ( ZWaveWakeUpCommandClass ) node.getCommandClass ( CommandClass.WAKE_UP ) 
__label__0 clockSource.elapsedMillis ( startTime ) 
__label__0 getRegistry ( ) .bind ( `` myFilter '' , new NotificationFilter ( ) { private static final long serialVersionUID=1L ; public boolean isNotificationEnabled ( Notification aNotification ) { boolean enabled=aNotification.getSequenceNumber ( ) % 2 == 0 ; if ( ! enabled ) { mRejected.add ( aNotification ) ; } return enabled ; } } ) 
__label__1 ['new'  'SimpleAttributeDefinition'  '('  '``'  'ha'  "''"  ' '  'new'  'ModelNode'  '('  ')'  '.set'  '('  'HornetQClient.DEFAULT_HA'  ')'  ' '  'ModelType.BOOLEAN'  ' '  'false'  ')'] 
__label__0 current.getLabel ( ) .startsWith ( `` nt '' ) & & ! pre.getLabel ( ) .startsWith ( `` nt '' ) & & ! pre.getValue ( ) .equals ( Predefine.TAG_BIGIN ) 
__label__0 `` Unsupported filesystem scheme found in the backup target url . Error Message : `` + expMsg 
__label__1 ['testerAnnotation.getClass'  '('  ')'] 
__label__1 ['new'  'InstrumentedTimingCollector'  '('  'Metrics.defaultRegistry'  '('  ')'  ' '  'Database.class'  ')'] 
__label__1 ['``'  'Requeuing'  'shutdown'  'because'  'rootScanned'  ':'  '``'  '+'  'rootScanned'  '+'  '``'  ' '  'numberOfMetaRegions'  ':'  '``'  '+'  'numberOfMetaRegions.get'  '('  ')'  '+'  '``'  ' '  'onlineMetaRegions.size'  '('  ')'  ':'  '``'  '+'  'onlineMetaRegions.size'  '('  ')'] 
__label__0 level < RF_STATUS_LOW_SIGNAL 
__label__1 ['incomingMessage.getMessagePayloadByte'  '('  '0'  ')'] 
__label__0 ( ( ExecutorService ) executor ) .isTerminated ( ) 
__label__0 new SimpleDateFormat ( format , JSON.defaultLocale ) 
__label__0 t.replace ( R.id.frame , new SampleListFragment ( ) ) 
__label__0 left.getFieldName ( ) .equalsIgnoreCase ( right.getFieldName ( ) ) 
__label__0 MessageSerializer.serializeServerFailure ( ctx.alloc ( ) , new RuntimeException ( msg ) ) 
__label__0 context ! = null & & redirectUri == null 
__label__0 Arrays.asList ( `` onContextStart '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onServiceAdd '' , '' onComponentAdd '' , '' onEndpointAdd '' , '' onComponentRemove '' , '' onContextStop '' ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__0 logger.fine ( `` Collapsed `` + numRenamedPropertyNames + `` properties into `` + numNewPropertyNames+ `` and skipped renaming `` + numSkippedPropertyNames+ `` properties . '' ) 
__label__1 ['put'  '('  'TYPES'  ' '  'new'  'MapTypeCaster'  '('  ')'  ' '  'Map.class'  ' '  'Double.class'  ')'] 
__label__0 nameDefinitionMultimap.keySet ( ) 
__label__0 p + `` . '' + M_GET_KEYS+ `` . `` + M_ITERATOR 
__label__0 stopwatch.elapsed ( MILLISECONDS ) 
__label__1 ['DiagnosticType.error'  '('  '``'  'JSC_TOO_MANY_TEMPLATE_PARAMS'  "''"  ' '  "''"  '{'  '0'  '}'  "''"  ')'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__0 new Path ( tblDesc.getLocation ( ) , Warehouse.makePartPath ( addPartitionDesc.getPartSpec ( ) ) ) 
__label__0 IOUtils.closeQuietly ( is ) 
__label__0 meta.setContentType ( Mimetypes.MIMETYPE_OCTET_STREAM ) 
__label__1 ['stores.contains'  '('  'name'  ')'] 
__label__1 ['Color.fromRGB'  '('  '0xD88198'  ')'] 
__label__1 ['deployment.addServletContainerInitalizer'  '('  'new'  'ServletContainerInitializerInfo'  '('  'Initializer.class'  ' '  'new'  'ImmediateInstanceFactory'  '<'  'ServletContainerInitializer'  '>'  '('  'initializer'  ')'  ' '  'NO_CLASSES'  ')'  ')'] 
__label__0 new Notification ( notification , nodeService ) 
__label__1 ['this'  '=='  'NtiOnly'] 
__label__0 StatBuckets.prettyUptimeStr ( secs ) 
__label__1 ['ChronicleEngineEnpoint'  'endpoint'] 
__label__0 Assert.assertFalse ( ec.getRegisteredKryoTypes ( ) .contains ( java.sql.Date.class ) ) 
__label__0 `` `` + ENVIRONMENT_VARIABLES_MODE_OVERRIDE 
__label__1 ['new'  'ResourceProfile'  '('  'Double.MAX_VALUE'  ' '  'Integer.MAX_VALUE'  ' '  'Integer.MAX_VALUE'  ' '  'Integer.MAX_VALUE'  ' '  'Integer.MAX_VALUE'  ' '  'managedMemoryPerSlot'  ' '  'Collections.emptyMap'  '('  ')'  ')'] 
__label__0 assertThat ( configs.get ( ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG ) ) .isEqualTo ( 123 ) 
__label__0 @ GwtIncompatible ( `` ObjectInputStream '' ) public void restoreState ( InputStream inputStream ) throws IOException { try ( final ObjectInputStream objectInputStream=new ObjectInputStream ( inputStream ) ) { CompilerState compilerState=runInCompilerThread ( new Callable < CompilerState > ( ) { @ Override public CompilerState call ( ) throws Exception { return ( CompilerState ) objectInputStream.readObject ( ) ; } } ) ; externs=compilerState.externs ; inputs=compilerState.inputs ; inputsById.clear ( ) ; inputsById.putAll ( compilerState.inputsById ) ; typeRegistry=compilerState.typeRegistry ; externAndJsRoot=compilerState.externAndJsRoot ; externsRoot=compilerState.externsRoot ; jsRoot=compilerState.jsRoot ; mostRecentTypechecker=compilerState.mostRecentTypeChecker ; synthesizedExternsInput=compilerState.synthesizedExternsInput ; synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd ; injectedLibraries.clear ( ) ; injectedLibraries.putAll ( compilerState.injectedLibraries ) ; lastInjectedLibrary=compilerState.lastInjectedLibrary ; globalRefMap=compilerState.globalRefMap ; symbolTable=compilerState.symbolTable ; hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences ; typeValidator=compilerState.typeValidator ; setLifeCycleStage ( compilerState.lifeCycleStage ) ; externProperties=compilerState.externProperties ; } initWarningsGuard ( options.getWarningsGuard ( ) ) ; maybeSetTracker ( ) ; } 
__label__0 idAnnotation ! = null & & ! method.isBridge ( ) 
__label__0 times + BASE_FILE_NUMBER 
__label__1 ['hazelcastFactory.newHazelcastClient'  '('  ')'] 
__label__1 ['handleSecurityPermissionEndpoints'  '('  'principalNode'  ' '  'permConfig'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '254'  ')'] 
__label__1 ['new'  'NotifyBuilder'  '('  'context'  ')'  '.whenDone'  '('  '4'  ')'] 
__label__1 ['messageHandler.serverResponder'  '('  ')'] 
__label__0 logger.debug ( `` gave up waiting for query reply from device { } '' , m_address ) 
__label__0 String.format ( `` NODE % d : Already in or beyond node stage , ignoring . current = % s , requested = % s '' , this.node.getNodeId ( ) , this.node.getNodeStage ( ) .getLabel ( ) , targetStage.getLabel ( ) ) 
__label__1 ['getSrcPath'  '('  '``'  'checks/javadoc/Input_02.java'  "''"  ')'] 
__label__1 ['GL20.glUniform1'  '('  'location'  ' '  'v'  ')'] 
__label__1 ['historicState'  '('  'item'  ' '  'timestamp'  ')'] 
__label__0 BlockWorkerUtils.getWorkerAddress ( mTachyonConf ) .getAddress ( ) .getHostAddress ( ) 
__label__0 node.actor.getY ( ) < = high & & ! selectedNodes.contains ( node , true ) 
__label__1 ['shardDao.insertShard'  '('  'shard'  ' '  'tableId'  ' '  'null 0 0 0'  ')'] 
__label__1 ['flags.length'  '=='  '0'] 
__label__1 ['status.isDir'  '('  ')'] 
__label__1 ['!'  'type.isInterface'  '('  ')'] 
__label__0 logger.info ( `` { } exists but can not be executed even when execute permissions set ; `` + `` check volume for \ '' noexec\ '' flag ; use -Dio.netty.native.workdir= [ path ] `` + `` to set native working directory separately . `` , tmpFile.getPath ( ) , '' io.netty.native.workdir '' ) 
__label__1 ['resultEndpoint.expectedBodiesReceived'  '('  '``'  'one'  "''"  ' '  "''"  'three'  "''"  ')'] 
__label__0 registered.remove ( objectName ) 
__label__1 ['protocol.read'  '('  'inputStream'  ')'] 
__label__1 ['file.length'  '('  ')'  '>'  '='  'Integer.MAX_VALUE'] 
__label__1 ['isHandshaking'  '('  'clientResult'  ')'  '&'  '&'  'isHandshaking'  '('  'serverResult'  ')'] 
__label__1 ['2'  '<'  'buf.length'  '-'  'count'] 
__label__1 ['cache.setRecord'  '('  'key'  ' '  'record'  ')'] 
__label__0 ! broadcasterClassName.equalsIgnoreCase ( DefaultBroadcaster.class.getName ( ) ) 
__label__0 field.set ( instance , value ) 
__label__0 standardSearchRequest ( query , IndexHelper.determineAffectedIndices ( indexRangeService , deflector , range ) , range ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__0 mime == null || mime.value ( ) .length == 0 
__label__1 ['Math.min'  '('  '1000L'  ' '  'connectionTimeout'  ')'] 
__label__0 resource.terminate ( input.getId ( ) , extractorId ) 
__label__1 ['new'  'DatagramDnsQuery'  '('  'addr'  ' '  'null 1'  ')'] 
__label__1 ['TestSuiteEnvironment.getServerAddress'  '('  ')'] 
__label__1 ['new'  'DynamicAwareEntry'  '('  '``'  'https'  ':'  '//localhost/test'  "''"  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['mf.filter'  '('  'r'  ' '  'message'  ' '  'transformed.message'  '('  ')'  ')'] 
__label__0 @ RunWith ( HazelcastSerialClassRunner.class ) @ Category ( QuickTest.class ) public class ReplicatedMapTest extends ReplicatedMapAbstractTest { @ Test public void testEmptyMapIsEmpty ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 1 ) ; HazelcastInstance instance=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < Integer , Integer > map=instance.getReplicatedMap ( randomName ( ) ) ; assertTrue ( `` map should be empty '' , map.isEmpty ( ) ) ; } @ Test public void testNonEmptyMapIsNotEmpty ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 1 ) ; HazelcastInstance instance=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < Integer , Integer > map=instance.getReplicatedMap ( randomName ( ) ) ; map.put ( 1,1 ) ; assertFalse ( `` map should not be empty '' , map.isEmpty ( ) ) ; } @ Test ( expected=IllegalArgumentException.class ) public void testNegativeTtlThrowsException ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 1 ) ; HazelcastInstance instance=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < Integer , Integer > map=instance.getReplicatedMap ( randomName ( ) ) ; map.put ( 1,1 , -1 , TimeUnit.DAYS ) ; } @ Test public void testAddObject ( ) throws Exception { testAdd ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testAddBinary ( ) throws Exception { testAdd ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testAdd ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; for ( String key : keys ) { map1.put ( key , '' bar '' ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar '' , map1.get ( key ) ) ; assertEquals ( `` bar '' , map2.get ( key ) ) ; } } } ) ; } @ Test public void testPutAllObject ( ) throws Exception { testPutAll ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testPutAllBinary ( ) throws Exception { testPutAll ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testPutAll ( Config config ) throws TimeoutException { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; final Map < String , String > mapTest=new HashMap < String , String > ( ) ; for ( String key : keys ) { mapTest.put ( key , '' bar '' ) ; } map1.putAll ( mapTest ) ; assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar '' , map1.get ( key ) ) ; assertEquals ( `` bar '' , map2.get ( key ) ) ; } } } ) ; } @ Test public void testClearObject ( ) throws Exception { testClear ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testClearBinary ( ) throws Exception { testClear ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testClear ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; for ( String key : keys ) { map1.put ( key , '' bar '' ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar '' , map1.get ( key ) ) ; assertEquals ( `` bar '' , map2.get ( key ) ) ; } } } ) ; map1.clear ( ) ; assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { assertEquals ( 0 , map1.size ( ) ) ; assertEquals ( 0 , map2.size ( ) ) ; } } ) ; } @ Test public void testAddTtlObject ( ) throws Exception { testAddTtl ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testAddTtlBinary ( ) throws Exception { testAddTtl ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testAddTtl ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; for ( String key : keys ) { map1.put ( key , '' bar '' ,10 , TimeUnit.MINUTES ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar '' , map1.get ( key ) ) ; ReplicatedRecord < String , String > record=getReplicatedRecord ( map1 , key ) ; assertNotNull ( record ) ; assertNotEquals ( 0 , record.getTtlMillis ( ) ) ; } } } ) ; assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar '' , map2.get ( key ) ) ; ReplicatedRecord < String , String > record=getReplicatedRecord ( map2 , key ) ; assertNotNull ( record ) ; assertNotEquals ( 0 , record.getTtlMillis ( ) ) ; } } } ) ; } @ Test public void testUpdateObject ( ) throws Exception { testUpdate ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testUpdateBinary ( ) throws Exception { testUpdate ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testUpdate ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; for ( String key : keys ) { map1.put ( key , '' bar '' ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar '' , map1.get ( key ) ) ; assertEquals ( `` bar '' , map2.get ( key ) ) ; } } } ) ; for ( String key : keys ) { map2.put ( key , '' bar2 '' ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar2 '' , map1.get ( key ) ) ; assertEquals ( `` bar2 '' , map2.get ( key ) ) ; } } } ) ; } @ Test public void testUpdateTtlObject ( ) throws Exception { testUpdateTtl ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testUpdateTtlBinary ( ) throws Exception { testUpdateTtl ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testUpdateTtl ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; for ( String key : keys ) { map1.put ( key , '' bar '' ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar '' , map1.get ( key ) ) ; assertEquals ( `` bar '' , map2.get ( key ) ) ; } } } ) ; for ( String key : keys ) { map2.put ( key , '' bar2 '' ,10 , TimeUnit.MINUTES ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar2 '' , map1.get ( key ) ) ; ReplicatedRecord < String , String > record=getReplicatedRecord ( map1 , key ) ; assertNotNull ( record ) ; assertTrue ( record.getTtlMillis ( ) > 0 ) ; } } } ) ; assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar2 '' , map2.get ( key ) ) ; ReplicatedRecord < String , String > record=getReplicatedRecord ( map2 , key ) ; assertNotNull ( record ) ; assertTrue ( record.getTtlMillis ( ) > 0 ) ; } } } ) ; } @ Test public void testRemoveObject ( ) throws Exception { testRemove ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testRemoveBinary ( ) throws Exception { testRemove ( buildConfig ( InMemoryFormat.BINARY ) ) ; } @ Test public void testContainsKey_returnsFalse_onRemovedKeys ( ) throws Exception { HazelcastInstance node=createHazelcastInstance ( ) ; ReplicatedMap < Integer , Integer > map=node.getReplicatedMap ( `` default '' ) ; map.put ( 1 , Integer.MAX_VALUE ) ; map.remove ( 1 ) ; assertFalse ( map.containsKey ( 1 ) ) ; } @ Test public void testContainsKey_returnsFalse_onNonexistentKeys ( ) throws Exception { HazelcastInstance node=createHazelcastInstance ( ) ; ReplicatedMap < Integer , Integer > map=node.getReplicatedMap ( `` default '' ) ; assertFalse ( map.containsKey ( 1 ) ) ; } @ Test public void testContainsKey_returnsTrue_onExistingKeys ( ) throws Exception { HazelcastInstance node=createHazelcastInstance ( ) ; ReplicatedMap < Integer , Integer > map=node.getReplicatedMap ( `` default '' ) ; map.put ( 1 , Integer.MAX_VALUE ) ; assertTrue ( map.containsKey ( 1 ) ) ; } @ Test public void testKeySet_notIncludes_removedKeys ( ) throws Exception { HazelcastInstance node=createHazelcastInstance ( ) ; final ReplicatedMap < Integer , Integer > map=node.getReplicatedMap ( `` default '' ) ; map.put ( 1 , Integer.MAX_VALUE ) ; map.put ( 2 , Integer.MIN_VALUE ) ; map.remove ( 1 ) ; assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { Set < Integer > keys=new HashSet < Integer > ( map.keySet ( ) ) ; assertFalse ( keys.contains ( 1 ) ) ; } } ,20 ) ; } @ Test public void testEntrySet_notIncludes_removedKeys ( ) throws Exception { HazelcastInstance node=createHazelcastInstance ( ) ; final ReplicatedMap < Integer , Integer > map=node.getReplicatedMap ( `` default '' ) ; map.put ( 1 , Integer.MAX_VALUE ) ; map.put ( 2 , Integer.MIN_VALUE ) ; map.remove ( 1 ) ; assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { Set < Entry < Integer , Integer > > entries=map.entrySet ( ) ; for ( Entry < Integer , Integer > entry : entries ) { if ( entry.getKey ( ) .equals ( 1 ) ) { fail ( String.format ( `` We do not expect an entry which 's key equals to % d in entry set '' ,1 ) ) ; } } } } ,20 ) ; } private void testRemove ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; for ( String key : keys ) { map1.put ( key , '' bar '' ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertEquals ( `` bar '' , map1.get ( key ) ) ; assertEquals ( `` bar '' , map2.get ( key ) ) ; } } } ) ; for ( String key : keys ) { map2.remove ( key ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertFalse ( map1.containsKey ( key ) ) ; assertFalse ( map2.containsKey ( key ) ) ; } } } ) ; } @ Test public void testSizeObject ( ) throws Exception { testSize ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testSizeBinary ( ) throws Exception { testSize ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testSize ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; final SimpleEntry < String , String > [ ] testValues=buildTestValues ( keys ) ; int half=testValues.length / 2 ; for ( int i=0 ; i < testValues.length ; i++ ) { final ReplicatedMap < String , String > map=i < half ? map1 : map2 ; final SimpleEntry < String , String > entry=testValues [ i ] ; map.put ( entry.getKey ( ) , entry.getValue ( ) ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { assertEquals ( keys.size ( ) , map1.size ( ) ) ; assertEquals ( keys.size ( ) , map2.size ( ) ) ; } } ) ; } @ Test public void testContainsKeyObject ( ) throws Exception { testContainsKey ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testContainsKeyBinary ( ) throws Exception { testContainsKey ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testContainsKey ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; for ( String key : keys ) { map1.put ( key , '' bar '' ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertTrue ( map1.containsKey ( key ) ) ; assertTrue ( map2.containsKey ( key ) ) ; } } } ) ; } @ Test public void testContainsValue_returnsFalse_onNonexistentValue ( ) throws Exception { HazelcastInstance node=createHazelcastInstance ( ) ; ReplicatedMap < Integer , Integer > map=node.getReplicatedMap ( `` default '' ) ; assertFalse ( map.containsValue ( 1 ) ) ; } @ Test public void testContainsValueObject ( ) throws Exception { testContainsValue ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testContainsValueBinary ( ) throws Exception { testContainsValue ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testContainsValue ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; int half=keys.size ( ) / 2 , i=0 ; for ( String key : keys ) { final ReplicatedMap < String , String > map=i++ < half ? map1 : map2 ; map.put ( key , key ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { for ( String key : keys ) { assertTrue ( map1.containsValue ( key ) ) ; assertTrue ( map2.containsValue ( key ) ) ; } } } ) ; } @ Test public void testValuesWithComparator ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 1 ) ; HazelcastInstance instance=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < Integer , Integer > map=instance.getReplicatedMap ( randomName ( ) ) ; for ( int i=0 ; i < 100 ; i++ ) { map.put ( i , i ) ; } Collection < Integer > values=map.values ( new DescendingComparator ( ) ) ; int v=100 ; for ( Integer value : values ) { assertEquals ( -- v , ( int ) value ) ; } } @ Test public void testValuesObject ( ) throws Exception { testValues ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testValuesBinary ( ) throws Exception { testValues ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testValues ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; int half=keys.size ( ) / 2 , i=0 ; for ( String key : keys ) { final ReplicatedMap < String , String > map=i++ < half ? map1 : map2 ; map.put ( key , key ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { assertEquals ( keys , new HashSet < String > ( map1.values ( ) ) ) ; assertEquals ( keys , new HashSet < String > ( map2.values ( ) ) ) ; } } ) ; } @ Test public void testKeySetObject ( ) throws Exception { testKeySet ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testKeySetBinary ( ) throws Exception { testKeySet ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testKeySet ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; int half=keys.size ( ) / 2 , i=0 ; for ( String key : keys ) { final ReplicatedMap < String , String > map=i++ < half ? map1 : map2 ; map.put ( key , key ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { assertEquals ( keys , new HashSet < String > ( map1.keySet ( ) ) ) ; assertEquals ( keys , new HashSet < String > ( map2.keySet ( ) ) ) ; } } ) ; } @ Test public void testEntrySetObject ( ) throws Exception { testEntrySet ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testEntrySetBinary ( ) throws Exception { testEntrySet ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testEntrySet ( Config config ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; int half=keys.size ( ) / 2 , i=0 ; for ( String key : keys ) { final ReplicatedMap < String , String > map=i++ < half ? map1 : map2 ; map.put ( key , key ) ; } assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { List < Entry < String , String > > entrySet1=new ArrayList < Entry < String , String > > ( map1.entrySet ( ) ) ; List < Entry < String , String > > entrySet2=new ArrayList < Entry < String , String > > ( map2.entrySet ( ) ) ; assertEquals ( keys.size ( ) , entrySet1.size ( ) ) ; assertEquals ( keys.size ( ) , entrySet2.size ( ) ) ; for ( Entry < String , String > e : entrySet1 ) { assertTrue ( keys.contains ( e.getKey ( ) ) ) ; } for ( Entry < String , String > e : entrySet2 ) { assertTrue ( keys.contains ( e.getKey ( ) ) ) ; } } } ) ; } @ Test public void testAddListenerObject ( ) throws Exception { testAddEntryListener ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testAddListenerBinary ( ) throws Exception { testAddEntryListener ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testAddEntryListener ( Config config ) throws TimeoutException { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; SimpleEntryListener listener=new SimpleEntryListener ( 1,0 ) ; map2.addEntryListener ( listener , keys.iterator ( ) .next ( ) ) ; for ( String key : keys ) { map1.put ( key , '' bar '' ) ; } assertOpenEventually ( listener.addLatch ) ; } @ Test public void testEvictionObject ( ) throws Exception { testEviction ( buildConfig ( InMemoryFormat.OBJECT ) ) ; } @ Test public void testEvictionBinary ( ) throws Exception { testEviction ( buildConfig ( InMemoryFormat.BINARY ) ) ; } private void testEviction ( Config config ) throws TimeoutException { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 2 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=nodeFactory.newHazelcastInstance ( config ) ; final ReplicatedMap < String , String > map1=instance1.getReplicatedMap ( `` default '' ) ; final ReplicatedMap < String , String > map2=instance2.getReplicatedMap ( `` default '' ) ; final int partitionCount=getPartitionService ( instance1 ) .getPartitionCount ( ) ; final Set < String > keys=generateRandomKeys ( instance1 , partitionCount ) ; SimpleEntryListener listener=new SimpleEntryListener ( 0,100 ) ; map2.addEntryListener ( listener ) ; SimpleEntryListener listenerKey=new SimpleEntryListener ( 0,1 ) ; map1.addEntryListener ( listenerKey , keys.iterator ( ) .next ( ) ) ; for ( String key : keys ) { map1.put ( key , '' bar '' ,3 , TimeUnit.SECONDS ) ; } assertOpenEventually ( listener.evictLatch ) ; assertOpenEventually ( listenerKey.evictLatch ) ; } private class SimpleEntryListener extends EntryAdapter < String , String > { CountDownLatch addLatch ; CountDownLatch evictLatch ; SimpleEntryListener ( int addCount , int evictCount ) { addLatch=new CountDownLatch ( addCount ) ; evictLatch=new CountDownLatch ( evictCount ) ; } @ Override public void entryAdded ( EntryEvent event ) { addLatch.countDown ( ) ; } @ Override public void entryEvicted ( EntryEvent event ) { evictLatch.countDown ( ) ; } } @ Test ( expected=IllegalArgumentException.class ) public void putNullKey ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 1 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < Object , Object > map1=instance1.getReplicatedMap ( `` default '' ) ; map1.put ( null,1 ) ; } @ Test ( expected=IllegalArgumentException.class ) public void removeNullKey ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 1 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < Object , Object > map1=instance1.getReplicatedMap ( `` default '' ) ; map1.remove ( null ) ; } @ Test public void removeEmptyListener ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 1 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < Object , Object > map1=instance1.getReplicatedMap ( `` default '' ) ; assertFalse ( map1.removeEntryListener ( `` 2 '' ) ) ; } @ Test ( expected=IllegalArgumentException.class ) public void removeNullListener ( ) throws Exception { TestHazelcastInstanceFactory nodeFactory=createHazelcastInstanceFactory ( 1 ) ; HazelcastInstance instance1=nodeFactory.newHazelcastInstance ( ) ; ReplicatedMap < Object , Object > map1=instance1.getReplicatedMap ( `` default '' ) ; map1.removeEntryListener ( null ) ; } @ Test public void testSizeAfterRemove ( ) throws Exception { HazelcastInstance node=createHazelcastInstance ( ) ; ReplicatedMap < Integer , Integer > map=node.getReplicatedMap ( `` default '' ) ; map.put ( 1 , Integer.MAX_VALUE ) ; map.remove ( 1 ) ; assertTrue ( map.size ( ) == 0 ) ; } @ Test public void testDestroy ( ) throws Exception { HazelcastInstance instance=createHazelcastInstance ( ) ; ReplicatedMap < Object , Object > replicatedMap=instance.getReplicatedMap ( randomName ( ) ) ; replicatedMap.put ( 1,1 ) ; replicatedMap.destroy ( ) ; Collection < DistributedObject > objects=instance.getDistributedObjects ( ) ; assertEquals ( 0 , objects.size ( ) ) ; } class DescendingComparator implements Comparator < Integer > { @ Override public int compare ( Integer o1 , Integer o2 ) { return o1 == o2 ? 0 : o1 > o2 ? -1 : 1 ; } } } 
__label__0 EmitterProcessor.create ( 1 , false ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__0 computeAntiJoin ( inputStatistics , inputStatistics , unknown , u ) 
__label__1 ['handlers'  '['  '0'  ']'  '=='  'null'] 
__label__1 ['!'  'WebSocketProtocolStream.class.isAssignableFrom'  '('  'webSocketProtocol.getClass'  '('  ')'  ')'] 
__label__1 ['deploymentInfo.setDefaultEncoding'  '('  'servletContainer.getDefaultEncoding'  '('  ')'  ')'] 
__label__1 ['ChannelBuffers.copiedBuffer'  '('  'request.getByteData'  '('  ')'  ')'] 
__label__0 conf.unset ( `` tez.queue.name '' ) 
__label__1 ['HashMap'  '<'  'String'  ' '  'Operator'  '<'  '?'  'extends'  'Serializable'  '>'  '>'] 
__label__1 ['PositiveIntegerValidator.class'] 
__label__1 ['userGroupMember.getMemberId'  '('  ')'] 
__label__0 addRegionStateToPut ( putB , RegionState.State.CLOSED ) 
__label__1 ['Color.fromRGB'  '('  '0x253192'  ')'] 
__label__1 ['testError'  '('  '``'  'class'  'Foo'  'extends'  'BaseFoo'  '{'  'constructor'  '('  ')'  '{'  'Foo.base'  '('  'this'  ')'  ';'  '}'  '}'  "''"  ' '  'GOOG_BASE_CLASS_ERROR'  ')'] 
__label__1 ['javaWriter.emitSingleLineCOmment'  '('  '``'  'foo'  "''"  ')'] 
__label__1 ['LOG.debug'  '('  '``'  'Created'  'new'  'Configuration'  '{'  '}'  "''"  ')'] 
__label__0 / * * * Retrieves X . * @ return a value * / public T1 getX ( ) { return null ; } 
__label__1 ['length'  '%'  'dictionarySize'] 
__label__0 setComplete ( mLength ) 
__label__0 TestSuiteEnvironment.getServerAddressNode1 ( ) 
__label__0 DirectMessage.createDirectMessageList ( get ( getBaseURL ( ) + `` direct_messages/sent.json '' , new PostParameter [ 0 ] , true ) ) 
__label__1 ['new'  'DefaultPropertyNamePatternsMatcher'  '('  'delimeters'  ' '  "''"  'aaa'  "''"  ' '  "''"  'bbbb'  "''"  ' '  "''"  'ccccc'  "''"  ')'] 
__label__0 streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == ' '' ' 
__label__0 Assert.assertEquals ( select.size ( ) ,0 ) 
__label__1 ['testSame'  '('  '``'  'asdf'  ';'  "''"  ' '  "''"  'var'  'asdf'  ';'  "''"  ' '  'VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR'  ' '  'true'  ')'] 
__label__1 ['UnsupportedOperationException.class'] 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class ConditionBasicLocalTest extends ConditionAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( ) { return createHazelcastInstanceFactory ( 1 ) .newInstances ( ) ; } } 
__label__0 Assert.assertEquals ( getNotAllowedExceptionMessage ( `` helloForRoles '' ) , e.getCause ( ) .getMessage ( ) ) 
__label__0 showTooltip == null || showTooltip.targetActor == null 
__label__0 getConnectionAddOperation ( name , outboundSocketBindingRef , username , securityRealm , address ) 
__label__0 r.destination ! = null & & ! r.destination.isEmpty ( ) 
__label__1 ['ctx.nextOutboundMessageBuffer'  '('  ')'] 
__label__0 mFileLength < = mBlockSize 
__label__1 ['timeoutLatch.await'  '('  '1200'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__0 logger.warn ( `` InfluxDB is not yet connected '' ) 
__label__1 ['var.setValue'  '('  'guessType'  '('  'value'  ')'  ')'] 
__label__1 ['NSNumber.numberWithLong'  '('  'val'  ')'] 
__label__0 logger.trace ( `` Received MyQ JSON : { } '' , dataString ) 
__label__1 ['new'  'GenericAggregationFunction'  '('  'name'  ' '  'inputTypes'  ' '  'intermediateType'  ' '  'outputType'  ' '  'false'  ' '  'aggregationAnnotation.approximate'  '('  ')'  ' '  'factory'  ')'] 
__label__0 javaWriter.emitSingleLineComment ( `` foo '' ) 
__label__1 ['responseCode'  '<'  'OK'  '&'  '&'  'MULTIPLE_CHOICES'  '<'  '='  'responseCode'] 
__label__1 ['LOG.warn'  '('  'e'  ')'] 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__0 ssl.hasDefined ( CommonAttributes.CA_CERTIFICATE_FILE ) 
__label__0 logger.warn ( `` { } { } '' , errorCode , message ) 
__label__1 ['getTokenNames'  '('  ')'] 
__label__1 ['value.longValue'  '('  ')'] 
__label__0 logger.debug ( `` Can not retrieve item { } for widget { } '' , itemName , w.eClass ( ) .getInstanceTypeName ( ) ) 
__label__0 buffer.nextOneRow ( changeColumns , true ) 
__label__1 ['super.getView'  '('  'position'  ' '  'contextualUndoView.getContentView'  '('  ')'  ' '  'parent'  ')'] 
__label__1 ['modelNode.has'  '('  'LOCAL'  ')'] 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__0 localFilteredData.addAccessRestrictedResource ( absoluteChildAddr ) 
__label__1 ['new'  'ServletException'  '('  '``'  'non-HTTP'  'request'  'or'  'response'  "''"  ')'] 
__label__0 new IllegalArgumentException ( `` Can not determine if commit is consistent '' ) 
__label__0 mFs.mkdirs ( new Path ( path ) ) 
__label__1 ['items'  '['  '23'  ']'] 
__label__1 ['mail.getClass'  '('  ')'  '.getName'  '('  ')'] 
__label__1 ['node.has'  '('  'Constants.ALIAS'  ')'] 
__label__0 filteredSearchRequest ( query , filter , IndexHelper.determineAffectedIndices ( indexRangeService , deflector , range ) , range ) 
__label__1 ['assertEquals'  '('  '1'  ' '  'scheduler.getQueueManager'  '('  ')'  '.getQueues'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__0 maxSize < ( used / total ) 
__label__0 IllegalStateException nsee 
__label__0 resultEndpoint.expectedBodiesReceivedInAnyOrder ( `` one '' , '' two '' , '' three '' ) 
__label__0 new ClientBuilderImpl ( ) .serviceUrl ( getPulsarBrokerUrl ( ) ) .ioThreads ( 5 ) 
__label__1 ['queueView.get'  '('  ')'  '.get'  '('  'index.longValue'  '('  ')'  ')'] 
__label__1 ['Thread.sleep'  '('  '10'  ')'] 
__label__0 ownedEntryCount == nearCacheSize 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__1 ['host.getHostText'  '('  ')'] 
__label__1 ['messageHandler.serverResponder'  '('  ')'] 
__label__1 ['assertEquals'  '('  'ex.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  "''"  'Unable'  'to'  'read'  '2'  'bytes'  ' '  'got'  '0'  "''"  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Signal'  'the'  'maps/reduces'  'to'  'start'  '.'  '*'  '/'  'static'  'void'  'signalTasks'  '('  'MiniDFSCluster'  'dfs'  ' '  'FileSystem'  'fileSys'  ' '  'boolean'  'isMap'  ' '  'String'  'mapSignalFile'  ' '  'String'  'reduceSignalFile'  ')'  'throws'  'IOException'  '{'  'writeFile'  '('  'dfs.getNameNode'  '('  ')'  ' '  'fileSys.getConf'  '('  ')'  ' '  'isMap'  '?'  'new'  'Path'  '('  'mapSignalFile'  ')'  ':'  'new'  'Path'  '('  'reduceSignalFile'  ')'  ' '  '('  'short'  ')'  '1'  ')'  ';'  '}'] 
__label__1 ['importedClassIndex.isEmpty'  '('  ')'] 
__label__0 RuntimeException.class 
__label__1 ['websocketComponent.setMaxThreads'  '('  '11'  ')'] 
__label__1 ['new'  'CompilerException'  '('  'sourceName'  ' '  'e.line'  ' '  'e.getCause'  '('  ')'  ')'] 
__label__0 new ServletException ( `` non-HTTP request or response '' , e ) 
__label__0 logger.debug ( `` The GENA Subscription for serviceID { } is established for device { } '' , sub.getService ( ) .getServiceId ( ) , sub.getService ( ) .getDevice ( ) ) 
__label__0 logger.fine ( `` Skipped renaming `` + instancesSkipped + `` invalidated `` + `` properties , `` + propsSkipped+ `` instances of properties `` + `` that were skipped for specific types and `` + singleTypeProps+ `` properties that were referenced from only one type . '' ) 
__label__0 ExceptionUtils.firstOrSuppressed ( e , collectedExceptions ) 
__label__0 d.addWelcomePages ( file ) 
__label__0 obj.getRequiredTokens ( ) 
__label__1 ['javaWriter.emitSingleLineCOmment'  '('  '``'  'foo'  "''"  ')'] 
__label__1 ['public'  'DerivedBuilder'  'setRealmEnconding'  '('  'String'  'enc'  ')'  '{'  'realm'  '('  ')'  '.setEnconding'  '('  'enc'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['this.connectTo'  '('  'vertex'  ' '  'channelType'  ' '  'compressionLevel'  ' '  '-1'  ' '  '-1'  ' '  'distributionPattern'  ' '  'false'  ')'] 
__label__0 principalCookieName ! = null & & httpRequest.getCookies ( ) ! = null 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__0 sequenceFileVersion ! = SEQUENCE_FILE_VERSION 
__label__1 ['dbCol.findOne'  '('  ')'] 
__label__1 ['routes.IndicesResource'  '('  ')'  '.single'  '('  'index'  ')'] 
__label__1 ['ImportAutoConfigurationWithItemsOne.class'] 
__label__1 ['attributes'  '=='  'null'] 
__label__1 ['newNode.makeNonIndexable'  '('  ')'] 
__label__0 primitiveType ! = null || arrayComponentType ! = null 
__label__0 new Whitelist ( ) .addTags ( `` a '' , '' b '' , '' blockquote '' , '' br '' , '' cite '' , '' code '' , '' dd '' , '' dl '' , '' dt '' , '' em '' , '' i '' , '' li '' , '' ol '' , '' p '' , '' pre '' , '' q '' , '' small '' , '' span '' , '' strike '' , '' strong '' , '' sub '' , '' sup '' , '' u '' , '' ul '' ) 
__label__0 Foundation.log ( `` [ info ] `` + tag + `` : `` + message ) 
__label__0 new ClusterConfiguration ( `` clusterName '' , initialHosts ) 
__label__0 mock.message ( 0 ) .body ( String.class ) 
__label__0 prePassivates ! = null 
__label__0 Response headers ( Map < String , Property > headers ) ; 
__label__0 ImmutableList.copyOf ( modules ) 
__label__1 ['stats.getLastAccessTime'  '('  ')'  '>'  'lastAccessTime'] 
__label__0 UserGroupInformation.getCurrentUser ( ) .checkTGTAndReloginFromKeytab ( ) 
__label__1 ['ArrayNodeBaseTest'  '<'  'LazyTailArrayNode'  '>'] 
__label__1 ['public'  'Integer'  'getRequestRequiredAcks'  '('  ')'  '{'  'return'  'requestRequiredAcks'  ';'  '}'] 
__label__0 ( System.currentTimeMillis ( ) - lastAccessedTime.getTime ( ) ) > = timeout 
__label__1 ['layout.setRefreshingLabel'  '('  'label'  ')'] 
__label__0 assertEquals ( avDegree,0.5 ) 
__label__1 ['status.isDirectory'  '('  ')'] 
__label__1 ['realPointerIndex'  '>'  'AndroidInput.NUM_TOUCHES'] 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__0 public Builder setRealmPassword ( String password ) { realm ( ) .setPassword ( password ) ; return this ; } 
__label__0 this.thrown.expectMessage ( `` File must not be null '' ) 
__label__0 Preconditions.checkNotNull ( mBlockIdsOnTiers , '' mBlockIdsOnTiers '' ) 
__label__1 ['CommonUtils.randomString'  '('  'random.nextInt'  '('  '10'  ')'  ')'] 
__label__1 ['JavaConversions.asMap'  '('  'logManager.logsByTopicPartition'  '('  ')'  ')'] 
__label__0 clientConfig.property ( ClientProperties.READ_TIMEOUT,2000 ) 
__label__1 ['endpoint.expectedMessageCount'  '('  '1'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Returns'  'messages'  'newer'  'than'  'the'  'message'  'ID'  'specified'  'as'  'a'  'numeric'  'string'  '.'  'This'  'should'  'be'  'used'  'when'  'polling'  'for'  'new'  'messages'  '.'  'If'  'you'  "'re"  'looking'  'at'  'messages'  ' '  'and'  'the'  'most'  'recent'  'message'  'returned'  'is'  '3516'  ' '  'you'  'can'  'make'  'a'  'request'  'with'  'the'  'parameter'  '``'  '?'  'newerThan=3516″'  'to'  'ensure'  'that'  'you'  'do'  'not'  'get'  'duplicate'  'copies'  'of'  'messages'  'already'  'on'  'your'  'page'  '.'  '*'  '/'  'private'  'Integer'  'newerThan=-1'  ';'] 
__label__1 ['newId'  '>'  'max'] 
__label__1 ['LOG.error'  '('  '``'  'XMLStreamReader'  '{'  '}'  'not'  'supporting'  'Location'  "''"  ')'] 
__label__0 context.var ( `` long '' ,2 ) 
__label__1 ['getBinaryTupledSet'  '('  ')'] 
__label__1 ['assertEquals'  '('  '5'  ' '  'AccessControlLists.getTablePermissions'  '('  'conf'  ' '  'TEST_TABLE'  ')'  '.size'  '('  ')'  ')'] 
__label__0 LOG.info ( `` Read offset { } before start of log at { } , starting to read from the beginning of the journal . `` , readOffset , logStartOffset ) 
__label__0 LOG.warn ( `` Can not access storage directory `` + rootPath , ex ) 
__label__0 block.useSourceInfoIfMissingFromForTree ( exprRoot ) 
__label__0 Configuration.getMs ( PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS ) 
__label__1 ['hashFunction.hashBytes'  '('  'littleEndian'  ')'] 
__label__1 ['public'  'DerivedBuilder'  'setSSLContext'  '('  'final'  'SSLContext'  'sslContext'  ')'  '{'  'configBuilder.setSSLContext'  '('  'sslContext'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['event.getColumns'  '('  ')'] 
__label__0 connectPromise.tryFailure ( t ) 
__label__1 ['LOG.trace'  '('  '``'  'Terminating'  'gRPC'  'server'  "''"  ')'] 
__label__0 container.getTimeFormat ( ) .equals ( TimeFormat.DATE ) || container.getTimeFormat ( ) .equals ( TimeFormat.DATETIME ) 
__label__0 uiAclHandler.permit ( reqContext , op , topoConf ) 
__label__0 getMapNearCacheManager ( nearCacheMember ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class RingbufferBasicLocalTest extends RingbufferAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 1 ) .newInstances ( config ) ; } } 
__label__1 ['tableInfo.getType'  '('  ')'] 
__label__1 ['new'  'HashSet'  '<'  'RecordReplicationInfo'  '>'  '('  'recordStore.size'  '('  ')'  ')'] 
__label__1 ['GL.glPolygonOffsetEXT'  '('  'factor'  ' '  'units'  ')'] 
__label__0 checkpointPath.toString ( ) 
__label__0 localAnchorB.set ( joint.getLocalAnchorB ( ) .x , joint.getLocalAnchorB ( ) .y ) 
__label__0 handoffExecutor ! = null 
__label__1 ['preloadQueue.size'  '=='  '0'] 
__label__0 util.getDataTestDirOnTestFS ( table ) 
__label__1 ['location.belongTo'  '('  'BlockStoreLocation.anyDirInTier'  '('  'tierAlias'  ')'  ')'] 
__label__0 logger.warn ( `` InfluxDB is not yet connected '' ) 
__label__1 ['war.addAsWebInfResource'  '('  'ClusteredWebTestCase.class.getPackage'  '('  ')'  ' '  "''"  'web.xml'  "''"  ')'] 
__label__1 ['camelContext.getComponent'  '('  'component'  ')'] 
__label__1 ['mouseEvent.getModifiers'  '('  ')'] 
__label__0 assertClusterSizeEventually ( 2 , data2 , data3 ) 
__label__0 log.debug ( `` Received ping -- > { } '' , payload ) 
__label__0 assertEquals ( response.getStatusCode ( ) ,200 ) 
__label__0 name.startsWith ( `` java . '' ) || name.startsWith ( `` javax . '' ) || name.startsWith ( `` junit . `` ) || name.startsWith ( `` sun . `` ) || name.startsWith ( `` com.sun . `` ) || name.contains ( `` cglib '' ) 
__label__1 ['logger.debug'  '('  '``'  'Received'  'MyQ'  'JSON'  ':'  '{'  '}'  "''"  ' '  'dataString'  ')'] 
__label__1 ['DEFAULT_MAX_METHODS=999'] 
__label__0 new BasicSessionCredentials ( accessKey , secretKey , sessionToken ) 
__label__1 ['log.debug'  '('  '``'  'Unexpected'  'exception'  'on'  'closing'  'transaction'  '.'  'Cause'  ':'  '``'  '+'  'e'  ')'] 
__label__0 suiteMethod.invoke ( null ) 
__label__0 mock.expectedMinimumMessageCount ( 2 ) 
__label__1 ['LOG.error'  '('  '``'  'Can'  'not'  'resolve'  'the'  'host'  'name'  'for'  '``'  '+'  'regionAddress'  '+'  '``'  'because'  'of'  '``'  '+'  'e'  ')'] 
__label__0 public CombinedMetric registerMetric ( String name , ICombiner combiner , int timeBucketSizeInSecs ) { return _topoContext.registerMetric ( name , new CombinedMetric ( combiner ) , timeBucketSizeInSecs ) ; } 
__label__1 ['request.getTaskDefinitionKey'  '('  ')'] 
__label__1 ['Ordered.LOWEST_PRECEDENCE'  '-'  '1'] 
__label__1 ['Math.min'  '('  'clientCount 1'  ')'] 
__label__1 ['GL11.glGetFloat'  '('  'pname'  ' '  'params'  ')'] 
__label__1 ['value='  '{'  'StringFilterAggregator.class'  '}'] 
__label__1 ['req.startAsync'  '('  ')'] 
__label__0 / * * * @ see org.openmrs.api.db.ConceptDAO # getCountOfConceptReferenceTerms ( java.lang.String , boolean ) * / @ Override public Long getCountOfConceptReferenceTerms ( String query , ConceptSource conceptSource , boolean includeRetired ) throws DAOException { Criteria criteria=createConceptReferenceTermCriteria ( query , conceptSource , includeRetired ) ; criteria.setProjection ( Projections.rowCount ( ) ) ; return ( Integer ) criteria.uniqueResult ( ) ; } 
__label__1 ['new'  'HazelcastProperty'  '('  '``'  'hazelcast.invalidation.min.reconciliation.interval.seconds'  "''"  ' 1'  ' '  'SECONDS'  ')'] 
__label__0 DataStreamSink < OUT > 
__label__0 private CsvFilter filter ; 
__label__1 ['realPointerIndex'  '>'  'AndroidInput.NUM_TOUCHES'] 
__label__0 synchronized ( CONFIG ) { ++threadCount ; if ( session == null ) { try { options=BigtableOptionsFactory.fromConfiguration ( CONFIG ) ; session=new BigtableSession ( options ) ; client=session.getDataClient ( ) ; } catch ( IOException e ) { throw new DBException ( `` Error loading options from config : `` , e ) ; } } else { client=session.getDataClient ( ) ; } if ( clientSideBuffering ) { heapSizeManager=new HeapSizeManager ( Long.parseLong ( getProperties ( ) .getProperty ( ASYNC_MUTATOR_MAX_MEMORY , Long.toString ( AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT ) ) ) , Integer.parseInt ( getProperties ( ) .getProperty ( ASYNC_MAX_INFLIGHT_RPCS , Integer.toString ( AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT ) ) ) ) ; asyncExecutor=new AsyncExecutor ( client , heapSizeManager ) ; } } 
__label__0 collisionPoints.get ( 0 ) 
__label__0 dateOfBirth == null || dateOfBirth.getTime ( ) == null || dateOfBirth.getTime ( ) .getValue ( ) == null 
__label__0 edge.setDirection ( edgeDefault ) 
__label__1 ['mTestStream.getBytesFlushed'  '('  ')'] 
__label__0 from ( `` direct : start '' ) .multicast ( new MyAggregationStrategy ( ) ) .parallelProcessing ( ) .timeout ( 1000 ) 
__label__1 ['options.getLambdaRole'  '('  ')'] 
__label__0 endFunction ( `` write_column_statistics : `` , ret ! = false , null ) 
__label__1 ['badLine.getMessage'  '('  ')'] 
__label__1 ['webSocket.resource'  '('  ')'  '.getAtmosphereResourceEvent'  '('  ')'  '.isSuspended'  '('  ')'] 
__label__1 ['this.setSortParamsByRequiredFlag'  '('  'Boolean.valueOf'  '('  'additionalProperties.get'  '('  'CodegenConstants.REMOVE_OPERATION_ID_PREFIX'  ')'  '.toString'  '('  ')'  ')'  ')'] 
__label__0 text.contentEquals ( ( ( TextButton ) button ) .getText ( ) ) 
__label__1 ['mock.setMinimumResultWaitTime'  '('  '1900'  ')'] 
__label__1 ['model.getNodeTextColumns'  '('  ')'  '=='  'null'] 
__label__0 7 * Bytes.SIZEOF_LONG 
__label__0 request.getDueBefore ( ) 
__label__0 new PrestoException ( INVALID_CAST_ARGUMENT , '' Value can not be cast to timestamp with time zone : `` + value.toStringUtf8 ( ) , e ) 
__label__1 ['In.valueOf'  '('  'apiKeyAuthConfig.in'  '('  ')'  '.toValue'  '('  ')'  ')'] 
__label__1 ['GL.glDrawArraysEXT'  '('  'mode'  ' '  'first'  ' '  'count'  ')'] 
__label__1 ['registered.add'  '('  'objectName'  ')'] 
__label__1 ['logger.trace'  '('  '``'  'Trying'  'to'  'map'  '{'  '}'  'to'  '{'  '}'  "''"  ' '  't'  ' '  'path'  ')'] 
__label__1 ['Integer.valueOf'  '('  'p.getProperty'  '('  '``'  'numberid.id'  "''"  ')'  ')'] 
__label__0 Context.getEncounterService ( ) .saveEncounter ( encounter ) 
__label__0 new PutBackupOperation ( name , dataKey , dataValue , replicationInfo , true , false ) 
__label__0 BroadcasterFactory.getDefault ( ) .lookup ( mapping , true ) 
__label__1 ['sourceNodeData'  '!'  '='  'null'] 
__label__0 assertThat ( getField ( graphite , '' port '' ) ) .isEqualTo ( 2003 ) 
__label__1 ['analysis.getType'  '('  'aggregate'  ')'] 
__label__1 ['!'  'clusterVersion.onOrAfter'  '('  'MINIMUM_ES_VERSION'  ')'  '&'  '&'  '!'  'clusterVersion.onOrBefore'  '('  'MAXIMUM_ES_VERSION'  ')'] 
__label__0 factory.getProxy ( getClass ( ) .getClassLoader ( ) ) 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__1 ['maxLifetime'  '<'  '120000'] 
__label__1 ['``'  'Invalid'  'modules'  'directory'  ':'  '``'  '+'  'modulesDir'] 
__label__0 LOG.trace ( `` Finding components in url : { } '' , url ) 
__label__0 new MockQueryExecution ( 2 ) 
__label__0 LOG.debug ( `` Requesting paths for query services failed . `` , throwable ) 
__label__0 ! regex.equals ( lastRegex ) || p == null 
__label__0 ChannelBuffers.wrappedBuffer ( bytes,0 , length ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__0 logger.info ( `` defineClass pluginClass : { } cl : { } '' , className , classLoader ) 
__label__0 NbPreferences.forModule ( DataTableTopComponent.class ) .getBoolean ( DATA_LABORATORY_ONLY_VISIBLE , true ) 
__label__0 edgeClass.isEnabled ( ) & & vizConfig.isShowArrows ( ) & & dataBridge.isDirected ( ) 
__label__0 props.getProperty ( propName ) 
__label__0 new S_Command ( `` 00FE30 '' ,1,20.0 ) 
__label__0 assertThat ( connector.getSoLingerTime ( ) ) .isEqualTo ( 30000 ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'AtomicLongBasicLocalTest'  'extends'  'AtomicLongBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '1'  ')'  '.newInstances'  '('  ')'  ';'  '}'  '}'] 
__label__0 Collections.sort ( scheduledJobs , njec ) 
__label__1 ['('  'Source'  ')'  'src'] 
__label__1 ['waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs'  '('  '10000 200'  ')'] 
__label__0 logger.error ( `` Invalid Atmosphere Version { } '' , javascriptVersion ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['public'  'final'  'TFAgentStatMappter'  'tFAgentStatMappter=new'  'TFAgentStatMappter'  '('  ')'  ';'] 
__label__0 serverEnvironment ! = null 
__label__1 ['BlockMasterClient.class'] 
__label__1 ['System.nanoTime'  '('  ')'] 
__label__0 singletonComponentInstance == null 
__label__1 ['nlDataOutNodes'  '!'  '='  'null'  '&'  'nlDataOutNodes.getLength'  '('  ')'  '>'  '0'] 
__label__1 ['this.repositories.add'  '('  'repository'  ')'] 
__label__1 ['getLsResultStr'  '('  '``'  '/testRoot/testDir'  "''"  ' '  'files'  '['  '1'  ']'  '.getCreationTimeMs'  '('  ')'  ' 0'  ' '  'LsCommand.STATE_FOLDER'  ' '  'testUser'  ' '  'testUser'  ' '  'files'  '['  '1'  ']'  '.getPermission'  '('  ')'  ' '  'files'  '['  '1'  ']'  '.isFolder'  '('  ')'  ')'] 
__label__1 ['showTooltip'  '=='  'null'] 
__label__1 ['createMessageConsumer'  '('  'session'  ' '  'destinationName'  ' '  'messageSelector'  ' '  'topic'  ' '  'durableSubscriptionId'  ' '  'true'  ')'] 
__label__1 ['new'  'NodeHistogram'  '('  'application'  ' '  'range'  ')'] 
__label__0 node1.isEquivalentToTyped ( node2 ) 
__label__1 ['!'  'locations.isDefined'  '('  ')'] 
__label__1 ['List'  '<'  'String'  '>'] 
__label__0 connection.psubscribe ( jedisPubSub , patterns ) 
__label__1 ['logger.error'  '('  '``'  'Endpoint'  '{'  '}'  'not'  'found'  'on'  'node'  '{'  '}'  '.'  'Can'  'not'  'set'  'command'  'classes'  '.'  '``'  ' '  'endpoint'  ' '  'this.getNode'  '('  ')'  '.getNodeId'  '('  ')'  ')'] 
__label__0 registry.bind ( `` sessionStateListener '' , new SessionStateListener ( ) { @ Override public void onStateChange ( SessionState arg0 , SessionState arg1 , Session arg2 ) { } } ) 
__label__1 ['logger.info'  '('  '``'  'The'  'GENA'  'Subscription'  'for'  'serviceID'  '{'  '}'  'is'  'established'  'for'  'device'  '{'  '}'  "''"  ' '  'sub.getService'  '('  ')'  '.getServiceId'  '('  ')'  ' '  'sub.getService'  '('  ')'  '.getDevice'  '('  ')'  ')'] 
__label__0 nodeData.getAttributes ( ) ! = null 
__label__1 ['DelimitedRecordHiveMapper.class'] 
__label__0 manager ! = null & & manager.server ! = null 
__label__0 new ModelNode ( ) .set ( 60000L ) 
__label__1 ['headerRow'  '!'  '='  'null'] 
__label__1 ['mock.message'  '('  '0'  ')'  '.arrives'  '('  ')'  '.between'  '('  '7 9'  ')'] 
__label__1 ['entries.remove'  '('  'key'  ')'] 
__label__1 ['processor.getOrCreateManifest'  '('  'archive'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/mentions.json '' , null , true ) ) 
__label__0 TEST_UTIL.waitUntilAllRegionsAssigned ( TEST_TABLE.getTableName ( ) ) 
__label__0 NullPointerException.class 
__label__0 Float.parseFloat ( value.toString ( ) ) 
__label__1 ['preserve.toString'  '('  ')'] 
__label__1 ['invocation.addAttachmentsIfAbsent'  '('  'context'  ')'] 
__label__1 ['HornetQAutoConfiguration.class'] 
__label__1 ['failure.getCause'  '('  ')'] 
__label__1 ['Thread.sleep'  '('  '200'  ')'] 
__label__0 new ScheduledJob ( job , jobName , delay , period ) 
__label__1 ['DEFAULT_RM_ACL_ENABLE=false'] 
__label__1 ['Gdx.files.internal'  '('  'fileName'  ')'  '.nameWithoutExtension'  '('  ')'] 
__label__1 ['sourceEdgeTextData.getText'  '('  ')'  '.isEmpty'  '('  ')'] 
__label__0 CliRealtimeExample.class 
__label__0 log.debug ( `` Metric= [ % s ] has no StatsD type mapping '' , statsDMetric ) 
__label__0 edge.setDirection ( EdgeDirection.DIRECTED ) 
__label__0 XMLInputFactory.newInstance ( ) 
__label__0 JavaConversions.asJavaIterable ( kafkaLog.logSegments ( committedOffset , Long.MAX_VALUE ) ) 
__label__1 ['bundleContext.getBundle'  '('  ')'  '.getEntry'  '('  'uri'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'SSH'  'port'  '.'  '*'  '/'  'private'  'String'  'port='  "''"  '2000'  "''"  ';'] 
__label__0 resultEndpoint.expectedMinimumMessageCount ( 2 ) 
__label__1 ['requestModels.entrySet'  '('  ')'] 
__label__1 ['stopTimeNs'  '-'  'responseStartTimeNs'] 
__label__0 super.remove ( inputState ) 
__label__0 LOG.warn ( `` Promotion of block `` + blockId + `` failed . '' ) 
__label__1 ['if'  '('  'mCheckUnusedThrows'  ')'  '{'  'processPackage'  '('  'aAST'  ')'  ';'  '}'] 
__label__1 ['logger.error'  '('  '``'  'NODE'  '{'  '}'  ':'  'DeleteReturnRoute'  'command'  'failed'  '.'  "''"  ')'] 
__label__0 for ( AnnotationInstance annotation : excludeClassAnnotations ) { final AnnotationTarget target=annotation.target ( ) ; if ( target instanceof MethodInfo ) { final MethodInfo methodInfo=MethodInfo.class.cast ( target ) ; final MethodIdentifier methodIdentifier=methodIdentifierFromMethodInfo ( methodInfo ) ; componentConfiguration.excludeClassInterceptors ( methodIdentifier ) ; } else { throw new DeploymentUnitProcessingException ( `` ExcludeClassInterceptors not applied to method : `` + target ) ; } } 
__label__1 ['WebSocketEventListener.class.cast'  '('  'l'  ')'  '.onMessage'  '('  'event'  ')'] 
__label__1 ['promise.tryFailure'  '('  'new'  'ClosedChannelException'  '('  ')'  ')'] 
__label__1 ['BeforeAfterTester'  't=new'  'BeforeAfterTester'  '('  'new'  'DisconnectionBehavior'  '('  'h1'  ' '  'h2'  ')'  ' '  'new'  'MultiCallBuilder'  '('  'h1'  ')'  ')'  ';'] 
__label__0 ensureInChild ( parent , FooImpl.class , Foo.class ) 
__label__0 Arrays.asList ( TYPE , SUBSCRIBE_URL , MESSAGE , TIMESTAMP , SIGNATURE , SIGNATURE_VERSION , MESSAGE_ID , SUBJECT , TOPIC , TOKEN ) 
__label__1 ['GL20.glUniform3'  '('  'location'  ' '  'v'  ')'] 
__label__0 ImmutableList.of ( base ) 
__label__0 deployOneTaskTestProcess ( ) 
__label__0 Sets. < Long > newHashSet ( ) 
__label__1 ['modulePath.split'  '('  'File.pathSeparator'  ')'  '['  '1'  ']'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/friends_timeline.json '' , true ) ) 
__label__1 ['conn.getResponseCode'  '('  ')'  '=='  'HttpURLConnection.HTTP_OK'] 
__label__0 `` access-control/default is missing operations : `` + defaults 
__label__1 ['hz1.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 BufferUtils.newUnsafeByteBuffer ( fileSize ) 
__label__1 ['c.write'  '('  '``'  '['  '``'  '+'  'ctx.channel'  '('  ')'  '.remoteAddress'  '('  ')'  '+'  '``'  ']'  '``'  '+'  'msg+'  "'\\n"  "'"  ')'] 
__label__0 log.error ( `` Not updating metadata , existing state [ % s ] in metadata store does n't match to the new start state [ % s ] . `` , oldCommitMetadataFromDb , startMetadata ) 
__label__1 ['new'  'MethodInjectionTarget'  '('  'methodName'  ' '  'methodInfo.declaringClass'  '('  ')'  '.name'  '('  ')'  '.toString'  '('  ')'  ' '  'methodInfo.returnType'  '('  ')'  '.name'  '('  ')'  '.toString'  '('  ')'  ')'] 
__label__0 sizeNeeded > items.length 
__label__0 oldestInflightEntry == null 
__label__0 sort.sort ( inputRects.items , new Comparator < Rect > ( ) { public int compare ( Rect o1 , Rect o2 ) { return o2.width - o1.width ; } } ) 
__label__1 ['deployOneTaskProcess'  '('  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweeted_to_me.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__0 statistics.addRemoveTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['toBeRemovedKeys.clear'  '('  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'favorites/'  "''"  '+'  'id+'  '``'  '.json'  "''"  ' '  'new'  'PostParameter'  '['  '0'  ']'  ' '  'true'  ')'  ')'] 
__label__1 ['loader.loadClass'  '('  'name'  ')'] 
__label__1 ['getData'  '('  ')'  '^'  '0x8'] 
__label__1 ['Long.valueOf'  '('  'args'  '['  '2'  ']'  ')'] 
__label__0 body.endsWith ( `` 6 '' ) || body.endsWith ( `` 10 '' ) 
__label__0 new ModelNode ( ) .set ( 10L ) 
__label__0 privObj.getObjectName ( ) .equals ( `` masking_test_view '' ) || privObj.getObjectName ( ) .startsWith ( `` masking_test_view_n '' ) 
__label__1 ['test'  '('  '``'  'var'  'foo'  '='  'function'  '('  ')'  '{'  'var'  'module'  '='  '{'  '}'  ';'  'module.exports'  '='  '{'  '}'  ';'  '}'  ';'  "''"  '+'  '``'  'module.exports'  '='  'foo'  ';'  "''"  ' '  "''"  'goog.provide'  '('  "'module"  '$'  'test'  "'"  ')'  ';'  "''"  '+'  '``'  'var'  'foo'  '$'  '$'  'module'  '$'  'test=function'  '('  ')'  '{'  'var'  'module='  '{'  '}'  ';'  'module.exports='  '{'  '}'  '}'  ';'  "''"  '+'  '``'  'var'  'module'  '$'  'test=foo'  '$'  '$'  'module'  '$'  'test'  "''"  ')'] 
__label__1 ['promise.isDone'  '('  ')'] 
__label__1 ['taskService.createTaskQuery'  '('  ')'  '.or'  '('  ')'  '.taskInvolvedUser'  '('  '``'  'involvedUser'  "''"  ')'  '.taskInvolvedGroups'  '('  'groups'  ')'] 
__label__1 ['header.writeBytes'  '('  'mask'  ')'] 
__label__1 ['lastException'  '!'  '='  'null'] 
__label__1 ['new'  'HttpClientCodec'  '('  '4096 8192 8192'  ' '  'true'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__1 ['webSocketConnection.getRemote'  '('  ')'  '.sendString'  '('  's'  ')'] 
__label__1 ['app.getGraphics'  '('  ')'  '.newFont'  '('  'app.getFiles'  '('  ')'  '.getInternalFileHandle'  '('  '``'  'data/arial.ttf'  "''"  ')'  ' 12'  ' '  'FontStyle.Plain'  ' '  'true'  ')'] 
__label__0 incomingDir.mkdirs ( ) 
__label__1 ['super.beginPass'  '('  'n'  ')'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'AtmosphereResource'  '{'  '}'  'is'  'resuming'  "''"  ' '  'uuid'  '('  ')'  ')'] 
__label__0 testClosureFunction ( `` goog.isArray '' , ALL_TYPE , ARRAY_TYPE , ALL_TYPE ) 
__label__1 ['assertEquals'  '('  '8'  ' '  'set.size'  '('  ')'  ')'] 
__label__1 ['map.put'  '('  'USERNAME_KEY'  ' '  'password'  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['nlDataOutNodes'  '!'  '='  'null'  '&'  'nlDataOutNodes.getLength'  '('  ')'  '>'  '0'] 
__label__1 ['latch.await'  '('  '10'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__1 ['log.info'  '('  '``'  'Performing'  'lookup'  ':'  '%'  's'  '--'  '>'  '%'  's'  "''"  ' '  'nodeIds'  ' '  'retVal'  ')'] 
__label__1 ['AnimationAdapter'  '<'  'T'  '>'] 
__label__1 ['Integer.valueOf'  '('  'st.nextToken'  '('  ')'  ')'] 
__label__0 new EnumValidator < TransactionMode > ( TransactionMode.class , true , true ) 
__label__0 Math.max ( 1000L , connectionTimeout ) 
__label__1 ['DefaultFileSystemMaster.class'] 
__label__1 ['twitter4j.List.constructListOfLists'  '('  'get'  '('  'getApiBaseURL'  '('  ')'  '+'  'V1'  '+'  'user+'  '``'  '/lists/subscriptions.json'  '?'  'cursor='  "''"  '+'  'cursor'  ' '  'true'  ')'  ')'] 
__label__1 ['war.addAsWebInfResource'  '('  'ClusteredWebTestCase.class.getPackage'  '('  ')'  ' '  "''"  'web.xml'  "''"  ')'] 
__label__0 n > = 0 & & n < count ( coll ) 
__label__1 ['grammar.getTokenNames'  '('  ')'] 
__label__0 privObj.getObjectName ( ) .equals ( `` masking_test_subq '' ) || privObj.getObjectName ( ) .startsWith ( `` masking_test_subq_n '' ) 
__label__1 ['Assert.assertEquals'  '('  'workerAddress'  ' '  'new'  'InetSocketAddress'  '('  'defaultHostname 10001'  ')'  ')'] 
__label__1 ['``'  '``'  '+'  'SYSTEM_PROPERTIES_MODE_FALLBACK'] 
__label__0 Assert.assertTrue ( Boolean.valueOf ( response.getFirstHeader ( `` serialized '' ) .getValue ( ) ) ) 
__label__1 ['GL20.glUniformMatrix2'  '('  'location'  ' '  'transpose'  ' '  'toFloatBuffer'  '('  'value'  ' '  'offset'  ' '  'count'  '<'  '<'  '2'  ')'  ')'] 
__label__1 ['Thread.sleep'  '('  '100'  ')'] 
__label__1 ['Context.getPersonService'  '('  ')'  '.getRelationships'  '('  'Context.getPersonService'  '('  ')'  '.getPerson'  '('  'personId'  ')'  ')'] 
__label__1 ['FILES_BYTES'  '*'  '1000L'] 
__label__1 ['c.write'  '('  '``'  '['  'you'  ']'  '``'  '+'  'msg'  '+'  "'\\n"  "'"  ')'] 
__label__0 LOGGER.error ( `` { } - Failed to execute connection test query . ( { } ) '' , poolName , e.getMessage ( ) ) 
__label__0 logger.debug ( `` Trying to map { } to { } '' , t , path ) 
__label__0 mBuffer.remaining ( ) > = toRead 
__label__1 ['public'  'Object'  'getBean'  '('  ')'  'throws'  'Exception'  '{'  'Object'  'value=lookupBean'  '('  ')'  ';'  'if'  '('  'value'  '=='  'null'  ')'  '{'  'throw'  'new'  'NoBeanAvailableException'  '('  'name'  ')'  ';'  '}'  'if'  '('  'value'  '!'  '='  'bean'  ')'  '{'  'bean=value'  ';'  'processor=null'  ';'  'if'  '('  '!'  'ObjectHelper.equal'  '('  'ObjectHelper.type'  '('  'bean'  ')'  ' '  'ObjectHelper.type'  '('  'value'  ')'  ')'  ')'  '{'  'beanInfo=null'  ';'  '}'  '}'  'return'  'value'  ';'  '}'] 
__label__0 holder.addCallback ( callback ) 
__label__1 ['websocketComponent.setMaxThreads'  '('  '11'  ')'] 
__label__1 ['BufferUtils.newByteBuffer'  '('  'fileSize'  ')'] 
__label__1 ['BlockStoreContext.releaseBlockWorkerThriftClient'  '('  'mRpcAddress'  ' '  'client'  ')'] 
__label__0 ctx.nextInboundMessageBuffer ( ) 
__label__0 request.getRemoteAddr ( ) 
__label__1 ['createPermissionsXmlAsset'  '('  'new'  'SocketPermission'  '('  '``'  '*'  ':10389'  "''"  ' '  "''"  'connect'  ' '  'resolve'  "''"  ')'  ')'] 
__label__0 new GatherGetterAndSetterProperties ( compiler ) 
__label__1 ['ssl.has'  '('  'CommonAttributes.CA_REVOCATION_URL'  ')'] 
__label__1 ['expectedValue.equals'  '('  'oldValue'  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__0 new StringBuilder ( 560 ) 
__label__0 qp.isExclusiveMinimum ( ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 prevNerEndIndex ! = ( start - 1 ) || nextNerStartIndex ! = end 
__label__0 field.getFieldName ( ) .equalsIgnoreCase ( s ) 
__label__0 e instanceof MaybePrimitiveExpr & & e.hasJavaClass ( ) & & ( ( MaybePrimitiveExpr ) e ) .canEmitPrimitive ( ) 
__label__0 REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet ( this , nanos , nanos + duration ) 
__label__1 ['node.executorManager.executeLocaly'  '('  'new'  'Runnable'  '('  ')'  '{'  'public'  'void'  'run'  '('  ')'  '{'  'MembershipEvent'  'membershipEvent=new'  'MembershipEvent'  '('  'ClusterImpl.this'  ' '  'dummy'  ' '  'MembershipEvent.MEMBER_ADDED'  ')'  ';'  'for'  '('  'MembershipListener'  'listener'  ':'  'listenerSet'  ')'  '{'  'listener.memberAdded'  '('  'membershipEvent'  ')'  ';'  '}'  '}'  '}'  ')'] 
__label__0 stats.facetFilter ( standardFilters ( range , filter ) ) 
__label__1 ['page.getSizeInBytes'  '('  ')'] 
__label__0 LOGGER.debug ( `` no property for `` + type + `` , `` + format ) 
__label__0 this.traceHandlers.remove ( traceHandler ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['synchronized'  '('  'threadCount'  ')'  '{'  '--'  'threadCount'  ';'  'if'  '('  'threadCount'  '<'  '='  '0'  ')'  '{'  'try'  '{'  'session.close'  '('  ')'  ';'  '}'  'catch'  '('  'IOException'  'e'  ')'  '{'  'throw'  'new'  'DBException'  '('  'e'  ')'  ';'  '}'  '}'  '}'] 
__label__0 builder.add ( new ImplementSampleAsFilter ( ) , new SimplifyExpressions ( metadata ) , new UnaliasSymbolReferences ( ) , new PruneRedundantProjections ( ) , new SetFlatteningOptimizer ( ) , new LimitPushDown ( ) , new PredicatePushDown ( metadata , splitManager ) , new PredicatePushDown ( metadata , splitManager ) , new MergeProjections ( ) , new SimplifyExpressions ( metadata ) , new UnaliasSymbolReferences ( ) , new PruneUnreferencedOutputs ( ) , new PruneRedundantProjections ( ) ) 
__label__1 ['database.FindProduct'  '('  'node.getManufacturer'  '('  ')'  ' '  'node.getDeviceType'  '('  ')'  ' '  'node.getDeviceId'  '('  ')'  ')'] 
__label__1 ['content.matches'  '('  'expected'  ')'] 
__label__0 defaults.jackson2JsonDecoder ( new Jackson2JsonDecoder ( objectMapper , EMPTY_MIME_TYPES ) ) 
__label__0 new HashSet < RecordReplicationInfo > ( recordStore.size ( ) ) 
__label__1 ['logger.info'  '('  '``'  'The'  'GENA'  'Subscription'  'for'  'serviceID'  '{'  '}'  'is'  'established'  'for'  'device'  '{'  '}'  "''"  ' '  'sub.getService'  '('  ')'  '.getServiceId'  '('  ')'  ' '  'sub.getService'  '('  ')'  '.getDevice'  '('  ')'  ')'] 
__label__1 ['JSError.make'  '('  'SourceMapInput.SOURCEMAP_PARSE_FAILED'  ' '  'sourceMapPath'  ')'] 
__label__1 ['log.info'  '('  '``'  'Worker'  'nodes'  '%'  's'  'do'  'not'  'have'  'capacity'  'to'  'run'  'any'  'more'  'tasks'  '!'  '``'  ' '  'zkWorkers.values'  '('  ')'  ')'] 
__label__0 theirs=theirIterator.next ( ) 
__label__1 ['IDAUTHORITY_RETRY_COUNT_DEFAULT=3'] 
__label__0 hgraph.getTotalOutDegree ( n ) 
__label__0 @ RunWith ( Parameterized.class ) public class ReplicatedMapWriteOrderTest extends ReplicatedMapAbstractTest { int nodeCount ; int operations ; int keyCount ; public ReplicatedMapWriteOrderTest ( int nodeCount , int operations , int keyCount ) { this.nodeCount=nodeCount ; this.operations=operations ; this.keyCount=keyCount ; } @ Parameterized.Parameters public static Collection < Object [ ] > data ( ) { return Arrays.asList ( new Object [ ] [ ] { { 2,50,1 } , { 2,50,10 } , { 2,50,50 } } ) ; } @ After public void setUp ( ) throws Exception { HazelcastInstanceFactory.terminateAll ( ) ; } @ Test public void testDataIntegrity ( ) throws InterruptedException { setLoggingLog4j ( ) ; System.out.println ( `` nodeCount = `` + nodeCount ) ; System.out.println ( `` operations = `` + operations ) ; System.out.println ( `` keyCount = `` + keyCount ) ; Config config=new Config ( ) ; config.getReplicatedMapConfig ( `` test '' ) .setReplicationDelayMillis ( 0 ) ; TestHazelcastInstanceFactory factory=new TestHazelcastInstanceFactory ( nodeCount ) ; final HazelcastInstance [ ] instances=factory.newInstances ( config ) ; String replicatedMapName= '' test '' ; final List < ReplicatedMap > maps=createMapOnEachInstance ( instances , replicatedMapName ) ; ArrayList < Integer > keys=generateRandomIntegerList ( keyCount ) ; Thread [ ] threads=createThreads ( nodeCount , maps , keys , operations ) ; for ( Thread thread : threads ) { thread.start ( ) ; } for ( Thread thread : threads ) { thread.join ( ) ; } for ( int i=0 ; i < keyCount ; i++ ) { final String key= '' foo- '' + keys.get ( i ) ; assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { System.out.println ( `` -- -- -- -- -- -- -- -- -- -- - '' ) ; System.out.println ( `` key = `` + key ) ; printValues ( ) ; assertValuesAreEqual ( ) ; } private void printValues ( ) throws Exception { for ( int j=0 ; j < maps.size ( ) ; j++ ) { ReplicatedMap map=maps.get ( j ) ; System.out.println ( `` value [ `` + j + `` ] = `` + map.get ( key ) + `` , store version : `` + getStore ( map , key ) .getVersion ( ) ) ; } } private void assertValuesAreEqual ( ) { for ( int i=0 ; i < maps.size ( ) - 1 ; i++ ) { ReplicatedMap map1=maps.get ( i ) ; ReplicatedMap map2=maps.get ( i + 1 ) ; Object v1=map1.get ( key ) ; Object v2=map2.get ( key ) ; assertNotNull ( v1 ) ; assertNotNull ( v2 ) ; assertEquals ( v1 , v2 ) ; } } } ,120 ) ; } } private Thread [ ] createThreads ( int count , List < ReplicatedMap > maps , ArrayList < Integer > keys , int operations ) { Thread [ ] threads=new Thread [ count ] ; for ( int i=0 ; i < count ; i++ ) { threads [ i ] =createPutOperationThread ( maps.get ( i ) , keys , operations ) ; } return threads ; } private Thread createPutOperationThread ( final ReplicatedMap < String , Object > map , final ArrayList < Integer > keys , final int operations ) { return new Thread ( new Runnable ( ) { @ Override public void run ( ) { Random random=new Random ( ) ; int size=keys.size ( ) ; for ( int i=0 ; i < operations ; i++ ) { int index=i % size ; String key= '' foo- '' + keys.get ( index ) ; map.put ( key , random.nextLong ( ) ) ; boolean containsKey=map.containsKey ( key ) ; assert containsKey ; } } } ) ; } } 
__label__0 testError ( js , VariableReferenceCheck.REDECLARED_VARIABLE ) 
__label__0 EnterpriseMapPublisherCreateWithValueCodec.decodeResponse ( response ) .response 
__label__1 ['public'  'String'  'getPort'  '('  ')'  '{'  'return'  'this.port'  ';'  '}'] 
__label__0 Color.fromRGB ( 0x287697 ) 
__label__1 ['soLingerTime.toSeconds'  '('  ')'] 
__label__1 ['Files.delete'  '('  'file.toPath'  '('  ')'  ')'] 
__label__1 ['ErrorWrapperEmbeddedServletContainerFactory.class'] 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'helloForNone'  "''"  ')'  ')'] 
__label__0 getConnectTimeout ( ) 
__label__0 tfs.ls ( Constants.PATH_SEPARATOR , true ) 
__label__1 ['TrustManagerFactory.getDefaultAlgorithm'  '('  ')'] 
__label__0 file.getFileNameOnly ( ) 
__label__0 logger.trace ( `` NODE { } : App version requested but version is unknown '' , this.getNodeId ( ) ) 
__label__1 ['new'  'StringBuilder'  '('  '639'  ')'] 
__label__1 ['pti.getTotalFields'  '('  ')'] 
__label__1 ['json.length'  '('  ')'  '-'  '2'] 
__label__1 ['SCHEMA'  '('  '35'  ' '  'true'  ')'] 
__label__1 ['assertSame'  '('  'conf'  ' '  '('  'Configuration'  ')'  'serializeDeserialize'  '('  'conf'  ')'  ')'] 
__label__0 final AuditEventFormatter formatter=new AuditEventDefaultFormatter ( ) ; 
__label__0 className.lastIndexOf ( `` org.openmrs . '' ) 
__label__0 messageHandler.responder ( ) 
__label__0 LOG.warn ( `` Could not parse syslog message . Not further handling . `` , e ) 
__label__1 ['getCurrCapacity'  '('  ')'] 
__label__1 ['DiagnosticType.disabled'  '('  '``'  'JSC_TOO_MANY_TEMPLATE_PARAMS'  "''"  ' '  "''"  '{'  '0'  '}'  "''"  ')'] 
__label__0 selectedFile ! = null & & fileFilter ! = null 
__label__0 KeyManagerFactory.getDefaultAlgorithm ( ) 
__label__1 ['Foundation.NSLog'  '('  '``'  '['  'error'  ']'  '``'  '+'  'tag'  '+'  '``'  ':'  '``'  '+'  'message'  ')'] 
__label__0 eventListeners ! = null 
__label__0 Double.isNaN ( rate ) || Double.isInfinite ( rate ) 
__label__0 response.getStatus ( ) .getCode ( ) / 100 
__label__1 ['objectMapper.readerFor'  '('  'DataSegment.class'  ')'] 
__label__0 s ! = null & & Boolean.parseBoolean ( s ) 
__label__0 LinkedHashMap < String , Operator < ? extends Serializable > > 
__label__0 new NodeHistogram ( application , range , responseTimes ) 
__label__1 ['CalciteTests.createMockSystemSchema'  '('  'druidSchema'  ' '  'walker'  ')'] 
__label__0 FileSystemMaster.class 
__label__1 ['prevNerEndIndex'  '!'  '='  '('  'start'  '-'  '1'  ')'  '||'  'nextNerStartIndex'  '!'  '='  'end'] 
__label__0 new StringBuilder ( 245 ) 
__label__0 ProtobufUtil.createSnapshotDesc ( snapshot ) 
__label__1 ['this'  '('  'type 0'  ')'  ';'] 
__label__1 ['logger.info'  '('  '``'  'Recording'  'function'  'information'  "''"  ')'] 
__label__0 loadingSegments.get ( segment.getIdentifier ( ) , server.getTier ( ) ) 
__label__1 ['combine'  '('  'getDefaultCamelKarafOptions'  '('  ')'  ' '  'provision'  '('  'TinyBundles.bundle'  '('  ')'  '.add'  '('  '``'  'META-INF/persistence.xml'  "''"  ' '  'BlobStoreBlueprintRouteTest.class.getResource'  '('  '``'  '/META-INF/persistence.xml'  "''"  ')'  ')'  '.add'  '('  '``'  'OSGI-INF/blueprint/test.xml'  "''"  ' '  'BlobStoreBlueprintRouteTest.class.getResource'  '('  '``'  'blueprintCamelContext.xml'  "''"  ')'  ')'  '.set'  '('  'Constants.BUNDLE_SYMBOLICNAME'  ' '  "''"  'CamelBlueprintJcloudsTestBundle'  "''"  ')'  '.set'  '('  'Constants.DYNAMICIMPORT_PACKAGE'  ' '  "''"  '*'  "''"  ')'  '.set'  '('  '``'  'Meta-Persistence'  "''"  ' '  "''"  'META-INF/persistence.xml'  "''"  ')'  '.build'  '('  ')'  ')'  ' '  'bundle'  '('  'TinyBundles.bundle'  '('  ')'  '.add'  '('  '``'  'OSGI-INF/blueprint/test.xml'  "''"  ' '  'BlobStoreBlueprintRouteTest.class.getResource'  '('  '``'  'blueprintBlobStoreService.xml'  "''"  ')'  ')'  '.set'  '('  'Constants.BUNDLE_SYMBOLICNAME'  ' '  "''"  'org.apache.camel.jclouds.blobstore.service'  "''"  ')'  '.set'  '('  'Constants.BUNDLE_VERSION'  ' '  "''"  '1.0.0'  "''"  ')'  '.set'  '('  'Constants.DYNAMICIMPORT_PACKAGE'  ' '  "''"  '*'  "''"  ')'  '.build'  '('  ')'  ')'  '.start'  '('  ')'  ' '  'loadCamelFeatures'  '('  '``'  'camel-blueprint'  "''"  ' '  "''"  'camel-jclouds'  "''"  ')'  ' '  'workingDirectory'  '('  '``'  'target/paxrunner/'  "''"  ')'  ' '  'felix'  '('  ')'  ')'] 
__label__1 ['mBuffer.remaining'  '('  ')'  '>'  'toRead'] 
__label__1 ['Calendar.getInstance'  '('  'JSON.defaultLocale'  ')'] 
__label__1 ['objectMapper.readerFor'  '('  'DataSegment.class'  ')'] 
__label__1 ['this.reader.comparator.compare'  '('  'reader.blockIndex.blockKeys'  '['  'b'  ']'  ' '  'key'  ')'] 
__label__0 ps.saveRelationship ( rel ) 
__label__1 ['mLocalWorkerAddress.getRpcPort'  '('  ')'] 
__label__1 ['GL20.glUniformMatrix3'  '('  'location'  ' '  'transpose'  ' '  'value'  ')'] 
__label__0 simple.getFromReceivedDate ( ) 
__label__1 ['4'  '*'  '('  'float'  ')'  'Math.sqrt'  '('  'radius'  ')'] 
__label__1 ['new'  'GeneralDataCoding'  '('  'false'  ' '  'false'  ' '  'MessageClass.CLASS1'  ' '  'Alphabet.valueOf'  '('  'submitSm.getDataCoding'  '('  ')'  ')'  ')'] 
__label__0 modulePath.split ( File.pathSeparator ) [ 0 ] 
__label__1 ['testTLS'  '('  'Cert.CLIENT_PEM_ROOT_CA'  ' '  'Trust.SERVER_JKS'  ' '  'Cert.SERVER_JKS'  ' '  'Trust.CLIENT_PEM_ROOT_CA'  ')'  '.requiresClientAuth'  '('  ')'  '.clientUsesCrl'  '('  ')'] 
__label__0 callTimeoutMillis=6000 
__label__1 ['clazz.getInterfaces'  '('  ')'  '.length'  '<'  '='  '0'] 
__label__0 executionStats.getStartedSplits ( ) 
__label__1 ['decoder.readOutbound'  '('  ')'] 
__label__0 AtmosphereResponse.newInstance ( ) 
__label__1 ['testSame'  '('  '``'  'var'  'foo'  '='  'function'  '('  'a'  ')'  '{'  '}'  ';'  'foo.call'  '('  'this'  ' '  '1'  ')'  ';'  "''"  ' '  "''"  'var'  'foo'  '='  'function'  '('  ')'  '{'  'var'  'a'  '$'  'jscomp'  '$'  '1'  '='  '1'  ';'  '}'  ';'  'foo.call'  '('  'this'  ')'  ';'  "''"  ')'] 
__label__0 JSError.make ( AbstractCompiler.READ_ERROR , sourceFile.getName ( ) , e.getMessage ( ) ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class ReliableTopicBasicDistributedTest extends ReliableTopicAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 2 ) .newInstances ( config ) ; } } 
__label__1 ['defaultCometSupport'  '('  'useServlet30Async'  ')'] 
__label__0 AbstractStoreHandler < DelayedEntry > 
__label__0 LOG.debug ( `` Creating short circuit input stream for block { } @ { } '' , blockId , address ) 
__label__0 mock.expectedBodiesReceivedInAnyOrder ( `` Hello World '' ) 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__1 ['Namespace.CURRENT.toString'  '('  ')'] 
__label__1 ['request.getContentType'  '('  ')'  '.equals'  '('  '``'  'application/x-www-form-urlencoded'  "''"  ')'] 
__label__1 ['DiagnosticType.disabled'  '('  '``'  'JSC_GOOG_MODULE_IN_NON_MODULE'  "''"  ' '  "''"  'goog.module'  '('  ')'  'call'  'must'  'be'  'the'  'first'  'statement'  'in'  'a'  'module'  '.'  "''"  ')'] 
__label__1 ['is'  '('  '``'  '/home/source'  "''"  ')'] 
__label__1 ['String'  'transformationResult=JsonPath.read'  '('  'source'  ' '  'JSonPathExpression'  ')'  ';'] 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__1 ['Wt.getSlice'  '('  'slice'  ')'  '.mult'  '('  'Wt.getSlice'  '('  'slice'  ')'  '.transpose'  '('  ')'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/user_timeline/ '' + id+ `` .json '' , null , paging.asPostParameterList ( ) , http.isAuthenticationEnabled ( ) ) ) 
__label__1 ['Context.getEncounterService'  '('  ')'  '.createEncounter'  '('  'encounter'  ')'] 
__label__0 testTLS ( Cert.CLIENT_PEM_ROOT_CA , Trust.SERVER_JKS , Cert.SERVER_JKS , Trust.CLIENT_PEM_ROOT_CA ) .requiresClientAuth ( ) .serverUsesCrl ( ) 
__label__1 ['gran.next'  '('  'timeStart'  ')'] 
__label__1 ['client.getBulkReply'  '('  ')'] 
__label__0 ExprEval.ofDouble ( null ) 
__label__0 public class XpathRegressionCyclomaticComplexityTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=CyclomaticComplexityCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionCyclomaticOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( CyclomaticComplexityCheck.class ) ; moduleConfig.addAttribute ( `` max '' , '' 0 '' ) ; final String [ ] expectedViolation= { `` 4:5 : `` + getCheckMessage ( CyclomaticComplexityCheck.class , CyclomaticComplexityCheck.MSG_KEY,2,0 ) } ; final List < String > expectedXpathQueries=Arrays.asList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionCyclomaticOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionCyclomaticOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /MODIFIERS '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionCyclomaticOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /MODIFIERS/LITERAL_PUBLIC '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=CyclomaticComplexityCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionCyclomaticTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( CyclomaticComplexityCheck.class ) ; moduleConfig.addAttribute ( `` max '' , '' 0 '' ) ; final String [ ] expectedViolation= { `` 6:5 : `` + getCheckMessage ( CyclomaticComplexityCheck.class , CyclomaticComplexityCheck.MSG_KEY,5,0 ) } ; final List < String > expectedXpathQueries=Arrays.asList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionCyclomaticTwo ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='foo2 ' ] '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionCyclomaticTwo ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='foo2 ' ] /MODIFIERS '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionCyclomaticTwo ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='foo2 ' ] /MODIFIERS/LITERAL_PUBLIC '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['new'  'StringBuilder'  '('  '561'  ')'] 
__label__0 setDiskPersistent ( Boolean.valueOf ( ( String ) cacheSettings.get ( `` diskPersistent '' ) ) ) 
__label__1 ['GL20.glUniform3'  '('  'location'  ' '  'toIntBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '*'  '3'  ')'  ')'] 
__label__1 ['new'  'CamelExchangeException'  '('  '``'  'JettyClient'  'failed'  'with'  'state'  '``'  '+'  'exchangeState'  ' '  'exchange'  ')'] 
__label__1 ['BlockingIOCometSupport.class'] 
__label__1 ['logger.info'  '('  '``'  '{'  '}'  'exists'  'but'  'can'  'not'  'be'  'executed'  'even'  'when'  'execute'  'permissions'  'set'  ';'  '``'  '+'  '``'  'check'  'volume'  'for'  '\\'  "''"  'noexec\\'  "''"  'flag'  ';'  'use'  '-Dio.netty.native.workdir='  '['  'path'  ']'  '``'  '+'  '``'  'to'  'set'  'native'  'working'  'directory'  'separately'  '.'  '``'  ' '  'tmpFile.getPath'  '('  ')'  ')'] 
__label__0 wsdlLocation ! = null & & wsdlLocation.length ( ) > 0 
__label__0 ImmutableMap. < String , Type > of ( StandardTypes.BOOLEAN , BOOLEAN , StandardTypes.BIGINT , BIGINT , StandardTypes.DOUBLE , DOUBLE , StandardTypes.VARCHAR , VARCHAR ) 
__label__0 frameHandler.getClass ( ) ! = FrameAggregator.class 
__label__0 adapter.makeCursors ( null , index.getDataInterval ( ) , VirtualColumns.EMPTY , Granularities.ALL , false , null ) 
__label__1 ['GL20.glUniformMatrix4'  '('  'location'  ' '  'transpose'  ' '  'toFloatBuffer'  '('  'value'  ' '  'offset'  ' '  'count'  '<'  '<'  '4'  ')'  ')'] 
__label__0 mail.getClass ( ) .getSimpleName ( ) 
__label__0 ImmutableList < String > 
__label__0 sizeNeeded > items.length 
__label__1 ['assertMockEndpointsSatisifed'  '('  ')'] 
__label__1 ['ArrayList'  '<'  'TaggedWord'  '>'] 
__label__1 ['pubSubDomain=true'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['data.limit'  '('  ')'] 
__label__0 out.writeInt ( this.connectionAddress.getPort ( ) ) 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'jms'  "''"  ')'] 
__label__1 ['GatherGettersAndSetterProperties.gather'  '('  'compiler'  ' '  'externsRoot'  ')'] 
__label__0 out.writeData ( function ) 
__label__0 calendar.getTimeZone ( ) .getRawOffset ( ) 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['group.getId'  '('  ')'] 
__label__1 ['this.transactionsRepository.removeTransaction'  '('  'this.xidTransactionID'  ')'] 
__label__0 abandonSegment ( entry.getKey ( ) , entry.getValue ( ) ) 
__label__1 ['mock.expectedMessageCount'  '('  '4'  ')'] 
__label__0 logger.debug ( `` Receive queue TAKE : Length= { } '' , recvQueue.size ( ) ) 
__label__1 ['DependencyFilterUtils.classpathFilter'  '('  'JavaScopes.COMPILE'  ')'] 
__label__0 LOG.debug ( `` Creating short circuit input stream for block { } @ { } '' , blockId , address ) 
__label__0 buffer.readableBytes ( ) < 8 
__label__1 ['return'  'localVertices'  ';'] 
__label__1 ['Assert.assertEquals'  '('  '20'  ' '  'as.getAllGlobalProperties'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__1 ['logger.trace'  '('  '``'  'Receive'  'queue'  'ADD'  ':'  'Length='  '{'  '}'  "''"  ' '  'recvQueue.size'  '('  ')'  ')'] 
__label__0 julianDateFloor ( range , ( int ) date + EPOCH_JULIAN , false ) 
__label__1 ['DruidDataSourceUtils.isRemoveAbandoned'  '('  'datasource'  ')'] 
__label__0 LOG.warn ( `` OpenTracing : Failed to capture tracing data '' , t ) 
__label__0 new IllegalArgumentException ( `` Could not parse ' '' + input + `` ' '' , e ) 
__label__1 ['writeMethod1.addScopedInterceptor'  '('  'NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE'  ' '  'NettyConstants.SCOPE_WRITE'  ' '  'ExecutionPolicy.BOUNDARY'  ')'] 
__label__0 latch.await ( 10000 , TimeUnit.MILLISECONDS ) 
__label__0 request.getContextPath ( ) 
__label__0 new IdentityHashMap < > ( ) 
__label__1 ['new'  'StringBuilder'  '('  '741'  ')'] 
__label__0 public Builder setDefaultThrowableHandler ( ThrowableHandler throwableHandler ) { this.defaultThrowableHandler=throwableHandler ; return this ; } 
__label__1 ['test'  '('  '``'  'var'  'foo'  '='  'function'  '('  'module'  ')'  '{'  'module.exports'  '='  '{'  '}'  ';'  '}'  ';'  "''"  '+'  '``'  'module.exports'  '='  'foo'  ';'  "''"  ' '  "''"  'goog.provide'  '('  "'module"  '$'  'test'  "'"  ')'  ';'  "''"  '+'  '``'  'var'  'foo'  '$'  '$'  'module'  '$'  'test=function'  '('  'module'  ')'  '{'  'module.exports='  '{'  '}'  '}'  ';'  "''"  '+'  '``'  'var'  'module'  '$'  'test=foo'  '$'  '$'  'module'  '$'  'test'  "''"  ')'] 
__label__1 ['endFunction'  '('  '``'  'write_column_statistics'  ':'  '``'  ' '  'ret'  '!'  '='  'false'  ')'] 
__label__0 destination.getValue ( ) 
__label__1 ['queueView.get'  '('  ')'  '.get'  '('  'index.longValue'  '('  ')'  ')'] 
__label__0 EnumValidator.create ( Target.class , true , false ) 
__label__1 ['VARCHAR.createBlockBuilder'  '('  'new'  'BlockBuilderStatus'  '('  ')'  ' 1'  ')'] 
__label__1 ['put'  '('  'v'  ')'] 
__label__0 ImmutableSet.of ( `` testStringRepresentation '' , '' testDataTypeValidationOnProperties '' ) 
__label__0 ( getSource ( ) .x ( ) + getTarget ( ) .x ( ) ) / 3f 
__label__1 ['minIdle'  '<'  '0'] 
__label__1 ['allDefinitions'  '!'  '='  'null'] 
__label__0 registry.bind ( `` kinesisClient '' , amazonKinesisClient ) 
__label__1 ['assertEquals'  '('  'c1.counts'  '+'  'c2.counts'  ' '  'SIZE'  '*'  'COUNTDOWN'  ')'] 
__label__0 cleanString ( nameAttribute.getValue ( ) ) 
__label__1 ['dis.read'  '('  'serializedData 0'  ' '  'length'  ')'] 
__label__0 token.substring ( 0 , p ) .trim ( ) .toLowerCase ( Locale.US ) 
__label__0 Mockito.doThrow ( EXCEPTION ) .when ( mFileSystemMasterClient ) .mount ( alluxioPath , ufsPath , mountOptions ) 
__label__1 ['ConfigUtils.absoluteHealthCheckDir'  '('  'stormConf'  ')'] 
__label__0 stores.containsKey ( name ) 
__label__0 logger.debug ( `` Can not retrieve item { } for widget { } '' , itemName , w.eClass ( ) .getInstanceTypeName ( ) ) 
__label__1 ['zwaveCommandClass.handleApplicationCommandRequest'  '('  'serialMessage'  ' '  'offset'  '+'  '2 1'  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'output'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__1 ['partitionKey.getType'  '('  ')'  '.toString'  '('  ')'] 
__label__1 ['JsonObject.createObjectMapper'  '('  ')'  '.getJsonFactory'  '('  ')'] 
__label__1 ['ChannelBuffers.copiedBuffer'  '('  'sb.toString'  '('  ')'  '.getBytes'  '('  'bodyCharset'  ')'  ')'] 
__label__0 mapper.getFactory ( ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['assertEquals'  '('  '3'  ' '  'map2.keySet'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__0 invocation.addAttachments ( context ) 
__label__0 value.equals ( `` '' ) 
__label__0 config.getIdleConnectionTimeoutInMs ( ) > 0 & & requestTimeout ! = -1 & & requestTimeout < config.getIdleConnectionTimeoutInMs ( ) 
__label__0 new GenerationException ( `` Could n't parse type : `` + typeDefinition , e ) 
__label__0 postAgg.getName ( ) .equalsIgnoreCase ( metricName ) 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__0 ImmutableSet.Builder < ImplementationMethodDescriptor > 
__label__1 ['w.println'  '('  'padding'  ')'] 
__label__0 Math.min ( retryIntervalMillis , timeout.timeLeft ( ) .toMillis ( ) ) 
__label__0 body.transferTo ( position , target ) 
__label__0 Outcome.noMatch ( `` missing database driver `` + driverClassName ) 
__label__1 ['Thread.sleep'  '('  '400'  ')'] 
__label__0 getLsResultStr ( `` /testRoot/testDir '' , files [ 1 ] .getCreationTimeMs ( ) ,1 , LsCommand.STATE_FOLDER , testUser , testUser , files [ 1 ] .getPermission ( ) , files [ 1 ] .isFolder ( ) ) 
__label__0 endsWith ( `` /home/source '' ) 
__label__1 ['in.readShortx'  '('  ')'] 
__label__1 ['QuotaCache.this.tableQuotaCache.contains'  '('  'table'  ')'] 
__label__1 ['implemetationMethodDescriptors.build'  '('  ')'] 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__1 ['lookupService.lookupPrincipalByGroupName'  '('  'user'  ')'] 
__label__0 GL20.glGetActiveAttrib ( program , index,256 , size , typeTmp ) 
__label__1 ['endpoint.getCamelContext'  '('  ')'  '.getClassResolver'  '('  ')'  '.resolveClass'  '('  'endpoint.getConfiguration'  '('  ')'  '.getTargetModel'  '('  ')'  ')'] 
__label__1 ['AsynchronousCloseException'  'e'] 
__label__0 ctx.sendUpstream ( e ) 
__label__1 ['AsyncResult'  '<'  'Boolean'  '>'] 
__label__1 ['i'  '<'  'getATN'  '('  ')'  '.maxTokenType'] 
__label__1 ['log.error'  '('  '``'  'activitiy'  'or'  'FailedJobRetryTimerCycleValue'  'is'  'null'  'in'  'job'  '``'  '+'  'jobId'  '+'  '``'  "'"  '.'  'only'  'decrementing'  'retries'  '.'  "''"  ')'] 
__label__0 expected.getType ( ) .equalsIgnoreCase ( actual.getType ( ) .toString ( ) ) 
__label__0 privObj.getObjectName ( ) .equals ( `` masking_acid_no_masking '' ) || privObj.getObjectName ( ) .startsWith ( `` masking_acid_no_masking_n '' ) 
__label__1 ['new'  'SslContextBuilder'  '('  'false'  ')'] 
__label__1 ['ch'  '=='  "'"  '&'  "'"] 
__label__0 new S_Command ( `` 00FE30 '' ,1,20.0 ) 
__label__1 ['Files.delete'  '('  'file.toPath'  '('  ')'  ')'] 
__label__0 database.FindProduct ( node.getManufacturer ( ) , node.getDeviceType ( ) , node.getDeviceId ( ) , node.getApplicationVersion ( ) ) 
__label__0 JavaAssistUtils.toPinpointParameterType ( parameterTypes ) 
__label__1 ['Files.delete'  '('  'dir.toPath'  '('  ')'  ')'] 
__label__0 ast ! = null & & ast.getNextSibling ( ) ! = null 
__label__1 ['providers.size'  '('  ')'  '>'  '='  '0'] 
__label__0 logger.fine ( `` Collapsed `` + numRenamedPropertyNames + `` properties into `` + numNewPropertyNames+ `` and skipped renaming `` + numSkippedPropertyNames+ `` properties . '' ) 
__label__0 setParams ( ) .xx ( ) 
__label__1 ['/'  '*'  '*'  '*'  '{'  '@'  'inheritDoc'  '}'  '*'  '/'  '@'  'Override'  'public'  'AtmosphereResource'  'removeAtmosphereResource'  '('  'AtmosphereResource'  'r'  ')'  '{'  'if'  '('  'destroyed.get'  '('  ')'  ')'  '{'  'logger.debug'  '('  'DESTROYED'  ' '  'getID'  '('  ')'  ' '  "''"  'removeAtmosphereResource'  '('  'AtmosphereResource'  'r'  ')'  "''"  ')'  ';'  'return'  'r'  ';'  '}'  'if'  '('  '!'  'resources.contains'  '('  'r'  ')'  ')'  '{'  'return'  'null'  ';'  '}'  'boolean'  'removed=resources.remove'  '('  'r'  ')'  ';'  'if'  '('  'removed'  ')'  '{'  'if'  '('  'resources.isEmpty'  '('  ')'  ')'  '{'  'notifyEmptyListener'  '('  ')'  ';'  'if'  '('  'scope'  '!'  '='  'SCOPE.REQUEST'  '&'  '&'  'lifeCyclePolicy.getLifeCyclePolicy'  '('  ')'  '=='  'EMPTY'  ')'  '{'  'releaseExternalResources'  '('  ')'  ';'  '}'  'else'  'if'  '('  'scope'  '=='  'SCOPE.REQUEST'  '||'  'lifeCyclePolicy.getLifeCyclePolicy'  '('  ')'  '=='  'EMPTY_DESTROY'  ')'  '{'  'BroadcasterFactory.getDefault'  '('  ')'  '.remove'  '('  'this'  ' '  'name'  ')'  ';'  'destroy'  '('  ')'  ';'  '}'  '}'  '}'  'return'  'r'  ';'  '}'] 
__label__1 ['Context.getProviderService'  '('  ')'  '.getAllProviderAttributeTypes'  '('  'false'  ')'] 
__label__0 containedToken.endPosition ( ) 
__label__0 this.assignmentManager.isRegionInTransition ( regionInfo ) ! = null 
__label__1 ['user.getSystemId'  '('  ')'  '=='  'null'] 
__label__0 QUEUE_TRANSACTION_LOG_RECORD=44 
__label__0 taskService.createTaskQuery ( ) .orderByExecutionId ( ) 
__label__0 Files.deleteIfExists ( file.toPath ( ) ) 
__label__0 statistics.addPutTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['view.getClusteredLayerInDegree'  '('  'absNode'  ')'] 
__label__0 IntrospectionSupport.setProperty ( exchange.getContext ( ) .getTypeConverter ( ) , jpa , '' timestamp '' , msg.getTimestamp ( ) ) 
__label__1 ['endpointA.expectedBodiesReceived'  '('  '``'  'A'  'blue'  'car'  '!'  '``'  ' '  "''"  'A'  'blue'  'car'  ' '  'again'  '!'  "''"  ')'] 
__label__0 transform.setToRotation ( new Vector3 ( 1,0,1 ) .nor ( ) , rotAngle ) 
__label__0 report ( n , MISPLACED_ANNOTATION , '' @ abstract '' , '' static methods can not be abstract '' ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` favorites/ '' + id+ `` .json '' , new PostParameter [ 0 ] , true ) ) 
__label__1 ['properties.length'  '>'  '3'] 
__label__1 ['request.getLocalAddr'  '('  ')'] 
__label__1 ['removeBlockInternal'  '('  'sessionId'  ' '  'blockId'  ' '  'BlockStoreLocation.anyTier'  '('  ')'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Call'  'WebModuleUtil.startModule'  'on'  'each'  'started'  'module'  '*'  '@'  'param'  'servletContext'  '*'  '@'  'throws'  'ModuleMustStartException'  'if'  'the'  'context'  'can'  'not'  'restart'  'due'  'to'  'a'  '{'  '@'  'link'  'MandatoryModuleException'  '}'  'or'  '{'  '@'  'link'  'OpenmrsCoreModuleException'  '}'  '*'  '/'  'public'  'static'  'void'  'performWebStartOfModules'  '('  'ServletContext'  'servletContext'  ')'  'throws'  'ModuleMustStartException'  ' '  'Throwable'  '{'  'Log'  'log=LogFactory.getLog'  '('  'Listener.class'  ')'  ';'  'List'  '<'  'Module'  '>'  'startedModules=new'  'ArrayList'  '<'  'Module'  '>'  '('  ')'  ';'  'startedModules.addAll'  '('  'ModuleFactory.getStartedModules'  '('  ')'  ')'  ';'  'boolean'  'someModuleNeedsARefresh=false'  ';'  'for'  '('  'Module'  'mod'  ':'  'startedModules'  ')'  '{'  'try'  '{'  'boolean'  'thisModuleCausesRefresh=WebModuleUtil.startModule'  '('  'mod'  ' '  'servletContext'  ' '  'true'  ')'  ';'  'someModuleNeedsARefresh=someModuleNeedsARefresh'  '||'  'thisModuleCausesRefresh'  ';'  '}'  'catch'  '('  'Exception'  'e'  ')'  '{'  'mod.setStartupErrorMessage'  '('  '``'  'Unable'  'to'  'start'  'module'  "''"  ' '  'e'  ')'  ';'  '}'  '}'  'if'  '('  'someModuleNeedsARefresh'  ')'  '{'  'try'  '{'  'WebModuleUtil.refreshWAC'  '('  'servletContext'  ' '  'true'  ' '  'null'  ')'  ';'  '}'  'catch'  '('  'ModuleMustStartException'  'ex'  ')'  '{'  'throw'  'ex'  ';'  '}'  'catch'  '('  'Exception'  'e'  ')'  '{'  'Throwable'  'rootCause=getActualRootCause'  '('  'e'  ' '  'true'  ')'  ';'  'if'  '('  'rootCause'  '!'  '='  'null'  ')'  '{'  'log.fatal'  '('  '``'  'Unable'  'to'  'refresh'  'the'  'spring'  'application'  'context'  '.'  'Root'  'Cause'  'was'  ':'  "''"  ' '  'rootCause'  ')'  ';'  '}'  'else'  '{'  'log.fatal'  '('  '``'  'Unable'  'to'  'refresh'  'the'  'spring'  'application'  'context'  '.'  'Unloading'  'all'  'modules'  ' '  'Error'  'was'  ':'  "''"  ' '  'e'  ')'  ';'  '}'  'try'  '{'  'WebModuleUtil.shutdownModules'  '('  'servletContext'  ')'  ';'  'for'  '('  'Module'  'mod'  ':'  'ModuleFactory.getLoadedModules'  '('  ')'  ')'  '{'  'if'  '('  '!'  'mod.isCoreModule'  '('  ')'  '&'  '&'  '!'  'mod.isMandatory'  '('  ')'  ')'  '{'  'try'  '{'  'ModuleFactory.stopModule'  '('  'mod'  ' '  'true'  ' '  'true'  ')'  ';'  '}'  'catch'  '('  'Throwable'  't3'  ')'  '{'  'log.trace'  '('  '``'  'Unable'  'to'  'shutdown'  'module'  ':'  "''"  '+'  'mod'  ' '  't3'  ')'  ';'  '}'  '}'  '}'  'WebModuleUtil.refreshWAC'  '('  'servletContext'  ' '  'true'  ' '  'null'  ')'  ';'  '}'  'catch'  '('  'MandatoryModuleException'  'ex'  ')'  '{'  'throw'  'new'  'MandatoryModuleException'  '('  'ex.getModuleId'  '('  ')'  ' '  "''"  'Got'  'an'  'error'  'while'  'starting'  'a'  'mandatory'  'module'  ':'  '``'  '+'  'e.getMessage'  '('  ')'  '+'  '``'  '.'  'Check'  'the'  'server'  'logs'  'for'  'more'  'information'  "''"  ')'  ';'  '}'  'catch'  '('  'Throwable'  't2'  ')'  '{'  'log.warn'  '('  '``'  'caught'  'another'  'error'  ':'  '``'  ' '  't2'  ')'  ';'  'throw'  't2'  ';'  '}'  '}'  '}'  'for'  '('  'Module'  'mod'  ':'  'ModuleFactory.getStartedModules'  '('  ')'  ')'  '{'  'WebModuleUtil.loadServlets'  '('  'mod'  ' '  'servletContext'  ')'  ';'  'WebModuleUtil.loadFilters'  '('  'mod'  ' '  'servletContext'  ')'  ';'  '}'  '}'] 
__label__0 LOG.debug ( `` Creating short circuit output stream for block { } @ { } '' , blockId , address ) 
__label__0 UriBuilder.fromResource ( AlarmCallbackResource.class ) .path ( `` { alarmCallbackId } '' ) .build ( streamid , id ) 
__label__1 ['Exception'  'unexpectedException'] 
__label__1 ['toHeapData'  '('  'key'  ')'] 
__label__1 ['value.longValue'  '('  ')'] 
__label__0 ShrinkWrap.create ( JavaArchive.class ) .addAsManifestResource ( `` beans.xml '' ) 
__label__0 minIdle < 0 || minIdle > maxPoolSize 
__label__1 ['testError'  '('  'js'  ' '  'ConstCheck.CONST_REASSIGNED_VALUE_ERROR'  ')'] 
__label__0 assertMockEndpointsSatisfied ( ) 
__label__1 ['setTimeToLiveSeconds'  '('  'Long.valueOf'  '('  '('  'String'  ')'  'cacheSettings.get'  '('  '``'  'timeToIdleSeconds'  "''"  ')'  ')'  '.longValue'  '('  ')'  ')'] 
__label__0 StringUtils.hasLength ( secretQuestion ) & & StringUtils.hasLength ( secretAnswer ) 
__label__0 Arrays.asList ( CoreAnnotations.TextAnnotation.class , CoreAnnotations.TokensAnnotation.class , CoreAnnotations.CharacterOffsetBeginAnnotation.class , CoreAnnotations.CharacterOffsetEndAnnotation.class , CoreAnnotations.IsNewlineAnnotation.class , CoreAnnotations.TokenBeginAnnotation.class , CoreAnnotations.TokenEndAnnotation.class , CoreAnnotations.OriginalTextAnnotation.class ) 
__label__0 connection.pexpireAt ( key , millisecondsTimestamp ) 
__label__0 @ Override public Response header ( String name , Property property ) { addHeader ( name , property ) ; return this ; } 
__label__1 ['deployOneTaskProcess'  '('  ')'] 
__label__0 logger.finest ( `` Optimized Selector : `` + selector.getClass ( ) .getName ( ) ) 
__label__1 ['assertEquals'  '('  'row.getField'  '('  '0'  ')'  ' 3L'  ')'] 
__label__0 file.length ( ) > Integer.MAX_VALUE 
__label__1 ['node.executorManager.executeLocaly'  '('  'new'  'Runnable'  '('  ')'  '{'  'public'  'void'  'run'  '('  ')'  '{'  'MembershipEvent'  'membershipEvent=new'  'MembershipEvent'  '('  'ClusterImpl.this'  ' '  'dummy'  ' '  'MembershipEvent.MEMBER_ADDED'  ')'  ';'  'for'  '('  'MembershipListener'  'listener'  ':'  'listenerSet'  ')'  '{'  'listener.memberAdded'  '('  'membershipEvent'  ')'  ';'  '}'  '}'  '}'  ')'] 
__label__1 ['testWarning'  '('  'LINE_JOINER.join'  '('  '``'  'goog.require'  '('  "'"  'a.c'  "'"  ')'  ';'  "''"  ' '  "''"  '/'  '*'  '*'  '@'  'suppress'  '{'  'extraRequire'  '}'  '*'  '/'  "''"  ' '  "''"  'goog.require'  '('  "'"  'a.b'  "'"  ')'  "''"  ')'  ' '  'REQUIRES_NOT_SORTED'  ' '  'LINE_JOINER.join'  '('  '``'  'goog.require'  '('  ')'  'statements'  'are'  'not'  'sorted'  '.'  'The'  'correct'  'order'  'is'  ':'  "''"  ' '  "''"  "''"  ' '  "''"  '/'  '*'  '*'  "''"  ' '  "''"  '@'  'suppress'  '{'  'extraRequire'  '}'  "''"  ' '  "''"  '*'  '/'  "''"  ' '  "''"  'goog.require'  '('  "'"  'a.b'  "'"  ')'  ';'  "''"  ' '  "''"  'goog.require'  '('  "'"  'a.c'  "'"  ')'  ';'  "''"  ' '  "''"  "''"  ' '  "''"  "''"  ')'  ')'] 
__label__0 assertTrue ( model.getUniqueItems ( ) ) 
__label__1 ['JSError.make'  '('  'REPORT_PATH_IO_ERROR'  ' '  'reportPath'  ')'] 
__label__0 GL20.glUniform1iv ( location , v ) 
__label__0 region.getRegionHeight ( ) 
__label__1 ['LOG.error'  '('  '``'  'OpenTracing'  ':'  'Failed'  'to'  'capture'  'tracing'  'data'  "''"  ' '  't'  ')'] 
__label__0 zController.enqueue ( doRequestStop ( ) ) 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'short'  'circuit'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ')'] 
__label__0 indexOutURI.toString ( ) 
__label__1 ['NettyAsyncHttpProvider.class'] 
__label__0 inner.innerSetException ( new TimeoutException ( ) , false ) 
__label__1 ['obj.setContentEncoding'  '('  'Mimetypes.MIMETYPE_BINARY_OCTET_STREAM'  ')'] 
__label__1 ['logger.info'  '('  '``'  'Return'  'Object'  '{'  '}'  'now'  'at'  'size'  '{'  '}'  "''"  ' '  'b'  ' '  'count.getAndDecrement'  '('  ')'  ')'] 
__label__1 ['CsvReporter.forRegistry'  '('  'registry'  ')'  '.convertDurationsTo'  '('  'getDurationUnit'  '('  ')'  ')'  '.convertDurationsTo'  '('  'getRateUnit'  '('  ')'  ')'] 
__label__1 ['QuartzEndpoint.class'] 
__label__1 ['Sets.'  '<'  'Integer'  '>'  'newHashSet'  '('  ')'] 
__label__0 graphModel.getUndirectedGraphVisible ( ) 
__label__0 compare ( leftValue , rightValue ) > = 0 
__label__0 Assert.assertEquals ( `` Wrong messages count : `` + messages.size ( ) ,1 , messages.size ( ) ) 
__label__1 ['setAttributeInternal'  '('  'inodePath'  ' '  'false'  ' '  'entry.getOpTimeMs'  '('  ')'  ' '  'options'  ')'] 
__label__1 ['OptionalIdentifiedType'  '<'  'FromDefinition'  '>'] 
__label__1 ['Collection'  '<'  'Data'  '>'] 
__label__1 ['Gauge'  '<'  'Object'  '>'] 
__label__1 ['VARCHAR.createBlockBuilder'  '('  'new'  'BlockBuilderStatus'  '('  ')'  ' 1'  ')'] 
__label__0 mFileLength - mPos > = mBlockSize 
__label__0 getConnectTimeout ( ) 
__label__1 ['arguments'  '=='  'null'] 
__label__1 ['new'  'ZipAggregationStrategy'  '('  'true'  ')'] 
__label__1 ['Expression.eq'  '('  '``'  'searchable'  "''"  ' '  'format'  ')'] 
__label__0 logger.trace ( `` Invalid Account Credentials '' ) 
__label__0 getMockEndpoint ( `` mock : event '' ) .expectedMessageCount ( 6 ) 
__label__0 meta.setContentType ( Mimetypes.MIMETYPE_OCTET_STREAM ) 
__label__0 state.isTerminalState ( ) 
__label__1 ['from'  '('  '``'  'jms'  ':'  'queue'  ':'  'order'  "''"  ')'  '.to'  '('  '``'  'bean'  ':'  'validateOrder'  "''"  ')'  '.to'  '('  '``'  'mock'  ':'  'validate'  "''"  ')'  '.threads'  '('  '20'  ')'  '.unmarshal'  '('  'mySecureDataFormat'  ')'  '.delay'  '('  '500'  ')'] 
__label__1 ['return'  'false'  ';'] 
__label__1 ['connector.setPort'  '('  '8080'  ')'] 
__label__1 ['boolean'  'mutiValueResponse'  '('  ')'  'default'  'false'  ';'] 
__label__0 mMountTable.resolve ( getPath ( lastInode ) ) .toString ( ) 
__label__1 ['expectedMinimumCount'  '=='  '-1'] 
__label__0 / * * * < code > CONCAT_AGG < /code > aggregate function . * / public static final SqlListAggFunction LISTAGG=new SqlListAggFunction ( ) ; 
__label__1 ['Assert.notNull'  '('  'jarScanner'  ' '  "''"  'Patterns'  'must'  'not'  'be'  'null'  "''"  ')'] 
__label__1 ['sourceMapping'  '!'  '='  'null'] 
__label__0 ImmutableSortedSet.of ( `` br '' , '' li '' , '' dt '' , '' dd '' , '' hr '' , '' img '' , '' p '' , '' td '' , '' tr '' , '' th '' ) 
__label__1 ['result.expectedMessageCount'  '('  '0'  ')'] 
__label__0 / * * * Returns messages newer than the message ID specified as a numeric string . This should be used when polling for new messages . If you 're looking at messages , and the most recent message returned is 3516 , you can make a request with the parameter `` ? newerThan=3516″ to ensure that you do not get duplicate copies of messages already on your page . * / private Long newerThan=-1L ; 
__label__1 ['tickTupleInterval'  '=='  '0'] 
__label__0 IllegalArgumentException ise 
__label__0 JSError.make ( ref.source.getName ( ) , ref.node , NAME_DEFINED_LATE_WARNING , name.fullName ( ) , parent.fullName ( ) , parent.declaration.source.getName ( ) , String.valueOf ( parent.declaration.node.getLineno ( ) ) ) 
__label__0 logger.error ( `` Item not found error while generating chart . `` , e ) 
__label__0 legacyValue.isDefined ( ) 
__label__1 ['logger.debug'  '('  '``'  'Removing'  ':'  '{'  '}'  "''"  ' '  'r'  ')'] 
__label__1 ['is'  '('  '``'  '/home/source'  "''"  ')'] 
__label__1 ['Long.valueOf'  '('  'args'  '['  '1'  ']'  ')'] 
__label__1 ['removeBlockInternal'  '('  'sessionId'  ' '  'blockId'  ' '  'BlockStoreLocation.anyTier'  '('  ')'  ')'] 
__label__1 ['Context.getAdministrationService'  '('  ')'  '.saveGlobalProperty'  '('  'coreProp'  ')'] 
__label__0 obj.getRequiredTokens ( ) 
__label__1 ['new'  'Interval'  '('  'startTime'  ' '  'endTime'  ')'] 
__label__0 logger.trace ( `` attempting to login '' ) 
__label__0 ! Values.WEBSOCKET.equalsIgnoreCase ( upgrade ) 
__label__0 CachePutAllCodec.encodeRequest ( nameWithPrefix , entries , expiryPolicyData , completionId ) 
__label__0 result.expectedMinimumMessageCount ( 1 ) 
__label__0 url.getServiceKey ( ) 
__label__1 ['attribute.startsWith'  '('  'keyPrefix'  ')'  '&'  'attribute.length'  '('  ')'  '>'  'keyPrefix.length'  '('  ')'] 
__label__1 ['builder.addDependency'  '('  'RegistryInstallerService.SERVICE_NAME'  ')'] 
__label__1 ['field.getRawType'  '('  ')'] 
__label__0 new ClusterConfiguration ( name , Collections.singleton ( boundAt ) ) 
__label__1 ['BlockWorkerUtils.getWorkerAddress'  '('  'mTachyonConf'  ')'  '.getAddress'  '('  ')'  '.getCanonicalHostName'  '('  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweets/'  "''"  '+'  'statusId+'  '``'  '.json'  "''"  ' '  'true'  ')'  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__0 resource.getUser ( req , AUTHORIZER_NAME , user , '' '' , null ) 
__label__1 ['ModuleIdentifier.create'  '('  'moduleName'  ')'] 
__label__0 LOG.warn ( `` Failed to write into TachyonStorage , the block `` + getCurrentBlockId ( ) + `` will not be in TachyonStorage '' ) 
__label__1 ['mMethod.invoke'  '('  'MenuInflater.this'  ' '  'params'  ')'] 
__label__0 Generics.newTreeMap ( ) 
__label__1 ['prevNerEndIndex'  '!'  '='  '('  'start'  '-'  '1'  ')'  '||'  'nextNerStartIndex'  '!'  '='  'end'] 
__label__1 ['streamTokenizer.ttype'  '=='  'StreamTokenizer.TT_WORD'] 
__label__0 planNode.getPlanNodeCpuTime ( ) 
__label__1 ['e.getMessage'  '('  ')'] 
__label__1 ['new'  'IllegalStateException'  '('  ')'] 
__label__0 app.getAudio ( ) .newAudioRecoder ( 44100 , true ) 
__label__1 ['from'  '('  '``'  'direct'  ':'  'a'  "''"  ')'  '.delay'  '('  '3000'  ')'] 
__label__0 endTracksTo ( `` main '' ) 
__label__1 ['graph.getEdges'  '('  ')'] 
__label__0 Thread.sleep ( 3000 ) 
__label__0 reportMissingOverride.isOn ( ) & & ! declaredOverride & & interfaceHasProperty & & ! `` __proto__ '' .equals ( propertyName ) 
__label__1 ['Assert.assertFalse'  '('  'rule.appliesTo'  '('  'builder.interval'  '('  'new'  'Interval'  '('  'now.minusDays'  '('  '1'  ')'  ' '  'now.plusDays'  '('  '1'  ')'  ')'  ')'  '.build'  '('  ')'  ' '  'now'  ')'  ')'] 
__label__0 context.getStreamCachingStrategy ( ) .getSpoolCipher ( ) 
__label__1 ['address.getHostName'  '('  ')'] 
__label__0 version == null || version.equals ( `` '' ) 
__label__1 ['Calendar.getInstance'  '('  'JSON.defaultLocale'  ')'] 
__label__1 ['return'  'faceBookProperties'  ';'] 
__label__1 ['new'  'ModelNode'  '('  ')'  '.set'  '('  '240000'  ')'] 
__label__1 ['PathUtils.concatPath'  '('  'src'  ' '  'child'  ')'] 
__label__0 DEFAULT_MAX_QUERIES=4 
__label__0 currentTime.get ( ) / 1_000_000L 
__label__0 logger.trace ( `` MyQ binding received command ' { } ' for item ' { } ' '' , command , itemName ) 
__label__0 GL20.glUniformMatrix4fv ( location , transpose , toFloatBuffer ( value , offset , count < < 4 ) ) 
__label__0 assertEquals ( conf , ( Configuration ) serializeDeserialize ( conf ) ) 
__label__1 ['new'  'PeepholeSubstituteAlternateSyntax'  '('  'false'  ')'] 
__label__1 ['tickTupleInterval'  '=='  '0'] 
__label__0 buildPages.getTypesWithoutHash ( ) 
__label__1 ['node1.checkTreeEqualsSilent'  '('  'node1'  ')'] 
__label__0 PropertyValuesAnimationAdapter < T > 
__label__0 resources.size ( ) > = maxSuspendResource.get ( ) 
__label__0 GL11.glGetFloatv ( pname , params ) 
__label__1 ['totalHistogram.getValueAtPercentile'  '('  '90'  ')'] 
__label__0 typeSerializer.getDeserializedType ( ) 
__label__1 ['GL20.glUniform2'  '('  'location'  ' '  'toIntBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '<'  '<'  '1'  ')'  ')'] 
__label__0 objectColumnCache.values ( ) 
__label__1 ['RexUtil.simplify'  '('  'rexBuilder'  ' '  'node'  ')'] 
__label__0 Preconditions.checkNotNull ( fileSystemMaster , '' fileSystemMaster '' ) 
__label__0 logger.trace ( `` myq ReturnCode : { } '' , returnCode ) 
__label__1 ['bindingGroup.has'  '('  'PORT_OFFSET'  ')'] 
__label__0 element.getLocalName ( ) 
__label__0 EXTFramebufferObject.glGetRenderbufferParameterivEXT ( target , pname , params ) 
__label__1 ['from'  '('  '``'  'timer'  ':'  '//foo'  '?'  'fixedRate=true'  '&'  'delay=0'  '&'  'period=500'  "''"  ')'  '.to'  '('  '``'  'bean'  ':'  'myBean'  "''"  ')'] 
__label__0 RestartStrategies.fixedDelayRestart ( 1,0 ) 
__label__1 ['Character.isSpaceChar'  '('  'origText.charAt'  '('  'i'  ')'  ')'] 
__label__1 ['binder.bindConstant'  '('  ')'  '.annotatedWith'  '('  'Names.named'  '('  '``'  'servicePort'  "''"  ')'  ')'  '.to'  '('  '8081'  ')'] 
__label__1 ['Arrays.asList'  '('  '``'  'abstract'  "''"  ' '  "''"  'continue'  "''"  ' '  "''"  'for'  "''"  ' '  "''"  'new'  "''"  ' '  "''"  'switch'  "''"  ' '  "''"  'assert'  "''"  ' '  "''"  'default'  "''"  ' '  "''"  'if'  "''"  ' '  "''"  'package'  "''"  ' '  "''"  'synchronized'  "''"  ' '  "''"  'boolean'  "''"  ' '  "''"  'do'  "''"  ' '  "''"  'goto'  "''"  ' '  "''"  'private'  "''"  ' '  "''"  'this'  "''"  ' '  "''"  'break'  "''"  ' '  "''"  'double'  "''"  ' '  "''"  'implements'  "''"  ' '  "''"  'protected'  "''"  ' '  "''"  'throw'  "''"  ' '  "''"  'byte'  "''"  ' '  "''"  'else'  "''"  ' '  "''"  'import'  "''"  ' '  "''"  'public'  "''"  ' '  "''"  'throws'  "''"  ' '  "''"  'case'  "''"  ' '  "''"  'enum'  "''"  ' '  "''"  'instanceof'  "''"  ' '  "''"  'return'  "''"  ' '  "''"  'transient'  "''"  ' '  "''"  'catch'  "''"  ' '  "''"  'extends'  "''"  ' '  "''"  'int'  "''"  ' '  "''"  'short'  "''"  ' '  "''"  'try'  "''"  ' '  "''"  'char'  "''"  ' '  "''"  'final'  "''"  ' '  "''"  'interface'  "''"  ' '  "''"  'static'  "''"  ' '  "''"  'void'  "''"  ' '  "''"  'class'  "''"  ' '  "''"  'finally'  "''"  ' '  "''"  'long'  "''"  ' '  "''"  'strictfp'  "''"  ' '  "''"  'volatile'  "''"  ' '  "''"  'const'  "''"  ' '  "''"  'float'  "''"  ' '  "''"  'native'  "''"  ' '  "''"  'super'  "''"  ' '  "''"  'while'  "''"  ')'] 
__label__0 Thread.sleep ( 1500 ) 
__label__1 ['ImmutableSet.of'  '('  'modules'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Matches'  'no'  'characters'  '.'  '*'  '/'  'public'  'static'  'final'  'FastMatcher'  'NONE=new'  'FastMatcher'  '('  ')'  '{'  '@'  'Override'  'public'  'boolean'  'matches'  '('  'char'  'c'  ')'  '{'  'return'  'false'  ';'  '}'  '@'  'Override'  'public'  'String'  'replaceFrom'  '('  'CharSequence'  'sequence'  ' '  'CharSequence'  'replacement'  ')'  '{'  'checkNotNull'  '('  'replacement'  ')'  ';'  'return'  'sequence.toString'  '('  ')'  ';'  '}'  'private'  'void'  'checkNotNull'  '('  'CharSequence'  'replacement'  ')'  '{'  '}'  '@'  'Override'  'public'  'String'  'collapseFrom'  '('  'CharSequence'  'sequence'  ' '  'char'  'replacement'  ')'  '{'  'return'  'sequence.toString'  '('  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'trimTrailingFrom'  '('  'CharSequence'  'sequence'  ')'  '{'  'return'  'sequence.toString'  '('  ')'  ';'  '}'  '}'  ';'] 
__label__1 ['msg.offset'  '('  ')'] 
__label__1 ['ImmutableList.of'  '('  'qmark'  ' '  'bang'  ')'] 
__label__0 UnderFileSystem.get ( tmpFolder , ufsConf ) 
__label__0 resourceRegistration.registerAdditionalRuntimePackages ( RuntimePackageDependency.optional ( `` org.hibernate.search.orm '' ) , RuntimePackageDependency.required ( `` org.hibernate '' ) , RuntimePackageDependency.optional ( `` org.hibernate.envers '' ) ) 
__label__0 assertEquals ( 3 , historyService.createHistoricActivityInstanceQuery ( ) .processInstanceId ( processInstance.getId ( ) ) .list ( ) .size ( ) ) 
__label__0 new StringBuilder ( 638 ) 
__label__0 GL20.glGetUniformiv ( program , location , params ) 
__label__1 ['Thread.sleep'  '('  '200'  ')'] 
__label__0 isTop ( ) || isUnknown ( ) || objs == null & & typeVar == null 
__label__0 ProcedureTestingUtility.waitAllProcedures ( master.getMasterProcedureExecutor ( ) ) 
__label__1 ['seenServiceNames.contains'  '('  'serviceName'  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'output'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'output'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__1 ['pushExecutor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'Push'  'Reset'  '['  '%'  's'  ']'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'pushObserver.onReset'  '('  'streamId'  ' '  'errorCode'  ')'  ';'  'synchronized'  '('  'SpdyConnection.this'  ')'  '{'  'currentPushRequests.remove'  '('  'streamId'  ')'  ';'  '}'  '}'  '}'  ')'] 
__label__1 ['mock.expectedMessageCount'  '('  '3'  ')'] 
__label__0 getCurrCapacityUsed ( ) 
__label__1 ['bean.getCollectionCount'  '('  ')'] 
__label__0 new FieldFrame ( currentFrame , isStaticInnerType , type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF ? ast.findFirstToken ( TokenTypes.IDENT ) .getText ( ) : null ) 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` redis '' ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 `` Using bind address : `` + bindAddress 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['8'  '*'  'Bytes.SIZEOF_LONG'] 
__label__1 ['getter.getRawReturnType'  '('  ')'] 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__1 ['a.length'  '>'  '='  'count'  '('  ')'] 
__label__0 4 * Bytes.SIZEOF_LONG 
__label__0 2 > = buf.length - count 
__label__1 ['logger.debug'  '('  '``'  'Retreiveing'  'door'  'data'  "''"  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'Requesting'  'TaskManager'  "'s"  'path'  'for'  'query'  'services'  'failed'  '.'  '``'  ' '  'throwable'  ')'] 
__label__1 ['chain.filter'  '('  'exchange'  ')'  '.compose'  '('  '('  'call'  ')'  '-'  '>'  'filter'  '('  'exchange'  ' '  'call'  ')'  ')'] 
__label__1 ['unlockForRegularUsage'  '('  ')'] 
__label__0 request.getPathInfo ( ) 
__label__0 Mockito.verify ( mRMClient ) .stop ( ) 
__label__1 ['Utilities.getInputPaths'  '('  'jobConf'  ' '  'mapWork'  ' '  'emptyScratchDir'  ' '  'ctx'  ')'] 
__label__0 writeMethod2.addScopedInterceptor ( NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE , NettyConstants.SCOPE_WRITE , ExecutionPolicy.BOUNDARY ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externsRoot , mainRoot ) 
__label__0 context.createTaskContext ( ) .addPipelineContext ( 0 , true , true , false ) 
__label__0 LOGGER.warn ( `` Unable to process JSON '' , exception ) 
__label__1 ['!'  'calculatePositionAndValue'  '('  'x'  ' '  'y'  ')'] 
__label__1 ['type'  '=='  'VertexDataType.VertexBufferObject'] 
__label__0 javaWriter.emitSingleLineComment ( `` foo '' ) 
__label__1 ['gl.glDeleteBuffer'  '('  'depthStencilPackedBufferHandle'  ')'] 
__label__1 ['defaultCamelContext.removeRouteDefinition'  '('  'id'  ')'] 
__label__0 setTimeToIdleSeconds ( Long.valueOf ( ( String ) cacheSettings.get ( `` timeToIdleSeconds '' ) ) .longValue ( ) ) 
__label__1 ['getSrcPath'  '('  '``'  'checks/javadoc/Input_03.java'  "''"  ')'] 
__label__1 ['content.readable'  '('  ')'] 
__label__0 if ( mAllowUndeclaredRTE ) { processPackage ( aAST ) ; } 
__label__1 ['Long.valueOf'  '('  'args'  '['  '1'  ']'  ')'] 
__label__0 getClientConnectionManager ( ) 
__label__1 ['o'  'instanceof'  'Xid'] 
__label__0 view.getClusteredLayerDegree ( absNode ) 
__label__1 ['selectedFile'  '!'  '='  'null'] 
__label__0 public class XpathRegressionFallThroughTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=FallThroughCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionExplicitOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( FallThroughCheck.class ) ; final String [ ] expectedViolation= { `` 11:13 : `` + getCheckMessage ( FallThroughCheck.class , FallThroughCheck.MSG_FALL_THROUGH ) } ; final List < String > expectedXpathQueries=Arrays.asList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionExplicitOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /SLIST/LITERAL_SWITCH/CASE_GROUP '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionExplicitOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=FallThroughCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionExplicitTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( FallThroughCheck.class ) ; moduleConfig.addAttribute ( `` checkLastCaseGroup '' , '' true '' ) ; final String [ ] expectedViolation= { `` 10:17 : `` + getCheckMessage ( FallThroughCheck.class , FallThroughCheck.MSG_FALL_THROUGH_LAST ) } ; final List < String > expectedXpathQueries=Arrays.asList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionExplicitTwo ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='methodFallThruCustomWords ' ] /SLIST/LITERAL_WHILE/SLIST '' + `` /LITERAL_SWITCH/CASE_GROUP '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionExplicitTwo ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='methodFallThruCustomWords ' ] /SLIST/LITERAL_WHILE/SLIST '' + `` /LITERAL_SWITCH/CASE_GROUP/LITERAL_DEFAULT '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__0 synchronized ( CONFIG ) { ++threadCount ; if ( session == null ) { try { options=BigtableOptionsFactory.fromConfiguration ( CONFIG ) ; session=new BigtableSession ( options ) ; client=session.getDataClient ( ) ; } catch ( IOException e ) { throw new DBException ( `` Error loading options from config : `` , e ) ; } } else { client=session.getDataClient ( ) ; } if ( clientSideBuffering ) { heapSizeManager=new HeapSizeManager ( Long.parseLong ( getProperties ( ) .getProperty ( ASYNC_MUTATOR_MAX_MEMORY , Long.toString ( AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT ) ) ) , Integer.parseInt ( getProperties ( ) .getProperty ( ASYNC_MAX_INFLIGHT_RPCS , Integer.toString ( AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT ) ) ) ) ; asyncExecutor=new AsyncExecutor ( client , heapSizeManager ) ; } } 
__label__0 raw.getOutParameters ( ) 
__label__1 ['sendCommand'  '('  'CLIENT_SETNAME'  ')'] 
__label__0 queueLength.asString ( ) 
__label__1 ['('  'BeanDefinitionRegistry'  ')'  'context'] 
__label__1 ['Objects.isNull'  '('  'value'  ')'] 
__label__1 ['clients.inMemory'  '('  ')'  '.withClient'  '('  '``'  'my-trusted-client'  "''"  ')'  '.authorizedGrantTypes'  '('  '``'  'password'  "''"  ' '  "''"  'authorization_code'  "''"  ' '  "''"  'refresh_token'  "''"  ' '  "''"  'implicit'  "''"  ')'  '.authorities'  '('  '``'  'ROLE_CLIENT'  "''"  ' '  "''"  'ROLE_TRUSTED_CLIENT'  "''"  ')'  '.scopes'  '('  '``'  'read'  "''"  ' '  "''"  'write'  "''"  ' '  "''"  'trust'  "''"  ')'  '.accessTokenValiditySeconds'  '('  '60'  ')'  '.additionalInformation'  '('  '``'  'foo'  ':'  'bar'  "''"  ' '  "''"  'spam'  ':'  'bucket'  "''"  ')'] 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__1 ['getConcept'  '('  ')'  '!'  '='  'null'  '||'  'getConcept'  '('  ')'  '.getName'  '('  ')'  '!'  '='  'null'] 
__label__0 contact.getWorldManifold ( ) 
__label__0 ( BasicFontMetrics ) c.newInstance ( ) 
__label__1 ['buildPages.getTypes'  '('  ')'] 
__label__1 ['messageJournalEnabled=false'] 
__label__1 ['EnterpriseMapPublisherCreateWithValueCodec.decodeResponse'  '('  'response'  ')'  '.entries'] 
__label__1 ['byteBuf.readable'  '('  ')'] 
__label__1 ['StatBuckets.prettyUptime'  '('  'secs'  ')'] 
__label__1 ['userGroupMember.getMemberId'  '('  ')'] 
__label__1 ['new'  'PkgControl'  '('  'pkg'  ' '  'regex'  ')'] 
__label__0 Math.max ( clientCount,1 ) 
__label__0 req.getServletPath ( ) 
__label__0 testProviderConfig ( ) 
__label__0 result.addUnsafeEnchantment ( enchantment , ( Integer ) entry.getValue ( ) ) 
__label__0 idGenerator.generateUuid ( ) 
__label__1 ['new'  'UnsupportedOperationException'  '('  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '741'  ')'] 
__label__1 ['WebAppResource.class'] 
__label__1 ['Exception'  'exception'] 
__label__1 ['executeConnectAsync=false'] 
__label__0 createPermissionsXmlAsset ( new JndiPermission ( `` * '' , '' lookup '' ) , new RuntimePermission ( `` accessClassInPackage.com.sun.jndi.ldap '' ) ) 
__label__0 new ThreadPoolExecutor ( 5 , Integer.MAX_VALUE,60L , TimeUnit.SECONDS , new SynchronousQueue ( ) , new ExecutorThreadFactory ( node.threadGroup , node.getThreadPoolNamePrefix ( `` cached '' ) , classLoader ) , new RejectionHandler ( ) ) { protected void beforeExecute ( Thread t , Runnable r ) { threadPoolBeforeExecute ( t , r ) ; } } 
__label__0 ctx.sendUpstream ( e ) 
__label__0 new DynamicAwareEntry ( uri , originalUri , properties , lenient ) 
__label__0 assertTrue ( model.getUniqueItems ( ) ) 
__label__1 ['new'  'BindException'  '('  'concept'  ' '  "''"  'concept'  "''"  ')'] 
__label__1 ['response'  '=='  'null'] 
__label__0 SecurityActions.getModuleClassLoader ( module ) 
__label__1 ['attribute.getDefinition'  '('  ')'  '.getAttributeMarshaller'  '('  ')'] 
__label__1 ['lastUpdateTime2'  '>'  'lastUpdateTime'] 
__label__1 ['IOException'  'ignored'] 
__label__1 ['LOG.warn'  '('  '``'  'Exception'  'while'  'fetching'  'metrics'  '.'  '``'  ' '  'e'  ')'] 
__label__1 ['new'  'S_Command'  '('  '``'  '00FE30'  "''"  ' 20.0'  ')'] 
__label__1 ['details.put'  '('  'CONFIG_HASH_KEY'  ' '  'currentConfigHash'  ')'] 
__label__1 ['alluxioUri.getPath'  '('  ')'] 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  'timer'  ')'] 
__label__1 ['n.getCharno'  '('  ')'] 
__label__1 ['new'  'PropertiesLoader'  '('  '``'  'classpath'  ':'  '/application.functional.properties'  "''"  ' '  "''"  'classpath'  ':'  '/application.functional-local.properties'  "''"  ')'] 
__label__0 super.getView ( position , contextualUndoView.getContentView ( ) , contextualUndoView ) 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'short'  'circuit'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ')'] 
__label__0 rsWrap.getMobFileCacheMissCount ( ) 
__label__0 endTracksTo ( `` main '' ) 
__label__0 bufferedBytes < maxBufferedBytes 
__label__0 `` Deleting existing file : `` + target 
__label__1 ['ctx.nextOutboundMessageBuffer'  '('  ')'] 
__label__0 setExpectedMessageCount ( expected ) 
__label__1 ['beanFactory.getBeanNamesForType'  '('  'CacheAspectSupport.class'  ')'] 
__label__1 ['port'  '>'  '21000'] 
__label__1 ['ar.cause'  '('  ')'] 
__label__0 content.contains ( expected ) 
__label__0 client.getStatusCodeReply ( ) 
__label__0 Assert.assertTrue ( rule.appliesTo ( builder.interval ( new Interval ( now.minusDays ( 1 ) , now.plusDays ( 1 ) ) ) .build ( ) , now ) ) 
__label__1 ['kryo.readObjectOrNull'  '('  'input'  ' '  'JobID.class'  ')'] 
__label__0 hazelcastFactory.newHazelcastInstance ( newConfig ( ) ) 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['ssl.has'  '('  'CommonAttributes.CA_CERTIFICATE_FILE'  ')'] 
__label__0 item.getName ( ) .equals ( name ) 
__label__0 ( ZWaveAssociationCommandClass ) node.getCommandClass ( CommandClass.ASSOCIATION ) 
__label__1 ['future.isCancelled'  '('  ')'] 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_FILE_LOAD_TTL'  ')'] 
__label__0 LOG.debug ( `` Creating short circuit output stream for block { } @ { } '' , blockId , address ) 
__label__0 `` Excluding secondary region `` + bestRegionReplica + `` - trying to find a different region to refresh files . '' 
__label__1 ['new'  'String'  '('  'bytes2'  ')'] 
__label__1 ['ModelVersion.create'  '('  '3 0 0'  ')'] 
__label__0 Thread.sleep ( 3000 ) 
__label__0 minSize ( new Fixed ( width ) , new Fixed ( height ) ) 
__label__0 DiagnosticType.error ( `` JSC_TOO_MANY_TEMPLATE_PARAMS '' , '' { 0 } '' ) 
__label__1 ['tJvmGcDetailed.getJvmGcNewCount'  '('  ')'] 
__label__1 ['new'  'Duration'  '('  'TimeUnit.MILLISECONDS'  ' '  'CRETAED_EXPIRY_TIME_IN_MSEC'  ')'] 
__label__0 rSocketMessageHandler.responder ( ) 
__label__1 ['/'  '*'  '*'  '*'  'Tests'  'setup'  'and'  'cleanup'  'attempts'  'getting'  'killed'  'from'  'command-line'  'and'  'lost'  'tracker'  '*'  '@'  'param'  'mr'  '*'  '@'  'param'  'dfs'  '*'  '@'  'param'  'commandLineKill'  'if'  'true'  ' '  'test'  'with'  'command-line'  'killelse'  ' '  'test'  'with'  'lost'  'tracker'  '*'  '@'  'throws'  'IOException'  '*'  '/'  'private'  'void'  'testSetupAndCleanupKill'  '('  'MiniMRCluster'  'mr'  ' '  'MiniDFSCluster'  'dfs'  ' '  'boolean'  'commandLineKill'  ')'  'throws'  'IOException'  '{'  'RunningJob'  'job=launchJobWithWaitingSetupAndCleanup'  '('  'mr'  ')'  ';'  'JobTracker'  'jt=mr.getJobTrackerRunner'  '('  ')'  '.getJobTracker'  '('  ')'  ';'  'JobInProgress'  'jip=jt.getJob'  '('  'job.getID'  '('  ')'  ')'  ';'  'TaskAttemptID'  'setupID=getRunningTaskID'  '('  'jip.getTasks'  '('  'TaskType.JOB_SETUP'  ')'  ')'  ';'  'if'  '('  'commandLineKill'  ')'  '{'  'killTaskFromCommandLine'  '('  'job'  ' '  'setupID'  ' '  'jt'  ')'  ';'  '}'  'else'  '{'  'killTaskWithLostTracker'  '('  'mr'  ' '  'setupID'  ')'  ';'  '}'  'UtilsForTests.writeFile'  '('  'dfs.getNameNode'  '('  ')'  ' '  'dfs.getFileSystem'  '('  ')'  '.getConf'  '('  ')'  ' '  'setupSignalFile'  ' '  '('  'short'  ')'  '3'  ')'  ';'  'while'  '('  'job.reduceProgress'  '('  ')'  '!'  '='  '1.0f'  ')'  '{'  'try'  '{'  'Thread.sleep'  '('  '100'  ')'  ';'  '}'  'catch'  '('  'InterruptedException'  'ie'  ')'  '{'  '}'  '}'  'TaskAttemptID'  'cleanupID=getRunningTaskID'  '('  'jip.getTasks'  '('  'TaskType.JOB_CLEANUP'  ')'  ')'  ';'  'if'  '('  'commandLineKill'  ')'  '{'  'killTaskFromCommandLine'  '('  'job'  ' '  'cleanupID'  ' '  'jt'  ')'  ';'  '}'  'else'  '{'  'killTaskWithLostTracker'  '('  'mr'  ' '  'cleanupID'  ')'  ';'  '}'  'UtilsForTests.writeFile'  '('  'dfs.getNameNode'  '('  ')'  ' '  'dfs.getFileSystem'  '('  ')'  '.getConf'  '('  ')'  ' '  'cleanupSignalFile'  ' '  '('  'short'  ')'  '3'  ')'  ';'  'job.waitForCompletion'  '('  ')'  ';'  'assertEquals'  '('  'JobStatus.SUCCEEDED'  ' '  'job.getJobState'  '('  ')'  ')'  ';'  'assertEquals'  '('  'TaskStatus.State.KILLED'  ' '  'jt.getTaskStatus'  '('  'setupID'  ')'  '.getRunState'  '('  ')'  ')'  ';'  'assertEquals'  '('  'TaskStatus.State.KILLED'  ' '  'jt.getTaskStatus'  '('  'cleanupID'  ')'  '.getRunState'  '('  ')'  ')'  ';'  '}'] 
__label__1 ['routes.InputsResource'  '('  ')'] 
__label__0 imageUrl.length ( ) > MAX_FILE_NAME_LENGTH 
__label__1 ['QUEUE_TRANSACTION_LOG_RECORD=43'] 
__label__0 client.srandmember ( key , count ) 
__label__0 ignoreOverriddenMethods & & ( AnnotationUtility.containsAnnotation ( methodDef , '' Override '' ) || AnnotationUtility.containsAnnotation ( methodDef , '' java.lang.Override '' ) ) 
__label__1 ['new'  'Path'  '('  'bucketPath'  ' '  "''"  'test-'  "''"  '+'  'i'  '+'  "'-'+"  'j'  ')'  '.toString'  '('  ')'] 
__label__1 ['0'  '-'  'originY'] 
__label__0 initialCapacity > 1 < < 30 
__label__0 ImmutableList.copyOf ( modules ) 
__label__0 assertEquals ( 800d , fStopwatch.runtime ( MILLISECONDS ) ,250d ) 
__label__1 ['logger.error'  '('  '``'  'Invalid'  'state'  '{'  '}'  "''"  ' '  'r'  ')'] 
__label__0 GL20.glUniform3iv ( location , toIntBuffer ( v , offset , count * 3 ) ) 
__label__0 Configuration.getMs ( PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS ) 
__label__1 ['public'  'class'  'XpathRegressionOneStatementPerLineTest'  'extends'  'AbstractXpathTestSupport'  '{'  '@'  'Test'  'public'  'void'  'testOne'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=OneStatementPerLineCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionOneStatementPerLineOne.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'OneStatementPerLineCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '4:17'  ':'  '``'  '+'  'getCheckMessage'  '('  'OneStatementPerLineCheck.class'  ' '  'OneStatementPerLineCheck.MSG_KEY'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionOneStatementPerLineOne"  "'"  ']'  '/OBJBLOCK'  "''"  '+'  '``'  '/VARIABLE_DEF'  '['  '@'  'text='  "'"  'j'  "'"  ']'  '/SEMI'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testTwo'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=OneStatementPerLineCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionOneStatementPerLineTwo.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'OneStatementPerLineCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '9:39'  ':'  '``'  '+'  'getCheckMessage'  '('  'OneStatementPerLineCheck.class'  ' '  'OneStatementPerLineCheck.MSG_KEY'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionOneStatementPerLineTwo"  "'"  ']'  '/OBJBLOCK'  "''"  '+'  '``'  '/METHOD_DEF'  '['  '@'  "text='foo5"  "'"  ']'  '/SLIST/LITERAL_FOR/SLIST/SEMI'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '}'] 
__label__0 sendCommand ( CLIENT , Keyword.LIST.raw ) 
__label__0 new SetExchangePatternType ( exchangePattern ) 
__label__1 ['getEndpoint'  '('  ')'  '.getConfig'  '('  ')'  '.getIndexName'  '('  ')'] 
__label__1 ['TestSuiteEnvironment.getServerAddress'  '('  ')'] 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['getPath'  '('  '``'  'InputPackageDeclarationDiffDirectoryAtSubpackage.java'  "''"  ')'] 
__label__1 ['getTokenNames'  '('  ')'] 
__label__1 ['getMapNearCacheManager'  '('  'dataMember'  ')'] 
__label__0 initialCapacity > 1 < < 30 
__label__0 CommandUtils.convertMsToDate ( files [ 1 ] .getCreationTimeMs ( ) ) 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__0 CompletableFuture < Void > 
__label__0 assertEquals ( 9 , tokens.size ( ) ) 
__label__0 response.getResponseBody ( ) .equals ( `` '' ) 
__label__1 ['final'  'Object'  'firstLineKey=lines.firstKey'  '('  ')'  ';'] 
__label__1 ['name='  "''"  'java'  ':'  '/ConnectionFactory'  "''"] 
__label__1 ['JSError.make'  '('  'callNode'  ' '  'NOT_UNIQUE_INSTANTIATION'  ' '  'funType.toString'  '('  ')'  ' '  'UniqueNameGenerator.getOriginalName'  '('  'typeParam'  ')'  ' '  'types.toString'  '('  ')'  ')'] 
__label__0 addEntryListener ( new EntryListener < K , V > ( ) { public void entryAdded ( EntryEvent < K , V > event ) { invalidate ( event ) ; } public void entryRemoved ( EntryEvent < K , V > event ) { invalidate ( event ) ; } public void entryUpdated ( EntryEvent < K , V > event ) { invalidate ( event ) ; } public void entryEvicted ( EntryEvent < K , V > event ) { invalidate ( event ) ; } void invalidate ( EntryEvent < K , V > event ) { System.err.println ( `` invalidate '' ) ; final Data key=toData ( event.getKey ( ) ) ; nearCache.put ( key , event.getValue ( ) ) ; } } , false ) 
__label__0 ( Long ) criteria.uniqueResult ( ) 
__label__1 ['startOffset'  '>'  'pages.size'  '('  ')'] 
__label__0 private final DynamicTransformerRegistry dynamicTransformerRegistry ; 
__label__0 ast ! = null & & ast.atnState ! = null 
__label__1 ['items'  '['  '21'  ']'] 
__label__0 startServer ( testAddress ) 
__label__0 @ Override protected boolean handleResponse ( ChannelHandlerContext ctx , Object response ) throws Exception { if ( response instanceof HttpResponse ) { if ( status ! = null ) { throw new HttpProxyConnectException ( exceptionMessage ( `` too many responses '' ) , null ) ; } HttpResponse res= ( HttpResponse ) response ; status=res.status ( ) ; inboundHeaders=res.headers ( ) ; } boolean finished=response instanceof LastHttpContent ; if ( finished ) { if ( status == null ) { throw new HttpProxyConnectException ( exceptionMessage ( `` missing response '' ) , inboundHeaders ) ; } if ( status.code ( ) ! = 200 ) { throw new HttpProxyConnectException ( exceptionMessage ( `` status : `` + status ) , inboundHeaders ) ; } } return finished ; } 
__label__1 ['HttpServletResponse.class.cast'  '('  'response'  ')'  '.sendError'  '('  '202'  ' '  "''"  'Websocket'  'protocol'  'not'  'supported'  "''"  ')'] 
__label__1 ['Integer.valueOf'  '('  'st.nextToken'  '('  ')'  ')'] 
__label__1 ['Bytes.toString'  '('  'qualifierName'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'NODE'  '{'  '}'  ':'  'Retry'  'timout'  ':'  'Advancing'  "''"  ')'] 
__label__0 Color.fromRGB ( 0x3B511A ) 
__label__1 ['Iterable'  '<'  'ManyValues'  '>'] 
__label__0 mapper.getFactory ( ) 
__label__0 FSImageFormatPBINode.class 
__label__0 rs.getNString ( columnIndex ) 
__label__1 ['LOG.info'  '('  'getName'  '('  ')'  '+'  '``'  'caught'  ':'  '``'  ' '  'e'  ')'] 
__label__0 final StringBuilder result=new StringBuilder ( 20 ) ; 
__label__1 ['args.length'  '<'  '1'] 
__label__1 ['LOG.debug'  '('  '``'  'Error'  'while'  'deserializing'  'payload'  "''"  ' '  'e'  ')'] 
__label__0 client.getState ( ) .setProxyCredentials ( new AuthScope ( null , -1 , AuthScope.ANY_REALM ) , defaultcreds ) 
__label__0 testWarning ( js , VariableReferenceCheck.REDECLARED_VARIABLE ) 
__label__0 providers.size ( ) > 0 
__label__1 ['r.getUri'  '('  ')'  '.toString'  '('  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '639'  ')'] 
__label__1 ['logError'  '('  'lcurly'  ' '  "''"  'lcurly'  "''"  ' '  'lcurlyPos'  ')'] 
__label__1 ['context.var'  '('  '``'  'double'  "''"  ')'] 
__label__0 @ Override public Response description ( String description ) { this.setDescription ( description ) ; return this ; } 
__label__0 `` Searching class for device type `` + deviceType 
__label__0 new DirectDruidClient ( warehouse , smileMapper , httpClient , server.getHost ( ) ) 
__label__1 ['assertEquals'  '('  'actualPattern.pattern'  '('  ')'  ' '  'someName'  ')'] 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  'exampleServletRegistration'  '('  ')'  ' '  'new'  'FilterRegistrationBean'  '('  'new'  'ExampleFilter'  '('  ')'  ')'  ')'] 
__label__1 ['Exception'  'exception'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['m.isCacheValue'  '('  ')'] 
__label__1 ['Mockito.doNothing'  '('  ')'  '.when'  '('  'mFileSystemMasterClient'  ')'  '.rename'  '('  'src'  ' '  'dst'  ')'] 
__label__0 Math.max ( 1000L , connectionTimeout ) 
__label__1 ['tabAlias.equals'  '('  'tableAlias'  ')'] 
__label__1 ['this.thrown.equals'  '('  'IllegalStateException.class'  ')'] 
__label__0 ( InvocationTargetException ) unwrapped 
__label__0 logger.trace ( `` NODE { } : App version requested but Version class not supported '' , this.getNodeId ( ) ) 
__label__1 ['obj.getAcceptableTokens'  '('  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'Failed'  'to'  'write'  'to'  'TachyonStore'  'stream'  ' '  'block'  '``'  '+'  'getCurrentBlockId'  '('  ')'  '+'  '``'  'will'  'not'  'be'  'in'  'TachyonStorage'  '.'  '``'  ' '  'ioe'  ')'] 
__label__1 ['Mockito.doThrow'  '('  'EXCEPTION'  ')'  '.when'  '('  'mFileSystemMasterClient'  ')'  '.rename'  '('  'src'  ' '  'dst'  ')'] 
__label__1 ['result.expectedBodiesReceived'  '('  '``'  'A+C+E+G+I'  "''"  ' '  "''"  'B+D+F+H+J'  "''"  ')'] 
__label__0 ! sourceNodeTextData.getText ( ) .isEmpty ( ) 
__label__1 ['objects'  '=='  'null'] 
__label__1 ['AnnotatedElementUtils.isAnnotated'  '('  'type'  ' '  'Validated.class'  ')'] 
__label__1 ['new'  'IllegalStateException'  '('  ')'] 
__label__1 ['getGlobalProperty'  '('  'OpenmrsConstants.GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST'  ')'] 
__label__0 new ResultSetIterator ( conn , rs , getEndpoint ( ) .isUseJDBC4ColumnNameAndLabelSemantics ( ) ) 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/mentions.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['dbSqlSessionFactory.getDatabaseCatalog'  '('  ')'  '!'  '='  'null'] 
__label__1 ['bytesRead'  '!'  '='  '0'] 
__label__0 Assert.assertEquals ( 0 , fastJsonConfig.getFeatures ( ) .length ) 
__label__0 ArrayBlockingQueue < BodyChunk > 
__label__1 ['logger.warn'  '('  '``'  'NODE'  '{'  '}'  ':'  'BATTERY'  'LOW'  '!'  '``'  ' '  'this.getNode'  '('  ')'  '.getNodeId'  '('  ')'  ')'] 
__label__0 autoCommit ! = null & & autoCommit ! = conn.getAutoCommit ( ) 
__label__1 ['new'  'ThreadPoolExecutor'  '('  '5'  ' '  'Integer.MAX_VALUE 6L'  ' '  'TimeUnit.SECONDS'  ' '  'new'  'SynchronousQueue'  '('  ')'  ' '  'new'  'ExecutorThreadFactory'  '('  'node.threadGroup'  ' '  'node.getThreadPoolNamePrefix'  '('  '``'  'cached'  "''"  ')'  ' '  'classLoader'  ')'  ' '  'new'  'RejectionHandler'  '('  ')'  ')'  '{'  'protected'  'void'  'beforeExecute'  '('  'Thread'  't'  ' '  'Runnable'  'r'  ')'  '{'  'threadPoolBeforeExecute'  '('  't'  ' '  'r'  ')'  ';'  '}'  '}'] 
__label__1 ['new'  'RuntimeException'  '('  'String.format'  '('  '``'  'File'  '\\'  "''"  '%'  '1'  '$'  's\\'  "''"  'has'  'inconsistent'  'comment'  'on'  'line'  '%'  '2'  '$'  'd'  "''"  ' '  'aFileName'  ' '  'lineNumber'  ')'  ')'] 
__label__0 GL20.glGetVertexAttribiv ( index , pname , params ) 
__label__1 ['CellUtil.estimatedHeapSizeOf'  '('  'cell'  ')'] 
__label__1 ['StatBuckets.prettyUptime'  '('  'secs'  ')'] 
__label__1 ['session.getMachineIdentifier'  '('  ')'  '.equals'  '('  'config.getMachineIdentifier'  '('  ')'  ')'] 
__label__1 ['arguments'  '=='  'null'] 
__label__0 Call < RemoteCallResponseType > 
__label__1 ['invocation.logger.warning'  '('  '``'  'Asking'  'if'  'operation'  'execution'  'has'  'been'  'started'  ':'  '``'  '+'  'invocation'  ')'] 
__label__0 targetClass ! = null & & field ! = null 
__label__0 Long.parseLong ( args [ 2 ] ) 
__label__1 ['sourceMapping'  '!'  '='  'null'] 
__label__1 ['new'  'NullOutputOperatorFactory'  '('  'operatorId'  ' '  'sourceType'  ')'] 
__label__1 ['minSize'  '('  'new'  'Fixed'  '('  'width'  ')'  ')'] 
__label__1 ['Map'  '<'  'List'  '<'  'Object'  '>'  ' '  'Object'  '>'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/public_timeline.json'  "''"  ' '  'null'  ' '  'new'  'Paging'  '('  '('  'long'  ')'  'sinceID'  ')'  '.asPostParameterList'  '('  'Paging.S'  ')'  ' '  'false'  ')'  ')'] 
__label__1 ['mTfs.ls'  '('  'Constants.PATH_SEPARATOR'  ' '  'true'  ')'] 
__label__0 configList == null || configList.size ( ) == 0 
__label__1 ['Arrays.asList'  '('  '``'  'bool'  "''"  ' '  "''"  'qint32'  "''"  ' '  "''"  'qint64'  "''"  ')'] 
__label__0 message.getFilteredFields ( ) 
__label__0 compressedProto.length < 391000 
__label__0 mPreferredHost.equals ( `` localhost '' ) 
__label__1 ['LOGGER.debug'  '('  '``'  'Unable'  'to'  'process'  'JSON'  "''"  ' '  'exception'  ')'] 
__label__0 event.get ( factory.getName ( ) ) 
__label__0 Cli.buildCli ( `` presto '' , Runnable.class ) .withDefaultCommand ( Server.class ) .withCommand ( Server.class ) .withCommand ( Execute.class ) .withCommand ( Console.class ) .withCommand ( Help.class ) 
__label__1 ['titleLabel.getPrefWidth'  '('  ')'] 
__label__0 new DefaultAsyncHttpClient ( config ) 
__label__0 maxInvocationCountObservedDuringWarmup * 2 
__label__0 n.getNodeData ( ) .y ( ) 
__label__0 element.getLocalName ( ) 
__label__1 ['Thread.sleep'  '('  '500'  ')'] 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'CountDownLatchBasicDistributedTest'  'extends'  'CountDownLatchBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '2'  ')'  '.newInstances'  '('  ')'  ';'  '}'  '}'] 
__label__1 ['Thread.sleep'  '('  '100'  ')'] 
__label__1 ['minSize'  '('  'new'  'Fixed'  '('  'width'  ')'  ')'] 
__label__1 ['System.nanoTime'  '('  ')'] 
__label__1 ['logger.info'  '('  '``'  'Session'  'destroyed'  "''"  ')'] 
__label__0 clazz.getInterfaces ( ) .length == 0 
__label__0 LOG.debug ( `` Getting asynchronous method stub from channel '' ) 
__label__1 ['timelineObjectHolder.getObject'  '('  ')'  '.getChunk'  '('  '0'  ')'  '.getObject'  '('  ')'  '.getDimensions'  '('  ')'] 
__label__0 exchange.setRequestHeader ( HttpHeaders.AUTHORIZATION , '' OAuth `` + currentToken ) 
__label__0 new String ( bytes2 , '' UTF8 '' ) 
__label__0 Float.parseFloat ( value.toString ( ) ) 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'get'  'files'  'from'  '``'  '+'  'baseDirectory.getAbsolutePath'  '('  ')'  ')'] 
__label__0 ObjectHelper.loadClass ( name , loader ) 
__label__0 rt == Boolean.TYPE & & ! ( ret instanceof Boolean ) 
__label__0 Class.forName ( mUfsClz ) .getConstructor ( String.class , TachyonConf.class ) 
__label__1 ['list.isEmpty'  '('  ')'] 
__label__1 ['element.getNodeName'  '('  ')'] 
__label__1 ['new'  'AndroidFiles'  '('  'this.getService'  '('  ')'  '.getAssets'  '('  ')'  ')'] 
__label__1 ['e'  'instanceof'  'MaybePrimitiveExpr'  '&'  '&'  'e.hasJavaClass'  '('  ')'] 
__label__0 Utils.getInt ( storm_conf.get ( Config.TOPOLOGY_WORKERS ) ,1 ) 
__label__1 ['!'  '('  'topicParts.length'  '>'  '2'  ')'  '&'  '&'  '!'  'topicParts'  '['  '0'  ']'  '.equals'  '('  'TOPIC_PREFIX'  ')'] 
__label__1 ['requestFilters.isEmpty'  '('  ')'] 
__label__0 getSessionTimeout ( ) .getSeconds ( ) 
__label__1 ['Thread.sleep'  '('  '50'  ')'] 
__label__0 context.setDelayer ( 2000L ) 
__label__1 ['Character.isSpaceChar'  '('  'origText.charAt'  '('  'i'  ')'  ')'] 
__label__0 routes.IndicesResource ( ) .delete ( index ) 
__label__1 ['new'  'SctpMessage'  '('  'streamIdentifier'  ' '  'protocolIdentifier'  ' '  'unordered'  ' '  'msg.retain'  '('  ')'  ')'] 
__label__0 assertEquals ( String.format ( `` Expected % s results but got % s . Number of evicted entries : % s . `` , activeEmployees , values.size ( ) , allEmployees - latch.getCount ( ) ) , activeEmployees , values.size ( ) ) 
__label__0 bLocations [ 0 ] .getHosts ( ) 
__label__1 ['WebServicesTestUtils.checkStringMatch'  '('  '``'  'hadoopBuildVersion'  "''"  ' '  'VersionInfo.getBuildVersion'  '('  ')'  ' '  'hadoopBuildVersion'  ')'] 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'exist'  "''"  ')'] 
__label__0 LOG.debug ( `` Creating short circuit input stream for block { } @ { } '' , blockId , address ) 
__label__0 file.getAbsolutePath ( ) 
__label__0 file.getFileNameOnly ( ) 
__label__1 ['tupleInfo.getMessageId'  '('  ')'  '!'  '='  'null'] 
__label__1 ['new'  'BlobLibraryCacheManager'  '('  'blobServer'  ' '  'FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST'  ')'] 
__label__0 location.add ( deltaX / delta , deltaY / delta , deltaZ / delta ) 
__label__1 ['ignoreOverridenMethods'  '&'  '&'  '('  'AnnotationUtility.containsAnnotation'  '('  'methodDef'  ' '  "''"  'Override'  "''"  ')'  '||'  'AnnotationUtility.containsAnnotation'  '('  'methodDef'  ' '  "''"  'java.lang.Override'  "''"  ')'  ')'] 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS'  ')'] 
__label__1 ['container.getTimeFormat'  '('  ')'  '.equals'  '('  'TimeFormat.DATE'  ')'] 
__label__0 Preconditions.checkNotNull ( mBlockIdsOnTiers , '' mBlockIdsOnTiers '' ) 
__label__0 ( ( Number ) s.first ( ) ) .floatValue ( ) 
__label__0 expectedCountsForADoc ( weights , e4Update , ind ) 
__label__1 ['logger.warn'  '('  '``'  '{'  '}'  '{'  '}'  "''"  ' '  'errorCode'  ' '  'message'  ')'] 
__label__1 ['new'  'RuntimeException'  '('  'ex'  ')'] 
__label__0 case REPLACE_IF_SAME : 
__label__1 ['e.getMessage'  '('  ')'] 
__label__0 logger.finest ( `` Optimized Selector : `` + selector.getClass ( ) .getName ( ) ) 
__label__1 ['new'  'ClusterConfiguration'  '('  '``'  'whatever'  "''"  ' '  'StringLogger.DEV_NULL'  ' '  "''"  'cluster'  ':'  '//1'  "''"  ' '  "''"  'cluster'  ':'  '//2'  "''"  ')'] 
__label__0 inner.innerSetException ( ( Throwable ) result , true ) 
__label__1 ['amq.getConfiguration'  '('  ')'  '.getConnectionFactory'  '('  ')'] 
__label__1 ['Calendar.getInstance'  '('  'JSON.defaultLocale'  ')'] 
__label__1 ['!'  'regex.equals'  '('  'lastRegex'  ')'] 
__label__1 ['Foundation.NSLog'  '('  '``'  '['  'info'  ']'  '``'  '+'  'tag'  '+'  '``'  ':'  '``'  '+'  'message'  ')'] 
__label__1 ['reservedWords.contains'  '('  'codegenProperty.datatypeWithEnum'  ')'] 
__label__1 ['buffer.writeBytes'  '('  'content'  ')'] 
__label__1 ['targetCondn'  '=='  'null'] 
__label__1 ['raw.getParameters'  '('  ')'] 
__label__0 sizeNeeded > items.length 
__label__0 CONCURRENT_THREAD_COUNT=30 
__label__1 ['remoteAddressAliases'  '!'  '='  'null'] 
__label__0 ! type.isAnonymousClass ( ) & & ! type.isInterface ( ) & & ! type.isMemberClass ( ) 
__label__0 processEngineConfiguration.getCommandExecutor ( ) 
__label__1 ['prop.getParamName'  '('  ')'] 
__label__1 ['createNextExchange'  '('  'processor'  ' '  'exchange'  ')'] 
__label__0 repo.setRecoveryInterval ( 1000 , TimeUnit.MILLISECONDS ) 
__label__1 ['new'  'String'  '('  'bytes2'  ')'] 
__label__1 ['ImmutableList.of'  '('  'sourcesAsStrings'  ')'] 
__label__1 ['new'  'UnsupportedOperationException'  '('  '``'  'Command'  'not'  'found'  'in'  'bolt'  'message'  ':'  '``'  '+'  'shellMsg'  ')'] 
__label__1 ['assertTrue'  '('  'isBufferCopyNeededForWrite'  '('  'byteBuf.asReadOnly'  '('  ')'  ')'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweeted_to_me.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['hz1.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 AtmosphereResourceEventListenerAdapter.class 
__label__1 ['getBinaryTupledSet'  '('  ')'] 
__label__0 queue.poll ( 15 , TimeUnit.SECONDS ) 
__label__1 ['stopwatch.elapsedMillis'  '('  ')'] 
__label__0 javaWriter.emitSingleLineComment ( `` foo '' ) 
__label__1 ['new'  'GoogleCodeRemoval'  '('  'compiler'  ')'] 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__0 target == null || target.getNumFields ( ) < this.mappings.size ( ) + 1 
__label__1 ['left.getFieldName'  '('  ')'  '.equals'  '('  'right.getFieldName'  '('  ')'  ')'] 
__label__1 ['getPositionForView'  '('  'switchView'  ')'  '<'  'getHeaderViewsCount'  '('  ')'] 
__label__0 / * * * Creates an exception indicating the transactional entity manager can not be closed when it is managed by the container . * @ return an { @ link IllegalStateException } for the error . * / @ Message ( id=11424 , value= '' Container managed entity manager can only be closed by the container `` + `` ( auto-cleared at tx/invocation end and closed when owning component is closed . ) '' ) IllegalStateException cannotCloseTransactionContainerEntityManger ( ) ; 
__label__0 Arrays.asList ( STANFORD_TOKENIZE , STANFORD_SSPLIT , STANFORD_POS , STANFORD_LEMMA , STANFORD_NER , STANFORD_DEPENDENCIES ) 
__label__0 StatBuckets.prettyUptimeStr ( secs ) 
__label__0 public class XpathRegressionNestedForDepthTest extends XpathTestSupport { @ Test public void testCorrect ( ) throws Exception { final String checkName=NestedForDepthCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionNestedForDepth.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( NestedForDepthCheck.class ) ; final String [ ] expectedViolation= { `` 7:17 : `` + getCheckMessage ( NestedForDepthCheck.class , NestedForDepthCheck.MSG_KEY,2,1 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionNestedForDepth ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /SLIST/LITERAL_FOR/SLIST/LITERAL_FOR/SLIST/LITERAL_FOR '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['from'  '('  '``'  'seda'  ':'  'a'  "''"  ')'  '.delayer'  '('  '500'  ')'] 
__label__1 ['mFixedExecutionService.shutdown'  '('  ')'] 
__label__1 ['error'  '('  '``'  'Unable'  'to'  'connect'  'due'  'to'  'unrecognised'  'server'  'certificate'  "''"  ')'] 
__label__1 ['idx'  '['  'j'  ']'  '>'  '='  '0'] 
__label__1 ['/'  '*'  '*'  '*'  'Changes'  'the'  'group'  'of'  'a'  'file'  'or'  'directory'  'specified'  'by'  'args'  'recursively'  '.'  '*'  '/'  'public'  'final'  'class'  'ChgrpRecursiveCommand'  'extends'  'AbstractACLCommand'  '{'  'public'  'ChgrpRecursiveCommand'  '('  'TachyonConf'  'conf'  ' '  'TachyonFileSystem'  'tfs'  ')'  '{'  'super'  '('  'conf'  ' '  'tfs'  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'getCommandName'  '('  ')'  '{'  'return'  '``'  'chgrpr'  "''"  ';'  '}'  '@'  'Override'  'protected'  'int'  'getNumOfArgs'  '('  ')'  '{'  'return'  '2'  ';'  '}'  '@'  'Override'  'public'  'void'  'run'  '('  'String'  '...'  'args'  ')'  'throws'  'IOException'  '{'  'String'  'group=args'  '['  '0'  ']'  ';'  'TachyonURI'  'path=new'  'TachyonURI'  '('  'args'  '['  '1'  ']'  ')'  ';'  'chgrp'  '('  'path'  ' '  'group'  ' '  'true'  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'getUsage'  '('  ')'  '{'  'return'  '``'  'chgrpr'  '<'  'group'  '>'  '<'  'path'  '>'  "''"  ';'  '}'  '}'] 
__label__1 ['activeFrom.getTime'  '('  ')'] 
__label__1 ['libDirectory='  "''"  '.'  "''"] 
__label__0 CellUtil.estimatedHeapSizeOfWithoutTags ( c ) 
__label__0 LinkedHashMap < String , LinkedHashMap < String , ASTNode > > 
__label__1 ['in.readObject'  '('  ')'] 
__label__1 ['Color.fromRGB'  '('  '0x51301A'  ')'] 
__label__1 ['coreThreads.asString'  '('  ')'] 
__label__1 ['NoopChatHandlerProvider.class'] 
__label__0 option.getJavaType ( ) 
__label__1 ['case'  'NONE'  ':'] 
__label__1 ['file.getFileName'  '('  ')'] 
__label__0 details.setProperty ( CONFIG_HASH_KEY , currentConfigHash ) 
__label__1 ['MapPutParameters.encodeSizeCost'  '('  'NAME'  ' '  'BYTES_DATA'  ' '  'BYTES_DATA'  ' '  'THE_LONG'  ' '  'THE_LONG'  ' '  'THE_BOOLEAN'  ')'] 
__label__1 ['getSslStoreProvider'  '('  ')'  '.getKeyStore'  '('  ')'] 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'attempting'  'to'  'login'  "''"  ')'] 
__label__1 ['!'  'regex.equals'  '('  'lastRegex'  ')'] 
__label__1 ['transactionalMap.put'  '('  'key'  ' '  'value'  ')'] 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__0 WORKER_SESSION_TIMEOUT_MS ( Name.WORKER_SESSION_TIMEOUT_MS,60000 ) 
__label__1 ['assertTrue'  '('  'jmsTemplate.isPubSubDomain'  '('  ')'  ')'] 
__label__1 ['Validate.configurationDirectoryExists'  '('  'javaHome'  ' '  "''"  'controllerJavaHome'  'must'  'exist'  'at'  '``'  '+'  'controllerJavaHome'  ')'] 
__label__1 ['testComplete'  '('  ')'] 
__label__1 ['urlToNotify.openConnection'  '('  ')'] 
__label__0 entry.getCheckName ( ) .equalsIgnoreCase ( checkAlias ) 
__label__0 waitYieldLatch.await ( 1000 , TimeUnit.MILLISECONDS ) 
__label__1 ['Class.forName'  '('  'injectorSourceClassName'  ')'] 
__label__1 ['AtmosphereResponse.create'  '('  ')'] 
__label__1 ['region.getRegionWidth'  '('  ')'] 
__label__0 @ Override public ExtendedCell deepClone ( ) { throw new UnsupportedOperationException ( ) ; } 
__label__1 ['message.getFormattedFields'  '('  ')'] 
__label__1 ['maxSize'  '>'  '('  'used'  '/'  '1024'  '/'  '1024'  ')'] 
__label__1 ['Integer.valueOf'  '('  'quantifier'  ')'] 
__label__0 mock.expectedBodiesReceivedInAnyOrder ( `` Hello World '' ) 
__label__0 `` unable to parse `` + optionStr 
__label__0 elementClass ! = null & & Modifier.isPublic ( elementClass.getModifiers ( ) ) 
__label__1 ['NetworkAddressUtils.assertValidPort'  '('  'Preconditions.checkNotNull'  '('  'address'  ')'  ' '  'mTachyonConf'  ')'] 
__label__0 assertMockEndpointsSatisfied ( ) 
__label__1 ['target.directory'  '('  '``'  'zk'  "''"  '+'  'id'  '+'  '``'  'data'  "''"  ')'] 
__label__0 DEFAULT_MAX_UNION_SIZE=30 
__label__1 ['camelContext.getExecutorServiceManager'  '('  ')'  '.shutdown'  '('  'timeoutCheckerExecutorService'  ')'] 
__label__1 ['entry.getName'  '('  ')'  '.startsWith'  '('  'BOOT_INF_CLASSES'  ')'] 
__label__1 ['new'  'S3DataSegmentMover'  '('  'mockS3Client'  ')'] 
__label__1 ['req.getRequestURI'  '('  ')'] 
__label__1 ['!'  'remoteTableHandle.isPresent'  '('  ')'] 
__label__0 log.debug ( `` Performing lookup : % s -- > % s '' , nodeIds , retVal ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['public'  'class'  'DefaultDynamicTransformerRegistry'  'implements'  'DynamicTrnasformerRegistry'  '{'  'private'  'final'  'Logger'  'logger=LoggerFactory.getLogger'  '('  'this.getClass'  '('  ')'  ')'  ';'  'private'  'final'  'ConcurrentMap'  '<'  'TransformerKey'  ' '  'ClassFileTransformer'  '>'  'transformerMap=new'  'ConcurrentHashMap'  '<'  'TransformerKey'  ' '  'ClassFileTransformer'  '>'  '('  ')'  ';'  '@'  'Override'  'public'  'void'  'onRetransformRequest'  '('  'Class'  '<'  '?'  '>'  'target'  ' '  'final'  'ClassFileTransformer'  'transformer'  ')'  '{'  'add'  '('  'target.getClassLoader'  '('  ')'  ' '  'target.getName'  '('  ')'  ' '  'transformer'  ')'  ';'  'if'  '('  'logger.isInfoEnabled'  '('  ')'  ')'  '{'  'logger.info'  '('  '``'  'added'  'retransformer'  'classLoader'  ':'  '{'  '}'  ' '  'class'  ':'  '{'  '}'  ' '  'registry'  'size'  ':'  '{'  '}'  "''"  ' '  'target.getClassLoader'  '('  ')'  ' '  'target.getName'  '('  ')'  ' '  'transformerMap.size'  '('  ')'  ')'  ';'  '}'  '}'  '@'  'Override'  'public'  'void'  'onTransformRequest'  '('  'ClassLoader'  'classLoader'  ' '  'String'  'targetClassName'  ' '  'ClassFileTransformer'  'transformer'  ')'  '{'  'add'  '('  'classLoader'  ' '  'targetClassName'  ' '  'transformer'  ')'  ';'  'if'  '('  'logger.isInfoEnabled'  '('  ')'  ')'  '{'  'logger.info'  '('  '``'  'added'  'dynamic'  'transformer'  'classLoader'  ':'  '{'  '}'  ' '  'className'  ':'  '{'  '}'  ' '  'registry'  'size'  ':'  '{'  '}'  "''"  ' '  'classLoader'  ' '  'targetClassName'  ' '  'transformerMap.size'  '('  ')'  ')'  ';'  '}'  '}'  'private'  'void'  'add'  '('  'ClassLoader'  'classLoader'  ' '  'String'  'targetClassName'  ' '  'ClassFileTransformer'  'transformer'  ')'  '{'  'ClassFileTransformer'  'prev=transformerMap.putIfAbsent'  '('  'new'  'TransformerKey'  '('  'classLoader'  ' '  'targetClassName.replace'  '('  "'"  '.'  "'"  ' '  "'/"  "'"  ')'  ')'  ' '  'transformer'  ')'  ';'  'if'  '('  'prev'  '!'  '='  'null'  ')'  '{'  'throw'  'new'  'ProfilerException'  '('  '``'  'Transformer'  'already'  'exists'  '.'  'classLoader'  ':'  '``'  '+'  'classLoader'  '+'  '``'  ' '  'target'  ':'  '``'  '+'  'targetClassName+'  '``'  ' '  'transformer'  ':'  '``'  '+'  'prev'  ')'  ';'  '}'  '}'  '@'  'Override'  'public'  'ClassFileTransformer'  'getTransformer'  '('  'ClassLoader'  'classLoader'  ' '  'String'  'targetClassName'  ')'  '{'  'if'  '('  'transformerMap.isEmpty'  '('  ')'  ')'  '{'  'return'  'null'  ';'  '}'  'ClassFileTransformer'  'transformer=transformerMap.remove'  '('  'new'  'TransformerKey'  '('  'classLoader'  ' '  'targetClassName'  ')'  ')'  ';'  'if'  '('  'logger.isDebugEnabled'  '('  ')'  ')'  '{'  'logger.info'  '('  '``'  'removed'  'dynamic'  'transformer'  'classLoader'  ':'  '{'  '}'  ' '  'className'  ':'  '{'  '}'  ' '  'registry'  'size'  ':'  '{'  '}'  "''"  ' '  'classLoader'  ' '  'targetClassName'  ' '  'transformerMap.size'  '('  ')'  ')'  ';'  '}'  'return'  'transformer'  ';'  '}'  'private'  'static'  'final'  'class'  'TransformerKey'  '{'  'private'  'final'  'ClassLoader'  'classLoader'  ';'  'private'  'final'  'String'  'targetClassName'  ';'  'public'  'TransformerKey'  '('  'ClassLoader'  'classLoader'  ' '  'String'  'targetClassName'  ')'  '{'  'this.classLoader=classLoader'  ';'  'this.targetClassName=targetClassName'  ';'  '}'  '@'  'Override'  'public'  'int'  'hashCode'  '('  ')'  '{'  'return'  'classLoader.hashCode'  '('  ')'  '*'  '31'  '+'  'targetClassName.hashCode'  '('  ')'  ';'  '}'  '@'  'Override'  'public'  'boolean'  'equals'  '('  'Object'  'obj'  ')'  '{'  'TransformerKey'  'other='  '('  'TransformerKey'  ')'  'obj'  ';'  'return'  'this.classLoader.equals'  '('  'other.classLoader'  ')'  '&'  '&'  'this.targetClassName.equals'  '('  'other.targetClassName'  ')'  ';'  '}'  '}'  '}'] 
__label__0 NodeUtil.getFunctionNameNode ( fn ) 
__label__0 / * * * Executes the given task in a new thread that is authenticated as the daemon user . < br/ > < br/ > This can only be called from { @ link TimerSchedulerTask } during actual task execution * @ param task the task to run * @ should not be called from other methods other than TimerSchedulerTask * @ should not throw error if called from a TimerSchedulerTask class * / public static void executeScheduledTask ( final Task task ) throws Exception { Class < ? > callerClass=new OpenmrsSecurityManager ( ) .getCallerClass ( 0 ) ; if ( ! TimerSchedulerTask.class.isAssignableFrom ( callerClass ) ) { throw new APIException ( `` This method can only be called from the TimerSchedulerTask class , not `` + callerClass.getName ( ) ) ; } DaemonThread executeTaskThread=new DaemonThread ( ) { @ Override public void run ( ) { isDaemonThread.set ( true ) ; try { Context.openSession ( ) ; TimerSchedulerTask.execute ( task ) ; } catch ( Exception e ) { exceptionThrown=e ; } finally { Context.closeSession ( ) ; } } } ; executeTaskThread.start ( ) ; try { executeTaskThread.join ( ) ; } catch ( InterruptedException e ) { } if ( executeTaskThread.exceptionThrown ! = null ) { throw executeTaskThread.exceptionThrown ; } } 
__label__0 ( BeanDefinitionRegistry ) beanFactory 
__label__1 ['new'  'JSONObject'  '('  ')'] 
__label__1 ['Object'  'strongReference'] 
__label__1 ['latch.countDownFirst'  '('  ')'] 
__label__1 ['items'  '['  '19'  ']'] 
__label__0 String.format ( `` /subsystem=elytron/filesystem-realm= % s/identity= % s : add-attribute ( name=groups , value= [ % s ] ) '' , name , user.getName ( ) , String.join ( `` , '' , user.getRoles ( ) ) ) 
__label__1 ['ps.setString'  '('  'i'  ' '  'parameter'  ')'] 
__label__0 level < RF_STATUS_HIGH_SIGNAL 
__label__1 ['LOG.trace'  '('  '``'  'Terminating'  'gRPC'  'server'  "''"  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getApiBaseURL'  '('  ')'  '+'  'V1'  '+'  'user+'  '``'  '/lists/'  "''"  '+'  'id+'  '``'  '/statuses.json'  "''"  ' '  'new'  'PostParameter'  '['  '0'  ']'  ' '  'paging.asPostParameterList'  '('  'Paging.SMCP'  ' '  'Paging.PER_PAGE'  ')'  ' '  'true'  ')'  ')'] 
__label__0 relationship ( 19 , c , '' KNOWS '' , d ) 
__label__1 ['SampleCacheApplication.class'] 
__label__1 ['synchronized'  '('  'conn'  ')'  '{'  'this.conn=conn'  ';'  'this.stream=stream'  ';'  'stream.beginRequest'  '('  'this'  ')'  ';'  'if'  '('  'pendingMaxSize'  '!'  '='  '-1'  ')'  '{'  'this.stream.doSetWriteQueueMaxSize'  '('  'pendingMaxSize'  ')'  ';'  '}'  'if'  '('  'pendingChunks'  '!'  '='  'null'  ')'  '{'  'ByteBuf'  'pending=pendingChunks'  ';'  'pendingChunks=null'  ';'  'if'  '('  'completed'  ')'  '{'  'writeHeadWithContent'  '('  'pending'  ' '  'true'  ')'  ';'  'conn.reportBytesWritten'  '('  'written'  ')'  ';'  'if'  '('  'respHandler'  '!'  '='  'null'  ')'  '{'  'this.stream.endRequest'  '('  ')'  ';'  '}'  '}'  'else'  '{'  'writeHeadWithContent'  '('  'pending'  ' '  'false'  ')'  ';'  'if'  '('  'headersCompletionHandler'  '!'  '='  'null'  ')'  '{'  'headersCompletionHandler.handle'  '('  'stream.version'  '('  ')'  ')'  ';'  '}'  '}'  '}'  'else'  '{'  'if'  '('  'completed'  ')'  '{'  'writeHeadWithContent'  '('  'Unpooled.EMPTY_BUFFER'  ' '  'true'  ')'  ';'  'conn.reportBytesWritten'  '('  'written'  ')'  ';'  'if'  '('  'respHandler'  '!'  '='  'null'  ')'  '{'  'this.stream.endRequest'  '('  ')'  ';'  '}'  '}'  'else'  '{'  'if'  '('  'writeHead'  ')'  '{'  'writeHead'  '('  ')'  ';'  'if'  '('  'headersCompletionHandler'  '!'  '='  'null'  ')'  '{'  'headersCompletionHandler.handle'  '('  'stream.version'  '('  ')'  ')'  ';'  '}'  '}'  '}'  '}'  '}'] 
__label__0 new NullOutputOperatorFactory ( operatorId , sourceTypes ) 
__label__1 ['request.getRequestURI'  '('  ')'] 
__label__0 ErrorPageFilter.class 
__label__1 ['checkpointPath.getPath'  '('  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__0 config.getIdleConnectionInPoolTimeoutInMs ( ) 
__label__0 targetDirectory.file ( `` unwritable '' ) 
__label__1 ['public'  'class'  'TimesNewRoman'  'extends'  'FontMetrics'  '{'  '{'  'maxCharHeight=717'  ';'  'widths'  '['  '32'  ']'  '=250'  ';'  'widths'  '['  '33'  ']'  '=333'  ';'  'widths'  '['  '34'  ']'  '=408'  ';'  'widths'  '['  '35'  ']'  '=500'  ';'  'widths'  '['  '36'  ']'  '=500'  ';'  'widths'  '['  '37'  ']'  '=833'  ';'  'widths'  '['  '38'  ']'  '=777'  ';'  'widths'  '['  '39'  ']'  '=180'  ';'  'widths'  '['  '40'  ']'  '=333'  ';'  'widths'  '['  '41'  ']'  '=333'  ';'  'widths'  '['  '42'  ']'  '=500'  ';'  'widths'  '['  '43'  ']'  '=563'  ';'  'widths'  '['  '44'  ']'  '=250'  ';'  'widths'  '['  '45'  ']'  '=333'  ';'  'widths'  '['  '46'  ']'  '=250'  ';'  'widths'  '['  '47'  ']'  '=277'  ';'  'widths'  '['  '48'  ']'  '=500'  ';'  'widths'  '['  '49'  ']'  '=500'  ';'  'widths'  '['  '50'  ']'  '=500'  ';'  'widths'  '['  '51'  ']'  '=500'  ';'  'widths'  '['  '52'  ']'  '=500'  ';'  'widths'  '['  '53'  ']'  '=500'  ';'  'widths'  '['  '54'  ']'  '=500'  ';'  'widths'  '['  '55'  ']'  '=500'  ';'  'widths'  '['  '56'  ']'  '=500'  ';'  'widths'  '['  '57'  ']'  '=500'  ';'  'widths'  '['  '58'  ']'  '=277'  ';'  'widths'  '['  '59'  ']'  '=277'  ';'  'widths'  '['  '60'  ']'  '=563'  ';'  'widths'  '['  '61'  ']'  '=563'  ';'  'widths'  '['  '62'  ']'  '=563'  ';'  'widths'  '['  '63'  ']'  '=443'  ';'  'widths'  '['  '64'  ']'  '=920'  ';'  'widths'  '['  '65'  ']'  '=722'  ';'  'widths'  '['  '66'  ']'  '=666'  ';'  'widths'  '['  '67'  ']'  '=666'  ';'  'widths'  '['  '68'  ']'  '=722'  ';'  'widths'  '['  '69'  ']'  '=610'  ';'  'widths'  '['  '70'  ']'  '=556'  ';'  'widths'  '['  '71'  ']'  '=722'  ';'  'widths'  '['  '72'  ']'  '=722'  ';'  'widths'  '['  '73'  ']'  '=333'  ';'  'widths'  '['  '74'  ']'  '=389'  ';'  'widths'  '['  '75'  ']'  '=722'  ';'  'widths'  '['  '76'  ']'  '=610'  ';'  'widths'  '['  '77'  ']'  '=889'  ';'  'widths'  '['  '78'  ']'  '=722'  ';'  'widths'  '['  '79'  ']'  '=722'  ';'  'widths'  '['  '80'  ']'  '=556'  ';'  'widths'  '['  '81'  ']'  '=722'  ';'  'widths'  '['  '82'  ']'  '=666'  ';'  'widths'  '['  '83'  ']'  '=556'  ';'  'widths'  '['  '84'  ']'  '=610'  ';'  'widths'  '['  '85'  ']'  '=722'  ';'  'widths'  '['  '86'  ']'  '=722'  ';'  'widths'  '['  '87'  ']'  '=943'  ';'  'widths'  '['  '88'  ']'  '=722'  ';'  'widths'  '['  '89'  ']'  '=722'  ';'  'widths'  '['  '90'  ']'  '=610'  ';'  'widths'  '['  '91'  ']'  '=333'  ';'  'widths'  '['  '92'  ']'  '=277'  ';'  'widths'  '['  '93'  ']'  '=333'  ';'  'widths'  '['  '94'  ']'  '=469'  ';'  'widths'  '['  '95'  ']'  '=500'  ';'  'widths'  '['  '96'  ']'  '=333'  ';'  'widths'  '['  '97'  ']'  '=443'  ';'  'widths'  '['  '98'  ']'  '=500'  ';'  'widths'  '['  '99'  ']'  '=443'  ';'  'widths'  '['  '100'  ']'  '=500'  ';'  'widths'  '['  '101'  ']'  '=443'  ';'  'widths'  '['  '102'  ']'  '=333'  ';'  'widths'  '['  '103'  ']'  '=500'  ';'  'widths'  '['  '104'  ']'  '=500'  ';'  'widths'  '['  '105'  ']'  '=277'  ';'  'widths'  '['  '106'  ']'  '=277'  ';'  'widths'  '['  '107'  ']'  '=500'  ';'  'widths'  '['  '108'  ']'  '=277'  ';'  'widths'  '['  '109'  ']'  '=777'  ';'  'widths'  '['  '110'  ']'  '=500'  ';'  'widths'  '['  '111'  ']'  '=500'  ';'  'widths'  '['  '112'  ']'  '=500'  ';'  'widths'  '['  '113'  ']'  '=500'  ';'  'widths'  '['  '114'  ']'  '=333'  ';'  'widths'  '['  '115'  ']'  '=389'  ';'  'widths'  '['  '116'  ']'  '=277'  ';'  'widths'  '['  '117'  ']'  '=500'  ';'  'widths'  '['  '118'  ']'  '=500'  ';'  'widths'  '['  '119'  ']'  '=722'  ';'  'widths'  '['  '120'  ']'  '=500'  ';'  'widths'  '['  '121'  ']'  '=500'  ';'  'widths'  '['  '122'  ']'  '=443'  ';'  'widths'  '['  '123'  ']'  '=479'  ';'  'widths'  '['  '124'  ']'  '=200'  ';'  'widths'  '['  '125'  ']'  '=479'  ';'  'widths'  '['  '126'  ']'  '=541'  ';'  '}'  '}'] 
__label__1 ['logger.debug'  '('  '``'  'MyQ'  'binding'  'received'  'command'  "'"  '{'  '}'  "'"  'for'  'item'  "'"  '{'  '}'  "'"  "''"  ' '  'command'  ' '  'itemName'  ')'] 
__label__0 ChronicleEngineEndpoint endpoint 
__label__0 nameTextField.getText ( ) 
__label__1 ['exportReturnCodes'  '('  'exporter'  ')'] 
__label__0 incomingMessage.setTransactionCanceled ( true ) 
__label__1 ['lastCompletedOffset'  '!'  '='  'lastCompletedOffset'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['mail.getClass'  '('  ')'  '.getName'  '('  ')'] 
__label__1 ['getTimeout'  '('  ')'] 
__label__0 0.0 == CheckUtils.parseFloat ( text , type ) 
__label__0 type.toLowerCase ( ENGLISH ) 
__label__0 logger.trace ( `` Session destroyed '' ) 
__label__0 this.connectTo ( vertex , null , null , indexOfOutputGate , indexOfInputGate , DistributionPattern.BIPARTITE , true ) 
__label__0 privObj.getObjectName ( ) .equals ( `` masking_test_druid '' ) || privObj.getObjectName ( ) .startsWith ( `` masking_test_druid_n '' ) 
__label__1 ['page.getSizeInBytes'  '('  ')'] 
__label__0 mLocalAlluxioClusterResource.get ( ) .getWorker ( ) 
__label__0 new StringBuilder ( 245 ) 
__label__0 assertEquals ( 9 , tokens.size ( ) ) 
__label__0 callback.done ( false ) 
__label__1 ['model.getEnum'  '('  ')'  '.size'  '('  ')'  '=='  '2'] 
__label__1 ['ImmutableList'  '<'  'HostAddress'  '>'] 
__label__1 ['s.count'  '('  ')'] 
__label__1 ['public'  'DerivedBuilder'  'setProxyPrincipal'  '('  'String'  'principal'  ')'  '{'  'this.proxyPrincipal=principal'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['broadcasterFactoryClassName'  '!'  '='  'null'] 
__label__0 CsvReporter.forRegistry ( registry ) .convertDurationsTo ( getDurationUnit ( ) ) .convertRatesTo ( getRateUnit ( ) ) 
__label__0 hz1.getLifecycleService ( ) .shutdown ( ) 
__label__0 @ InputMagicNumberIntMethodAnnotation ( 42 ) 
__label__1 ['LOG.error'  '('  'e'  ' '  "''"  'Unexpected'  'failure'  'when'  'handling'  'parsing'  'error'  '.'  'This'  'is'  'likely'  'a'  'bug'  'in'  'the'  'implementation'  "''"  ')'] 
__label__1 ['IR.var'  '('  'IR.name'  '('  'shortName'  ')'  ' '  'googRequireNode'  ')'] 
__label__0 connection.remote ( ) .incrementAndGetNextStreamId ( ) 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'freeSpace'  ':'  'No'  'StorageDirView'  'has'  'enough'  'capacity'  'of'  '{'  '}'  'bytes'  "''"  ' '  'availableBytes'  ')'] 
__label__1 ['mjCtx.getOldMapJoin'  '('  ')'  '=='  'null'] 
__label__1 ['Arrays.asList'  '('  'CoreAnnotations.TextAnnotation.class'  ' '  'CoreAnnotations.TokensAnnotation.class'  ' '  'CoreAnnotations.CharacterOffsetBeginAnnotation.class'  ' '  'CoreAnnotations.CharacterOffsetEndAnnotation.class'  ' '  'CoreAnnotations.IsNewlineAnnotation.class'  ')'] 
__label__1 ['app.configuration'  '('  ')'  '.getString'  '('  '``'  'timezone'  "''"  ')'] 
__label__1 ['new'  'ModelNode'  '('  ')'  '.set'  '('  '60000'  ')'] 
__label__0 log.error ( `` Error while closing command context '' , exception ) 
__label__0 StringBuilder pattern=new StringBuilder ( this.prefix ) ; 
__label__1 ['adapter.getArgumentResolvers'  '('  ')'] 
__label__1 ['username.length'  '('  ')'] 
__label__0 bLocations [ 0 ] .getHosts ( ) 
__label__0 serverService.getOutgoingInterceptors ( ) 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['Arrays.asList'  '('  '``'  'spring-boot-starter-tomcat-'  "''"  ' '  "''"  'tomcat-embed-core-'  "''"  ' '  "''"  'tomcat-embed-el-'  "''"  ' '  "''"  'tomcat-embed-logging-juli-'  "''"  ' '  "''"  'tomcat-embed-websocket-'  "''"  ')'] 
__label__0 Long.parseLong ( args [ 1 ] ) 
__label__0 util.getDataTestDirOnTestFS ( table ) 
__label__1 ['LOGGER.debug'  '('  '``'  'Unable'  'to'  'process'  'JSON'  "''"  ' '  'exception'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'favorites.json'  "''"  ' '  'new'  'PostParameter'  '['  '0'  ']'  ' '  'true'  ')'  ')'] 
__label__1 ['GL20.glUniform1'  '('  'location'  ' '  'toIntBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  ')'  ')'] 
__label__1 ['test'  '('  '``'  'var'  'foo'  '='  'function'  '('  'module'  ')'  '{'  'module.exports'  '='  '{'  '}'  ';'  '}'  ';'  "''"  '+'  '``'  'module.exports'  '='  'foo'  ';'  "''"  ' '  "''"  'goog.provide'  '('  "'module"  '$'  'test'  "'"  ')'  ';'  "''"  '+'  '``'  'var'  'foo'  '$'  '$'  'module'  '$'  'test=function'  '('  'module'  ')'  '{'  'module.exports='  '{'  '}'  '}'  ';'  "''"  '+'  '``'  'var'  'module'  '$'  'test=foo'  '$'  '$'  'module'  '$'  'test'  "''"  ')'] 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__0 new LwjglPreferences ( name , '' .prefs/ '' ) 
__label__1 ['public'  'void'  'testJobQueues'  '('  ')'  'throws'  'IOException'  '{'  'JobClient'  'jc=new'  'JobClient'  '('  'mrCluster.createJobConf'  '('  ')'  ')'  ';'  'String'  'expectedQueueInfo='  "''"  'Maximum'  'Tasks'  'Per'  'Job'  ':'  ':'  '10'  "''"  ';'  'JobQueueInfo'  '['  ']'  'queueInfos=jc.getQueues'  '('  ')'  ';'  'assertNotNull'  '('  'queueInfos'  ')'  ';'  'assertEquals'  '('  '1'  ' '  'queueInfos.length'  ')'  ';'  'assertEquals'  '('  '``'  'default'  "''"  ' '  'queueInfos'  '['  '0'  ']'  '.getQueueName'  '('  ')'  ')'  ';'  'assertEquals'  '('  'QueueState.RUNNING.getStateName'  '('  ')'  ' '  'queueInfos'  '['  '0'  ']'  '.getQueueState'  '('  ')'  ')'  ';'  'JobConf'  'conf=mrCluster.createJobConf'  '('  ')'  ';'  'FileSystem'  'fileSys=dfsCluster.getFileSystem'  '('  ')'  ';'  'conf=configureWaitingJob'  '('  'conf'  ')'  ';'  'conf.setJobName'  '('  '``'  'test-job-queue-info-test'  "''"  ')'  ';'  'fileSys.delete'  '('  'SHARE_DIR'  ' '  'true'  ')'  ';'  'RunningJob'  'rJob=jc.submitJob'  '('  'conf'  ')'  ';'  'while'  '('  'rJob.getJobState'  '('  ')'  '!'  '='  'JobStatus.RUNNING'  ')'  '{'  'UtilsForTests.waitFor'  '('  '10'  ')'  ';'  '}'  'int'  'numberOfJobs=0'  ';'  'for'  '('  'JobQueueInfo'  'queueInfo'  ':'  'queueInfos'  ')'  '{'  'JobStatus'  '['  ']'  'jobStatusList=jc.getJobsFromQueue'  '('  'queueInfo.getQueueName'  '('  ')'  ')'  ';'  'assertNotNull'  '('  'queueInfo.getQueueName'  '('  ')'  ')'  ';'  'assertNotNull'  '('  'queueInfo.getSchedulingInfo'  '('  ')'  ')'  ';'  'assertEquals'  '('  'expectedQueueInfo'  ' '  'queueInfo.getSchedulingInfo'  '('  ')'  ')'  ';'  'numberOfJobs+=jobStatusList.length'  ';'  'for'  '('  'JobStatus'  'status'  ':'  'jobStatusList'  ')'  '{'  'assertEquals'  '('  'JOB_SCHEDULING_INFO'  ' '  'status.getSchedulingInfo'  '('  ')'  ')'  ';'  '}'  '}'  'assertEquals'  '('  '1'  ' '  'numberOfJobs'  ')'  ';'  'UtilsForTests.signalTasks'  '('  'dfsCluster'  ' '  'fileSys'  ' '  'getSignalFile'  '('  ')'  ' '  'getSignalFile'  '('  ')'  ' 4'  ')'  ';'  '}'] 
__label__1 ['processSelectedKeys'  '('  ')'] 
__label__1 ['modulePath.split'  '('  'File.pathSeparator'  ')'  '['  '1'  ']'] 
__label__1 ['items'  '['  '31'  ']'] 
__label__1 ['System.currentTimeMillis'  '('  ')'  '-'  'start'  '+'  '200'] 
__label__0 JSError.make ( boundFunNode , GOOG_BIND_EXPECTS_FUNCTION , pair.type.toString ( ) ) 
__label__0 Color.fromRGB ( 0x41CD34 ) 
__label__0 addKeys ( externalClasses , DATE_TIME , '' org.joda.time.DateTime '' , '' org.joda.time.ReadableDateTime '' , '' javax.xml.datatype.XMLGregorianCalendar '' , '' java.time.LocalDateTime '' ) 
__label__0 responseFilters.isEmpty ( ) 
__label__1 ['principalCookieName'  '!'  '='  'null'] 
__label__1 ['DefaultBroadcaster.class.cast'  '('  'resource.getBroadcaster'  '('  ')'  ')'  '.broadcasterCache.retrieveFromCache'  '('  'resource'  ')'] 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__0 closedChannelException == null 
__label__1 ['executor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'ping'  '%'  '08x'  '%'  '08x'  "''"  ' '  'hostName'  ' '  'payload1'  ' '  'payload2'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'writePing'  '('  'reply'  ' '  'payload1'  ' '  'payload2'  ' '  'ping'  ')'  ';'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__0 SSOTestBase.executeFormAuthSingleSignOnTest ( baseURLNoAuth , baseURLNoAuth , log ) 
__label__1 ['root.toURL'  '('  ')'] 
__label__1 ['Foundation.NSLog'  '('  '``'  '['  'error'  ']'  '``'  '+'  'tag'  '+'  '``'  ':'  '``'  '+'  'message'  ')'] 
__label__0 statistics.addPutTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['Preconditions.checkNotNull'  '('  'manager'  ')'] 
__label__0 nlDataOutNodes ! = null & & nlDataOutNodes.getLength ( ) > 0 
__label__0 getOrCreateConnectionFactory ( ) 
__label__0 REMOVE_TIME_TAKEN_NANOS_UPDATER.compareAndSet ( this , nanos , duration ) 
__label__1 ['COUNT_DATABASE.put'  '('  'key'  ' '  'val'  ')'] 
__label__0 client.getState ( ) .setProxyCredentials ( new AuthScope ( null , -1 , AuthScope.ANY_REALM ) , defaultcreds ) 
__label__1 ['200000'  '*'  '4'  '*'  '3'] 
__label__1 ['new'  'MMUnlockHandler'  '('  'this'  ')'] 
__label__0 javaBeanSerializer.getFieldValues ( javaObject , json ) 
__label__0 LOG.debug ( `` Creating short circuit output stream for block { } @ { } '' , blockId , address ) 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  ')'] 
__label__1 ['transitiveClosure.setNumberOfPartitions'  '('  '6'  ')'] 
__label__1 ['``'  'Using'  'bind'  'address'  ':'  '``'  '+'  'publicAddress'] 
__label__1 ['subProperties.put'  '('  'subName'  ' '  'value'  ')'] 
__label__0 EnumSet.of ( DatabaseDriver.UNKNOWN , DatabaseDriver.ORACLE , DatabaseDriver.DB2 , DatabaseDriver.DB2_AS400 , DatabaseDriver.INFORMIX , DatabaseDriver.SAP , DatabaseDriver.TERADATA ) 
__label__0 assertEquals ( 1 , map.size ( ) ) 
__label__1 ['isNotNull'  '('  'overriderParameters.get'  '('  'i'  ')'  ')'  '&'  '&'  '!'  '('  'isNullable'  '('  'overriddenParameters.get'  '('  'i'  ')'  ')'  '||'  'isNotNull'  '('  'overriddenParameters.get'  '('  'i'  ')'  ')'  ')'] 
__label__1 ['tsr.getReturnCode'  '('  ')'  '!'  '='  'AbstractTaskResult.ReturnCode.SUCCESS'  '||'  'tsr.getReturnCode'  '('  ')'  '!'  '='  'AbstractTaskResult.ReturnCode.TASK_NOT_FOUND'] 
__label__1 ['this.categoryWithApiModel=categoryWithApiModel'] 
__label__0 LOG.warn ( `` OpenTracing : Failed to capture tracing data '' , t ) 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'mongo'  "''"  ')'] 
__label__1 ['new'  'RuntimeException'  '('  '``'  'Could'  'not'  'lookup'  'jndi'  'name'  ':'  '``'  '+'  'namespaceStrippedJndiName'  '+'  '``'  'in'  'context'  ':'  '``'  '+'  'jndiContext'  ' '  'ne'  ')'] 
__label__1 ['cache.setRecord'  '('  'key'  ' '  'record'  ')'] 
__label__1 ['EXTFramebufferObject.glGetRenderbufferParameterEXT'  '('  'target'  ' '  'pname'  ' '  'params'  ')'] 
__label__1 ['Map'  '<'  'String'  ' '  'String'  '>'] 
__label__1 ['logger.error'  '('  '``'  '['  '{'  '}'  ']'  ':'  'Websocket'  'error'  ':'  '{'  '}'  "''"  ' '  'connection.getHost'  '('  ')'  ' '  'e.getMessage'  '('  ')'  ')'] 
__label__0 new StringLengthValidator ( 1 , true , true ) 
__label__0 GL.glBindTexture ( target , texture ) 
__label__1 ['parameter.toString'  '('  ')'] 
__label__1 ['config.getIdleConnectionTimeoutInMs'  '('  ')'  '>'  '0'] 
__label__0 processor.open ( w , request , AtmosphereResponse.newInstance ( framework.getAtmosphereConfig ( ) , request , w ) ) 
__label__0 elementClass ! = null & & Modifier.isPublic ( elementClass.getModifiers ( ) ) 
__label__1 ['modelNode.has'  '('  'LOCAL'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '730'  ')'] 
__label__0 connector.getFilterChain ( ) 
__label__0 telegram.getTimestamp ( ) > currentTime 
__label__0 cachedMemoryUsageBytes < = softMemoryLimitBytes 
__label__1 ['Foundation.NSLog'  '('  '``'  '['  'info'  ']'  '``'  '+'  'tag'  '+'  '``'  ':'  '``'  '+'  'message'  ')'] 
__label__1 ['recursiveUFSDeletes.remove'  '('  'ancestor'  ')'] 
__label__0 meta.setContentType ( Mimetypes.MIMETYPE_OCTET_STREAM ) 
__label__1 ['LOG.warn'  '('  '``'  'Promotion'  'of'  'block'  '``'  '+'  'blockId'  '+'  '``'  'failed'  '.'  '``'  ' '  'ioe'  ')'] 
__label__1 ['mFixedExecutionService.shutdown'  '('  ')'] 
__label__0 new MapJsonReader ( streamDescriptor , writeStackType , checkForNulls , hiveStorageTimeZone , sessionTimeZone ) 
__label__0 lexer.token ( ) == ( Token.SELECT ) || lexer.token ( ) == ( Token.SEL ) 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__0 Integer.parseInt ( options.getMaxKeys ( ) ) 
__label__0 new StringBuilder ( 120 ) 
__label__0 HttpHeaderValues.IDENTITY.contentEquals ( targetContentEncoding ) 
__label__1 ['matcher.groupCount'  '('  ')'  '>'  '0'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['getConnectionFactory'  '('  ')'] 
__label__1 ['factory.get'  '('  'sBodyGeneric'  ' '  'NO_ANNOTATIONS'  ' '  'retrofit'  ')'] 
__label__1 ['runPartialSorter'  '('  'sorter'  ' '  'NUM_RECORDS 28'  ')'] 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__0 processor.open ( w , request , AtmosphereResponse.newInstance ( framework.getAtmosphereConfig ( ) , request , w ) ) 
__label__1 ['complete.expectedBodiesReceived'  '('  '``'  'finish'  "''"  ' '  "''"  'stop'  "''"  ' '  "''"  'faulted'  "''"  ' '  "''"  'except'  "''"  ')'] 
__label__0 c.writeAndFlush ( `` [ you ] `` + msg + '\n ' ) 
__label__0 ImmutableSet.copyOf ( modules ) 
__label__1 ['handshakeStatus'  '=='  'HandshakeStatus.NOT_HANDSHAKING'] 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__1 ['getMockEndpoint'  '('  '``'  'mock'  ':'  'test.after.1'  "''"  ')'  '.expectedMinimumMessageCount'  '('  '10'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Gets'  'the'  'key'  'of'  'bind'  'hostname'  '.'  '*'  '@'  'return'  'key'  'of'  'bind'  'hostname'  '*'  '/'  'public'  'String'  'getBindHostKey'  '('  ')'  '{'  'return'  'mBindHostKey'  ';'  '}'] 
__label__0 RequestBody.create ( ( byte [ ] ) bodyContents , mediaType ) 
__label__1 ['isNodeHealing'  '('  'node.getNodeId'  '('  ')'  ')'] 
__label__1 ['lastCompletedOffset'  '!'  '='  'lastCompletedOffset'] 
__label__1 ['deserialze'  '('  'parser'  ' '  'type'  ' '  'fieldName'  ' '  'null 0'  ' '  'null'  ')'] 
__label__0 adapter.getCustomArgumentResolvers ( ) 
__label__0 QUEUE_TRANSACTION_LOG_RECORD=44 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweeted_by_me.json '' , null , true ) ) 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['``'  'wrong'  'partition'  ' '  'expected'  ':'  '``'  '+'  'getPartitionId'  '('  ')'  '+'  '``'  'but'  'found'  ':'  "''"  '+'  'op'] 
__label__0 ch == ' ? ' & & JdbcConstants.POSTGRESQL.equals ( dbType ) 
__label__1 ['BED'  '('  '99'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/user_timeline.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__0 TestSuiteEnvironment.getServerAddressNode1 ( ) 
__label__1 ['new'  'PoolBagEntry'  '('  'null'  ' '  'pool'  ')'] 
__label__1 ['uri.toString'  '('  ')'  '.equalsIgnoreCase'  '('  'future.getURI'  '('  ')'  '.toString'  '('  ')'  ')'] 
__label__1 ['expirationTime'  '=='  'Long.MAX_VALUE'  '&'  '&'  'expirationTime'  '<'  '0'] 
__label__0 Thread.sleep ( 4000 ) 
__label__1 ['connection.setFollowRedirects'  '('  'httpRequest.getFollowRedirects'  '('  ')'  ')'] 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__0 LinkedHashMap < String , Operator < ? extends Serializable > > 
__label__0 GL20.glUniform1fv ( location , toFloatBuffer ( v , offset , count ) ) 
__label__0 ParseUtils.parseS300THHumidity ( S300TH_DATA_1 ) 
__label__1 ['Validate.notEmpty'  '('  '``'  'Cookie'  'name'  'must'  'not'  'be'  'empty'  "''"  ')'] 
__label__1 ['typeSerializer.getClass'  '('  ')'] 
__label__1 ['GL20.glUniform3'  '('  'location'  ' '  'toFloatBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '*'  '3'  ')'  ')'] 
__label__0 this.getDefaultReadOnly ( ) 
__label__1 ['Assert.notNull'  '('  '``'  'No'  'cache'  'with'  'name'  "'"  "''"  '+'  'cacheName'  '+'  '``'  "'"  'found'  '.'  "''"  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__1 ['('  '('  'VarcharType'  ')'  'type'  ')'  '.getLength'  '('  ')'] 
__label__1 ['from'  '('  '``'  'direct'  ':'  'start'  "''"  ')'  '.aggregator'  '('  ')'  '.header'  '('  '``'  'id'  "''"  ')'  '.batchTimeout'  '('  '2000L'  ')'] 
__label__1 ['public'  'IMetric'  'registerMetric'  '('  'String'  'name'  ' '  'IReducer'  'reducer'  ' '  'int'  'timeBucketSizeInSecs'  ')'  '{'  'return'  '_topoContext.registerMetric'  '('  'name'  ' '  'new'  'ReducedMetric'  '('  'reducer'  ')'  ' '  'timeBucketSizeInSecs'  ')'  ';'  '}'] 
__label__0 Mockito.doNothing ( ) .when ( mFileSystemMasterClient ) .rename ( src , dst , renameOptions ) 
__label__1 ['ChronicleEngineEnpoint.class'] 
__label__0 methodsToImplement ( type , methods ) 
__label__0 LOG.warn ( `` Failed to get files from `` + baseDirectory.getAbsolutePath ( ) ) 
__label__1 ['executionManager.findChildExecutionsByParentExecutionId'  '('  'processInstanceId'  ')'] 
__label__1 ['('  'Object'  ')'  'x'] 
__label__1 ['model.getBoundingBox'  '('  'bbox'  ')'] 
__label__1 ['getPath'  '('  '``'  'InputPackageDeclarationDiffDirectoryAtSubpackage.java'  "''"  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/home_timeline.json '' , true ) ) 
__label__0 invocation.logger.finest ( `` 'is-executing ' : `` + executing + `` - > `` + invocation ) 
__label__1 ['globalSecurityDomain'  '!'  '='  'null'] 
__label__0 LOG.info ( `` Unable to read HTTP response content '' , e ) 
__label__1 ['log.errorf'  '('  '``'  'started'  'ResourceAdapterService'  '%'  's'  "''"  ' '  'context.getController'  '('  ')'  '.getName'  '('  ')'  ')'] 
__label__0 MD5Loader.loadModel ( Gdx.files.internal ( `` data/zfat.md5mesh '' ) .read ( ) , true ) 
__label__1 ['complete.expectedBodiesReceived'  '('  '``'  'finish'  "''"  ' '  "''"  'stop'  "''"  ' '  "''"  'faulted'  "''"  ' '  "''"  'except'  "''"  ')'] 
__label__0 LOG.warn ( `` Failed to write to TachyonStore stream , block `` + getCurrentBlockId ( ) + `` will not be in TachyonStorage . '' ) 
__label__0 GL20.glUniform3fv ( location , toFloatBuffer ( v , offset , count * 3 ) ) 
__label__0 WebAppUtils.getResolvedRMWebAppURLWithScheme ( new Configuration ( ) ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 app.getGraphics ( ) .newFont ( app.getFiles ( ) .getInternalFileHandle ( `` data/arial.ttf '' ) ,11 , FontStyle.Plain , true ) 
__label__0 role.description ( ) .orNull ( ) 
__label__1 ['AtmosphereResponse.create'  '('  ')'] 
__label__1 ['superClass'  '=='  'Object.class'] 
__label__1 ['FileUtil.compactPath'  '('  'path'  ')'] 
__label__0 initialCapacity > 1 < < 30 
__label__0 new IllegalArgumentException ( `` profession and name can not be null '' ) 
__label__1 ['new'  'URI'  '('  'parentUri.getScheme'  '('  ')'  ' '  'parentUri.getAuthority'  '('  ')'  ' '  'parentUri.getPath'  '('  ')'  '+'  'SEPARATOR'  ' '  'null'  ')'] 
__label__0 exchange.getResponse ( ) .setComplete ( ) 
__label__0 SystemPropertyUtil.getBoolean ( `` io.netty.noJdkZlibDecoder '' , true ) 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__1 ['mock.expectedMessageCount'  '('  '10'  ')'] 
__label__0 req.getSession ( ) .getMaxInactiveInterval ( ) * 1000L 
__label__0 logger.trace ( `` myq ReturnCode : { } '' , returnCode ) 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['new'  'Color'  '('  'pixels'  '['  'i'  ']'  ')'] 
__label__1 ['session'  '!'  '='  'null'] 
__label__1 ['factory.get'  '('  'sBodyWildcard'  ' '  'NO_ANNOTATIONS'  ' '  'retrofit'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Ignoring'  'duplicate'  'class'  '``'  '+'  'className'  ')'] 
__label__1 ['IllegalArgumentException'  'e'] 
__label__0 getCurrCapacityUsed ( ) 
__label__0 RCFileMergeMapper.jobClose ( outputPath , success , job , console ) 
__label__0 assertEquals ( 70008 , exchange.getIn ( ) .getBody ( ) .toString ( ) .length ( ) ) 
__label__1 ['grammar.getTokenNames'  '('  ')'] 
__label__0 Map < String , Object > 
__label__0 AnnotatedElementUtils.hasAnnotation ( type , Validated.class ) 
__label__0 ! query.getDimensionSpec ( ) .preservesOrdering ( ) 
__label__0 SSOTestBase.executeNoAuthSingleSignOnTest ( baseURLNoAuth , baseURLNoAuth , log ) 
__label__0 Integer.parseInt ( tokens [ 3 ] ) 
__label__1 ['Arrays.asList'  '('  'TYPE'  ' '  'SUBSCRIBE_TYPE'  ' '  'MESSAGE'  ' '  'TIMESTAMP'  ' '  'SIGNATURE'  ' '  'SIGNATURE_VERSION'  ' '  'MESSAGE_ID'  ' '  'SUBJECT'  ' '  'TOPIC'  ' '  'TOKEN'  ')'] 
__label__0 Namespace.CURRENT.getUriString ( ) 
__label__0 new ObjectRecordWithStats ( key , value ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/friends_timeline.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['sb.toString'  '('  ')'] 
__label__1 ['julLogger.info'  '('  '``'  'Hello'  'world'  "''"  ')'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__1 ['Wt.getSlice'  '('  'slice'  ')'  '.mult'  '('  'Wt.getSlice'  '('  'slice'  ')'  '.transpose'  '('  ')'  ')'] 
__label__0 beansXml.getOrCreateAlternatives ( ) 
__label__0 addListenerMethod2.addScopedInterceptor ( NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER , NettyConstants.SCOPE , ExecutionPolicy.BOUNDARY ) 
__label__1 ['UriBuilder.fromResource'  '('  'StreamAlertResource.class'  ')'  '.build'  '('  ')'] 
__label__0 LOG.error ( `` discarding { } messages because the Netty client to { } is being closed '' , numMessages , dstAddressPrefixedName ) 
__label__1 ['sendMessage'  '('  ')'  '=='  'false'] 
__label__0 checkpointPath.toString ( ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweeted_to_me.json '' , null , true ) ) 
__label__1 ['view.getClusteredLayerInDegree'  '('  'absNode'  ')'] 
__label__0 endpoint.expectedMinimumMessageCount ( 1 ) 
__label__0 prop.getParamValue ( ) 
__label__1 ['ssl.has'  '('  'CommonAttributes.CIPHER_SUITE'  ')'] 
__label__1 ['QuotaCache.this.namespaceQuotaCache.contains'  '('  'ns'  ')'] 
__label__1 ['prevNerEndIndex'  '!'  '='  '('  'start'  '-'  '1'  ')'  '&'  '&'  'nextNerStartIndex'  '!'  '='  'end'] 
__label__1 ['row'  '('  '``'  'p_comment'  "''"  ' '  'null 1.0 0.0'  ' '  'null'  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['new'  'PriorityTieredBrokerSelectorStrategy'  '('  '1 1'  ')'] 
__label__0 nameTextField.getText ( ) 
__label__1 ['assertEquals'  '('  '1'  ' '  'this.context.getBean'  '('  'FilterChainProxy.class'  ')'  '.getFilterChains'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__0 System.currentTimeMillis ( ) - start + 750 
__label__1 ['deployment.addServletContainerInitalizer'  '('  'new'  'ServletContainerInitializerInfo'  '('  'Initializer.class'  ' '  'new'  'ImmediateInstanceFactory'  '<'  'ServletContainerInitializer'  '>'  '('  'initializer'  ')'  ' '  'NO_CLASSES'  ')'  ')'] 
__label__1 ['@'  'UnrelatedOne'] 
__label__1 ['hasNextChunk'  '('  ')'] 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__1 ['connectionManager.markOwnerAddressAsClosed'  '('  ')'] 
__label__1 ['this.transactionsRepository.removeTransaction'  '('  'this.xidTransactionID'  ')'] 
__label__1 ['testWarning'  '('  'js'  ' '  'VariableReferenceCheck.REDECLARED_VARIABLE'  ')'] 
__label__0 log.error ( `` PID contains identifier with no assigning authority '' ) 
__label__0 getRequestMethod ! = null 
__label__1 ['connectionTimeout'  '/'  '2'] 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__0 ! regex.equals ( lastRegex ) || p == null 
__label__1 ['reg.getCounters'  '('  'transformFilter'  '('  'filter'  ')'  ')'] 
__label__1 ['IllegalArgumentException'  'e'] 
__label__0 target.addTaskAndWakeup ( task ) 
__label__0 annotation == OriginalType.MAP || annotation == OriginalType.MAP_KEY_VALUE 
__label__0 ! isNodeHealing ( node.getNodeId ( ) ) 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__0 KBP_MINIMUM_SCORE=.456 
__label__0 DiagnosticType.error ( `` JSC_GOOG_MODULE_IN_NON_MODULE '' , '' goog.module ( ) call must be the first statement in a module . '' ) 
__label__0 Assert.fail ( String.format ( `` Expected file % s being deleted but it was not . `` , filePath ) ) 
__label__0 mapper.getFactory ( ) 
__label__0 DiagnosticType.error ( `` JSC_INVALID_MODULE_PATH '' , '' Invalid module path \ '' { 0 } \ '' for resolution mode \ '' { 1 } \ '' '' ) 
__label__0 TestSuiteEnvironment.getHttpAddress ( ) 
__label__1 ['('  'Integer'  ')'  'criteria.uniqueResult'  '('  ')'] 
__label__0 heartBeatTimerTask ! = null & & heartBeatTimerTask instanceof MysqlDetectingTimeTask 
__label__0 hints.append ( LocalizationMessages.HINT_MSG ( error.getMessage ( ) ) ) 
__label__0 latch.await ( 25 , TimeUnit.SECONDS ) 
__label__0 LOG.warn ( `` Unable to close socket selector '' ) 
__label__1 ['when'  '('  'rs.wasNull'  '('  ')'  ')'  '.thenReturn'  '('  'false'  ')'] 
__label__0 setAttributeInternal ( inodePath , true , entry.getOpTimeMs ( ) , options ) 
__label__0 @ SuppressWarnings ( `` unused '' ) private final WeakSafeReadWriteLock strongReference ; 
__label__0 clusterProperties.getMaxRedirects ( ) 
__label__1 ['Thread.sleep'  '('  '10'  ')'] 
__label__0 assertEquals ( 2 , this.context.getBean ( FilterChainProxy.class ) .getFilterChains ( ) .size ( ) ) 
__label__1 ['task.cancel'  '('  ')'] 
__label__0 row2 * layerTileHeight 
__label__0 applicationStatistics.incrListUserTimes ( ) 
__label__0 numThreads.get ( ) > = MAX_THREADS 
__label__1 ['requestReceived.await'  '('  ')'] 
__label__1 ['size'  '*'  '1.75f'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 CollectionUtils.isEmpty ( elements ) 
__label__1 ['mapper.getJsonFactory'  '('  ')'] 
__label__0 new S3DataSegmentMover ( mockS3Client , new S3DataSegmentPusherConfig ( ) ) 
__label__1 ['converter.convertTo'  '('  'leftValue.getClass'  '('  ')'  ' '  'rightValue'  ')'] 
__label__0 period > = MINIMAL_POLL_PERIOD 
__label__1 ['getMockEndpoint'  '('  '``'  'mock'  ':'  'start'  "''"  ')'  '.expectedMinimumMessageCount'  '('  '4'  ')'] 
__label__0 ! Boolean.parseBoolean ( ac ) 
__label__0 paramAttribute.split ( `` \\ . '' ) 
__label__1 ['HttpHeaderValues.IDENTITY.equals'  '('  'targetContentEncoding'  ')'] 
__label__0 lookupLink ( parseName ( name ) ) 
__label__0 config.getBroadcasterFactory ( ) .lookup ( m.broadcaster ( ) , path , true ) 
__label__0 Arrays.asList ( `` spring-boot-starter-tomcat- '' , '' tomcat-embed-core- '' , '' tomcat-embed-el- '' , '' tomcat-embed-websocket- '' ) 
__label__0 public Builder setMaximumNumberOfRedirects ( int maxDefaultRedirects ) { configBuilder.setMaximumNumberOfRedirects ( maxDefaultRedirects ) ; return this ; } 
__label__0 maxSize ( new Fixed ( width ) , new Fixed ( height ) ) 
__label__1 ['logger.info'  '('  '``'  'Session'  'created'  "''"  ')'] 
__label__0 this ( maxFrameLength , lengthFieldOffset , lengthFieldLength , lengthAdjustment , initialBytesToStrip , false ) ; 
__label__1 ['t=b.getBroadcasterConfig'  '('  ')'  '.applyFilters'  '('  'r'  ' '  't'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__0 DefaultManagementMBeanAssembler.class 
__label__1 ['System.nanoTime'  '('  ')'] 
__label__1 ['allGroupingColumns.isEmpty'  '('  ')'] 
__label__1 ['NbBundle.getMessage'  '('  'ImporterGEXF.class'  ' '  "''"  'importerGEXF_error_pid'  "''"  ')'] 
__label__0 ( ChronicleEngineEndpoint ) getEndpoint ( ) 
__label__1 ['maxSize'  '('  'new'  'Fixed'  '('  'width'  ')'  ')'] 
__label__1 ['('  'ArrayInitHandler'  ')'  'getParent'  '('  ')'] 
__label__1 ['testSame'  '('  '``'  'var'  'foo'  '='  'function'  '('  'a'  ')'  '{'  '}'  ';'  'foo.call'  '('  'null'  ' '  '1'  ')'  ';'  "''"  ' '  "''"  'var'  'foo'  '='  'function'  '('  ')'  '{'  'var'  'a'  '$'  'jscomp'  '$'  '1'  '='  '1'  ';'  '}'  ';'  'foo.call'  '('  'null'  ')'  ';'  "''"  ')'] 
__label__1 ['GL20.glGetActiveAttrib'  '('  'program'  ' '  'index 256'  ' '  'typeTmp'  ')'] 
__label__0 new RMNodeImpl ( nodeId , rmContext , null,0,0 , null , null ) 
__label__1 ['oldestNode'  '=='  'null'] 
__label__1 ['visitNode'  '('  'node'  ' '  'context'  ')'] 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` rabbit '' ) 
__label__1 ['routes.SessionsController.index'  '('  ')'] 
__label__0 new StringBuilder ( 560 ) 
__label__1 ['names'  '['  '2'  ']'] 
__label__1 ['mBlockStream.remaining'  '('  ')'] 
__label__1 ['req.getRequestURI'  '('  ')'] 
__label__0 DiagnosticType.error ( `` JSC_GOOG_MODULE_IN_NON_MODULE '' , '' goog.module ( ) call must be the first statement in a module . '' ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/user_timeline.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__0 ! compactionStarted.getAndSet ( true ) 
__label__1 ['node1.checkTreeEqualsSilent'  '('  'node2'  ')'] 
__label__0 queryIds.remove ( deadQuery ) 
__label__0 exchange.setRequestHeader ( HttpHeaders.AUTHORIZATION , '' OAuth `` + accessToken ) 
__label__1 ['timeoutMs'  '<'  '500'] 
__label__1 ['LOG.trace'  '('  '``'  'Trying'  'to'  'open'  'resource'  '['  '{'  '}'  ']'  'as'  'a'  'class'  'path'  'resource'  'using'  'the'  'classloader'  '['  '{'  '}'  ']'  '.'  '``'  ' '  'this.getClass'  '('  ')'  '.getClassLoader'  '('  ')'  ')'] 
__label__1 ['new'  'RuntimeException'  '('  '``'  'Mocked'  'failed'  'close'  '!'  "''"  ')'] 
__label__1 ['cs.getString'  '('  'columnIndex'  ')'] 
__label__0 cf.getCompressionType ( ) == null || cf.getCompressionType ( ) == Compression.Algorithm.NONE 
__label__0 d.setMinorVersion ( 1 ) 
__label__0 HIVE_PARTITION_OFFLINE ( 6 , USER_ERROR ) 
__label__0 oldestNode == null || oldestNode.getLastSent ( ) == null 
__label__0 IllegalArgumentException ise 
__label__1 ['ALIAS.addResourceAttributeDescription'  '('  'resources'  ' '  'keyPrefix'  ' '  'container'  ')'] 
__label__1 ['tableName.toString'  '('  ')'] 
__label__0 ChronicleEngineEndpoint.class 
__label__1 ['LOG.fatal'  '('  '``'  'Can'  'not'  'run'  'ThriftServer'  "''"  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweets_of_me.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['zController.sendData'  '('  'doRequestStop'  '('  ')'  ')'] 
__label__0 target.addTaskAndWakeup ( task ) 
__label__1 ['qp.getUniqueItems'  '('  ')'] 
__label__1 ['SimpleAttributeDefinitionBuilder.create'  '('  '``'  'min-inclusive'  "''"  ' '  'ModelType.BOOLEAN'  ')'] 
__label__1 ['setTimeToLiveSeconds'  '('  'Long.valueOf'  '('  '('  'String'  ')'  'cacheSettings.get'  '('  '``'  'diskExpiryThreadIntervalSeconds'  "''"  ')'  ')'  '.longValue'  '('  ')'  ')'] 
__label__0 UnderFileSystemUtils.deleteFileIfExists ( mUfs , mTempCheckpointPath ) 
__label__1 ['Values.UPGRADE.equalsIgnoreCase'  '('  'connection'  ')'] 
__label__0 realPointerIndex > = AndroidInput.NUM_TOUCHES 
__label__0 LOG.info ( `` Read offset { } before start of log at { } , starting to read from the beginning of the journal . `` , readOffset , logStartOffset ) 
__label__0 TestMapUsingMapStoreBuilder.create ( ) .mapName ( mapName ) .withMapStore ( mapStore ) .withNodeCount ( nodeCount ) .withBackupCount ( 1 ) 
__label__0 r.getResponse ( ) .sendError ( 503 , '' Remotely closed '' ) 
__label__0 target.directory ( `` zk '' + id + `` data '' , true ) 
__label__1 ['size'  '*'  '1.75f'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ListBasicDistributedTest'  'extends'  'ListBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '2'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__0 DiagnosticType.error ( `` JSC_REDECLARED_VARIABLE '' , '' Redeclared variable : { 0 } '' ) 
__label__0 ( BlockParentHandler ) getParent ( ) 
__label__0 / * * * Telnet port . * / private Integer port=5000 ; 
__label__0 case READ_UNCOMMITTED : 
__label__1 ['registry.put'  '('  '``'  'connectionFactoryMock'  "''"  ' '  'connectionFactoryMock'  ')'] 
__label__0 new SingleInetAddressDns ( ) 
__label__1 ['AlluxioWorker.class'] 
__label__0 logger.debug ( `` Calimero library version { } '' , Settings.getLibraryVersion ( ) ) 
__label__1 ['Assert.assertEquals'  '('  '1145'  ' '  'details.get'  '('  '1'  ')'  '.getAbsolutePosition'  '('  ')'  ')'] 
__label__0 Lists.newArrayList ( `` timestamp '' ) 
__label__1 ['isFieldKept'  '('  'uniqueField'  ' '  'input'  ')'] 
__label__0 logger.trace ( `` Session destroyed '' ) 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__0 logger.trace ( `` Trying to map { } to { } '' , t , path ) 
__label__1 ['req.getServletPath'  '('  ')'] 
__label__1 ['User.createCursorSupportUserList'  '('  'http.get'  '('  '``'  'http'  ':'  '//yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json'  "''"  ')'  ')'] 
__label__0 new MockResponse ( ) .setBody ( `` A '' ) .setSocketPolicy ( DISCONNECT_AT_END ) 
__label__1 ['fields.get'  '('  '``'  'last_seen'  "''"  ')'] 
__label__0 endpointA.expectedBodiesReceivedInAnyOrder ( `` A blue car ! `` , '' A blue car , again ! '' ) 
__label__1 ['nameDefinitionMultimap.keys'  '('  ')'] 
__label__0 Thread.sleep ( 500L ) 
__label__1 ['('  'System.currentTimeMillis'  '('  ')'  '-'  'lastAccessedTime.getTime'  '('  ')'  ')'  '>'  'timeout'] 
__label__1 ['SocketTimeoutException.class'] 
__label__1 ['mode'  '=='  'MODE_PULL_DOWN_TO_REFRESH'] 
__label__0 this.connectTo ( vertex , null , null , -1 , -1 , DistributionPattern.BIPARTITE , true ) 
__label__1 ['SemanticGraphFactory.makeFromTree'  '('  'tree'  ' '  'mode'  ' '  'useExtras'  '?'  'GrammaticalStructure.Extras.MAXIMAL'  ':'  'GrammaticalStructure.Extras.NONE'  ' '  'true'  ' '  'null'  ')'] 
__label__0 assertEquals ( `` [ ] '' , q.toString ( ) ) 
__label__1 ['DiagnosticType.disabled'  '('  '``'  'AMBIGUOUS_FUNCTION_DECL'  "''"  ' '  "''"  'Ambiguous'  'use'  'of'  'a'  'named'  'function'  ':'  '{'  '0'  '}'  '.'  "''"  ')'] 
__label__1 ['new'  'Packet'  '('  'ioService.getPortableContext'  '('  ')'  ')'] 
__label__0 DiagnosticType.disabled ( `` JSC_GOOG_MODULE_IN_NON_MODULE '' , '' goog.module ( ) call must be the first statement in a module . '' ) 
__label__1 ['new'  'Path'  '('  'bucketPath'  ' '  "''"  'part-'  "''"  '+'  'i'  '+'  "'-'+"  'j'  ')'  '.toString'  '('  ')'] 
__label__0 Long.parseLong ( args [ 1 ] ) 
__label__0 Math.max ( clientCount,1 ) 
__label__1 ['('  'byte'  ')'  '0xdf'] 
__label__0 Assert.assertFalse ( provider.checkValid ( `` SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE ( 4484 , CONCAT ( 0x5c,0x7163646371 , ( SELECT ( CASE WHEN ( 4484=4484 ) THEN 1 ELSE 0 END ) ) ,0x7165767271 ) ) '' ) ) 
__label__0 exchange.getPartitioningScheme ( ) .isReplicateNullsAndAny ( ) 
__label__0 ShrinkWrap.create ( WebArchive.class ) .addClass ( MyBatchlet.class ) .addAsWebInfResource ( EmptyAsset.INSTANCE , ArchivePaths.create ( `` beans.xml '' ) ) .addAsResource ( `` META-INF/batch-jobs/myJob.xml '' ) 
__label__1 ['KeyValueStoreTest.class'] 
__label__1 ['InputProcessor'  '['  ']'] 
__label__1 ['parameter.toString'  '('  ')'] 
__label__0 factory.get ( mResultWildcard , NO_ANNOTATIONS , retrofit ) 
__label__0 new Neo4jGraph ( database.graph , false ) 
__label__1 ['assertEquals'  '('  'actualTables'  ' '  'expectedTables'  ')'] 
__label__0 sleepAtLeastMillis ( 1000 ) 
__label__0 Long.valueOf ( p.getProperty ( `` numberid.id '' ) ) 
__label__1 ['Integer.valueOf'  '('  'tokens'  '['  '3'  ']'  ')'] 
__label__1 ['GL20.glUniform4'  '('  'location'  ' '  'toFloatBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '<'  '<'  '2'  ')'  ')'] 
__label__0 Arrays.asList ( RFXComValueSelector.RAW_DATA , RFXComValueSelector.SIGNAL_LEVEL , RFXComValueSelector.COMMAND , RFXComValueSelector.MOOD , RFXComValueSelector.DIMMING_LEVEL , RFXComValueSelector.CONTACT ) 
__label__1 ['standardSearchRequest'  '('  'query'  ' '  'IndexHelper.determineAffectedIndices'  '('  'indexRangeService'  ' '  'deflector'  ' '  'range'  ')'  ')'] 
__label__0 StringUtils.isEmpty ( password ) 
__label__1 ['public'  'void'  'testWithDFS'  '('  ')'  'throws'  'IOException'  '{'  'MiniDFSCluster'  'dfs=null'  ';'  'MiniMRCluster'  'mr=null'  ';'  'FileSystem'  'fileSys=null'  ';'  'try'  '{'  'final'  'int'  'taskTrackers=4'  ';'  'Configuration'  'conf=new'  'Configuration'  '('  ')'  ';'  'dfs=new'  'MiniDFSCluster'  '('  'conf 4'  ' '  'true'  ' '  'null'  ')'  ';'  'fileSys=dfs.getFileSystem'  '('  ')'  ';'  'JobConf'  'jtConf=new'  'JobConf'  '('  ')'  ';'  'jtConf.setInt'  '('  'TTConfig.TT_MAP_SLOTS 1'  ')'  ';'  'jtConf.setInt'  '('  'TTConfig.TT_REDUCE_SLOTS 1'  ')'  ';'  'jtConf.setLong'  '('  'JTConfig.JT_TRACKER_EXPIRY_INTERVAL 10'  '*'  '1000'  ')'  ';'  'mr=new'  'MiniMRCluster'  '('  'taskTrackers'  ' '  'fileSys.getUri'  '('  ')'  '.toString'  '('  ')'  ' 1'  ' '  'null'  ' '  'null'  ' '  'jtConf'  ')'  ';'  'testFailCommitter'  '('  'CommitterWithFailSetup.class'  ' '  'mr.createJobConf'  '('  ')'  ')'  ';'  'testFailCommitter'  '('  'CommitterWithFailCommit.class'  ' '  'mr.createJobConf'  '('  ')'  ')'  ';'  'testSetupAndCleanupKill'  '('  'mr'  ' '  'dfs'  ' '  'true'  ')'  ';'  'fileSys.delete'  '('  'setupSignalFile'  ' '  'true'  ')'  ';'  'fileSys.delete'  '('  'cleanupSignalFile'  ' '  'true'  ')'  ';'  'testSetupAndCleanupKill'  '('  'mr'  ' '  'dfs'  ' '  'false'  ')'  ';'  '}'  'finally'  '{'  'if'  '('  'dfs'  '!'  '='  'null'  ')'  '{'  'dfs.shutdown'  '('  ')'  ';'  '}'  'if'  '('  'mr'  '!'  '='  'null'  ')'  '{'  'mr.shutdown'  '('  ')'  ';'  '}'  '}'  '}'] 
__label__0 new HashCollisionNode ( edit , hash , count , array ) 
__label__0 Configuration.getMs ( PropertyKey.USER_FILE_LOAD_TTL ) 
__label__1 ['analysis.getType'  '('  'windowFunction'  ')'] 
__label__0 Map < String , Object > 
__label__1 ['logger.info'  '('  '``'  'Calimero'  'library'  'version'  '{'  '}'  "''"  ' '  'Settings.getLibraryVersion'  '('  ')'  ')'] 
__label__1 ['i'  '<'  'getATN'  '('  ')'  '.maxTokenType'] 
__label__0 assertTrue ( jmsTemplate.isPubSubDomain ( ) ) 
__label__0 Arrays.asList ( `` cmd '' , '' ls '' , '' pwd '' ) 
__label__1 ['coreThreads.asString'  '('  ')'] 
__label__0 ! argumentCount.isValidCount ( actualCount ) 
__label__1 ['Assert.assertEquals'  '('  'masterAddress'  ' '  'new'  'InetSocketAddress'  '('  '``'  'RemoteMaster3'  "''"  ' '  'defaultPort'  ')'  ')'] 
__label__1 ['executor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'stream'  '%'  'd'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'handler.receive'  '('  'newStream'  ')'  ';'  '}'  'catch'  '('  'IOException'  'e'  ')'  '{'  'throw'  'new'  'RuntimeException'  '('  'e'  ')'  ';'  '}'  '}'  '}'  ')'] 
__label__1 ['JSError.make'  '('  'currentStatement'  ' '  'Es6ToEs3Converter.CANNOT_CONVERT_YET'  ' '  "''"  'Case'  'statements'  'that'  'contain'  'yields'  "''"  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  '``'  'Streaming'  'Job'  'name'  'should'  'not'  'be'  'null'  '.'  "''"  ')'] 
__label__0 getEndpoint ( ) .getConfig ( ) .getIndexType ( ) 
__label__0 `` Stream `` + importerName 
__label__0 factory.getEmbeddedServletContainer ( initializers [ 0 ] , initializers [ 1 ] ) 
__label__0 final ProtocolCommand cmd 
__label__1 ['variables.putAll'  '('  'variables'  ')'] 
__label__0 fields.getOrDefault ( `` last_seen '' ,0 ) 
__label__0 attribute.getDefinition ( ) .getMarshaller ( ) 
__label__1 ['target.setField'  '('  '0'  ' '  'val2'  ')'] 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'not'  'be'  'null'  "''"  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Unable'  'to'  'unmarshall'  'exception'  'content'  "''"  ' '  'e'  ')'] 
__label__0 initialCapacity > 1 < < 30 
__label__0 IOUtils.toString ( stencilsetStream , '' utf-8 '' ) 
__label__0 assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { Collection < EventRegistration > regs1=eventService1.getRegistrations ( MapService.SERVICE_NAME , mapName ) ; Collection < EventRegistration > regs2=eventService2.getRegistrations ( MapService.SERVICE_NAME , mapName ) ; assertEquals ( `` there should be only one registration '' ,1 , regs1.size ( ) ) ; assertEquals ( `` there should be only one registration '' ,1 , regs2.size ( ) ) ; } } ) 
__label__1 ['new'  'CacheCreateConfigOperation'  '('  'config'  ' '  'true'  ')'] 
__label__0 cache.flushAndForce ( ) 
__label__0 mUfs.create ( testFile , CreateOptions.defaults ( ) .setEnsureAtomic ( true ) ) 
__label__0 Assert.assertEquals ( 3 , propertyCategories.size ( ) ) 
__label__0 PojoUtils.realize ( list.toArray ( ) , invokeMethod.getParameterTypes ( ) , invokeMethod.getGenericParameterTypes ( ) ) 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['queryPurger.scheduleAtFixedRate'  '('  'new'  'PurgeQueriesRunnable'  '('  'queries.keySet'  '('  ')'  ' '  'queryManager'  ')'  ' 200 200'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__0 stores.containsKey ( name ) 
__label__1 ['DateTimeZone.getDefault'  '('  ')'] 
__label__1 ['return'  'false'  ';'] 
__label__1 ['LOG.warn'  '('  '``'  'Unable'  'to'  'close'  'socket'  'selector'  "''"  ' '  'ex'  ')'] 
__label__0 new PeepholeSubstituteAlternateSyntax ( false ) 
__label__1 ['this.createError'  '=='  'null'] 
__label__1 ['getRawFieldBlock'  '('  'i'  ')'  '.getSizeInBytes'  '('  ')'] 
__label__1 ['name='  "''"  'java'  ':'  '/ConnectionFactory'  "''"] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__0 CommandUtils.convertMsToDate ( mTfs.getInfo ( mTfs.open ( tUri ) ) .getCreationTimeMs ( ) ) 
__label__0 LOG.warn ( `` Unable to delete { } because listInternal returns null '' , path ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/user_timeline/ '' + id+ `` .json '' , http.isAuthenticationEnabled ( ) ) ) 
__label__1 ['public'  'static'  'XQueryBuilder'  'xquery'  '('  'File'  'file'  ')'  'throws'  'FileNotFoundException'  '{'  'return'  'xquery'  '('  'IOConverter.toInputStream'  '('  'file'  ')'  ' '  'ObjectHelper.getDefaultCharacterSet'  '('  ')'  ')'  ';'  '}'] 
__label__0 subtypeProps == null || subtypeProps.isEmpty ( ) 
__label__0 DataStreamSink < OUT > 
__label__1 ['nodeId.equals'  '('  'message.getToNode'  '('  ')'  ')'] 
__label__0 initialCapacity > 1 < < 30 
__label__0 new StringBuilder ( 246 ) 
__label__1 ['getPath'  '('  '``'  'InputPackageDeclarationDiffDirectory.java'  "''"  ')'] 
__label__1 ['ChannelStateHandler'  'handler='  '('  'ChannelStateHandler'  ')'  'handler'  '('  ')'  ';'] 
__label__0 prevNerEndIndex ! = ( start - 1 ) || nextNerStartIndex ! = end 
__label__0 public class XpathRegressionHiddenFieldTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=HiddenFieldCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionExplicitOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( HiddenFieldCheck.class ) ; final String [ ] expectedViolation= { `` 10:34 : `` + getCheckMessage ( HiddenFieldCheck.class , HiddenFieldCheck.MSG_KEY , '' value '' ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionExplicitOne ' ] /OBJBLOCK '' + `` /INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS '' + `` /PARAMETER_DEF [ @ text='value ' ] /IDENT '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=HiddenFieldCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionExplicitTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( HiddenFieldCheck.class ) ; final String [ ] expectedViolation= { `` 8:45 : `` + getCheckMessage ( HiddenFieldCheck.class , HiddenFieldCheck.MSG_KEY , '' other '' ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionExplicitTwo ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='method ' ] /PARAMETERS/PARAMETER_DEF [ @ text='other ' ] /IDENT '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['('  'ZWaveConfigurationCommandClass'  ')'  'node.getCommandClass'  '('  'CommandClass.WAKE_UP'  ')'] 
__label__0 new GdxRuntimeException ( `` Failure reading Vorbis . `` , e ) 
__label__1 ['SavedSearch.constructSavedSearches'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'saved_searches.json'  "''"  ' '  'true'  ')'  ')'] 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__0 Bukkit.getOperators ( ) 
__label__1 ['a.entrySet'  '('  ')'] 
__label__1 ['BeanFactoryUtils.beanNamesForTypeIncludingAncestors'  '('  'beanFactory'  ' '  'JwtAccessTokenConverter.class'  ')'] 
__label__1 ['hz.getCluster'  '('  ')'  '.getLocalMember'  '('  ')'  '.isSuperClient'  '('  ')'] 
__label__1 ['assertEquals'  '('  '148'  ' '  'map.getLocalMapStats'  '('  ')'  '.getHeapCost'  '('  ')'  ')'] 
__label__1 ['expiresOn'  '=='  'null'] 
__label__0 doInvoke ( args.first ( ) , args.rest ( ) ) 
__label__1 ['entry.getOriginalUri'  '('  ')'] 
__label__1 ['msg.getType'  '('  ')'  '=='  'Message.Type.error'] 
__label__1 ['mListView.getChildAt'  '('  'index'  ')'] 
__label__0 request.getEntity ( ) .getMediaType ( ) .equals ( MediaType.APPLICATION_WWW_FORM , true ) 
__label__1 ['PathUtils.concatPath'  '('  'filePath'  ' '  'YML_FILE_DIR'  ')'] 
__label__0 new BufferedImage ( region.width , region.height , page.getType ( ) ) 
__label__1 ['Thread.sleep'  '('  '2000'  ')'] 
__label__1 ['assertEquals'  '('  'helper.getRelationshipIndexes'  '('  ')'  '.length 1'  ')'] 
__label__1 ['assertEquals'  '('  'c1.counts'  '+'  'c2.counts'  ' '  'SIZE'  '*'  'COUNTDOWN'  ')'] 
__label__0 sort.sort ( inputRects.items , new Comparator < Rect > ( ) { public int compare ( Rect o1 , Rect o2 ) { int n1=o1.width > o1.height ? o1.width : o1.height ; int n2=o2.width > o2.height ? o2.width : o2.height ; return n2 - n1 ; } } ) 
__label__1 ['AlluxioWorker.class'] 
__label__1 ['GL20.glUniformMatrix4'  '('  'location'  ' '  'transpose'  ' '  'value'  ')'] 
__label__1 ['BlockMasterClient'  'masterClientMock=PowerMockito.mock'  '('  'BlockMasterClient.class'  ')'  ';'] 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['sb.toString'  '('  ')'] 
__label__1 ['getAnimation'  '('  'id'  ' '  'true'  ')'] 
__label__1 ['propMember.getType'  '('  'beanDesc.bindingsForBeanType'  '('  ')'  ')'] 
__label__1 ['InterruptedException'  'e'] 
__label__0 inUseByte ! = Record.IN_USE.byteValue ( ) & & inUseByte ! = Record.NOT_IN_USE.byteValue ( ) 
__label__0 entry.getValue ( ) .health ( ) .transformDeferred ( this.timeoutCompose ) 
__label__1 ['loadObj'  '('  'file'  ' '  'false'  ')'] 
__label__1 ['registry.put'  '('  '``'  'curator'  "''"  ' '  'client'  ')'] 
__label__0 Collector. < T , ImmutableSet.Builder < T > , ImmutableSet < T > > of ( ImmutableSet.Builder : :new , ImmutableSet.Builder : :add , ( ImmutableSet.Builder < T > left , ImmutableSet.Builder < T > right ) - > { left.addAll ( right.build ( ) ) ; return left ; } , ImmutableSet.Builder : :build , Collector.Characteristics.UNORDERED ) 
__label__0 Thread.sleep ( 2000 ) 
__label__1 ['new'  'RequestManager'  '('  'testTimer 300'  ')'] 
__label__1 ['GL20.glGetActiveAttrib'  '('  'program'  ' '  'index 256'  ' '  'typeTmp'  ')'] 
__label__1 ['mFixedExecutionService.shutdown'  '('  ')'] 
__label__1 ['logger.warn'  '('  '``'  'gave'  'up'  'waiting'  'for'  'query'  'reply'  'from'  'device'  '{'  '}'  "''"  ' '  'm_address'  ')'] 
__label__1 ['res.sendError'  '('  '202'  ' '  "''"  'Websocket'  'protocol'  'not'  'supported'  "''"  ')'] 
__label__1 ['GL20.glUniform1'  '('  'location'  ' '  'toFloatBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  ')'  ')'] 
__label__0 GL.glBindTexture ( target , texture ) 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['grammar.getTokenNames'  '('  ')'] 
__label__0 LOGGER.debug ( `` { } - Reset ( { } ) on connection { } '' , poolName , resetBits ! = 0 ? stringFromResetBits ( resetBits ) : `` nothing '' , poolEntry.connection ) 
__label__0 @ Override public ExtendedCell deepClone ( ) { return new KeyValue ( this ) ; } 
__label__1 ['config.getBroadcasterFactory'  '('  ')'  '.lookup'  '('  'm.broadcaster'  '('  ')'  ' '  'true'  ')'] 
__label__0 DataStreamSink < OUT > 
__label__1 ['connection.subscribe'  '('  'jedisPubSub'  ' '  'patterns'  ')'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__0 localAnchorB.set ( joint.getLocalAnchorB ( ) .x , joint.getLocalAnchorB ( ) .y ) 
__label__1 ['LOG.warn'  '('  '``'  'Failed'  'to'  'get'  'mount'  'information'  ':'  '{'  '}'  "''"  ' '  'e.getMessage'  '('  ')'  ')'] 
__label__0 WebSocketEventListener.class.cast ( l ) .onClose ( event ) 
__label__0 new StringBuilder ( 238 ) 
__label__0 Reflection.methodHandle ( type , '' sizeOf '' ) 
__label__1 ['LOG.warn'  '('  '``'  'Block'  'of'  'ID'  '``'  '+'  'getCurrentBlockId'  '('  ')'  '+'  '``'  'could'  'not'  'be'  'cached'  'into'  'Tachyon'  "''"  ' '  'ioe'  ')'] 
__label__1 ['attribute.split'  '('  '``'  '\\\\'  '.'  "''"  ')'] 
__label__0 getRawFieldBlock ( i ) .getRegionSizeInBytes ( rowIndex,1 ) 
__label__1 ['RuntimeGlue'  'optionalGlue'] 
__label__1 ['b.getTopicId'  '('  ')'] 
__label__1 ['stationItemName'  '!'  '='  'null'] 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectoryAtParent.java '' ) 
__label__0 exchange.setRequestHeader ( HttpHeaders.AUTHORIZATION , '' OAuth `` + accessToken ) 
__label__1 ['getConnectionAddOperation'  '('  'name'  ' '  'outboundSocketBindingRef'  ' '  'address'  ')'] 
__label__1 ['paused.set'  '('  'false'  ')'] 
__label__1 ['new'  'JSONParseSpec'  '('  'new'  'TimestampSpec'  '('  '``'  'timestamp'  "''"  ' '  "''"  'auto'  "''"  ')'  ' '  'new'  'DimensionsSpec'  '('  'Arrays.asList'  '('  '``'  'dim1'  "''"  ' '  "''"  'dim2'  "''"  ')'  ' '  'null'  ' '  'null'  ')'  ' '  'JSONParseSpec.JSON'  ')'] 
__label__0 LOG.error ( `` Could n't upload logs for `` + containerId + `` . Skipping this container . `` , e ) 
__label__1 ['this.thrown.equals'  '('  'IllegalStateException.class'  ')'] 
__label__0 taskDao.findByUserId ( 2L , new Sort ( Direction.ASC , '' id '' ) ) 
__label__0 new ClosureCodeRemoval ( compiler ) 
__label__1 ['new'  'ScheduledJob'  '('  'job'  ' '  'jobName'  ' '  'period'  ')'] 
__label__0 new DynamicAwareEntry ( `` https : //localhost:443/test '' , null , null , null ) 
__label__0 LOGGER.log ( Level.SEVERE , LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM ( ) , e ) 
__label__1 ['bits2'  '['  '0'  ']'] 
__label__0 methodName.startsWith ( `` save '' ) || methodName.startsWith ( `` create '' ) || methodName.startsWith ( `` update '' ) 
__label__0 getOrCreateConnectionFactory ( ) 
__label__1 ['GL.glTexSubImage2DEXT'  '('  'target'  ' '  'level'  ' '  'xoffset'  ' '  'yoffset'  ' '  'width'  ' '  'height'  ' '  'format'  ' '  'type'  ' '  'pixels'  ' '  'Memory.getPosition'  '('  'pixels'  ')'  ')'] 
__label__0 incomingEdges.containsKey ( dest ) 
__label__1 ['e.getCause'  '('  ')'] 
__label__1 ['ShrinkWrap.create'  '('  'WebArchive.class'  ')'  '.addClass'  '('  'BatchTestHelper.class'  ')'  '.addClass'  '('  'MyInputRecord.class'  ')'  '.addClass'  '('  'MyItemProcessor.class'  ')'  '.addClass'  '('  'MyItemReader.class'  ')'  '.addClass'  '('  'MyItemWriter.class'  ')'  '.addClass'  '('  'MyOutputRecord.class'  ')'  '.addAsWebInfResource'  '('  'EmptyAsset.INSTANCE'  ' '  'ArchivePaths.create'  '('  '``'  'beans.xml'  "''"  ')'  ')'  '.addAsManifestResource'  '('  '``'  'META-INF/batch-jobs/myJob.xml'  "''"  ' '  "''"  'batch-jobs/myJob.xml'  "''"  ')'] 
__label__1 ['return'  'true'  ';'] 
__label__0 shardManager.commitShards ( transactionId , tableId , columns , shardNodes , Optional.empty ( ) ,0 ) 
__label__0 analysis.getTypeWithCoercions ( windowFunction ) 
__label__0 instance2.getLifecycleService ( ) .shutdown ( ) 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['System.currentTimeMillis'  '('  ')'  '+'  'WAIT_SECONDS_BEFORE_JOIN'  '+'  '1000'] 
__label__1 ['First=word.substring'  '('  '0 3'  ')'] 
__label__0 `` Invalid modules directory : `` + bundlesDir 
__label__0 war.setWebXML ( ClusteredWebTestCase.class.getPackage ( ) , '' web.xml '' ) 
__label__0 preds2 ! = null & & preds2.size ( ) == 1 
__label__0 findDelegateForNewObject ( name ) 
__label__0 position < = mSrcDragPos 
__label__1 ['raw.getParameters'  '('  ')'] 
__label__0 modelNode.hasDefined ( LOCAL ) 
__label__1 ['/'  '*'  '*'  '*'  'Gets'  'the'  'key'  'of'  'connect'  'hostname'  '.'  '*'  '@'  'return'  'key'  'of'  'connect'  'hostname'  '*'  '/'  'public'  'String'  'getHostNameKey'  '('  ')'  '{'  'return'  'mHostNameKey'  ';'  '}'] 
__label__1 ['runPartialSorter'  '('  'sorter'  ' '  'NUM_RECORDS 28'  ')'] 
__label__1 ['new'  'CreateTable'  '('  'temporaryTableName'  ' '  'ImmutableList.of'  '('  'new'  'LikeClause'  '('  'originalTableName'  ' '  'Optional.of'  '('  'INCLUDING'  ')'  ')'  ')'  ' '  'false'  ' '  'tablePropertiesOverride'  ' '  'Optional.empty'  '('  ')'  ')'] 
__label__1 ['DefaultAsyncHttpClientConfig.class'] 
__label__1 ['logger.debug'  '('  '``'  'attempting'  'to'  'login'  "''"  ')'] 
__label__0 PartitionColumnsSeparator.class 
__label__1 ['KBP_MINIMUM_SCORE=45.30'] 
__label__1 ['GL11.glGetInteger'  '('  'pname'  ' '  'params'  ')'] 
__label__1 ['row'  '('  '``'  'p_comment'  "''"  ' '  'null 1.0 0.0'  ' '  'null'  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['Bukkit.getOfflinePlayers'  '('  ')'] 
__label__0 contentType ! = null & & charset == null 
__label__1 ['executionListenerContextCloseListener.addClosedExecutionListener'  '('  'executionListener'  ' '  'execution'  ' '  'executionVariablesToUse'  ' '  'customPropertiesMapToUse'  ')'] 
__label__1 ['LocalEjbReceiver.clone'  '('  'invocation.getInvokedMethod'  '('  ')'  '.getReturnType'  '('  ')'  ' '  'resultCloner'  ' '  'exception'  ' '  'allowPassByReference'  ')'] 
__label__1 ['DefaultAtmosphereRequest'  'request'] 
__label__1 ['new'  'IllegalStateException'  '('  ')'] 
__label__1 ['new'  'byte'  '['  '16'  ']'] 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'not'  'be'  'null'  "''"  ')'] 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'mail'  "''"  ')'] 
__label__1 ['testTLS'  '('  'Cert.CLIENT_PEM_ROOT_CA'  ' '  'Trust.SERVER_JKS'  ' '  'Cert.SERVER_JKS'  ' '  'Trust.CLIENT_PEM_ROOT_CA'  ')'  '.requiresClientAuth'  '('  ')'  '.clientUsesCrl'  '('  ')'] 
__label__0 LOG.warn ( `` Failed to get TachyonStore stream , the block `` + currentBlockId + `` will not be in TachyonStorage '' ) 
__label__1 ['Attribute'  'attribute='  '('  'Attribute'  ')'  'o'  ';'] 
__label__0 zkWorker2.getWorker ( ) 
__label__1 ['warnings.append'  '('  'LocalizationMessages.HINT_MSG'  '('  'error.getMessage'  '('  ')'  ')'  ')'] 
__label__1 ['testSame'  '('  'js'  ' '  'js'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__0 getLsResultStr ( `` /testRoot/testDir '' , files [ 1 ] .getCreationTimeMs ( ) ,1 , LsCommand.STATE_FOLDER , testUser , testUser , files [ 1 ] .getPermission ( ) , files [ 1 ] .isFolder ( ) ) 
__label__1 ['setBytes'  '('  '0'  ' '  'data'  ' '  'index'  ' '  'length'  ')'] 
__label__1 ['v.executeBlocking'  '('  'fut'  '-'  '>'  '{'  'try'  '{'  'v.simulateKill'  '('  ')'  ';'  'fut.complete'  '('  ')'  ';'  '}'  'catch'  '('  'Exception'  'e'  ')'  '{'  'fut.fail'  '('  'e'  ')'  ';'  '}'  '}'  ' '  'ar'  '-'  '>'  '{'  'if'  '('  '!'  'ar.succeeded'  '('  ')'  ')'  '{'  'fail'  '('  'ar.cause'  '('  ')'  ')'  ';'  '}'  '}'  ')'] 
__label__1 ['type.getSimpleName'  '('  ')'] 
__label__1 ['robotstxtServer.allows'  '('  'webURL'  ')'] 
__label__1 ['activeCount'  '=='  'maxActive'] 
__label__1 ['dateOfBirth'  '=='  'null'] 
__label__1 ['Tuple2.of'  '('  'timeoutPattern2 13L'  ')'] 
__label__0 new Tag ( text , line , this ) 
__label__1 ['logger.info'  '('  '``'  'Optimized'  'Selector'  ':'  '``'  '+'  'selector.getClass'  '('  ')'  '.getName'  '('  ')'  ')'] 
__label__0 LOGGER.warn ( `` Unable to process JSON '' , exception ) 
__label__1 ['nlDataOutNodes'  '!'  '='  'null'  '&'  'nlDataOutNodes.getLength'  '('  ')'  '>'  '0'] 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externsRoot'  ' '  'mainRoot'  ')'] 
__label__0 twitter4j.List.createListList ( get ( getApiBaseURL ( ) + V1 + user+ `` /lists/subscriptions.json ? cursor= '' + cursor , true ) ) 
__label__1 ['Thread.sleep'  '('  '5000'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweeted_to_me.json'  "''"  ' '  'null'  ' '  'true'  ')'  ')'] 
__label__1 ['Thread.sleep'  '('  '2000'  ')'] 
__label__1 ['Assert.assertEquals'  '('  '20'  ' '  'Context.getAdministrationService'  '('  ')'  '.getAllGlobalProperties'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__0 assertEquals ( 8 , this.context.getBean ( FilterChainProxy.class ) .getFilterChains ( ) .size ( ) ) 
__label__1 ['EJBException'  'nsee'] 
__label__1 ['type.getDeclaredConstructor'  '('  'String.class'  ')'] 
__label__1 ['TestUtils.randomByte'  '('  ')'  '+'  '127'] 
__label__0 rsWrap.getMobFileCacheMissCount ( ) 
__label__1 ['mock.expectedBodiesReceived'  '('  '``'  'B+END'  "''"  ' '  "''"  'A+END'  "''"  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '561'  ')'] 
__label__1 ['Integer'  'requestRequiredAcks'] 
__label__0 prevNerEndIndex ! = ( start - 1 ) || nextNerStartIndex ! = end 
__label__1 ['ps.createRelationship'  '('  'rel'  ')'] 
__label__1 ['Math.min'  '('  'aggregateData.getAvgColLen'  '('  ')'  ' '  'newData.getAvgColLen'  '('  ')'  ')'] 
__label__0 Wt.getSlice ( slice ) .plus ( Wt.getSlice ( slice ) .transpose ( ) ) 
__label__0 mock.expectedMinimumMessageCount ( 1 ) 
__label__0 latch.await ( 10000 , TimeUnit.MILLISECONDS ) 
__label__0 new SslContextBuilder ( true ) 
__label__0 fail ( `` IllegalArgumentException is expected '' ) 
__label__0 twitter4j.List.createListList ( get ( getApiBaseURL ( ) + V1 + user+ `` /lists/memberships.json ? cursor= '' + cursor , true ) ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastSerialClassRunner.class'  ')'  '@'  'Category'  '('  'QuickTest.class'  ')'  'public'  'class'  'UserCodeDeploymentPermissionTest'  'extends'  'AbstractGenericPermissionTest'  '{'  '@'  'Override'  'protected'  'Permission'  'createPermission'  '('  'String'  'name'  ' '  'String'  '...'  'actions'  ')'  '{'  'return'  'new'  'CardinalityEstimatorPermission'  '('  'name'  ' '  'actions'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'checkDeployPermission_whenAll'  '('  ')'  '{'  'new'  'CheckPermission'  '('  ')'  '.of'  '('  '``'  'deploy'  "''"  ')'  '.against'  '('  '``'  'deploy'  "''"  ')'  '.expect'  '('  'true'  ')'  '.run'  '('  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'checkDeployPermission'  '('  ')'  '{'  'new'  'CheckPermission'  '('  ')'  '.of'  '('  '``'  'deploy'  "''"  ')'  '.against'  '('  '``'  'all'  "''"  ')'  '.expect'  '('  'true'  ')'  '.run'  '('  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'checkAllPermission_whenDeploy'  '('  ')'  '{'  'new'  'CheckPermission'  '('  ')'  '.of'  '('  '``'  'all'  "''"  ')'  '.against'  '('  '``'  'deploy'  "''"  ')'  '.expect'  '('  'false'  ')'  '.run'  '('  ')'  ';'  '}'  '}'] 
__label__0 dateOfBirth == null || dateOfBirth.getTime ( ) == null || dateOfBirth.getTime ( ) .getValue ( ) == null 
__label__1 ['cache.remove'  '('  'key'  ' '  'true'  ')'] 
__label__1 ['computeSemiJoin'  '('  'inputStatistics'  ' '  'inputStatistics'  ' '  'x'  ' '  'unknown'  ')'] 
__label__0 logger.debug ( `` Receive queue ADD : Length= { } '' , recvQueue.size ( ) ) 
__label__0 setUnknownLabels ( collapsedUnary , mainLabel ) 
__label__1 ['String.format'  '('  '``'  'NODE'  '%'  'd'  ':'  'Already'  'in'  'or'  'beyond'  'node'  'stage'  ' '  'ignoring'  '.'  'current'  '='  '%'  's'  ' '  'requested'  '='  '%'  's'  "''"  ' '  'this.node.getNodeStage'  '('  ')'  '.getLabel'  '('  ')'  ' '  'targetStage.getLabel'  '('  ')'  ')'] 
__label__1 ['0xff'  '<'  '<'  'shift'] 
__label__1 ['this'  '('  'parameters'  ' '  'new'  'StringBuilder'  '('  ')'  ' '  'false'  ')'  ';'] 
__label__0 ImmutableSet. < String > builder ( ) .add ( BUFFERS_READ , FIELDNAMES_READ , INDEXERCLUSTER_READ , INPUTS_READ , JOURNAL_READ , JVMSTATS_READ , MESSAGECOUNT_READ , MESSAGES_READ , METRICS_READ , SYSTEM_READ , THROUGHPUT_READ , SAVEDSEARCHES_CREATE , SAVEDSEARCHES_EDIT , SAVEDSEARCHES_READ , CLUSTER_CONFIG_ENTRY_READ ) 
__label__1 ['json.length'  '('  ')'  '-'  '2'] 
__label__0 simple.getToReceivedDate ( ) 
__label__1 ['assertEquals'  '('  'iter.next'  '('  ')'  '.getMessage'  '('  ')'  ' '  "''"  'Unable'  'to'  'open'  '``'  '.'  "''"  ')'] 
__label__0 1 < = user.getListedCount ( ) 
__label__0 mm.tryLock ( key,10 , TimeUnit.SECONDS ) 
__label__1 ['assertFalse'  '('  '``'  'reuse-address'  "''"  ' '  'networkConfig.isReuseAddress'  '('  ')'  ')'] 
__label__1 ['EventPublishingService'  '<'  'ReplicationMessage'  ' '  'ReplicatedMessageListener'  '>'] 
__label__0 new File ( dex.getParentFile ( ) , FilenameUtils.getBaseName ( file ) + `` _dex2jar.jar '' ) 
__label__0 AtmosphereRequest.newInstance ( ) 
__label__1 ['existing.getState'  '('  ')'] 
__label__0 makeResponse ( new AuthorizationException ( `` UI request ' '' + op + `` ' for ' '' + user+ `` ' user is not authorized '' ) , containerRequestContext,403 ) 
__label__1 ['Assert.assertFalse'  '('  '``'  'reload-required'  "''"  '.equals'  '('  'result.get'  '('  'RESPONSE_HEADERS'  ')'  '.get'  '('  'PROCESS_STATE'  ')'  '.asString'  '('  ')'  ')'  ')'] 
__label__1 ['AstUtils.hasLeastOneAnnotation'  '('  'classNode'  ' '  "''"  'MessageEndpoint'  "''"  ' '  "''"  'EnableIntegrationPatterns'  "''"  ')'] 
__label__0 new WebSocketServerHandshakerFactory ( getWebSocketLocation ( req ) , null , true ) 
__label__0 executor.scheduleAtFixedRate ( this , period , period , unit ) 
__label__1 ['assertTrue'  '('  'exitStatuses.contains'  '('  'status.getExitStatus'  '('  ')'  ')'  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'IdGeneratorBasicDistributedTest'  'extends'  'IdGeneratorBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '2'  ')'  '.newInstances'  '('  ')'  ';'  '}'  '}'] 
__label__0 RadioKafkaInput.class 
__label__0 ! condition.isEmpty ( ) 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__0 asyncContext.currentAsyncTraceObject ( ) 
__label__1 ['('  'ZWaveConfigurationCommandClass'  ')'  'node.getCommandClass'  '('  'CommandClass.ASSOCIATION'  ')'] 
__label__1 ['put.writeToWAL'  '('  ')'] 
__label__0 assertEquals ( JavadocTagInfo.Type.BLOCK , JavadocTagInfo.VERSION.getType ( ) ) 
__label__0 instance.managementService.destroy ( ) 
__label__1 ['Arrays.asList'  '('  '``'  'bash'  "''"  ' '  "''"  '-c'  "''"  ' '  'command'  ')'] 
__label__1 ['cache.put'  '('  'new'  'Element'  '('  'key'  ' '  'element'  ')'  ' '  'true'  ')'] 
__label__1 ['super.equals'  '('  'obj'  ')'] 
__label__0 public Builder setRealmEnconding ( String enc ) { realm ( ) .setEnconding ( enc ) ; return this ; } 
__label__0 ( getSource ( ) .z ( ) + getTarget ( ) .z ( ) ) / 3f 
__label__0 `` simple '' .equalsIgnoreCase ( language ) & & expression.indexOf ( `` $ { `` ) > = 0 
__label__1 ['addEntryListener'  '('  'new'  'EntryListener'  '<'  'K'  ' '  'V'  '>'  '('  ')'  '{'  'public'  'void'  'entryAdded'  '('  'EntryEvent'  '<'  'K'  ' '  'V'  '>'  'event'  ')'  '{'  'invalidate'  '('  'event'  ')'  ';'  '}'  'public'  'void'  'entryRemoved'  '('  'EntryEvent'  '<'  'K'  ' '  'V'  '>'  'event'  ')'  '{'  'invalidate'  '('  'event'  ')'  ';'  '}'  'public'  'void'  'entryUpdated'  '('  'EntryEvent'  '<'  'K'  ' '  'V'  '>'  'event'  ')'  '{'  'invalidate'  '('  'event'  ')'  ';'  '}'  'public'  'void'  'entryEvicted'  '('  'EntryEvent'  '<'  'K'  ' '  'V'  '>'  'event'  ')'  '{'  'invalidate'  '('  'event'  ')'  ';'  '}'  'void'  'invalidate'  '('  'EntryEvent'  '<'  'K'  ' '  'V'  '>'  'event'  ')'  '{'  'System.err.println'  '('  '``'  'invalidate'  "''"  ')'  ';'  'final'  'Data'  'key=toData'  '('  'event.getKey'  '('  ')'  ')'  ';'  'nearCache.put'  '('  'key'  ' '  'event.getValue'  '('  ')'  ')'  ';'  '}'  '}'  ' '  'true'  ')'] 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__0 promise.setFailure ( new ClosedChannelException ( ) ) 
__label__1 ['TimeUnit.SECONDS.toNanos'  '('  'timeoutSeconds'  ')'] 
__label__1 ['twitter4j.List.constructListOfLists'  '('  'get'  '('  'getApiBaseURL'  '('  ')'  '+'  'V1'  '+'  'user+'  '``'  '/lists/memberships.json'  '?'  'cursor='  "''"  '+'  'cursor'  ' '  'true'  ')'  ')'] 
__label__0 new MockEnvironment ( `` MockTask '' ,3 * 1024 * 1024 , new MockInputSplitProvider ( ) ,1024 , new Configuration ( ) , new ExecutionConfig ( ) , maxParallelism , parallelism , subtaskIndex ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class QueueBasicLocalTest extends QueueAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 1 ) .newInstances ( config ) ; } } 
__label__1 ['ufsPath.getPath'  '('  ')'] 
__label__0 log.info ( error , cause ) 
__label__0 times + BASE_FILE_NUMBER 
__label__0 war.setWebXML ( SimpleWebTestCase.class.getPackage ( ) , '' web.xml '' ) 
__label__0 from ( `` direct : a '' ) .delay ( 2000 ) 
__label__0 getExecutorServiceManager ( ) .shutdownNow ( errorHandlerExecutorService ) 
__label__0 assertSizeEventually ( COUNT , map,180 ) 
__label__1 ['editor.commit'  '('  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Could'  'not'  'parse'  'syslog'  'message'  '.'  'Not'  'further'  'handling'  '.'  '``'  ' '  'e'  ')'] 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__0 elements ! = null & & elements.size ( ) > i 
__label__0 context.getStreamCachingStrategy ( ) .getSpoolCipher ( ) 
__label__0 GL.glTexSubImage2D ( target , level , xoffset , yoffset , width , height , format , type , pixels , Memory.getPosition ( pixels ) ) 
__label__0 cppFile.writeString ( buffer.toString ( ) , false , '' UTF-8 '' ) 
__label__0 IOUtils.closeQuietly ( is ) 
__label__1 ['InterruptedException'  'e'] 
__label__0 `` Using bind address : `` + bindAddress 
__label__1 ['true_parts.addAll'  '('  'Hive.get'  '('  ')'  '.getPartitions'  '('  'tab'  ')'  ')'] 
__label__1 ['assertEquals'  '('  'countDownLatch.getCount'  '('  ')'  ' 3L'  ')'] 
__label__0 assertEquals ( 3L , countDownLatch.getCount ( ) ) 
__label__1 ['GL.glDeleteTexturesEXT'  '('  'n'  ' '  'textures'  ' '  'Memory.getPosition'  '('  'textures'  ')'  ')'] 
__label__0 new JedisClusterCommand < Set < String > > ( connectionHandler , maxRedirections ) { @ Override public Set < String > execute ( Jedis connection ) { return connection.spop ( key , count ) ; } } 
__label__0 initialCapacity < = capacity 
__label__0 Arrays.toString ( volumes.get ( ) ) 
__label__1 ['UriBuilder.fromResource'  '('  'AlarmCallbackResource.class'  ')'  '.path'  '('  '``'  '{'  'alarmCallbackId'  '}'  "''"  ')'  '.build'  '('  'id'  ')'] 
__label__1 ['Assert.assertEquals'  '('  '``'  'Wrong'  'messages'  'count'  ':'  '``'  '+'  'messages.size'  '('  ')'  ' '  'messages.size'  '('  ')'  ' 1'  ')'] 
__label__0 hazelcastFactory.newHazelcastClient ( newClientConfig ( ) ) 
__label__1 ['LOG.info'  '('  '``'  'Getting'  'asynchronous'  'method'  'stub'  'from'  'channel'  "''"  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Unable'  'to'  'unmarshall'  'exception'  'content'  "''"  ' '  'e'  ')'] 
__label__1 ['rSocketMessageHandler.serverAcceptor'  '('  ')'] 
__label__0 processDefinition.getTenantId ( ) == null || ProcessEngineConfiguration.NO_TENANT_ID.equals ( processDefinition.getTenantId ( ) ) 
__label__0 stopWatch.taken ( ) < 1000 
__label__0 Mono.just ( entry.getKey ( ) ) .zipWith ( entry.getValue ( ) .health ( ) .compose ( this.timeoutCompose ) ) 
__label__1 ['transactionalMap.put'  '('  'key'  ' '  'value'  ')'] 
__label__0 resultEndpoint.assertIsSatisfied ( ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['call.getRpcTimeout'  '('  ')'] 
__label__0 args.length > 1 & & args [ 1 ] instanceof String 
__label__1 ['defaults.jackson2Encoder'  '('  'new'  'Jackson2JsonEncoder'  '('  'objectMapper'  ' '  'EMPTY_MIME_TYPES'  ')'  ')'] 
__label__0 assertEquals ( 1 , counter ) 
__label__0 / * * * Returns messages older than the message ID specified as a numeric string . This is useful for paginating messages . For example , if you 're currently viewing 20 messages and the oldest is number 2912 , you could append `` ? olderThan=2912″ to your request to get the 20 messages prior to those you 're seeing . * / private Long olderThan=-1L ; 
__label__0 TestSuiteEnvironment.getServerAddressNode1 ( ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 Character.isWhitespace ( origText.charAt ( i ) ) 
__label__0 factory.get ( fBodyGeneric , NO_ANNOTATIONS , retrofit ) 
__label__0 LOG.warn ( `` OpenTracing : Failed to capture tracing data '' , t ) 
__label__1 ['prefSize'  '('  'new'  'Fixed'  '('  'width'  ')'  ')'] 
__label__0 t.getDeclaredConstructors ( ) 
__label__1 ['new'  'Duration'  '('  '10'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__0 CompletableFuture < Void > 
__label__0 factory.getEmbeddedServletContainer ( initializers [ 0 ] , initializers [ 1 ] ) 
__label__1 ['new'  'CacheCreateConfigOperation'  '('  'cacheConfig'  ' '  'create'  ' '  'false'  ')'] 
__label__1 ['e.getMessage'  '('  ')'] 
__label__0 new AndroidFiles ( this.getService ( ) .getAssets ( ) , this.getService ( ) .getFilesDir ( ) .getAbsolutePath ( ) ) 
__label__1 ['onCompletions'  '!'  '='  'null'] 
__label__1 ['ssl.has'  '('  'CommonAttributes.CERTIFICATE_KEY_FILE'  ')'] 
__label__0 getTokenDisplayNames ( ) 
__label__0 testModules ( `` var foo = function ( module ) { module.exports = { } ; } ; '' + `` module.exports = foo ; '' , '' goog.provide ( 'module $ test ' ) ; '' + `` var foo $ $ module $ test=function ( module ) { module.exports= { } } ; '' + `` var module $ test=foo $ $ module $ test '' ) 
__label__0 person.getPersonVoidReason ( ) 
__label__1 ['logger.info'  '('  '``'  'Adding'  'PropertySource'  ':'  '``'  '+'  'source'  '+'  '``'  'in'  'group'  ':'  '``'  '+'  'basename'  ')'] 
__label__0 ( System.currentTimeMillis ( ) - this.lastAccessedTime.getTime ( ) ) > = maxInactiveInterval 
__label__0 tableMetadataBuilder ( DEFAULT_TEST_LINEITEMS ) .column ( `` orderkey '' , BIGINT ) .column ( `` partkey '' , BIGINT ) .column ( `` quantity '' , DOUBLE ) 
__label__0 new GenericAggregationFunction ( name , inputTypes , intermediateType , outputType , true , aggregationAnnotation.approximate ( ) , factory ) 
__label__1 ['ctx.write'  '('  '``'  'Your'  'session'  'is'  'protected'  'by'  '``'  '+'  'ctx.pipeline'  '('  ')'  '.get'  '('  'SslHandler.class'  ')'  '.engine'  '('  ')'  '.getSession'  '('  ')'  '.getCipherSuite'  '('  ')'  '+'  '``'  'cipher'  'suite.\\n'  "''"  ')'] 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'byte'  '['  ']'  'copy=Bytes.copy'  '('  'this.bytes'  ' '  'this.offset'  ' '  'this.length'  ')'  ';'  'KeyValue'  'kv=new'  'NoTagsKeyValue'  '('  'copy 0'  ' '  'copy.length'  ')'  ';'  'kv.setSequenceId'  '('  'this.getSequenceId'  '('  ')'  ')'  ';'  'return'  'kv'  ';'  '}'] 
__label__0 logger.trace ( `` Adding PropertySource : `` + source + `` in group : `` + basename ) 
__label__1 ['('  'outputFolder'  '+'  'File.separator'  '+'  'apiFolder'  ')'  '.replaceAll'  '('  '``'  '/'  "''"  ' '  'File.separator'  ')'] 
__label__0 serversByLoad.firstKey ( ) 
__label__1 ['setColor'  '('  'color'  ')'] 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'helloForRoles'  "''"  ')'  ')'] 
__label__1 ['ImmutableList.of'  '('  'interceptors'  ')'] 
__label__0 assertClusterSizeEventually ( 2 , nodes [ 0 ] ) 
__label__0 config.getInputShipStrategy ( 1 ) 
__label__1 ['ArrayList'  '<'  'MessageListener'  '<'  'Object'  '>'  '>'] 
__label__1 ['new'  'S_Command'  '('  '``'  '00FE30'  "''"  ' 20.0'  ')'] 
__label__0 Entry < String , Channel > 
__label__0 JournalStateMachine.class 
__label__1 ['assertEquals'  '('  'mock.getExchanges'  '('  ')'  '.get'  '('  '1'  ')'  '.getIn'  '('  ')'  '.getHeader'  '('  'ChronicleEngineConstants.MAP_EVENT_TYPE'  ')'  ' '  'ChronicleEngineMapEventType.REMOVE'  ')'] 
__label__1 ['Thread.sleep'  '('  '500'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'OpenTracing'  ':'  'Failed'  'to'  'capture'  'tracing'  'data'  "''"  ' '  't'  ')'] 
__label__0 edge.setDirection ( edgeDefault ) 
__label__1 ['mock.expectedMessageCount'  '('  '3'  ')'] 
__label__0 Preconditions.checkNotNull ( pinnedInodes ) 
__label__0 times + BASE_FILE_NUMBER 
__label__1 ['colorModeClass.equals'  '('  '``'  'ScaledSizeMode'  "''"  ')'] 
__label__0 LOG.debug ( `` Terminating gRPC server '' ) 
__label__0 responseFilters.isEmpty ( ) 
__label__1 ['JavaConversions.asIterable'  '('  'logManager.allLogs'  '('  ')'  ')'] 
__label__0 actor.addListener ( listener ) 
__label__1 ['new'  'String'  '('  'bytes2'  ')'] 
__label__1 ['final'  'AuditEvemtFormatter'  'formatter=new'  'AuditEventDefaultFormatter'  '('  ')'  ';'] 
__label__0 HiveRexUtil.simplify ( rexBuilder , node ) 
__label__0 `` `` + ENVIRONMENT_VARIABLES_MODE_OVERRIDE 
__label__0 streamTokenizer.ttype == StreamTokenizer.TT_WORD || streamTokenizer.ttype == ' '' ' 
__label__0 / * * * Changes the group of a file or directory specified by args . * / public final class ChgrpCommand extends AbstractAclCommand { public ChgrpCommand ( TachyonConf conf , TachyonFileSystem tfs ) { super ( conf , tfs ) ; } @ Override public String getCommandName ( ) { return `` chgrp '' ; } @ Override protected int getNumOfArgs ( ) { return 2 ; } @ Override public void run ( String ... args ) throws IOException { String group=args [ 0 ] ; TachyonURI path=new TachyonURI ( args [ 1 ] ) ; chgrp ( path , group , false ) ; } @ Override public String getUsage ( ) { return `` chgrp < group > < path > '' ; } } 
__label__0 new CacheCreateConfigOperation ( config , false ) 
__label__0 hz1.getLifecycleService ( ) .shutdown ( ) 
__label__0 new GZIPOutputStream ( outputStream ) 
__label__1 ['new'  'GZIPOutputStream'  '('  'outputStream'  ' '  'true'  ')'] 
__label__0 testModules ( `` var foo = function ( ) { if ( true ) var module = { } ; '' + `` module.exports = { } ; } ; '' + `` module.exports = foo ; '' , '' goog.provide ( 'module $ test ' ) ; '' + `` var foo $ $ module $ test=function ( ) { if ( true ) var module= { } ; '' + `` module.exports= { } } ; '' + `` var module $ test=foo $ $ module $ test '' ) 
__label__0 LOG.warn ( `` Failed to freeSpace : No StorageDirView has enough capacity of { } bytes '' , availableBytes ) 
__label__0 Bytes.toBytes ( tableNameOrRegionName ) 
__label__0 / * * * Gets the key of service port . * @ return key of service port * / public PropertyKey getPortKey ( ) { return mPortKey ; } 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  ')'] 
__label__1 ['Thread.sleep'  '('  '500'  ')'] 
__label__1 ['historicState'  '('  'item'  ' '  'timestamp'  ')'] 
__label__0 CellUtil.estimatedHeapSizeOfWithoutTags ( c ) 
__label__1 ['log.tracef'  '('  '``'  '%'  's'  'finished'  'request'  '%'  'd'  "''"  ' '  'ManagementChannel.this'  ')'] 
__label__1 ['return'  'true'  ';'] 
__label__0 ExprEval.ofLong ( null ) 
__label__0 DEFAULT_SHUFFLE_PORT=11000 
__label__1 ['getOrCreateContainer'  '('  ')'  '.unlock'  '('  'dataKey'  ' '  'caller'  ' '  'threadId'  ')'] 
__label__0 logger.debug ( `` Calimero library version { } '' , Settings.getLibraryVersion ( ) ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 attribute.getDefinition ( ) .getMarshaller ( ) 
__label__1 ['createOrcWriterOptions'  '('  'sourceOi'  ' '  'conf'  ' '  'cacheWriter'  ' '  'allocSize'  ')'] 
__label__0 waitForJobExecutorToProcessAllJobs ( 5000,500 ) 
__label__0 targetClass ! = null & & field ! = null 
__label__0 part.getPartitionPath ( ) 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__1 ['log.error'  '('  'throwable'  ' '  "''"  'Query'  '%'  's'  'failed'  "''"  ' '  'queryId'  ')'] 
__label__1 ['node.has'  '('  'Constants.ALIAS'  ')'] 
__label__0 new GenerationException ( `` Could n't parse type : `` + typeDefinition , e ) 
__label__0 getJSDocType ( operation ) 
__label__1 ['robotstxtServer.allows'  '('  'webURL'  ')'] 
__label__1 ['new'  'S3DataSegmentMover'  '('  'mockS3Client'  ')'] 
__label__1 ['keyClass'  '('  'NullWritable.class'  ')'] 
__label__0 log.debug ( `` Checking bounds [ { } , { } ) ( expect { } keys ) '' , new Object [ ] { startCol , endCol , expected.size ( ) } ) 
__label__0 Configuration.getMs ( PropertyKey.USER_FILE_LOAD_TTL ) 
__label__1 ['mSizeOnTier.containsKey'  '('  'tierAlias'  ')'  '?'  'mSizeOnTier.get'  '('  'tierAlias'  ')'  ':'  '0'] 
__label__1 ['getter.getRawReturnType'  '('  ')'] 
__label__0 new RuntimeIOException ( `` No input file provided ( use -parseFile ) '' , e ) 
__label__1 ['request.getLocalAddr'  '('  ')'] 
__label__1 ['legacyModel.isDefined'  '('  ')'] 
__label__1 ['items'  '['  '26'  ']'] 
__label__0 new StringBuilder ( 256 ) 
__label__1 ['new'  'DynamicAwareEntry'  '('  '``'  'http'  ':'  '//localhost:80/test'  "''"  ' '  'null'  ' '  'null'  ')'] 
__label__0 User.createUsersList ( http.get ( `` http : //yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json '' ) ) 
__label__1 ['row.size'  '('  ')'  '=='  '0'] 
__label__0 new S3DataSegmentMover ( mockS3Client , new S3DataSegmentPusherConfig ( ) ) 
__label__0 LOG.error ( e.getMessage ( ) , e ) 
__label__1 ['TimeUtils.nanoTime'  '('  ')'] 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS'  ')'] 
__label__1 ['public'  'IMetric'  'registerMetric'  '('  'String'  'name'  ' '  'ICombiner'  'combiner'  ' '  'int'  'timeBucketSizeInSecs'  ')'  '{'  'return'  '_topoContext.registerMetric'  '('  'name'  ' '  'new'  'CombinedMetric'  '('  'combiner'  ')'  ' '  'timeBucketSizeInSecs'  ')'  ';'  '}'] 
__label__0 new DefaultPropertyNamePatternsMatcher ( TARGET_NAME_DELIMITERS , this.targetName ) 
__label__0 new ChannelInboundHandlerAdapter ( ) { @ Override public void channelWritabilityChanged ( ChannelHandlerContext ctx ) throws Exception { buf.append ( ctx.channel ( ) .isWritable ( ) ) ; buf.append ( ' ' ) ; } } 
__label__1 ['left.getFieldName'  '('  ')'  '.equals'  '('  'right.getFieldName'  '('  ')'  ')'] 
__label__1 ['view'  '!'  '='  'null'] 
__label__0 SOURCE_PATH.deref ( ) 
__label__1 ['Foundation.NSLog'  '('  '``'  '['  'error'  ']'  '``'  '+'  'tag'  '+'  '``'  ':'  '``'  '+'  'message'  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__0 NUMBER_OF_IDS_PER_THREAD=40000 
__label__0 cache.flushAndForce ( ) 
__label__0 AstUtils.hasAtLeastOneAnnotation ( classNode , '' Controller '' , '' EnableWebMvc '' ) 
__label__1 ['SimpleAttributeDefinitionBuilder.create'  '('  '``'  'min-level'  "''"  ' '  'ModelType.STRING'  ')'] 
__label__1 ['DirectMessage.constructDirectMessages'  '('  'http.get'  '('  '``'  'http'  ':'  '//yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json'  "''"  ')'  ')'] 
__label__1 ['System.nanoTime'  '('  ')'] 
__label__1 ['prev.getPrevProp'  '('  ')'] 
__label__1 ['LOG.trace'  '('  '``'  'Terminating'  'channel'  'to'  'the'  'remote'  'gRPC'  'server'  "''"  ')'] 
__label__0 MongoConnection.getInstance ( ) .connect ( null , null , '' localhost '' , '' graylog2test '' , Integer.valueOf ( 27017 ) , '' false '' , null ) 
__label__0 logger.debug ( `` NODE { } : BATTERY LOW ! `` , this.getNode ( ) .getNodeId ( ) ) 
__label__1 ['string.length'  '('  ')'  '>'  '='  '0'] 
__label__0 new StringBuilder ( 253 ) 
__label__1 ['parent.incrementPrioritizableForTree'  '('  'amt'  ' '  'oldParent'  ')'] 
__label__1 ['ALIAS.addOperationParameterDescription'  '('  'resources'  ' '  "''"  'infinispan.container'  "''"  ' '  'op'  ')'] 
__label__0 progress.start ( 0.35f ) 
__label__1 ['new'  'byte'  '['  '19'  ']'] 
__label__1 ['HashMap'  '<'  'String'  ' '  'ASTNode'  '>'] 
__label__1 ['endpoint.getBus'  '('  ')'  '.getInInterceptors'  '('  ')'  '.size'  '('  ')'  '=='  '1'] 
__label__0 Assert.assertEquals ( 3 , visitor.getConditions ( ) .size ( ) ) 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__1 ['p.getFileSystem'  '('  'conf'  ')'  '.delete'  '('  'p'  ')'] 
__label__0 logger.fine ( `` Parsing Dep : `` + filePath ) 
__label__1 ['UnderFileSystemUtils.deleteFileIfExists'  '('  'mUfs'  ' '  'mCheckpointPath'  ')'] 
__label__1 ['qp.getExclusiveMaximum'  '('  ')'] 
__label__1 ['FileNotFoundException'  'ex'] 
__label__1 ['Bytes.toBytesBinary'  '('  'tableNameOrRegionName'  ')'] 
__label__1 ['lexer.token'  '('  ')'  '=='  '('  'Token.SELECT'  ')'] 
__label__0 assertEquals ( 1234 , deserialized.getOwnedEntryMemoryCost ( ) ) 
__label__1 ['new'  'JGroupsFilter'  '('  'bc'  ' '  'event.getAtmosphereConfig'  '('  ')'  '.getWebServerName'  '('  ')'  ')'] 
__label__0 address.getHostAddress ( ) 
__label__1 ['RexUtil.simplify'  '('  'rexBuilder'  ' '  'node'  ')'] 
__label__0 methodName.equalsIgnoreCase ( `` scan '' ) 
__label__0 context.revertReloadRequired ( ) 
__label__1 ['GL20.glUniform1'  '('  'location'  ' '  'v'  ')'] 
__label__1 ['isTop'  '('  ')'  '||'  'isUnknown'  '('  ')'] 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_FILE_LOAD_TTL'  ')'] 
__label__0 subProperties.putIfAbsent ( subName , value ) 
__label__0 new HazelcastInstance [ nodeCount ] 
__label__1 ['json.toString'  '('  '1'  ')'] 
__label__0 LOG.info ( `` Set the current default database as [ { } ] in the current default catalog [ { } ] . `` , currentDatabaseName , currentCatalogName ) 
__label__0 StringUtils.subString ( url , '' weburi- '' , '' .json '' , true ) 
__label__1 ['targetActor.addCaptureListener'  '('  'listener'  ')'] 
__label__0 messageJournalEnabled=true 
__label__0 parser.parse ( INFO_OPTIONS , args , true ) 
__label__1 ['setNetworkTimeout'  '('  'connection'  ' '  'networkTimeout'  ')'] 
__label__0 s.toString ( ) .toLowerCase ( ) 
__label__1 ['setParams'  '('  ')'  '.nx'  '('  ')'] 
__label__1 ['PositiveIntegerValidator.class'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweeted_by_me.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__1 ['serializer.serializeServerFailure'  '('  'ctx.alloc'  '('  ')'  ' '  'new'  'RuntimeException'  '('  'msg'  ')'  ')'] 
__label__0 CommandUtils.convertMsToDate ( files [ 0 ] .getCreationTimeMs ( ) ) 
__label__0 registry.bind ( `` groovyShellFactory '' , groovyShellFactory ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['promise.setFailure'  '('  'new'  'ClosedChannelException'  '('  ')'  ')'] 
__label__1 ['mock.expectedMessageCount'  '('  '10'  ')'] 
__label__0 logger.debug ( `` { } { } '' , errorCode , message ) 
__label__1 ['type.createDataFormat'  '('  'routeContext'  ')'] 
__label__1 ['GL20.glGetShader'  '('  'shader'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 Gdx.files.internal ( fileName ) .pathWithoutExtension ( ) 
__label__1 ['program.getProgramId'  '('  ')'] 
__label__1 ['obj.getAcceptableTokens'  '('  ')'] 
__label__1 ['conceptToValidate.getConceptId'  '('  ')'] 
__label__1 ['status.getCreationTimeMs'  '('  ')'] 
__label__1 ['context.addStep'  '('  'new'  'NewStepHandler'  '('  ')'  '{'  'public'  'void'  'execute'  '('  'final'  'NewOperationContext'  'context'  ' '  'final'  'ModelNode'  'operation'  ')'  '{'  'if'  '('  'context.completeStep'  '('  ')'  '=='  'NewOperationContext.ResultAction.KEEP'  '&'  '&'  'context.isModelAffected'  '('  ')'  ')'  '{'  '}'  '}'  '}'  ' '  'NewOperationContext.Stage.VERIFY'  ')'] 
__label__1 ['directoryUrl.getParameter'  '('  'Constants.GROUP_KEY'  ')'] 
__label__0 codingSystem == null || HL7Constants.HL7_LOCAL_CONCEPT.equals ( codingSystem ) 
__label__0 new SourceMapParseException ( `` Unexpected number of values for entry : '' + entryValues ) 
__label__0 verify ( collector , never ( ) ) 
__label__0 statistics.addRemoveTimeNanos ( System.nanoTime ( ) - start ) 
__label__0 segments.add ( segment ) 
__label__0 Thread.sleep ( 3000 ) 
__label__0 `` https '' .equals ( protocol ) || `` wss '' .equals ( protocol ) 
__label__1 ['assertOpenEventually'  '('  'countDownLatch 30'  ')'] 
__label__1 ['1000L'  '*'  'FILE_BYTES'] 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['userStreamListener.onStatus'  '('  'new'  'StatusJSONImpl'  '('  'json'  ')'  ')'] 
__label__0 allDefinitions ! = null & & composed.getInterfaces ( ) ! = null 
__label__1 ['PROTOCOL_VERSION=1'] 
__label__0 bindingGroup.hasDefined ( PORT_OFFSET ) 
__label__0 from ( `` seda : a '' ) .delayer ( 1000 ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class IdGeneratorBasicLocalTest extends IdGeneratorAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( ) { return createHazelcastInstanceFactory ( 1 ) .newInstances ( ) ; } } 
__label__1 ['testerAnnotation.getClass'  '('  ')'] 
__label__1 ['logger.debug'  '('  '``'  'myq'  'securityToken'  ':'  '{'  '}'  "''"  ' '  'securityToken'  ')'] 
__label__1 ['coreThreads.asString'  '('  ')'] 
__label__1 ['InputStream'  'is=IOUtils.getInputStreamFromURLOrClasspathOrFileSystem'  '('  'languagePropertiesFile'  ')'] 
__label__1 ['context.var'  '('  '``'  'long'  "''"  ')'] 
__label__1 ['newroot.length'  '=='  '1'] 
__label__0 NbBundle.getMessage ( ImporterGEXF.class , '' importerGEXF_error_pid '' , id ) 
__label__1 ['END'  '+'  '``'  'End'  'Message'  'Interceptor'  "''"] 
__label__0 cache.putRecord ( key , record ) 
__label__1 ['mapper.getJsonFactory'  '('  ')'] 
__label__1 ['assertEquals'  '('  'input.getFieldCount'  '('  ')'  ' 3'  ')'] 
__label__0 endpoint.expectedMinimumMessageCount ( 1 ) 
__label__1 ['Wt.getSlice'  '('  'slice'  ')'  '.mult'  '('  'Wt.getSlice'  '('  'slice'  ')'  '.transpose'  '('  ')'  ')'] 
__label__0 response.get ( ROLLED_BACK ) 
__label__1 ['selectBoxList.setScrollingDisabled'  '('  'false'  ' '  'y'  ')'] 
__label__0 new ResultSetIterator ( conn , generatedKeys , getEndpoint ( ) .isUseJDBC4ColumnNameAndLabelSemantics ( ) ) 
__label__1 ['proxy'  '=='  'null'] 
__label__0 MESSAGES.pathEntryNotFound ( relativeTo ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 mTestStream.getFlushedBytes ( ) 
__label__1 ['log.makeAlert'  '('  '``'  'Failed'  'to'  'remove'  'segment'  "''"  ')'] 
__label__0 this.getNotEmptyWaitThreadCount ( ) 
__label__1 ['ExceptionUtils.firstOrSuppressed'  '('  'collectedExceptions'  ' '  'e'  ')'] 
__label__1 ['assertEquals'  '('  '7'  ' '  'LambdaOperations.values'  '('  ')'  '.length'  ')'] 
__label__0 registry.bind ( `` kinesisClient '' , amazonKinesisClient ) 
__label__1 ['MESSAGES.pathEntryNotFound'  '('  'path'  ')'] 
__label__0 map.set ( key , '' value '' ,5 , TimeUnit.SECONDS ) 
__label__0 this ( parameters , new StringBuilder ( ) , true ) ; 
__label__0 messageHandler.serverResponder ( ) 
__label__0 sizeNeeded > items.length 
__label__1 ['SSOBaseCase.executeNoAuthSingleSignOnTest'  '('  'baseURLNoAuth'  ' '  'baseURLNoAuth'  ' '  'log'  ')'] 
__label__1 ['logger.error'  '('  '``'  'Invalid'  'state'  '{'  '}'  "''"  ' '  'r'  ')'] 
__label__1 ['DiagnosticType.warning'  '('  '``'  'JSC_INVALID_MODULE_PATH'  "''"  ' '  "''"  'Invalid'  'module'  'path'  '\\'  "''"  '{'  '0'  '}'  '\\'  "''"  'for'  'resolution'  'mode'  '\\'  "''"  '{'  '1'  '}'  '\\'  "''"  "''"  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'failed'  'to'  'send'  '{'  '}'  'messages'  'to'  '{'  '}'  ':'  '{'  '}'  "''"  ' '  'numMessages'  ' '  'dstAddressPrefixedName'  ' '  'future.getCause'  '('  ')'  ')'] 
__label__1 ['mLineageStore.requestFilePersistence'  '('  'fileId'  ')'] 
__label__0 mock.message ( 0 ) .body ( String.class ) 
__label__1 ['propEditor'  '!'  '='  'null'] 
__label__1 ['LOG.debug'  '('  '``'  'Retrieving'  'location'  'for'  'state='  '{'  '}'  'of'  'job='  '{'  '}'  'from'  'the'  'cache'  '.'  '``'  ' '  'jobId'  ' '  'queryableStateName'  ')'] 
__label__1 ['getNonCompilablePath'  '('  '``'  'InputGenericWhitespaceEndsTheLine.java'  "''"  ')'] 
__label__0 nodeId.equals ( message.getToNode ( ) ) || nodeId.equals ( message.getRouteId ( ) ) 
__label__0 maxSize < ( used / 1024 / 1024 ) 
__label__0 String.format ( `` NODE % d : Already in or beyond node stage , ignoring . current = % s , requested = % s '' , this.node.getNodeId ( ) , this.node.getNodeStage ( ) .getLabel ( ) , targetStage.getLabel ( ) ) 
__label__0 factory.get ( mBodyWildcard , NO_ANNOTATIONS , retrofit ) 
__label__1 ['condition.isEmpty'  '('  ')'] 
__label__1 ['topicRegistrations'  '=='  'null'  '&'  '&'  'topicRegistrations.isEmpty'  '('  ')'] 
__label__0 timeMillis + MILLIS_IN 
__label__0 `` Searching class for device type `` + deviceType 
__label__1 ['StatBuckets.prettyUptime'  '('  'secs'  ')'] 
__label__0 ! Iterables.isEmpty ( batchServerInventoryView.getInventory ( ) ) & & Iterables.get ( batchServerInventoryView.getInventory ( ) ,0 ) .getSegments ( ) .size ( ) ! = testSegments.size ( ) 
__label__0 VertexAttribute.ColorUnpacked ( ) 
__label__0 logger.info ( `` Illegal argument in chart : { } '' , e ) 
__label__1 ['type.createBlockBuilder'  '('  'new'  'BlockBuilderStatus'  '('  ')'  ' 100'  ')'] 
__label__1 ['EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT'  '('  'target'  ' '  'attachment'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 javaWriter.emitSingleLineComment ( `` foo '' ) 
__label__0 new ValidationException ( `` Unable to deserialize string ' '' + base64String + `` ' of base class ' '' + baseClass.getName ( ) + `` ' . `` , e ) 
__label__1 ['contact.GetWorldManifold'  '('  ')'] 
__label__0 printLine ( `` Unable to connect due to unrecognised server certificate '' ) 
__label__1 ['assertNotPresent'  '('  'GsonConverter.class'  ')'] 
__label__0 node1.isEquivalentToTyped ( node2 ) 
__label__1 ['uncompressedProto.length'  '<'  '2100000'] 
__label__1 ['this.logger.isWarnEnabled'  '('  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Add'  'a'  '{'  '@'  'link'  'AtmosphereResource'  '}'  'to'  'the'  'list'  'of'  'item'  'to'  'be'  'notified'  'whenthe'  '{'  '@'  'link'  'Broadcaster'  '#'  'broadcast'  '}'  'is'  'invoked'  '.'  '*'  '@'  'param'  'resource'  'an'  '{'  '@'  'link'  'AtmosphereResource'  '}'  '*'  '@'  'return'  '{'  '@'  'link'  'AtmosphereResource'  '}'  'if'  'added'  ' '  'or'  'null'  'if'  'it'  'was'  'already'  'there'  '.'  '*'  '/'  'AtmosphereResource'  'addAtmosphereResource'  '('  'AtmosphereResource'  'resource'  ')'  ';'] 
__label__0 JavaConversions.asJavaIterable ( kafkaLog.logSegments ( committedOffset , Long.MAX_VALUE ) ) 
__label__1 ['latch.await'  '('  '5'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'helloForNone'  "''"  ')'  ')'] 
__label__0 Assert.assertNotNull ( ex.getCause ( ) ) 
__label__0 timelineObjectHolder.getObject ( ) .getChunk ( 0 ) .getObject ( ) .getMetrics ( ) 
__label__1 ['HIVE_TABLE_OFFLINE'  '('  '2'  ' '  'EXTERNAL'  ')'] 
__label__0 getSslStoreProvider ( ) .getTrustStore ( ) 
__label__1 ['d.setMajorVersion'  '('  '1'  ')'] 
__label__0 LOG.warn ( `` Can not access storage directory `` + rootPath ) 
__label__1 ['metastore.getHostText'  '('  ')'] 
__label__1 ['callTimeoutMillis=1000'] 
__label__1 ['private'  'final'  'String'  'mBindHostKey'  ';'] 
__label__0 chooser.showOpenDialog ( null ) 
__label__0 Foundation.log ( `` [ debug ] `` + tag + `` : `` + message ) 
__label__0 lastUpdateTime2 > = lastUpdateTime 
__label__1 ['mUfs.create'  '('  'testFile'  ')'] 
__label__1 ['SSEAtmosphereInterceptor.class'] 
__label__0 Calendar.getInstance ( JSON.defaultTimeZone , JSON.defaultLocale ) 
__label__1 ['sExecutorService.shutdown'  '('  ')'] 
__label__0 assertMockEndpointsSatisfied ( ) 
__label__1 ['HL7Constants.HL7_LOCAL_CONCEPT.equals'  '('  'codingSystem'  ')'] 
__label__1 ['log.rollWriter'  '('  ')'] 
__label__0 GL20.glGetShaderiv ( shader , pname , params ) 
__label__1 ['NoClassDefFoundError'  'ex'] 
__label__1 ['TEST_UTIL.getHBaseAdmin'  '('  ')'] 
__label__1 ['watch.stop'  '('  ')'] 
__label__0 checkArgument ( ! `` / '' .equals ( resourcePath ) , '' % s is the classpath root '' , resourcePath ) 
__label__1 ['expression.indexOf'  '('  '``'  '$'  '{'  '``'  ')'  '>'  '='  '0'] 
__label__1 ['metric'  'instanceof'  'MetricsRate'  '||'  'metric'  'instanceof'  'MetricsString'] 
__label__1 ['funType.toString'  '('  ')'] 
__label__1 ['this.r'  '!'  '='  'null'] 
__label__0 new GenericAggregationFunction ( NAME , inputTypes , intermediateType , valueType , true , false , factory ) 
__label__1 ['primitiveToWrappers.put'  '('  'wrapperType'  ' '  'primitiveType'  ')'] 
__label__0 assertThat ( getField ( graphite , '' port '' ) ) .isEqualTo ( 2003 ) 
__label__0 getTokenDisplayNames ( ) 
__label__0 JavadocTagContinuationIndentationCheck.class 
__label__0 DiagnosticType.warning ( `` JSC_CONSTANT_REASSIGNED_VALUE_ERROR '' , '' constant { 0 } assigned a value more than once.\n '' + `` Original definition at { 1 } '' ) 
__label__1 ['minZ'  '!'  '='  '0f'  '&'  '&'  'maxZ'  '!'  '='  '0f'] 
__label__0 s.elapsed ( TimeUnit.NANOSECONDS ) 
__label__1 ['getNonCompilablePath'  '('  '``'  'InputDefaultConfig.java'  "''"  ')'] 
__label__0 log.error ( `` Both session ( ) and unauthenticated ( ) are set for this request , this is a bug , using session id . `` , new Throwable ( ) ) 
__label__0 Long.valueOf ( p.getProperty ( `` numberid.id '' ) ) 
__label__1 ['toJSON'  '('  'entry.getValue'  '('  ')'  ')'] 
__label__1 ['checkArgument'  '('  '!'  '``'  '/'  "''"  '.equals'  '('  'resourcePath'  ')'  ' '  "''"  '%'  's'  'is'  'the'  'classpath'  'root'  "''"  ')'] 
__label__0 s == null & & req ! = null 
__label__1 ['Thread.sleep'  '('  '1200'  ')'] 
__label__1 ['getter.getRawReturnType'  '('  ')'] 
__label__0 invocation.logger.finest ( `` 'is-executing ' : `` + executing + `` - > `` + invocation ) 
__label__1 ['assertRemoveSubsystemResources'  '('  'servicesA'  ')'] 
__label__1 ['DataTypes.TIME'  '('  '9'  ')'] 
__label__0 @ InputMagicNumberIntMethodAnnotation ( -44 ) 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['GL20.glGetVertexAttrib'  '('  'index'  ' '  'pname'  ' '  'params'  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['body'  '['  '0'  ']'  '['  '0'  ']'  '['  '0'  ']'] 
__label__0 queueLength.asString ( ) 
__label__0 DirectMessage.createDirectMessageList ( get ( getBaseURL ( ) + `` direct_messages/sent.json '' , new PostParameter [ 0 ] , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['getConnectionFactory'  '('  ')'] 
__label__1 ['new'  'Packet'  '('  'data'  ' '  'operation.getPartitionId'  '('  ')'  ' '  'serializationService.getPortableContext'  '('  ')'  ')'] 
__label__1 ['getConfiguration'  '('  ')'  '.getConnectionFactory'  '('  ')'] 
__label__0 index > maxHeadersLength - headersLength 
__label__1 ['resultEndpoint.expectedBodiesReceived'  '('  '``'  'one'  "''"  ' '  "''"  'two'  "''"  ' '  "''"  'three'  "''"  ')'] 
__label__1 ['map.lock'  '('  'key 4'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['GL11.glTexParameter'  '('  'target'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 activeCount > = maxActive 
__label__0 edge.setDirection ( type ) 
__label__1 ['dis.read'  '('  'serializedData 0'  ' '  'length'  ')'] 
__label__1 ['!'  'ElementsParser.isAlphaNumeric'  '('  'ch2'  ')'] 
__label__0 logger.trace ( `` Requsting URL { } '' , url ) 
__label__1 ['AsyncHttpClient.class'] 
__label__0 ShrinkWrap.create ( WebArchive.class ) .addClass ( BatchTestHelper.class ) .addClass ( MyInputRecord.class ) .addClass ( MyItemProcessor.class ) .addClass ( MyItemReader.class ) .addClass ( MyItemWriter.class ) .addClass ( MyOutputRecord.class ) .addAsWebInfResource ( EmptyAsset.INSTANCE , ArchivePaths.create ( `` beans.xml '' ) ) .addAsResource ( `` META-INF/batch-jobs/myJob.xml '' ) 
__label__0 Map < String , Object > 
__label__1 ['getTimeout'  '('  ')'] 
__label__1 ['ours=theirIterator.next'  '('  ')'] 
__label__1 ['javaWriter.emitSingleLineCOmment'  '('  '``'  'foo'  "''"  ')'] 
__label__1 ['next.getField'  '('  '0'  ')'] 
__label__0 UIPasteboard.getGeneralPasteboard ( ) 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__1 ['Long.valueOf'  '('  'args'  '['  '2'  ']'  ')'] 
__label__1 ['masterAddress.split'  '('  '``'  ':'  "''"  ')'  '.length'  '!'  '='  '2'] 
__label__0 ! this.instanceName.equals ( singleInstanceProfilingEvent.getInstanceName ( ) ) 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__0 / * * * Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit ' true . * / private Integer autoCommitInterval ; 
__label__1 ['GL20.glUniform2'  '('  'location'  ' '  'v'  ')'] 
__label__1 ['isAllFiles'  '('  ')'] 
__label__1 ['executor.scheduleWithFixedDelay'  '('  'this'  ' '  'period'  ' '  'period'  ' '  'unit'  ')'] 
__label__1 ['slice.getAddress'  '('  ')'] 
__label__0 new JSONParseSpec ( timestampSpec , new DimensionsSpec ( dimensions , dimensionExclusions , spatialDimensions ) ) 
__label__1 ['stopwatch.elapsedMillis'  '('  ')'] 
__label__1 ['incomingEdges.containsKey'  '('  'source'  ')'] 
__label__0 webSocketProcessor.close ( webSocket,1000 ) 
__label__0 container.getAttributeModel ( ) .getEdgeTable ( ) 
__label__1 ['route.setDelay'  '('  '5000'  ')'] 
__label__1 ['context.var'  '('  '``'  'double'  "''"  ')'] 
__label__1 ['logger.debug'  '('  '``'  'Requsting'  'URL'  '{'  '}'  "''"  ' '  'url'  ')'] 
__label__0 `` Refreshing storefiles of region `` + bestRegionReplica + `` due to global heap pressure . memstore size= '' + StringUtils.humanReadableInt ( server.getRegionServerAccounting ( ) .getGlobalMemstoreSize ( ) ) 
__label__0 Boolean.getBoolean ( `` java.awt.headless '' ) || System.getProperty ( `` os.name '' ) .startsWith ( `` Mac OS '' ) & & System.getProperty ( `` user.name '' ) .equals ( `` cruise '' ) 
__label__0 args == null || args.length == 0 
__label__1 ['('  't'  'instanceof'  'MetaException'  ')'  '&'  '&'  't.getMessage'  '('  ')'  '.matches'  '('  '``'  '('  '?'  's'  ')'  '.'  '*'  '('  'JDO'  '['  'a-zA-Z'  ']'  '*'  '|TProtocol|TTransport'  ')'  'Exception'  '.'  '*'  "''"  ')'] 
__label__1 ['patientExitObs'  '!'  '='  'null'] 
__label__1 ['REMOVALS_UPDATER.compareAndSet'  '('  'this'  ' '  'nanos'  ' '  'nanos'  '+'  'duration'  ')'] 
__label__1 ['mMountTable.resolve'  '('  'getPath'  '('  'next'  ')'  ')'  '.getPath'  '('  ')'] 
__label__1 ['callTimeoutMs=5000'] 
__label__1 ['war.addAsWebInfResource'  '('  'SimpleWebTestCase.class.getPackage'  '('  ')'  ' '  "''"  'web.xml'  "''"  ')'] 
__label__0 getTypeDeclaration ( swaggerModel.getAdditionalProperties ( ) ) 
__label__0 deployments.get ( deploymentName ) 
__label__0 Lists.newArrayList ( stream1 , stream2 ) 
__label__1 ['JavaAssistUtils.getParameterType'  '('  'parameterTypes'  ')'] 
__label__1 ['n.intValue'  '('  ')'] 
__label__1 ['GL20.glUniform2'  '('  'location'  ' '  'toFloatBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '<'  '<'  '1'  ')'  ')'] 
__label__1 ['segmentsInCluster.get'  '('  'segment.getIdentifier'  '('  ')'  ' '  'server.getTier'  '('  ')'  ')'] 
__label__1 ['compressedProto.length'  '<'  '340000'] 
__label__1 ['serversByLoad.lastKey'  '('  ')'] 
__label__0 BeanMapper.mapList ( books , BookDto.class ) 
__label__0 value.longLongValue ( ) 
__label__0 NoopChatHandlerProvider.class 
__label__1 ['('  '('  'Number'  ')'  's.first'  '('  ')'  ')'  '.intValue'  '('  ')'] 
__label__1 ['srcActivity.getParent'  '('  ')'  '=='  'null'] 
__label__0 new StringBuilder ( 726 ) 
__label__1 ['assertEquals'  '('  '15'  ' '  'rows.size'  '('  ')'  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'discarding'  '{'  '}'  'messages'  'because'  'the'  'Netty'  'client'  'to'  '{'  '}'  'is'  'being'  'closed'  "''"  ' '  'numMessages'  ' '  'dstAddressPrefixedName'  ')'] 
__label__0 AvailablePortFinder.getNextAvailable ( 3000 ) 
__label__1 ['CHECK_TEXT.get'  '('  '``'  'Properties'  "''"  ')'] 
__label__0 ( ( ChannelProgressivePromise ) promise ) .tryProgress ( progress , -1 ) 
__label__0 endFunction ( `` get_column_statistics_by_partition : `` , statsObj ! = null , null ) 
__label__0 caught.isArrayPattern ( ) 
__label__0 assertFalse ( predicate.apply ( pickleEvent ) ) 
__label__1 ['mapContainer.getMapConfig'  '('  ')'  '.getTimeToLiveSeconds'  '('  ')'  '*'  '1000'] 
__label__0 Foundation.log ( `` [ error ] `` + tag + `` : `` + message ) 
__label__0 scheduler.scheduleRecurring ( indexPopulation , countInvocationsJob,2 , MILLISECONDS ) 
__label__0 logger.trace ( `` rapidRefreshFutureEnd stopping '' ) 
__label__1 ['this.nameDefinitionMultimap.remove'  '('  'name'  ' '  'node'  ')'] 
__label__1 ['targetActor.addListener'  '('  'listener'  ')'] 
__label__1 ['new'  'byte'  '['  '9'  ']'] 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__1 ['mock.expectedMessageCount'  '('  '0'  ')'] 
__label__0 FISHING_ROD ( 346,1,32 ) 
__label__0 jmsManager.removeQueueFromJNDI ( queueName ) 
__label__0 node.getLifecycleService ( ) .shutdown ( ) 
__label__1 ['statistics.addPutTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` jms '' ) 
__label__1 ['GL.glGenTexturesEXT'  '('  'n'  ' '  'toBuffer'  '('  'textures'  ' '  'offset'  ')'  ' 0'  ')'] 
__label__1 ['expiresOn.getTime'  '('  ')'] 
__label__0 relations.replace ( oldName , newTable ) == null 
__label__1 ['registry.put'  '('  '``'  'firehoseClient'  "''"  ' '  'amazonKinesisFirehoseClient'  ')'] 
__label__1 ['auth.inMemoryAuthentication'  '('  ')'  '.withUser'  '('  '``'  'admin'  "''"  ')'  '.password'  '('  '``'  'admin'  "''"  ')'  '.roles'  '('  '``'  'ADMIN'  "''"  ' '  "''"  'USER'  "''"  ')'] 
__label__1 ['configList.size'  '('  ')'  '=='  '0'] 
__label__1 ['buffer.capacity'  '('  ')'] 
__label__1 ['test'  '('  '``'  'var'  'foo'  '='  'function'  '('  ')'  '{'  'if'  '('  'true'  ')'  'var'  'module'  '='  '{'  '}'  ';'  "''"  '+'  '``'  'module.exports'  '='  '{'  '}'  ';'  '}'  ';'  "''"  '+'  '``'  'module.exports'  '='  'foo'  ';'  "''"  ' '  "''"  'goog.provide'  '('  "'module"  '$'  'test'  "'"  ')'  ';'  "''"  '+'  '``'  'var'  'foo'  '$'  '$'  'module'  '$'  'test=function'  '('  ')'  '{'  'if'  '('  'true'  ')'  'var'  'module='  '{'  '}'  ';'  "''"  '+'  '``'  'module.exports='  '{'  '}'  '}'  ';'  "''"  '+'  '``'  'var'  'module'  '$'  'test=foo'  '$'  '$'  'module'  '$'  'test'  "''"  ')'] 
__label__1 ['cSet.getConcept'  '('  ')'] 
__label__0 HttpRequest.post ( `` http : //localhost:8080/ejbws-example/SingletonEndpoint '' , message,10 , SECONDS ) 
__label__0 redeliveryDelayResult > maximumRedeliveryDelay 
__label__1 ['('  'getStatus'  '('  ')'  '.getState'  '('  ')'  '=='  'OperationState.CANCELED'  ')'  '||'  '('  'getStatus'  '('  ')'  '.getState'  '('  ')'  '=='  'OperationState.TIMEDOUT'  ')'  '||'  '('  'getStatus'  '('  ')'  '.getState'  '('  ')'  '=='  'OperationState.CLOSED'  ')'] 
__label__1 ['log.error'  '('  '``'  'Checking'  'bounds'  '['  '{'  '}'  ' '  '{'  '}'  ')'  '('  'expect'  '{'  '}'  'keys'  ')'  "''"  ' '  'new'  'Object'  '['  ']'  '{'  'startCol'  ' '  'endCol'  ' '  'expected.size'  '('  ')'  '}'  ')'] 
__label__1 ['8'  '*'  'Constants.MB'] 
__label__0 abandonSegment ( entry.getKey ( ) , entry.getValue ( ) ) 
__label__1 ['stat.st_ctim.tv_nsec.get'  '('  ')'] 
__label__0 private ErrorPageFilter filter=new ErrorPageFilter ( ) ; 
__label__0 Error|ClassNotFoundException 
__label__0 ssl.hasDefined ( CommonAttributes.CIPHER_SUITE ) 
__label__1 ['layout.setRefreshingLabel'  '('  'label'  ')'] 
__label__0 GL20.glUniform4iv ( location , v ) 
__label__1 ['aliases.size'  '('  ')'  '>'  '0'] 
__label__1 ['Arrays.asList'  '('  '``'  'spring-boot-starter-jetty-'  "''"  ' '  "''"  'jetty-continuation'  "''"  ' '  "''"  'jetty-util-'  "''"  ' '  "''"  'javax.servlet-'  "''"  ' '  "''"  'jetty-io-'  "''"  ' '  "''"  'jetty-http-'  "''"  ' '  "''"  'jetty-server-'  "''"  ' '  "''"  'jetty-security-'  "''"  ' '  "''"  'jetty-servlet-'  "''"  ' '  "''"  'jetty-servlets'  "''"  ' '  "''"  'jetty-webapp-'  "''"  ' '  "''"  'websocket-api'  "''"  ' '  "''"  'javax.annotation-api'  "''"  ' '  "''"  'jetty-plus'  "''"  ' '  "''"  'javax-websocket-server-impl-'  "''"  ' '  "''"  'asm-'  "''"  ' '  "''"  'javax.websocket-api-'  "''"  ' '  "''"  'asm-tree-'  "''"  ' '  "''"  'asm-commons-'  "''"  ' '  "''"  'websocket-common-'  "''"  ' '  "''"  'jetty-annotations-'  "''"  ' '  "''"  'javax-websocket-client-impl-'  "''"  ' '  "''"  'websocket-client-'  "''"  ' '  "''"  'websocket-server-'  "''"  ' '  "''"  'jetty-xml-'  "''"  ' '  "''"  'websocket-servlet-'  "''"  ')'] 
__label__0 logger.debug ( `` gave up waiting for query reply from device { } '' , m_address ) 
__label__1 ['text.equals'  '('  '('  '('  'TextButton'  ')'  'button'  ')'  '.getText'  '('  ')'  ')'] 
__label__0 new java.util.Date ( System.currentTimeMillis ( ) - 24 * 3600 * 1000 ) 
__label__1 ['new'  'StringBuilder'  '('  '254'  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 Character.isWhitespace ( origText.charAt ( i ) ) 
__label__0 JSError.make ( SourceMapInput.SOURCEMAP_PARSE_FAILED , sourceMapPath , e.getMessage ( ) ) 
__label__0 builder.put ( columnHandle,0.0 ) 
__label__1 ['ProxyHelper.createProxy'  '('  'endpoint'  ' '  'ISay.class'  ')'] 
__label__1 ['PlatformDependent.getByte'  '('  'index'  ')'] 
__label__1 ['methodName.startsWith'  '('  '``'  'save'  "''"  ')'] 
__label__0 / * * * The resource . * / private R mResource ; 
__label__0 @ InputIntMethodAnnotation ( value=43 ) 
__label__0 new StringInputRowParser ( new DelimitedParseSpec ( new TimestampSpec ( `` ts '' , '' iso '' ) , new DimensionsSpec ( Arrays.asList ( DIMENSIONS ) , null , null ) , '' \t '' , Arrays.asList ( COLUMNS ) ) , null , null , null , null ) 
__label__0 websocketComponent.setMaxThreads ( 20 ) 
__label__1 ['undertowHost.getServer'  '('  ')'  '.getListeners'  '('  ')'  '.get'  '('  '0'  ')'  '.getBinding'  '('  ')'  '.getValue'  '('  ')'  '.getPort'  '('  ')'] 
__label__0 converter.tryConvertTo ( rightValue.getClass ( ) , leftValue ) 
__label__1 ['items'  '['  '22'  ']'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['values'  '['  'i'  ']'  '=='  'values'] 
__label__1 ['isSdkLocationValid'  '('  'sdkLocation'  ')'] 
__label__0 config.setProxyURL ( modelconf.get ( CommonAttributes.PROXY_URL ) .asString ( ) ) 
__label__1 ['path.toString'  '('  ')'] 
__label__0 runningTasks.remove ( assignedTask ) 
__label__0 oldModel.getVendorExtensions ( ) .get ( `` x-className '' ) ! = null 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['builder120.build'  '('  ')'] 
__label__1 ['ALIAS.addResourceAttributeDescription'  '('  'resources'  ' '  'keyPrefix'  ' '  'container'  ')'] 
__label__0 mesh.getNumVertices ( ) / 4 
__label__1 ['System.getProperty'  '('  'propName'  ')'] 
__label__0 hz1.getLifecycleService ( ) .shutdown ( ) 
__label__0 i < Integer.MAX_VALUE 
__label__0 In.forValue ( apiKeyAuthConfig.in ( ) .toValue ( ) ) 
__label__0 obj.getRequiredTokens ( ) 
__label__1 ['connection.local'  '('  ')'  '.createStream'  '('  'toStreamId'  '('  'i'  ')'  ')'] 
__label__0 ! regex.equals ( lastRegex ) || p == null 
__label__0 public class XpathRegressionOuterTypeNumberTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=OuterTypeNumberCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionOuterTypeNumber.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( OuterTypeNumberCheck.class ) ; moduleConfig.addAttribute ( `` max '' , '' 0 '' ) ; final String [ ] expectedViolation= { `` 1:1 : `` + getCheckMessage ( OuterTypeNumberCheck.class , OuterTypeNumberCheck.MSG_KEY,3,0 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /PACKAGE_DEF '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__0 timeoutLatch.await ( 2500 , TimeUnit.MILLISECONDS ) 
__label__1 ['saveTask'  '('  'taskDefinition'  ')'] 
__label__1 ['qp.getExclusiveMinimum'  '('  ')'] 
__label__0 cf.getCompressionType ( ) == null || cf.getCompressionType ( ) == Compression.Algorithm.NONE 
__label__1 ['?'  'extends'  'Exception'] 
__label__1 ['newEmbeddedDatabaseBuilder'  '('  'path'  ')'] 
__label__1 ['!'  'dynamicState.changingBlobs.isEmpty'  '('  ')'] 
__label__0 Cli. < Runnable > builder ( `` presto '' ) 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'transit'  'standby'  'cluster'  'to'  '``'  '+'  'SyncReplicationState.DOWNGRADE_ACTIVE'  ')'] 
__label__0 Iterable < ? extends IJsonNode > 
__label__1 ['('  '('  'ExchangeIdempotentRepository'  '<'  'String'  '>'  ')'  'idempotentRepository'  ')'  '.contains'  '('  'exchange'  ' '  'messageId'  ')'] 
__label__0 req.startAsync ( req , res ) 
__label__0 new IncrementalIndexSegment ( TestIndex.getIncrementalTestIndex ( ) , null ) 
__label__1 ['new'  'Exception'  '('  '``'  'File'  '``'  '+'  'file.getPath'  '('  ')'  '+'  '``'  'should'  'not'  'exist'  "''"  ')'] 
__label__1 ['0'  '=='  'CheckUtils.parseFloat'  '('  'text'  ' '  'type'  ')'] 
__label__0 mContext.getClass ( ) 
__label__1 ['testError'  '('  'js'  ' '  'ConstCheck.CONST_REASSIGNED_VALUE_ERROR'  ')'] 
__label__1 ['Integer.valueOf'  '('  'quantifier'  ')'] 
__label__0 waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs ( 20000,200 ) 
__label__0 DEFAULT_ROW_FLUSH_BOUNDARY=75000 
__label__1 ['buffer.rewind'  '('  ')'  '.forward'  '('  '('  'int'  ')'  'n'  ')'  '.getFixString'  '('  '('  'int'  ')'  'str_len'  ')'] 
__label__1 ['('  'Long'  ')'  '123l'] 
__label__0 KeyValueHolder < String , Processor > 
__label__0 config.getClientNumThreads ( ) 
__label__1 ['executor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  'Window'  'Update'  '%'  's'  'stream'  '%'  'd'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'try'  '{'  'frameWriter.windowUpdate'  '('  'streamId'  ' '  'unacknowledgedBytesRead'  ')'  ';'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'Requesting'  'TaskManager'  "'s"  'path'  'for'  'query'  'services'  'failed'  '.'  '``'  ' '  'throwable'  ')'] 
__label__0 GL20.glUniform1iv ( location , toIntBuffer ( v , offset , count ) ) 
__label__1 ['t3.getSize'  '('  ')'] 
__label__0 value.toBigInteger ( ) 
__label__1 ['twitter1.getHomeTimeline'  '('  'new'  'Paging'  '('  ')'  '.count'  '('  '1'  ')'  ')'] 
__label__0 logger.error ( `` Endpoint { } not found on node { } . Can not set command classes . `` , endpointId , this.getNode ( ) .getNodeId ( ) ) 
__label__1 ['meta.setContentEncoding'  '('  'Mimetypes.MIMETYPE_OCTET_STREAM'  ')'] 
__label__0 fileInfo.getUfsPath ( ) 
__label__1 ['writeLock'  '('  ')'] 
__label__1 ['testConsumerConfig'  '('  ')'] 
__label__0 ArrayUtils.subarray ( args,3 , args.length ) 
__label__1 ['new'  'ModelNode'  '('  ')'  '.set'  '('  '60000'  ')'] 
__label__1 ['new'  'PrestoException'  '('  'INVALID_CAST_ARGUMENT'  ' '  'e'  ')'] 
__label__1 ['('  'a'  '&'  '0xe0'  ')'  '=='  '0xb0'] 
__label__1 ['wsdlLocation.length'  '('  ')'  '>'  '0'] 
__label__1 ['client.get'  '('  'path'  ')'] 
__label__0 ImmutableSortedMap < Integer , Integer > 
__label__1 ['put.writeToWAL'  '('  ')'] 
__label__0 logger.debug ( `` Calimero library version { } '' , Settings.getLibraryVersion ( ) ) 
__label__1 ['ignoreOverridenMethods'  '&'  '&'  '('  'AnnotationUtility.containsAnnotation'  '('  'methodDef'  ' '  "''"  'Override'  "''"  ')'  '||'  'AnnotationUtility.containsAnnotation'  '('  'methodDef'  ' '  "''"  'java.lang.Override'  "''"  ')'  ')'] 
__label__1 ['putInternal'  '('  'mapService.getMapServiceContext'  '('  ')'  '.toData'  '('  'entry.getKey'  '('  ')'  ' '  'partitionStrategy'  ')'  ' '  'mapService.getMapServiceContext'  '('  ')'  '.toData'  '('  'entry.getValue'  '('  ')'  ')'  ' '  '-1'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__1 ['defaults.jackson2Encoder'  '('  'new'  'Jackson2JsonEncoder'  '('  'objectMapper'  ' '  'EMPTY_MIME_TYPES'  ')'  ')'] 
__label__1 ['log.trace'  '('  '``'  'Failed'  'to'  'deploy'  '!'  '!'  "''"  ')'] 
__label__1 ['Long.valueOf'  '('  'timeout'  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['Float.valueOf'  '('  'value.toString'  '('  ')'  ')'] 
__label__1 ['Collection'  '<'  'DelayedEntry'  '>'] 
__label__0 AddressHelper.getPossibleSocketAddresses ( address.getPort ( ) , address.getHost ( ) ,1 ) 
__label__1 ['e.getMessage'  '('  ')'] 
__label__1 ['new'  'CommandFormatException'  '('  '``'  'The'  'result'  'could'  "n't"  'be'  'retrieved'  '('  'perhaps'  'the'  'task'  'was'  'cancelled'  "''"  ' '  'e'  ')'] 
__label__1 ['r.locals.ast=returns'] 
__label__0 mapConfig.getBackupCount ( ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class TransactionalSetBasicLocalTest extends TransactionalSetAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 1 ) .newInstances ( config ) ; } } 
__label__0 ids.getIDs ( ) .length > 50 
__label__1 ['Float.parseFloat'  '('  'position.getChildByName'  '('  '``'  'Y'  "''"  ')'  '.getText'  '('  ')'  ')'] 
__label__1 ['idAnnotation'  '!'  '='  'null'] 
__label__0 v.getCreationTime ( ) + timeToLive < now 
__label__1 ['from'  '('  '``'  'direct'  ':'  'start'  "''"  ')'  '.multicast'  '('  'new'  'AggregationStrategy'  '('  ')'  '{'  'public'  'Exchange'  'aggregate'  '('  'Exchange'  'oldExchange'  ' '  'Exchange'  'newExchange'  ')'  '{'  'if'  '('  'oldExchange'  '=='  'null'  ')'  '{'  'return'  'newExchange'  ';'  '}'  'String'  'body=oldExchange.getIn'  '('  ')'  '.getBody'  '('  'String.class'  ')'  ';'  'oldExchange.getIn'  '('  ')'  '.setBody'  '('  'body'  '+'  'newExchange.getIn'  '('  ')'  '.getBody'  '('  'String.class'  ')'  ')'  ';'  'return'  'oldExchange'  ';'  '}'  '}'  ')'  '.parallelProcessing'  '('  ')'  '.timeout'  '('  '2000'  ')'] 
__label__1 ['logger.info'  '('  '``'  'Remove'  'try/catch/finally'  "''"  ')'] 
__label__0 t.replace ( R.id.frame , new SampleListFragment ( ) ) 
__label__1 ['patientState.getState'  '('  ')'  '.getId'  '('  ')'] 
__label__0 LOG.debug ( `` Creating netty input stream for block { } @ { } from client { } '' , blockId , address , NetworkAddressUtils.getClientHostName ( ) ) 
__label__0 TestUtils.randomByte ( ) + 128 
__label__1 ['qp.getExclusiveMinimum'  '('  ')'] 
__label__0 StringBuilder pattern=new StringBuilder ( this.prefix ) ; 
__label__1 ['NUMBER_OF_IDS_PER_THREAD=400001'] 
__label__1 ['exportReturnCodes'  '('  'exporter'  ')'] 
__label__1 ['private'  'static'  'class'  'TestException'  'extends'  'Exception'  '{'  'private'  'static'  'final'  'long'  'serialVersionUID=1L'  ';'  '@'  'Override'  'public'  'void'  'printStackTrace'  '('  'PrintWriter'  'printWriter'  ')'  '{'  'printWriter.print'  '('  '``'  'stackTrace'  "''"  ')'  ';'  '}'  '}'] 
__label__1 ['partitionContainer.getRecordStore'  '('  'name'  ')'] 
__label__0 AstUtils.hasAtLeastOneAnnotation ( classNode , '' MessageEndpoint '' , '' EnableIntegrationPatterns '' ) 
__label__0 HeartbeatScheduler.await ( HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC,500 , TimeUnit.SECONDS ) 
__label__1 ['LOGGER.log'  '('  'Level.SEVERE'  ' '  'LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM'  '('  ')'  ')'] 
__label__0 `` Unsupported filesystem scheme found in the backup target url . Error Message : `` + expMsg 
__label__0 assertEquals ( input.getFieldCount ( ) ,4 ) 
__label__0 serverService.getOutgoingInterceptors ( ) 
__label__1 ['field.getRawType'  '('  ')'] 
__label__0 `` Using bind address : `` + bindAddress 
__label__0 jniGetLocalAxisA ( addr , tmp ) 
__label__1 ['GatherGettersAndSetterProperties.gather'  '('  'compiler'  ' '  'mainRoot'  ')'] 
__label__0 Logger.getLogger ( loggerName ) .getEffectiveLevel ( ) 
__label__0 CompletableFuture < Void > 
__label__1 ['Bytes.toBytesBinary'  '('  'tableNameOrRegionName'  ')'] 
__label__1 ['values'  '=='  'null'] 
__label__1 ['potentialResponse'  '=='  'null'] 
__label__1 ['getConnectionAddOperation'  '('  'name'  ' '  'outboundSocketBindingRef'  ' '  'address'  ')'] 
__label__1 ['HttpAuthenticationFactory.class'] 
__label__1 ['setSunPosition'  '('  'calendar'  ' '  'latitude'  ' '  'longitude'  ' '  'sun'  ')'] 
__label__1 ['mapper.getJsonFactory'  '('  ')'] 
__label__1 ['option'  '=='  'JOptionPane.CANCEL_OPTION'] 
__label__0 User.createUsersList ( http.get ( `` http : //yusuke.homeip.net/twitter4j/en/testcases/statuses/followers/T4J_hudson.json '' ) ) 
__label__1 ['buffer.getInt8'  '('  ')'] 
__label__0 CsvReporter.forRegistry ( registry ) .convertDurationsTo ( getDurationUnit ( ) ) .convertRatesTo ( getRateUnit ( ) ) 
__label__1 ['newEmbeddedDatabaseBuilder'  '('  'path'  ')'] 
__label__1 ['mapServiceContext.hasRegisteredListener'  '('  'mapName'  ')'] 
__label__0 UIPasteboard.getGeneralPasteboard ( ) 
__label__1 ['result.expectedMessageCount'  '('  '3'  ')'] 
__label__0 edge.setDirection ( edgeDefault ) 
__label__0 test ( `` var foo = function ( a ) { } ; foo.call ( null , 1 ) ; '' , '' var foo = function ( ) { var a $ jscomp $ 1 = 1 ; } ; foo.call ( null ) ; '' ) 
__label__1 ['proxy.getHostText'  '('  ')'] 
__label__1 ['getJSDocTypeWithBraces'  '('  'cm'  ' '  'var'  ')'] 
__label__0 FileSystemMaster.class 
__label__1 ['deployment.addServletContainerInitalizer'  '('  'new'  'ServletContainerInitializerInfo'  '('  'Initializer.class'  ' '  'new'  'ImmediateInstanceFactory'  '<'  'ServletContainerInitializer'  '>'  '('  'initializer'  ')'  ' '  'NO_CLASSES'  ')'  ')'] 
__label__0 elementName=options.get ( ELEMENT_NAME ) 
__label__0 Thread.sleep ( 10000 ) 
__label__0 AtmosphereRequest request 
__label__0 public class XpathRegressionMethodParamPadTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=MethodParamPadCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionMethodParamPadOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( MethodParamPadCheck.class ) ; final String [ ] expectedViolation= { `` 4:37 : `` + getCheckMessage ( MethodParamPadCheck.class , MethodParamPadCheck.MSG_WS_PRECEDED , '' ( `` ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionMethodParamPadOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='InputMethodParamPad ' ] /LPAREN '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=MethodParamPadCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionMethodParamPadTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( MethodParamPadCheck.class ) ; final String [ ] expectedViolation= { `` 5:13 : `` + getCheckMessage ( MethodParamPadCheck.class , MethodParamPadCheck.MSG_LINE_PREVIOUS , '' ( `` ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionMethodParamPadTwo ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='sayHello ' ] /LPAREN '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testThree ( ) throws Exception { final String checkName=MethodParamPadCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionMethodParamPadThree.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( MethodParamPadCheck.class ) ; moduleConfig.addAttribute ( `` option '' , '' space '' ) ; final String [ ] expectedViolation= { `` 4:25 : `` + getCheckMessage ( MethodParamPadCheck.class , MethodParamPadCheck.MSG_WS_NOT_PRECEDED , '' ( `` ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionMethodParamPadThree ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='sayHello ' ] /LPAREN '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__0 / * * * Changes the group of a file or directory specified by args recursively . * / public final class ChgrpRecursiveCommand extends AbstractAclCommand { public ChgrpRecursiveCommand ( TachyonConf conf , TachyonFileSystem tfs ) { super ( conf , tfs ) ; } @ Override public String getCommandName ( ) { return `` chgrpr '' ; } @ Override protected int getNumOfArgs ( ) { return 2 ; } @ Override public void run ( String ... args ) throws IOException { String group=args [ 0 ] ; TachyonURI path=new TachyonURI ( args [ 1 ] ) ; chgrp ( path , group , true ) ; } @ Override public String getUsage ( ) { return `` chgrpr < group > < path > '' ; } } 
__label__1 ['sanitizedName'  '('  'name'  ')'] 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__0 registered.remove ( objectName ) 
__label__0 Preconditions.checkNotNull ( path , '' path '' ) 
__label__0 Thread.sleep ( 2000 ) 
__label__1 ['DiagnosticGroups.registerGroup'  '('  '``'  'functionParams'  "''"  ' '  'FunctionTypeBuilder.OPTIONAL_ARG_AT_END'  ')'] 
__label__0 segments.add ( segment ) 
__label__0 testError ( js , VariableReferenceCheck.REDECLARED_VARIABLE ) 
__label__0 DEFAULT_LABEL_MIPMAP=false 
__label__0 d.setDefaultEncoding ( mergedMetaData.getDefaultEncoding ( ) ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['HttpRequest.put'  '('  '``'  'http'  ':'  '//localhost:8080/ejbws-example/SingletonEndpoint'  "''"  ' '  'message 10'  ' '  'SECONDS'  ')'] 
__label__0 LOG.warn ( `` I/O error when running rpc '' , e ) 
__label__1 ['FloatBuffer'  'target'] 
__label__1 ['``'  'access-control/default'  'is'  'missing'  'operations'  ':'  '``'  '+'  'accessControl'] 
__label__0 ImmutableList < ObjectType > 
__label__0 serverSocket == null || ! serverSocket.isBound ( ) 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__0 Assert.assertFalse ( provider.checkValid ( `` SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE ( 4484 , CONCAT ( 0x5c,0x7163646371 , ( SELECT ( CASE WHEN ( 4484=4484 ) THEN 1 ELSE 0 END ) ) ,0x7165767271 ) ) '' ) ) 
__label__1 ['lights.shadowMap'  '!'  '='  'null'] 
__label__1 ['Thread.sleep'  '('  '600'  ')'] 
__label__0 Assert.notNull ( artifactId , '' ArtifactId must not be null '' ) 
__label__0 rSocketMessageHandler.responder ( ) 
__label__0 SSLContext.setCertificateChainFile ( ctx , trustCertChainFile.getPath ( ) , false ) 
__label__1 ['addKeys'  '('  'externalClasses'  ' '  'DATE'  ' '  "''"  'org.joda.time.LocalDate'  "''"  ')'] 
__label__0 CompletableFuture < Void > 
__label__0 getPreferences ( ) .put ( key , value ) 
__label__1 ['packFileName.substring'  '('  'packFileName.length'  '('  ')'  '-'  'settings.atlasExtension.length'  '('  ')'  ')'] 
__label__0 mock.expectedBodiesReceivedInAnyOrder ( `` Hello World 3 '' ) 
__label__0 ReactiveHelper.schedule ( runnable , '' Multicast next step '' ) 
__label__1 ['ServiceAnnouncingChatHandlerProvider.class'] 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__1 ['``'  'LEVEL'  "''"  '.equalsIgnoreCase'  '('  'ident'  ')'] 
__label__0 exportAttributes & & attributeModel ! = null 
__label__1 ['waitYieldLatch.await'  '('  '25'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__1 ['AnimationAdapter'  '<'  'T'  '>'] 
__label__0 LOG.warn ( `` Storage directory `` + rootPath + `` does not exist '' ) 
__label__0 request.getRemoteAddr ( ) 
__label__1 ['mock.expectedMessageCount'  '('  '1'  ')'] 
__label__0 new InputStreamReader ( is , '' UTF-8 '' ) 
__label__0 new CreateTableAsSelect ( temporaryTableName , ( Query ) statement , false , tablePropertyOverrides , true , Optional.of ( generateStorageColumnAliases ( ( Query ) statement , controlConfiguration , context ) ) , Optional.empty ( ) ) 
__label__1 ['serializer.serializeServerFailure'  '('  'ctx.alloc'  '('  ')'  ' '  'new'  'RuntimeException'  '('  'msg'  ')'  ')'] 
__label__0 ImmutableList.copyOf ( interceptors ) 
__label__1 ['Call'  '<'  'L'  '>'] 
__label__1 ['Generics.newHashMap'  '('  ')'] 
__label__0 Long.parseLong ( args [ 1 ] ) 
__label__1 ['assertEquals'  '('  'ex.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  "''"  'ClassInfo'  "'s"  'name'  'should'  'be'  'non-null'  "''"  ')'] 
__label__0 layout.setReleaseLabel ( label ) 
__label__1 ['wrapper.shutdownNow'  '('  ')'] 
__label__0 subtypeProps == null || subtypeProps.isEmpty ( ) 
__label__0 inner.deletedRelationships ( ) 
__label__1 ['COUNT_DATABASE.put'  '('  'key'  ' '  'val'  ')'] 
__label__0 element.getLocalName ( ) 
__label__0 className.lastIndexOf ( `` org.openmrs . '' ) 
__label__1 ['new'  'File'  '('  'FilenameUtils.getBaseName'  '('  'file'  ')'  '+'  '``'  '_dex2jar.jar'  "''"  ')'] 
__label__0 ChannelBuffers.wrappedBuffer ( request.getByteData ( ) ) 
__label__1 ['clazz.getConstructor'  '('  'ConstantsAndVariables.class'  ' '  'PatternScoring.class'  ' '  'String.class'  ' '  'TwoDimensionalCounter.class'  ' '  'TwoDimensionalCounter.class'  ' '  'TwoDimensionalCounter.class'  ' '  'TwoDimensionalCounter.class'  ' '  'TwoDimensionalCounter.class'  ')'] 
__label__0 historicState ( item , timestamp , serviceName ) 
__label__1 ['TestUtils.randomByte'  '('  ')'  '+'  '127'] 
__label__1 ['LOG.error'  '('  '``'  'Read'  'offset'  '{'  '}'  'before'  'start'  'of'  'log'  'at'  '{'  '}'  ' '  'starting'  'to'  'read'  'from'  'the'  'beginning'  'of'  'the'  'journal'  '.'  '``'  ' '  'readOffset'  ' '  'logStartOffset'  ')'] 
__label__0 public Builder setProxyPort ( int port ) { this.proxyPort=port ; return this ; } 
__label__0 @ SuppressWarnings ( `` unused '' ) private final WeakSafeReadWriteLock strongReference ; 
__label__0 new DataSegment ( `` test '' , new Interval ( `` 2012-02-01/2012-02-02 '' ) , new DateTime ( ) .toString ( ) , Maps. < String , Object > newHashMap ( ) , Lists. < String > newArrayList ( ) , Lists. < String > newArrayList ( ) , new NoneShardSpec ( ) ,1,0 ) 
__label__0 ! Objects.isNull ( value ) 
__label__1 ['e.getMessage'  '('  ')'] 
__label__0 factory.getEmbeddedServletContainer ( ) 
__label__1 ['mock.expectedMessageCount'  '('  '10'  ')'] 
__label__1 ['protected'  'FontMetrics'  'fontMetrics'  ';'] 
__label__0 Character.toUpperCase ( ch ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__0 ! sourceEdgeTextData.getText ( ) .isEmpty ( ) 
__label__0 mock.expectedMinimumMessageCount ( 2 ) 
__label__1 ['lookupService.lookupPrincipalByGroupName'  '('  'user'  ')'] 
__label__1 ['zwaveCommandClass.handleApplicationCommandRequest'  '('  'serialMessage'  ' '  'offset'  '+'  '2 1'  ')'] 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'Cell'  'clonedBaseCell='  '('  '('  'ExtendedCell'  ')'  'this.cell'  ')'  '.deepClone'  '('  ')'  ';'  'return'  'new'  'TagRewriteCell'  '('  'clonedBaseCell'  ' '  'this.tags'  ')'  ';'  '}'] 
__label__1 ['@'  'Override'  'public'  'ResponseImpl'  'header'  '('  'String'  'name'  ' '  'Property'  'property'  ')'  '{'  'throw'  'new'  'RuntimeException'  '('  '``'  'Not'  'implemented'  "''"  ')'  ';'  '}'] 
__label__0 LOCAL_OPTION.getLongOpt ( ) 
__label__1 ['entry.getKey'  '('  ')'  '.getHostName'  '('  ')'] 
__label__0 this.thrown.expect ( IllegalStateException.class ) 
__label__0 DefaultBroadcaster.class.cast ( resource.getBroadcaster ( ) ) .broadcasterCache.addToCache ( resource.getBroadcaster ( ) .getID ( ) , resource , msg ) 
__label__0 assertEquals ( 1000 , timeout ) 
__label__0 filters= { StringFilterAggregator.class } 
__label__1 ['buffer.nextValue'  '('  'info.type'  ' '  'info.meta'  ')'] 
__label__1 ['proxy.getHostText'  '('  ')'] 
__label__1 ['public'  'class'  'XpathRegressionImportControlTest'  'extends'  'AbstractXpathTestSupport'  '{'  '@'  'Test'  'public'  'void'  'testOne'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=ImportControlCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionImportControlOne.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'ImportControlCheck.class'  ')'  ';'  'moduleConfig.addAttribute'  '('  '``'  'file'  "''"  ' '  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionImportControlOne.xml'  "''"  ')'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '3:1'  ':'  '``'  '+'  'getCheckMessage'  '('  'ImportControlCheck.class'  ' '  'ImportControlCheck.MSG_DISALLOWED'  ' '  "''"  'java.util.Scanner'  "''"  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/IMPORT'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testTwo'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=ImportControlCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionImportControlTwo.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'ImportControlCheck.class'  ')'  ';'  'moduleConfig.addAttribute'  '('  '``'  'file'  "''"  ' '  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionImportControlTwo.xml'  "''"  ')'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '1:1'  ':'  '``'  '+'  'getCheckMessage'  '('  'ImportControlCheck.class'  ' '  'ImportControlCheck.MSG_UNKNOWN_PKG'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/PACKAGE_DEF'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testThree'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=ImportControlCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionImportControlThree.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'ImportControlCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '1:1'  ':'  '``'  '+'  'getCheckMessage'  '('  'ImportControlCheck.class'  ' '  'ImportControlCheck.MSG_MISSING_FILE'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/PACKAGE_DEF'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testFour'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=ImportControlCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionImportControlFour.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'ImportControlCheck.class'  ')'  ';'  'moduleConfig.addAttribute'  '('  '``'  'file'  "''"  ' '  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionImportControlFour.xml'  "''"  ')'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '4:1'  ':'  '``'  '+'  'getCheckMessage'  '('  'ImportControlCheck.class'  ' '  'ImportControlCheck.MSG_DISALLOWED'  ' '  "''"  'java.util.Scanner'  "''"  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/IMPORT'  '['  './DOT'  '['  '@'  "text='Scanner"  "'"  ']'  ']'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '}'] 
__label__1 ['TestUtils.randomByte'  '('  ')'  '+'  '127'] 
__label__0 model ! = null & & model.getSelectedLayout ( ) ! = null 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__1 ['Object'  'strongReference'] 
__label__1 ['assertOpenEventually'  '('  'latch 3'  ')'] 
__label__1 ['case'  'READ_UNCOMMITED'  ':'] 
__label__0 controller ! = null & & controller.getState ( ) ! = ServiceController.State.UP 
__label__0 ObjectTypeAttributeDefinition.Builder.of ( ModelKeys.REMOTE_SERVER , OUTBOUND_SOCKET_BINDING ) .setAllowNull ( false ) 
__label__0 edgeColumn.getIndex ( ) 
__label__1 ['pool'  '!'  '='  'null'  '&'  'pool.getDataSource'  '('  ')'  '.getClass'  '('  ')'  '.isAssignableFrom'  '('  'iface'  ')'] 
__label__0 uncompressedProto.length < 2550000 
__label__0 MAX_PRETTY_PRINTED_PROPERTIES=10 
__label__1 ['FileNotFoundException'  'ex'] 
__label__0 rowsRet < = 0 || work.getLimit ( ) == totalRows 
__label__1 ['Gdx.files.internal'  '('  'fileName'  ')'  '.nameWithoutExtension'  '('  ')'] 
__label__1 ['System.nanoTime'  '('  ')'] 
__label__0 mTestStream.getFlushedBytes ( ) 
__label__0 WebSocketEventListener.class.cast ( l ) .onHandshake ( event ) 
__label__1 ['this.applicationContext.register'  '('  'RootConfig.class'  ' '  'DifferentPortConfig.class'  ' '  'PropertyPlaceholderAutoConfiguration.class'  ' '  'EmbeddedServletContainerAutoConfiguration.class'  ' '  'DispatcherServletAutoConfiguration.class'  ' '  'WebMvcAutoConfiguration.class'  ' '  'ManagementServerPropertiesAutoConfiguration.class'  ' '  'EndpointWebMvcAutoConfiguration.class'  ')'] 
__label__1 ['from'  '('  'Constants.PARALLEL_LOANBROKER_URI'  ')'  '.process'  '('  'new'  'CreditScoreProcessor'  '('  'Constants.CREDITAGENCY_ADDRESS'  ')'  ')'  '.multicast'  '('  'new'  'BankResponseAggregationStrategy'  '('  ')'  ')'  '.parallelProcessing'  '('  'true'  ')'] 
__label__0 in.readFully ( serCondition ) 
__label__0 filters= { XSSHtmlFilter.class } 
__label__0 IllegalArgumentException.class 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'Cell'  'clonedBaseCell='  '('  '('  'ExtendedCell'  ')'  'this.cell'  ')'  '.deepClone'  '('  ')'  ';'  'if'  '('  'clonedBaseCell'  'instanceof'  'ByteBufferCell'  ')'  '{'  'return'  'new'  'ValueAndTagRewriteByteBufferCell'  '('  '('  'ByteBufferCell'  ')'  'clonedBaseCell'  ' '  'this.value'  ' '  'this.tags'  ')'  ';'  '}'  'return'  'new'  'ValueAndTagRewriteCell'  '('  'clonedBaseCell'  ' '  'this.value'  ' '  'this.tags'  ')'  ';'  '}'] 
__label__1 ['mapper.getJsonFactory'  '('  ')'] 
__label__0 new IOException ( `` test exception '' ) 
__label__1 ['new'  'String'  '('  'bytes2'  ')'] 
__label__1 ['builder120.build'  '('  ')'] 
__label__0 graphModel.getUndirectedGraphVisible ( ) 
__label__0 columnType.equalsIgnoreCase ( `` long '' ) || columnType.equalsIgnoreCase ( `` tinyint '' ) || columnType.equalsIgnoreCase ( `` smallint '' ) || columnType.equalsIgnoreCase ( `` int '' ) || columnType.equalsIgnoreCase ( `` bigint '' ) 
__label__1 ['this.totalBytesWritten+=bytesWritten'] 
__label__0 private CharSequence text ; 
__label__0 alluxioUriToLoad.getPath ( ) 
__label__0 new ProcessBuilder ( startScript , mMesosAddress ) 
__label__1 ['assertEquals'  '('  '1'  ' '  'historyService.createHistoricActivityInstanceQuery'  '('  ')'  '.finished'  '('  ')'  '.list'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__0 ChannelBuffers.wrappedBuffer ( request.getByteData ( ) ) 
__label__1 ['private'  'final'  'DefaultChannelPipeline'  'pipeline'  ';'] 
__label__0 / * * * The root package controller . * / private ImportControl root ; 
__label__0 jsonHotRestartState ! = null 
__label__0 chooser.showOpenDialog ( null ) 
__label__1 ['ufsPath.getPath'  '('  ')'] 
__label__0 results.expectedMessageCount ( 3 ) 
__label__1 ['assertEquals'  '('  '302'  ' '  't.request'  '('  ')'  '.get'  '('  ')'  '.getStatus'  '('  ')'  ')'] 
__label__1 ['newId'  '>'  'max'] 
__label__0 processor.open ( w , request , AtmosphereResponse.newInstance ( framework.getAtmosphereConfig ( ) , request , w ) ) 
__label__0 hints.append ( LocalizationMessages.HINT_MSG ( error.getMessage ( ) ) ) 
__label__1 ['calendar.getTimeZone'  '('  ')'  '.getDSTSavings'  '('  ')'] 
__label__0 twitter4j.List.createListList ( get ( getApiBaseURL ( ) + V1 + user+ `` /lists/subscriptions.json ? cursor= '' + cursor , true ) ) 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__1 ['RestartStrategies.fixedDelayRestart'  '('  '3 0'  ')'] 
__label__0 System.identityHashCode ( o ) 
__label__0 framework.getBroadcasterFactory ( ) .lookup ( a.broadcaster ( ) , a.path ( ) , true ) 
__label__1 ['('  'Integer'  ')'  'criteria.uniqueResult'  '('  ')'] 
__label__0 addProperty ( secondNode , '' band '' , '' The Clash '' ) 
__label__1 ['GL20.glUniform1'  '('  'location'  ' '  'v'  ')'] 
__label__0 context.var ( `` double '' ,2 ) 
__label__0 jsonArray.toString ( 1 ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['new'  'DefaultAgentOption'  '('  'agentArgs'  ' '  'instrumentation'  ' '  'profilerConfig'  ' '  'pluginJars'  ' '  'bootStrapJarPath'  ' '  'serviceTypeRegistryService'  ' '  'annotationKeyRegistryService'  ')'] 
__label__0 new RuntimeException ( `` Could not create TypeInformation for type `` + data [ 0 ] .getClass ( ) .getName ( ) + `` ; please specify the TypeInformation manually via `` + `` StreamExecutionEnvironment # fromElements ( Collection , TypeInformation ) '' , e ) 
__label__0 ImmutableList < String > 
__label__0 result.expectedMinimumMessageCount ( 3 ) 
__label__0 ApacheAsyncHttpProvider.class 
__label__0 new PropertiesLoader ( `` classpath : /application.properties '' , '' classpath : /application.functional.properties '' , '' classpath : /application.functional-local.properties '' ) 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__1 ['assertEquals'  '('  '503'  ' '  'cause.getStatusCode'  '('  ')'  ')'] 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__0 public class XpathRegressionNPathComplexityTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=NPathComplexityCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionNPathComplexityOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( NPathComplexityCheck.class ) ; moduleConfig.addAttribute ( `` max '' , '' 0 '' ) ; final String [ ] expectedViolation= { `` 4:5 : `` + getCheckMessage ( NPathComplexityCheck.class , NPathComplexityCheck.MSG_KEY,3,0 ) } ; final List < String > expectedXpathQueries=Arrays.asList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionNPathComplexityOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionNPathComplexityOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /MODIFIERS '' , '' /CLASS_DEF [ @ text='SuppressionXpathRegressionNPathComplexityOne ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /MODIFIERS/LITERAL_PUBLIC '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=NPathComplexityCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionNPathComplexityTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( NPathComplexityCheck.class ) ; moduleConfig.addAttribute ( `` max '' , '' 0 '' ) ; final String [ ] expectedViolation= { `` 4:5 : `` + getCheckMessage ( NPathComplexityCheck.class , NPathComplexityCheck.MSG_KEY,3,0 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionNPathComplexityTwo ' ] /OBJBLOCK/STATIC_INIT '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['Objects.hashCode'  '('  'mLocationPolicy'  ' '  'mReadType'  ')'] 
__label__1 ['processInstanceArray.size'  '('  ')'  '=='  '0'] 
__label__1 ['patient.getIdentifiers'  '('  ')'  '.size'  '('  ')'  '=='  '1'] 
__label__0 ResponseBody.create ( new byte [ 0 ] , MediaType.get ( `` text/plain '' ) ) 
__label__1 ['colorModeClass.equals'  '('  '``'  'ScaledSizeMode'  "''"  ')'] 
__label__0 Foundation.log ( `` [ info ] `` + tag + `` : `` + message ) 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__1 ['globalSecurityDomain'  '!'  '='  'null'] 
__label__1 ['resultEndpoint.expectedBodiesReceived'  '('  '``'  'one'  "''"  ' '  "''"  'three'  "''"  ')'] 
__label__0 memoryReservation.addAndGet ( bytes ) 
__label__0 sendCommand ( CLIENT , Keyword.SETNAME.raw , name ) 
__label__1 ['visitNode'  '('  'node'  ' '  'context'  ')'] 
__label__1 ['new'  'URI'  '('  'parentUri.getScheme'  '('  ')'  ' '  'parentUri.getAuthority'  '('  ')'  ' '  'parentUri.getPath'  '('  ')'  '+'  'SEPARATOR'  ' '  'null'  ')'] 
__label__0 ExecuteJobsRunnable.class 
__label__0 ImmutableSet < String > 
__label__1 ['routes.ExtractorsResource'  '('  ')'  '.list'  '('  'input.getId'  '('  ')'  ')'] 
__label__0 ImmutableList.copyOf ( result ) 
__label__1 ['cc.getPlan'  '('  'verticesPath'  ' '  'edgesPath'  ' '  'resultPath'  ' '  'maxIterations'  ')'] 
__label__0 ! Context.getEncounterService ( ) .canViewAllEncounterTypes ( Context.getAuthenticatedUser ( ) ) 
__label__0 AtmosphereInterceptorWriter.class 
__label__1 ['new'  'UnsupportedOperationException'  '('  ')'] 
__label__1 ['grammar.getTokenNames'  '('  ')'] 
__label__1 ['Status.constructStatuses'  '('  'http.get'  '('  '``'  'http'  ':'  '//yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json'  "''"  ')'  ')'] 
__label__1 ['JavaDocTagContinuationIndentationCheck.class'] 
__label__0 sizeNeeded > items.length 
__label__1 ['JsonObject.createObjectMapper'  '('  ')'  '.getJsonFactory'  '('  ')'] 
__label__1 ['Thread.sleep'  '('  '200'  ')'] 
__label__1 ['SpringBootWebSecurityConfiguration.class'] 
__label__0 assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { Collection < EventRegistration > regs1=eventService1.getRegistrations ( MapService.SERVICE_NAME , mapName ) ; Collection < EventRegistration > regs2=eventService2.getRegistrations ( MapService.SERVICE_NAME , mapName ) ; assertEquals ( `` there should be only one registration '' ,1 , regs1.size ( ) ) ; assertEquals ( `` there should be only one registration '' ,1 , regs2.size ( ) ) ; } } ) 
__label__0 GL.glDrawArrays ( mode , first , count ) 
__label__0 log.error ( `` Error while closing command context '' , exception ) 
__label__1 ['NSString'  'value='  '('  'NSString'  ')'  'nsDictionary.get'  '('  'convertKey'  '('  'key'  ')'  ')'  ';'] 
__label__0 pId + BASE_FILE_NUMBER 
__label__1 ['hashSymbols.keySet'  '('  ')'] 
__label__0 GL20.glUniform3fv ( location , v ) 
__label__1 ['index'  '>'  'capacity'  '('  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['Exception'  'exception'] 
__label__0 operation.get ( OPERATION_HEADERS , ALLOW_RESOURCE_SERVICE_RESTART ) .set ( false ) 
__label__1 ['new'  'JSONParseSpec'  '('  'new'  'TimestampSpec'  '('  '``'  'timestamp'  "''"  ' '  "''"  'auto'  "''"  ')'  ' '  'new'  'DimensionsSpec'  '('  'null'  ' '  'null'  ' '  'null'  ')'  ' '  'JSONParseSpec.JSON'  ')'] 
__label__1 ['reg.getCounters'  '('  'transformFilter'  '('  'filter'  ')'  ')'] 
__label__0 new BinaryWebSocketFrame ( finalFragment , rsv , payload ) 
__label__1 ['SOURCE.deref'  '('  ')'] 
__label__1 ['uri.toASCIIString'  '('  ')'] 
__label__0 sections.get ( section ) 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__0 GL.glCopyTexImage2D ( target , level , internalformat , x , y , width , height , border ) 
__label__1 ['LOG.error'  '('  '``'  'delete'  'failed'  ':'  '{'  '}'  "''"  ' '  'e.getMessage'  '('  ')'  ')'] 
__label__0 route.setDelay ( 6000 ) 
__label__0 LOG.warn ( `` Async Kafka commit failed . `` , cause ) 
__label__1 ['ServiceLoader.load'  '('  'WorkerFactory.class'  ')'] 
__label__0 injectionConfiguration.getSource ( ) .getResourceValue ( resolutionContext , serviceBuilder , context , managedReferenceFactoryValue ) 
__label__1 ['ch'  '=='  "'"  '?'  "'"] 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__0 Preconditions.checkNotNull ( containerIdGenerator , '' containerIdGenerator '' ) 
__label__0 TimeUnit.SECONDS.toMillis ( 5 ) 
__label__1 ['ReactiveHelper.scheduleLast'  '('  'runnable'  ' '  "''"  'Multicast'  'next'  'step'  "''"  ')'] 
__label__1 ['sb.append'  '('  'NC'  ')'] 
__label__1 ['sctpChannelClass.getMethod'  '('  '``'  'open'  "''"  ' '  'null'  ')'] 
__label__0 assertClusterSizeEventually ( 2 , nodes [ 0 ] ) 
__label__0 javaBeanSerializer.getFieldValues ( javaObject , json ) 
__label__1 ['return'  'ES5'  ';'] 
__label__0 logger.trace ( `` Requsting URL { } '' , url ) 
__label__1 ['mTfs.ls'  '('  'Constants.PATH_SEPARATOR'  ' '  'true'  ')'] 
__label__1 ['newId'  '>'  'max'] 
__label__1 ['req.getServletPath'  '('  ')'] 
__label__1 ['mockRegionInfo.isMetaRegion'  '('  ')'] 
__label__1 ['eq'  '('  '0'  ')'] 
__label__0 this.setRemoveOperationIdPrefix ( Boolean.valueOf ( additionalProperties.get ( CodegenConstants.REMOVE_OPERATION_ID_PREFIX ) .toString ( ) ) ) 
__label__1 ['c.getDomain'  '('  ')'  '=='  'null'] 
__label__0 Map < String , Object > 
__label__0 chain.filter ( exchange ) .transformDeferred ( ( call ) - > filter ( exchange , call ) ) 
__label__1 ['return'  'context'  ';'] 
__label__1 ['new'  'DatagramDnsQuery'  '('  'addr'  ' '  'null 1'  ')'] 
__label__1 ['visitor.visit'  '('  'this'  ')'] 
__label__1 ['newNode.makeNonIndexable'  '('  ')'] 
__label__0 assertEquals ( response.getStatusCode ( ) ,200 ) 
__label__1 ['sentences.get'  '('  '0'  ')'  '.entityMentions'  '('  ')'  '!'  '='  'null'] 
__label__0 routeList == null || routeList.isEmpty ( ) 
__label__1 ['taskOutput.getState'  '('  ')'  '.isDone'  '('  ')'] 
__label__0 Integer.parseInt ( tokens [ 3 ] ) 
__label__0 assertThat ( xml ) .isEqualToIgnoringWhitespace ( expectedContent ) 
__label__1 ['stat.st_mtim.tv_nsec.get'  '('  ')'] 
__label__1 ['synchronized'  '('  'id'  ')'  '{'  'logger.trace'  '('  '``'  'About'  'to'  'create'  '{'  '}'  "''"  ' '  'id'  ')'  ';'  'if'  '('  'unique'  '&'  '&'  'store.get'  '('  'id'  ')'  '!'  '='  'null'  ')'  '{'  'throw'  'new'  'IllegalStateException'  '('  '``'  'Broadcaster'  'already'  'exists'  '``'  '+'  'id'  '+'  '``'  '.'  'Use'  'BroadcasterFactory.lookup'  'instead'  "''"  ')'  ';'  '}'  'T'  'b='  '('  'T'  ')'  'store.get'  '('  'id'  ')'  ';'  'logger.trace'  '('  '``'  'Looking'  'in'  'the'  'store'  'using'  '{'  '}'  'returned'  '{'  '}'  "''"  ' '  'id'  ' '  'b'  ')'  ';'  'if'  '('  'b'  '!'  '='  'null'  '&'  '&'  '!'  'c.isAssignableFrom'  '('  'b.getClass'  '('  ')'  ')'  ')'  '{'  'String'  'msg='  "''"  'Invalid'  'lookup'  'class'  '``'  '+'  'c.getName'  '('  ')'  '+'  '``'  '.'  'Cached'  'class'  'is'  ':'  '``'  '+'  'b.getClass'  '('  ')'  '.getName'  '('  ')'  ';'  'logger.debug'  '('  'msg'  ')'  ';'  'throw'  'new'  'IllegalStateException'  '('  'msg'  ')'  ';'  '}'  'if'  '('  '('  'b'  '=='  'null'  '&'  '&'  'createIfNull'  ')'  '||'  '('  'b'  '!'  '='  'null'  '&'  '&'  'b.isDestroyed'  '('  ')'  ')'  ')'  '{'  'if'  '('  'b'  '!'  '='  'null'  ')'  '{'  'logger.trace'  '('  '``'  'Removing'  'destroyed'  'Broadcaster'  '{'  '}'  "''"  ' '  'b.getID'  '('  ')'  ')'  ';'  'store.remove'  '('  'b.getID'  '('  ')'  ' '  'b'  ')'  ';'  '}'  'Broadcaster'  'nb=store.get'  '('  'id'  ')'  ';'  'if'  '('  'nb'  '=='  'null'  ')'  '{'  'nb=createBroadcaster'  '('  'c'  ' '  'id'  ')'  ';'  'store.put'  '('  'id'  ' '  'nb'  ')'  ';'  '}'  'if'  '('  'nb'  '=='  'null'  '&'  '&'  'logger.isTraceEnabled'  '('  ')'  ')'  '{'  'logger.trace'  '('  '``'  'Added'  'Broadcaster'  '{'  '}'  '.'  'Factory'  'size'  ':'  '{'  '}'  "''"  ' '  'id'  ' '  'store.size'  '('  ')'  ')'  ';'  '}'  'b='  '('  'T'  ')'  'nb'  ';'  '}'  'return'  'b'  ';'  '}'] 
__label__1 ['SimpleAttributeDefinitionBuilder.create'  '('  'ModelDescriptionConstants.ANY_IPV6_ADDRESS'  ' '  'ModelType.BOOLEAN'  ')'  '.setAllowExpression'  '('  'false'  ')'  '.setAllowNull'  '('  'false'  ')'] 
__label__1 ['julLogger.info'  '('  '``'  'Hello'  'world'  "''"  ')'] 
__label__1 ['asyncContext.continueAsyncTraceObject'  '('  ')'] 
__label__1 ['type.getDeclaredConstructor'  '('  'String.class'  ')'] 
__label__1 ['DEFAULT_DATA_SIZE_PER_COLUMN=10'] 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__1 ['logger.debug'  '('  '``'  'Invalid'  'Account'  'Credentials'  "''"  ')'] 
__label__0 client.getStatusCodeReply ( ) 
__label__0 c.writeAndFlush ( `` [ `` + ctx.channel ( ) .remoteAddress ( ) + `` ] `` + msg+ '\n ' ) 
__label__1 ['proxy'  '=='  'null'] 
__label__1 ['Math.min'  '('  'clientCount 1'  ')'] 
__label__1 ['LOGGER.log'  '('  'Level.SEVERE'  ' '  'LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM'  '('  ')'  ')'] 
__label__0 r.getRequest ( false ) 
__label__1 ['logger.info'  '('  'name'  ')'] 
__label__1 ['analysis.getType'  '('  'windowFunction'  ')'] 
__label__0 serverSocket.setReuseAddress ( true ) 
__label__0 Assert.assertEquals ( new InetSocketAddress ( `` RemoteMaster1 '' ,10000 ) , masterAddress ) 
__label__0 objectMapper.reader ( DataSegment.class ) 
__label__1 ['RequestTokenFactory.createOAuth2Request'  '('  'null'  ' '  "''"  'foo'  "''"  ' '  'null'  ' '  'false'  ' '  'Collections.singleton'  '('  '``'  'ns_admin'  ':'  'read'  "''"  ')'  ' '  'null'  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['websocketComponent.setMaxThreads'  '('  '11'  ')'] 
__label__0 analysis.getTypeWithCoercions ( aggregate ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'CountDownLatchBasicLocalTest'  'extends'  'CountDownLatchBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '1'  ')'  '.newInstances'  '('  ')'  ';'  '}'  '}'] 
__label__0 javaChannel ( ) .isOpen ( ) & & config ( ) .getSoLinger ( ) > 0 
__label__0 Character.toUpperCase ( ch ) 
__label__1 ['nameTextField.getText'  '('  ')'] 
__label__1 ['assertFalse'  '('  '``'  'reuse-address'  "''"  ' '  'networkConfig.isReuseAddress'  '('  ')'  ')'] 
__label__0 bucketerContext.update ( context.timestamp ( ) , context.currentWatermark ( ) , currentProcessingTime ) 
__label__1 ['view.setTextColor'  '('  '0xFFDADADA'  ')'] 
__label__0 left.getRowLength ( ) 
__label__1 ['getUrl'  '('  ')'  '.getMethodParameter'  '('  'methodName'  ' '  'TIMEOUT_KEY'  ' '  'DEFAULT_TIMEOUT'  ')'] 
__label__0 cache.setColors ( style.fontColor == null ? color : Color.tmp.set ( color ) .mul ( style.fontColor ) ) 
__label__1 ['logger.debug'  '('  '``'  'Invalid'  'Account'  'Credentials'  "''"  ')'] 
__label__0 StringBuffer pattern=new StringBuffer ( this.prefix ) ; 
__label__1 ['Exception'  'exception'] 
__label__0 content ( ) .duplicate ( ) 
__label__0 bindingConfig ! = null & & converterHandler ! = null 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'netty'  'input'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  'from'  'client'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ' '  'NetworkAddressUtils.getClientHostName'  '('  ')'  ')'] 
__label__0 FsDatasetImpl.LOG.warn ( `` Completed checkDirs . Removed `` + removedVols.size ( ) + `` volumes . Current volumes : `` + this ) 
__label__0 page.getRetainedSizeInBytes ( ) 
__label__1 ['!'  'b.getAtmosphereResources'  '('  ')'  '.contains'  '('  'r'  ')'] 
__label__1 ['name'  '=='  'null'] 
__label__1 ['AsyncIOWriterAdapter.class'] 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'hello'  "''"  ')'  ')'] 
__label__0 instance.managementService.destroy ( ) 
__label__1 ['LOG.error'  '('  '``'  'Ignoring'  'duplicate'  'class'  '``'  '+'  'className'  ')'] 
__label__0 bindingConfig ! = null & & converterHandler ! = null 
__label__1 ['status'  '('  ')'  '.isMovedTemporarily'  '('  ')'] 
__label__0 tileElement.getChildByName ( `` properties '' ) 
__label__0 type ! = EventType.QUERY & & type ! = EventType.INSERT & & type ! = EventType.UPDATE & & type ! = EventType.DELETE 
__label__1 ['new'  'UnsupportedOperationException'  '('  ')'] 
__label__0 group.shutdownGracefully ( 0,10 , TimeUnit.SECONDS ) 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectoryAtSubpackage.java '' ) 
__label__0 assertEquals ( 3 , historyService.createHistoricActivityInstanceQuery ( ) .finished ( ) .list ( ) .size ( ) ) 
__label__0 FiltersTopComponent.findInstance ( ) .getUiModel ( ) .getSelectedRoot ( ) 
__label__0 AsteriskActionEnum.valueOf ( action ) 
__label__1 ['Thread.sleep'  '('  '2000'  ')'] 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__1 ['getSwaggerType'  '('  'swaggerModel.getAdditionalProperties'  '('  ')'  ')'] 
__label__1 ['DiagnosticType.error'  '('  '``'  'JSC_CONSTANT_REASSIGNED_VALUE_ERROR'  "''"  ' '  "''"  'constant'  '{'  '0'  '}'  'assigned'  'a'  'value'  'more'  'than'  'once.\\n'  "''"  '+'  '``'  'Original'  'definition'  'at'  '{'  '1'  '}'  "''"  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/user_timeline.json'  "''"  ' '  'true'  ')'  ')'] 
__label__1 ['fileInfo.getPath'  '('  ')'] 
__label__0 ctx.alloc ( ) .buffer ( ) 
__label__0 CopyOnWriteArrayList < MessageListener < Object > > 
__label__1 ['ImmutableList.of'  '('  'result'  ')'] 
__label__1 ['compressedProto.length'  '<'  '390200'] 
__label__0 `` Notes '' .equals ( subSectionName ) || `` Rule Description '' .equals ( subSectionName ) || `` Metadata '' .equals ( subSectionName ) 
__label__0 ChannelBuffers.buffer ( order ( ) , length ) 
__label__1 ['!'  'handler.isDifferent'  '('  'existing'  ')'] 
__label__0 runPartialSorter ( sorter , NUM_RECORDS,25 ) 
__label__0 mock ( ExampleService.class ) 
__label__1 ['streamTokenizer.ttype'  '=='  'StreamTokenizer.TT_WORD'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['LOG.trace'  '('  '``'  'The'  'sequence'  'id'  'for'  '{'  '}'  'is'  'continuous'  ' '  'pass'  "''"  ')'] 
__label__0 connectors.put ( connectorId , connector ) 
__label__1 ['t3.getSize'  '('  ')'] 
__label__0 LOG.warn ( `` Failed to write to TachyonStore stream , block `` + getCurrentBlockId ( ) + `` will not be in TachyonStorage . '' ) 
__label__0 Assert.notNull ( patterns , '' Patterns must not be null '' ) 
__label__0 assertEquals ( 800d , fStopwatch.runtime ( MILLISECONDS ) ,250d ) 
__label__0 Foundation.log ( `` [ error ] `` + tag + `` : `` + message ) 
__label__0 GL20.glUniform4fv ( location , toFloatBuffer ( v , offset , count < < 2 ) ) 
__label__0 TestSuiteEnvironment.getHttpAddress ( ) 
__label__0 getConnectTimeout ( ) 
__label__0 new Duration ( 30 , SECONDS ) 
__label__1 ['Validate.notEmpty'  '('  '``'  'Cookie'  'name'  'must'  'not'  'be'  'empty'  "''"  ')'] 
__label__1 ['isTestOnBorrow'  '('  ')'] 
__label__1 ['assertThat'  '('  'ds.getValidationInterval'  '('  ')'  ')'  '.isEqualTo'  '('  '30000L'  ')'] 
__label__1 ['taken'  '>'  '190'] 
__label__1 ['log.info'  '('  '``'  'Can'  'not'  'scale'  'anymore'  '.'  'Num'  'workers'  '='  '%'  'd'  ' '  'Max'  'num'  'workers'  '='  '%'  'd'  "''"  ' '  'zkWorkers.size'  '('  ')'  ' '  'workerSetupdDataRef.get'  '('  ')'  '.getMaxNumWorkers'  '('  ')'  ')'] 
__label__1 ['Bytes.toBytesBinary'  '('  'tableNameOrRegionName'  ')'] 
__label__0 log.info ( `` activitiy or FailedJobRetryTimerCycleValue is null in job `` + jobId + `` ' . only decrementing retries . '' ) 
__label__0 memoryReservation.addAndGet ( bytes ) 
__label__1 ['final'  'AuditEvemtFormatter'  'formatter=new'  'AuditEventDefaultFormatter'  '('  ')'  ';'] 
__label__1 ['Arrays.asList'  '('  'RFXComValueSelector.RAW_DATA'  ' '  'RFXComValueSelector.SIGNAL_LEVEL'  ' '  'RFXComValueSelector.COMMAND'  ' '  'RFXComValueSelector.MOOD'  ' '  'RFXComValueSelector.DIMMING_LEVEL'  ')'] 
__label__1 ['writer.write'  '('  'line'  ')'] 
__label__1 ['stopwatch.elapsedMillis'  '('  ')'] 
__label__0 idleConnectionTimeout + nettyResponseFuture.getLastTouch ( ) 
__label__1 ['Objects.equals'  '('  'builtInVersion'  ' '  'configuredVersion'  ')'] 
__label__1 ['LogUtils.initializeDefaultConsoleLogger'  '('  ')'] 
__label__0 RetryHandlingBlockMasterClient masterClientMock=PowerMockito.mock ( RetryHandlingBlockMasterClient.class ) ; 
__label__0 log.warn ( `` Annotation scanning mode loaded { } type converters . Its recommended to migrate to @ Converter ( loader = true ) for fast type converter mode . `` , additional ) 
__label__0 `` memberOf '' .equalsIgnoreCase ( attribute.getId ( ) ) || `` isMemberOf '' .equalsIgnoreCase ( attribute.getId ( ) ) 
__label__0 routes.InputTypesResource ( ) 
__label__1 ['TrustManagerFactory.getDefaultAlgorithm'  '('  ')'] 
__label__0 new Argument ( ) .setIndex ( 1 ) 
__label__1 ['util.getDataTestDir'  '('  'table'  ')'] 
__label__0 new SimpleCanalConnector ( address , username , password , destination ) 
__label__1 ['new'  'SemanticException'  '('  'TYPE_MISMATCH'  ' '  'node'  ' '  'e.getMessage'  '('  ')'  ')'] 
__label__1 ['toBeRemovedKeys.clear'  '('  ')'] 
__label__1 ['internalExecutor.submit'  '('  'command'  ')'] 
__label__0 FileUtil.compactPath ( path , '/ ' ) 
__label__0 routes.BuffersResource ( ) 
__label__1 ['ImmutableSet'  '<'  'ImplemetationMethodDescriptor'  '>'] 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectoryAtSubpackage.java '' ) 
__label__0 Subqueries.lt ( 0L , subquery ) 
__label__0 defaultCometSupport ( defaultToBlocking ) 
__label__1 ['DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS=false'] 
__label__1 ['mock.expectedBodiesReceived'  '('  '``'  'Hello'  'World'  '2'  "''"  ' '  "''"  'Hello'  'World'  '4'  "''"  ')'] 
__label__1 ['this.setSortParamsByRequiredFlag'  '('  'Boolean.valueOf'  '('  'additionalProperties.get'  '('  'CodegenConstants.REMOVE_OPERATION_ID_PREFIX'  ')'  '.toString'  '('  ')'  ')'  ')'] 
__label__1 ['Sets.'  '<'  'Integer'  '>'  'newHashSet'  '('  ')'] 
__label__1 ['new'  'Color'  '('  '0x696969ff'  ')'] 
__label__1 ['floatBuffer.clear'  '('  ')'] 
__label__0 rSocketMessageHandler.serverResponder ( ) 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` mail '' ) 
__label__1 ['node1.checkTreeTypeAwareEqualsSilent'  '('  'node2'  ')'] 
__label__1 ['('  'strLine=br.readLine'  '('  ')'  ')'  '!'  '='  'null'] 
__label__0 Preconditions.checkNotNull ( jobName , '' Streaming Job name should not be null . '' ) 
__label__0 new HashCollisionNode ( edit , hash , count , array ) 
__label__1 ['role.description'  '('  ')'  '.get'  '('  ')'] 
__label__0 responseModels.entrySet ( ) 
__label__1 ['UserGroupInformation.getCurrentUser'  '('  ')'  '.reloginFromKeytab'  '('  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'SetBasicLocalTest'  'extends'  'SetBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '1'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__0 assertOpenEventually ( countDownLatch ) 
__label__0 DirectMessage.createDirectMessageList ( http.get ( `` http : //yusuke.homeip.net/twitter4j/en/testcases/direct_messages.json '' ) ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweets_of_me.json '' , null , true ) ) 
__label__1 ['BlockMasterClient'  'masterClientMock=PowerMockito.mock'  '('  'BlockMasterClient.class'  ')'  ';'] 
__label__1 ['state.isGloballyTerminalState'  '('  ')'] 
__label__1 ['tFAgentStatMappter.map'  '('  'agentStatBo'  ')'] 
__label__1 ['RuntimeException.class'] 
__label__0 mock.expectedBodiesReceivedInAnyOrder ( `` c '' , '' b '' , '' a '' ) 
__label__0 tupleInfo ! = null & & tupleInfo.getMessageId ( ) ! = null 
__label__1 ['text.equals'  '('  '('  '('  'TextButton'  ')'  'button'  ')'  '.getText'  '('  ')'  ')'] 
__label__0 Assert.assertEquals ( new InetSocketAddress ( `` RemoteMaster3 '' , defaultPort ) , masterAddress ) 
__label__1 ['maxSize'  '>'  '('  'used'  '/'  'total'  ')'] 
__label__0 bindingGroup.get ( PORT_OFFSET ) .asInt ( ) > 0 
__label__0 times + BASE_FILE_NUMBER 
__label__1 ['Integer.valueOf'  '('  'patchVersionString'  ')'] 
__label__0 layout.createSequentialGroup ( ) .addPreferredGap ( javax.swing.LayoutStyle.ComponentPlacement.RELATED ) .addComponent ( availableStrategiesComboBox,0,218 , Short.MAX_VALUE ) 
__label__0 UnsupportedOperationException.class 
__label__0 new IllegalArgumentException ( `` Command not found in bolt message : `` + shellMsg ) 
__label__1 ['GnomeEngineeringManager'  'manager=new'  'GnomeEngineeringManager'  '('  ')'  ';'] 
__label__0 j.getConfiguration ( ) .get ( `` pig.job.converted.fetch '' , '' '' ) .equals ( `` '' ) & & j.getConfiguration ( ) .get ( `` mapred.task.id '' , '' '' ) .equals ( `` '' ) & & ! ( `` true '' .equals ( j.getConfiguration ( ) .get ( `` pig.illustrating '' ) ) ) 
__label__1 ['bodyParts'  '!'  '='  'null'] 
__label__0 @ RunWith ( HazelcastSerialClassRunner.class ) @ Category ( QuickTest.class ) public class UserCodeDeploymentPermissionTest extends PermissionTestSupport { @ Override protected Permission createPermission ( String name , String ... actions ) { return new CardinalityEstimatorPermission ( name , actions ) ; } @ Test public void checkDeployPermission_whenAll ( ) { new CheckPermission ( ) .of ( `` deploy '' ) .against ( `` deploy '' ) .expect ( true ) .run ( ) ; } @ Test public void checkDeployPermission ( ) { new CheckPermission ( ) .of ( `` deploy '' ) .against ( `` all '' ) .expect ( true ) .run ( ) ; } @ Test public void checkAllPermission_whenDeploy ( ) { new CheckPermission ( ) .of ( `` all '' ) .against ( `` deploy '' ) .expect ( false ) .run ( ) ; } } 
__label__1 ['EXTFramebufferObject.glGetFramebufferAttachmentParameterEXT'  '('  'target'  ' '  'attachment'  ' '  'pname'  ' '  'params'  ')'] 
__label__1 ['wrappedBuffer'  '('  'buffer.array'  '('  ')'  ' '  'buffer.arrayOffset'  '('  ')'  ' '  'buffer.remaining'  '('  ')'  ')'] 
__label__0 CsvReporter.forRegistry ( registry ) .convertDurationsTo ( getDurationUnit ( ) ) .convertRatesTo ( getRateUnit ( ) ) 
__label__0 log.info ( error , cause ) 
__label__0 stopTimeNs - requestStartTimeNs 
__label__0 Time.currentTimeMillis ( ) 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__1 ['Integer.valueOf'  '('  'tokens'  '['  '3'  ']'  ')'] 
__label__1 ['uncompressedProto.length'  '<'  '1700000'] 
__label__0 option.getJavaType ( ) 
__label__1 ['ImmutableSet'  '<'  'ImplemetationMethodDescriptor'  '>'] 
__label__1 ['incomingMessage.getMessagePayloadByte'  '('  '1'  ')'] 
__label__0 stats.getLastUpdateTime ( ) > = lastUpdateTime 
__label__1 ['assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  '{'  'getStats'  '('  'client'  ' '  'clientEngine'  ')'  ';'  '}'  '}'  ' '  'STATS_PERIOD_SECONDS'  '*'  '3'  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['modifiers.branchContains'  '('  'TokenTypes.LITERAL_PRIVATE'  ')'  '||'  'modifiers.branchContains'  '('  'TokenTypes.ABSTRACT'  ')'  '||'  'modifiers.branchContains'  '('  'TokenTypes.FINAL'  ')'] 
__label__1 ['logger.error'  '('  '``'  'Error'  'connecting'  'to'  'Plex'  "''"  ' '  'e'  ')'] 
__label__0 this.createError ! = null 
__label__0 noPendingBlockIteration > = MAX_NO_PENDING_BLOCK_ITERATIONS 
__label__1 ['out.write'  '('  'this.connectionAddress.getPort'  '('  ')'  ')'] 
__label__1 ['r.getRequest'  '('  ')'] 
__label__0 qp.isExclusiveMaximum ( ) 
__label__1 ['log.error'  '('  'error'  ' '  'cause'  ')'] 
__label__0 RequestBody.create ( ( String ) bodyContents , mediaType ) 
__label__1 ['response.setHeader'  '('  'WWW_AUTHENTICATE'  ' '  'value'  ')'] 
__label__0 setParams ( ) .xx ( ) 
__label__1 ['config.isAutoRead'  '('  ')'] 
__label__1 ['setPin'  '('  'file'  ' '  'false'  ')'] 
__label__1 ['bar.setResultWaitTime'  '('  '1000'  ')'] 
__label__0 region.getRegionHeight ( ) 
__label__1 ['new'  'IllegalStateException'  '('  ')'] 
__label__0 LOG.error ( exception , '' Unexpected failure when handling parsing error . This is likely a bug in the implementation '' ) 
__label__1 ['new'  'SemanticException'  '('  'generateErrorMessage'  '('  'tabref'  ' '  "''"  'Schema'  'of'  'both'  'sides'  'of'  'union'  'should'  'match'  ':'  'field'  '``'  '+'  'field'  '+'  '``'  ':'  "''"  '+'  '``'  'appears'  'on'  'the'  'left'  'side'  'of'  'the'  'UNION'  'at'  'column'  'position'  ':'  '``'  '+'  'getPositionFromInternalName'  '('  'lInfo.getInternalName'  '('  ')'  ')'  '+'  '``'  ' '  'and'  'on'  'the'  'right'  'side'  'of'  'the'  'UNION'  'at'  'column'  'position'  ':'  '``'  '+'  'getPositionFromInternalName'  '('  'rInfo.getInternalName'  '('  ')'  ')'  '+'  '``'  '.'  'Column'  'positions'  'should'  'match'  'for'  'a'  'UNION'  "''"  ')'  ')'] 
__label__0 new DBException ( String.format ( `` Error while creating Aerospike `` + `` client for % s : % d . `` , host , port ) , e ) 
__label__0 mock.expectedBodiesReceivedInAnyOrder ( `` Hello World 2 '' ) 
__label__1 ['mouseEvent.getModifiers'  '('  ')'] 
__label__0 from ( `` jms : queue2 : parallelLoanRequestQueue '' ) .process ( new CreditAgency ( ) ) .multicast ( new BankResponseAggregationStrategy ( ) .setAggregatingOutMessage ( true ) ) .parallelProcessing ( true ) 
__label__0 inflightRepository ! = null 
__label__1 ['StringByteIteartor.putAllAsByteIterators'  '('  'result'  ' '  'jedis.hgetAll'  '('  'key'  ')'  ')'] 
__label__0 new StringBuilder ( 259 ) 
__label__1 ['Integer.valueOf'  '('  'options.getMaxKeys'  '('  ')'  ')'] 
__label__0 t=b.getBroadcasterConfig ( ) .applyFilters ( r , t ) 
__label__0 dfa == null || dfa.states.isEmpty ( ) 
__label__1 ['logger.error'  '('  '``'  'Error'  'connecting'  'to'  'Plex'  "''"  ' '  'e'  ')'] 
__label__0 JSError.make ( REPORT_PATH_IO_ERROR , reportPath , e.getMessage ( ) ) 
__label__0 factory.get ( mResultClass , NO_ANNOTATIONS , retrofit ) 
__label__1 ['dfa'  '=='  'null'] 
__label__1 ['targetActor.addCaptureListener'  '('  'listener'  ')'] 
__label__1 ['sb.toString'  '('  ')'] 
__label__1 ['document.tokens'  '('  ')'  '.get'  '('  '10'  ')'] 
__label__1 ['latch.await'  '('  '100'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['this.cli.jar'  '('  '``'  'secure.groovy'  "''"  ')'] 
__label__1 ['sectionStartToken.word'  '('  ')'] 
__label__1 ['mock2.expectedMinimumMessageCount'  '('  '3'  ')'] 
__label__0 new IllegalStateException ( msg.getMessage ( ) ) 
__label__1 ['ReactiveHelper.scheduleLast'  '('  '('  ')'  '-'  '>'  '{'  'if'  '('  'uow'  '!'  '='  'null'  ')'  '{'  'uow.afterProcess'  '('  'processor'  ' '  'exchange'  ' '  'callback'  ' '  'sync'  ')'  ';'  '}'  'if'  '('  'LOG.isTraceEnabled'  '('  ')'  ')'  '{'  'LOG.trace'  '('  '``'  'Exchange'  'processed'  'and'  'is'  'continued'  'routed'  'asynchronously'  'for'  'exchangeId'  ':'  '{'  '}'  '-'  '>'  '{'  '}'  "''"  ' '  'exchange.getExchangeId'  '('  ')'  ' '  'exchange'  ')'  ';'  '}'  '}'  ' '  "''"  'SharedCamelInternalProcessor'  '-'  'UnitOfWork'  '-'  'afterProcess'  '-'  '``'  '+'  'processor'  '+'  '``'  '-'  '``'  '+'  'exchange.getExchangeId'  '('  ')'  ')'] 
__label__0 logger.warn ( `` Configuration for influxdb not yet loaded or broken . '' ) 
__label__0 reg.getMeters ( transformFilter ( filter ) ) 
__label__0 from ( Constants.PARALLEL_LOANBROKER_URI ) .process ( new CreditScoreProcessor ( Constants.CREDITAGENCY_ADDRESS ) ) .multicast ( new BankResponseAggregationStrategy ( ) ) .setParallelProcessing ( true ) 
__label__1 ['ImmutableMap.of'  '('  'columnFamily'  ' '  'mutations'  ')'] 
__label__0 LOG.debug ( `` Consumer subtask { } is trying to discover new partitions ... '' , getRuntimeContext ( ) .getIndexOfThisSubtask ( ) ) 
__label__0 logger.warn ( `` Invalid state { } '' , r ) 
__label__1 ['newState.score'  '('  ')'] 
__label__0 bindingConfiguration.getSource ( ) .getResourceValue ( resolutionContext , serviceBuilder , phaseContext , service.getManagedObjectInjector ( ) ) 
__label__1 ['Boolean.parseBoolean'  '('  'ac'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__1 ['ctx.alloc'  '('  ')'  '.heapBuffer'  '('  ')'] 
__label__1 ['logger.error'  '('  '``'  'Error'  'connecting'  'to'  'Plex'  "''"  ' '  'e'  ')'] 
__label__0 final P testedPrototype 
__label__0 protected BasicFontMetrics fontMetrics ; 
__label__0 latch.await ( 5 , TimeUnit.MINUTES ) 
__label__1 ['routes.SessionsController.index'  '('  ')'] 
__label__1 ['new'  'RuntimeException'  '('  '``'  'Could'  'not'  'create'  'TypeInformation'  'for'  'type'  '``'  '+'  'type.getName'  '('  ')'  '+'  '``'  ';'  'please'  'specify'  'the'  'TypeInformation'  'manually'  'via'  '``'  '+'  '``'  'StreamExecutionEnvironment'  '#'  'fromElements'  '('  'Collection'  ' '  'TypeInformation'  ')'  "''"  ')'] 
__label__0 Preconditions.checkNotNull ( mBlockIdsOnTiers , '' mBlockIdsOnTiers '' ) 
__label__1 ['RequestBody.create'  '('  'mediaType'  ' '  '('  'String'  ')'  'bodyContents'  ')'] 
__label__1 ['new'  'DatagramDnsQuery'  '('  'addr'  ' '  'null 1'  ')'] 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'hello'  "''"  ')'  ')'] 
__label__0 mapConfig.getBackupCount ( ) 
__label__0 CassandraRecordSetProvider.class 
__label__0 times + BASE_FILE_NUMBER 
__label__1 ['HashSet'  '<'  'Item'  '>'] 
__label__1 ['oldestUnflushedStoreSequenceIds.put'  '('  'encodedRegionName'  ' '  'oldestUnflushedStoreSequenceIdsOfRegion'  ')'] 
__label__1 ['handoffExecutor'  '=='  'null'] 
__label__0 context.add ( `` exceptionalMethod '' ,123.0f ) 
__label__0 row ( `` p_comment '' , null,7.0,0.0 , null , null , null ) 
__label__0 Nd4j.getAffinityManager ( ) .getDeviceForCurrentThread ( ) 
__label__0 bean.getCollectionTime ( ) 
__label__1 ['renderer.filledRect'  '('  'x'  '+'  'rect.x'  '+'  'settings.paddingX'  ' '  'y'  '+'  'rect.y'  '+'  'settings.paddingY'  ' '  'rect.width'  '-'  'settings.paddingX'  ' '  'rect.height'  '-'  'settings.paddingY'  ')'] 
__label__1 ['instance2.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['new'  'HttpDigestAuthFilter'  '('  'DIGEST_TEST_LOGIN'  ' '  'DIGEST_TEST_INVALIDPASS 1'  ')'] 
__label__0 getClientConfig ( ) .getAddresses ( ) 
__label__0 sourceNodeTextData ! = null 
__label__1 ['Exception'  'exception'] 
__label__0 TestUtils.randomByte ( ) + 128 
__label__0 `` LEVEL '' .equalsIgnoreCase ( ident ) || `` CONNECT_BY_ISCYCLE '' .equalsIgnoreCase ( ident ) 
__label__1 ['nameLength'  '>'  'maxHeadersLength'  '-'  'headersLength'] 
__label__0 getPath ( `` checks/javadoc/Input_02.java '' ) 
__label__0 map.set ( keyValue.getKeyData ( ) , value ) 
__label__0 Context.getPersonService ( ) .getRelationshipsByPerson ( Context.getPersonService ( ) .getPerson ( personId ) ) 
__label__1 ['indexFile.exists'  '('  ')'] 
__label__1 ['log.error'  '('  'error'  ' '  'cause'  ')'] 
__label__1 ['LOG.isInfoEnabled'  '('  ')'] 
__label__1 ['assertOpenEventually'  '('  'latch 3'  ')'] 
__label__0 UIPasteboard.getGeneralPasteboard ( ) 
__label__1 ['RuntimeException'  'e'] 
__label__1 ['attribute.getDefinition'  '('  ')'  '.getAttributeMarshaller'  '('  ')'] 
__label__0 Long.parseLong ( args [ 1 ] ) 
__label__1 ['new'  'NullPointerException'  '('  '``'  'the'  'text'  'is'  'null'  "''"  ')'] 
__label__0 Services.deploymentUnitName ( deploymentUnit.getParent ( ) .getName ( ) , nextPhase ) 
__label__1 ['privObj.getObjectName'  '('  ')'  '.equals'  '('  '``'  'masking_test_druid'  "''"  ')'] 
__label__1 ['new'  'IndexSizeExceededException'  '('  'getOutOfRowsReason'  '('  ')'  ')'] 
__label__0 defaults.jackson2JsonEncoder ( new Jackson2JsonEncoder ( objectMapper , EMPTY_MIME_TYPES ) ) 
__label__1 ['ss.getAuthorizerV2'  '('  ')'  '.checkPrivileges'  '('  'type'  ' '  'Arrays.asList'  '('  'commandObj'  ')'  ' '  'null'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'favorites/'  "''"  '+'  'id+'  '``'  '.json'  "''"  ' '  'new'  'PostParameter'  '['  '0'  ']'  ' '  'true'  ')'  ')'] 
__label__1 ['hz1.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 future1.get ( 2 , TimeUnit.SECONDS ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ReplicatedMapHitsAndLastAccessTimeTest'  'extends'  'ReplicatedMapBaseTest'  '{'  '@'  'Test'  'public'  'void'  'test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_object'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAndLastAccessTimeSetToAnyValueAfterStartTime_Binary'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testHitsAndLastAccessTimeIsSetToAnyValueAfterStartTime'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'final'  'long'  'startTime=Clock.currentTimeMillis'  '('  ')'  ';'  'final'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'final'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'warmUpPartitions'  '('  'instance1'  ' '  'instance2'  ')'  ';'  'final'  'String'  'mapName=randomMapName'  '('  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  'mapName'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  'mapName'  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'Map.Entry'  '<'  'String'  ' '  'String'  '>'  'entry'  ':'  'map1.entrySet'  '('  ')'  ')'  '{'  'assertRecord'  '('  'getReplicatedRecord'  '('  'map1'  ' '  'entry.getKey'  '('  ')'  ')'  ' '  'startTime'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'Map.Entry'  '<'  'String'  ' '  'String'  '>'  'entry'  ':'  'map2.entrySet'  '('  ')'  ')'  '{'  'assertRecord'  '('  'getReplicatedRecord'  '('  'map2'  ' '  'entry.getKey'  '('  ')'  ')'  ' '  'startTime'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  'private'  'void'  'assertRecord'  '('  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'record'  ' '  'long'  'startTime'  ')'  '{'  'assertNotNull'  '('  'record'  ')'  ';'  'long'  'hits=record.getHits'  '('  ')'  ';'  'long'  'lastAccessTime=record.getLastAccessTime'  '('  ')'  ';'  'long'  'now=Clock.currentTimeMillis'  '('  ')'  ';'  'assertTrue'  '('  'String.format'  '('  '``'  'Hits'  'should'  'be'  'greater'  'than'  '0'  ':'  '%'  'd'  '>'  '%'  'd'  "''"  ' '  'hits 0'  ')'  ' '  'hits'  '>'  '0'  ')'  ';'  'assertTrue'  '('  'String.format'  '('  '``'  'Hits'  'should'  'be'  'less'  'than'  '1000'  ':'  '%'  'd'  '<'  '%'  'd'  "''"  ' '  'hits 1000'  ')'  ' '  'hits'  '<'  '1000'  ')'  ';'  'assertTrue'  '('  'String.format'  '('  '``'  'LastAccessTime'  'should'  'be'  'greater'  'than'  'startTime'  ':'  '%'  'd'  '>'  '%'  'd'  "''"  ' '  'lastAccessTime'  ' '  'startTime'  ')'  ' '  'lastAccessTime'  '>'  'startTime'  ')'  ';'  'assertTrue'  '('  'String.format'  '('  '``'  'LastAccessTime'  'should'  'be'  'less'  'or'  'equal'  'than'  'current'  'time'  ':'  '%'  'd'  '<'  '='  '%'  'd'  "''"  ' '  'lastAccessTime'  ' '  'now'  ')'  ' '  'lastAccessTime'  '<'  '='  'now'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAreZeroInitially_withSingleNode_object'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAreZeroInitiallyWithSingleNode'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAreZeroInitially_withSingleNode_Binary'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAreZeroInitiallyWithSingleNode'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testHitsAreZeroInitiallyWithSingleNode'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'final'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'final'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map=instance1.getReplicatedMap'  '('  'randomMapName'  '('  ')'  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'replicatedRecord=getReplicatedRecord'  '('  'map'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'replicatedRecord'  ')'  ';'  'assertEquals'  '('  '0'  ' '  'replicatedRecord.getHits'  '('  ')'  ')'  ';'  '}'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAndLastAccessTimeAreSet_withSingleNode_object'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAndLastAccessTimeAreSetWithSingleNode'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAndLastAccessTimeAreSet_withSingleNode_Binary'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAndLastAccessTimeAreSetWithSingleNode'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testHitsAndLastAccessTimeAreSetWithSingleNode'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'final'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'final'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map=instance1.getReplicatedMap'  '('  'randomMapName'  '('  ')'  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map.containsKey'  '('  'key'  ')'  ';'  '}'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'replicatedRecord=getReplicatedRecord'  '('  'map'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'replicatedRecord'  ')'  ';'  'assertEquals'  '('  '1'  ' '  'replicatedRecord.getHits'  '('  ')'  ')'  ';'  'assertTrue'  '('  '``'  'Last'  'access'  'time'  'should'  'be'  'set'  'for'  '``'  '+'  'key'  ' '  'replicatedRecord.getLastAccessTime'  '('  ')'  '>'  '0'  ')'  ';'  '}'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAndLastAccessTimeAreSet_with2Nodes_object'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAndLastAccessTimeAreSetFor1Of2Nodes'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAndLastAccessTimeAreSet_with2Nodes_Binary'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAndLastAccessTimeAreSetFor1Of2Nodes'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testHitsAndLastAccessTimeAreSetFor1Of2Nodes'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'final'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'final'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'warmUpPartitions'  '('  'instance1'  ' '  'instance2'  ')'  ';'  'final'  'String'  'mapName=randomMapName'  '('  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  'mapName'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  'mapName'  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  'map1.containsKey'  '('  'key'  ')'  ';'  '}'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'replicatedRecord=getReplicatedRecord'  '('  'map1'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'replicatedRecord'  ')'  ';'  'assertEquals'  '('  '1'  ' '  'replicatedRecord.getHits'  '('  ')'  ')'  ';'  'assertTrue'  '('  '``'  'Last'  'access'  'time'  'should'  'be'  'set'  'for'  '``'  '+'  'key'  ' '  'replicatedRecord.getLastAccessTime'  '('  ')'  '>'  '0'  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'replicatedRecord=getReplicatedRecord'  '('  'map2'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'replicatedRecord'  ')'  ';'  'assertEquals'  '('  '0'  ' '  'replicatedRecord.getHits'  '('  ')'  ')'  ';'  'assertTrue'  '('  '``'  'Last'  'access'  'time'  'should'  'be'  'set'  'for'  '``'  '+'  'key'  ' '  'replicatedRecord.getLastAccessTime'  '('  ')'  '>'  '0'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAreIncrementedOnPuts_withSingleNode_object'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAreIncrementedOnPutsWithSingleNode'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAreIncrementedOnPuts_withSingleNode_Binary'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAreIncrementedOnPutsWithSingleNode'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testHitsAreIncrementedOnPutsWithSingleNode'  '('  'final'  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'final'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'final'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map=instance1.getReplicatedMap'  '('  'randomMapName'  '('  ')'  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'record=getReplicatedRecord'  '('  'map'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'record'  ')'  ';'  'assertEquals'  '('  '1'  ' '  'record.getHits'  '('  ')'  ')'  ';'  '}'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAreIncrementedOnPuts_with2Nodes_object'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAreIncrementedOnPutsFor1Of2Nodes'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'test_hitsAreIncrementedOnPuts_with2Nodes_Binary'  '('  ')'  'throws'  'Exception'  '{'  'testHitsAreIncrementedOnPutsFor1Of2Nodes'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testHitsAreIncrementedOnPutsFor1Of2Nodes'  '('  'final'  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'final'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'final'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'warmUpPartitions'  '('  'instance1'  ' '  'instance2'  ')'  ';'  'final'  'String'  'mapName=randomMapName'  '('  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  'mapName'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  'mapName'  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'record1=getReplicatedRecord'  '('  'map1'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'record1'  ')'  ';'  'assertEquals'  '('  '1'  ' '  'record1.getHits'  '('  ')'  ')'  ';'  'final'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'record2=getReplicatedRecord'  '('  'map2'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'record2'  ')'  ';'  'assertEquals'  '('  '0'  ' '  'record2.getHits'  '('  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '}'] 
__label__0 RetryHandlingBlockMasterClient.class 
__label__0 Long.valueOf ( p.getProperty ( `` numberid.id '' ) ) 
__label__0 Assert.assertEquals ( `` Unexpected token type : methodStub '' , msg ) 
__label__1 ['camelContext.getExecutorServiceManager'  '('  ')'  '.shutdownNow'  '('  'timeoutCheckerExecutorService'  ')'] 
__label__0 Assert.assertEquals ( expected , result ) 
__label__0 logger.warn ( `` fail-mock : `` + invocation.getMethodName ( ) + `` fail-mock enabled , url : `` + directory.getUrl ( ) , e ) 
__label__1 ['logger.info'  '('  '``'  'Aliasing'  'common'  'strings'  "''"  ')'] 
__label__1 ['registry.put'  '('  '``'  'firehoseClient'  "''"  ' '  'amazonKinesisFirehoseClient'  ')'] 
__label__1 ['mapConfig.getTotalBackupCount'  '('  ')'] 
__label__0 new GdxRuntimeException ( `` Failed to read Vorbis . `` , e ) 
__label__0 isNotNull ( overriderParameters.get ( i ) ) & & ! ( isNullable ( overriddenParameters.get ( i ) ) || isNotNull ( overriddenParameters.get ( i ) ) ) & & ! errorElements.contains ( overriderParameters.get ( i ) ) & & warnedElements.add ( overriderParameters.get ( i ) ) 
__label__0 i > = BY_DYE_DATA.length 
__label__0 sendTo ( `` direct : foo '' ) 
__label__1 ['ChannelBufferHolders.catchAllBuffer'  '('  ')'] 
__label__1 ['return'  'context'  ';'] 
__label__1 ['promise.setSuccess'  '('  'null'  ')'] 
__label__0 IRON_GOLEM ( `` VillagerGolem '' , IronGolem.class,99 ) 
__label__0 snapshot.getCount ( ) 
__label__1 ['AlluxioLogServer.class'] 
__label__1 ['bits2'  '['  '0'  ']'] 
__label__0 srcActivity.getParent ( ) == null || ! ( srcActivity.getParent ( ) instanceof PvmActivity ) 
__label__0 gl.glDeleteRenderbuffer ( depthStencilPackedBufferHandle ) 
__label__1 ['BlockMasterClient.class'] 
__label__1 ['int'  'retries'  '('  ')'  'default'  '0'  ';'] 
__label__1 ['content'  '('  ')'  '.copy'  '('  ')'] 
__label__1 ['current.getLabel'  '('  ')'  '.startsWith'  '('  '``'  'nt'  "''"  ')'  '&'  '&'  '!'  'pre.getLabel'  '('  ')'  '.startsWith'  '('  '``'  'nt'  "''"  ')'] 
__label__0 getClass ( ) .getSimpleName ( ) + `` [ populator : '' + populator+ `` , descriptor : '' + indexUserDescription+ `` ] '' 
__label__0 that.getPath ( ) == null & & getPath ( ) ! = null 
__label__0 showTooltip == null || showTooltip.targetActor == null 
__label__0 context.var ( `` long '' ,2 ) 
__label__0 createPermissionsXmlAsset ( new JndiPermission ( `` * '' , '' lookup '' ) , new RuntimePermission ( `` accessClassInPackage.com.sun.jndi.ldap '' ) ) 
__label__0 getMockEndpoint ( `` mock : event '' ) .expectedMessageCount ( 6 ) 
__label__0 mListView.getListChildAt ( index ) 
__label__0 order.getDosingInstructions ( ) 
__label__1 ['assertEquals'  '('  '2'  ' '  'this.context.getBean'  '('  'FilterChainProxy.class'  ')'  '.getFilterChains'  '('  ')'  '.size'  '('  ')'  ')'] 
__label__0 logger.fine ( `` Named `` + namedCount + `` anon functions using `` + bytesUsed+ `` bytes '' ) 
__label__1 ['Collection'  '<'  'String'  '>'] 
__label__1 ['config.getMaxRedirects'  '('  ')'] 
__label__1 ['getReduceValuesForReduceSinkNoMapAgg'  '('  'parseInfo'  ' '  'dest'  ' '  'reduceSinkInputRowResolver'  ' '  'reduceSinkOutputRowResolver'  ' '  'outputValueColumnNames'  ' '  'reduceValues'  ')'] 
__label__1 ['entry'  '!'  '='  'null'] 
__label__1 ['GL20.glGetUniform'  '('  'program'  ' '  'location'  ' '  'params'  ')'] 
__label__0 CalciteTests.createMockSystemSchema ( druidSchema , walker , plannerConfig ) 
__label__1 ['Boolean.getBoolean'  '('  '``'  'java.awt.headless'  "''"  ')'] 
__label__0 worldVertices.length ! = localVertices.length 
__label__0 log.makeAlert ( e , '' Failed to remove segment '' ) 
__label__1 ['mock.setMinimumResultWaitTime'  '('  '1900'  ')'] 
__label__0 config.getOrcStreamBufferSize ( ) 
__label__0 value.longLongValue ( ) 
__label__1 ['Integer.valueOf'  '('  'sessionTTL'  ')'] 
__label__0 config.getBroadcasterFactory ( ) .lookup ( m.broadcaster ( ) , path , true ) 
__label__0 Gdx.files.internal ( fileName ) .pathWithoutExtension ( ) 
__label__1 ['mFs.mkdirs'  '('  'new'  'Path'  '('  'path'  ')'  ' '  'null'  ')'] 
__label__1 ['32'  '*'  '1024'  '*'  '1024'] 
__label__0 tileElement.getChildByName ( `` properties '' ) 
__label__1 ['member.getType'  '('  'beanDesc.bindingsForBeanType'  '('  ')'  ')'] 
__label__0 res.sendError ( 501 , '' Websocket protocol not supported '' ) 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_FILE_LOAD_TTL'  ')'] 
__label__0 Calendar.getInstance ( JSON.defaultTimeZone , JSON.defaultLocale ) 
__label__0 jniGetLocalAnchorB ( addr , tmp ) 
__label__1 ['count'  '<'  '='  '0'] 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'not'  'be'  'null'  "''"  ')'] 
__label__1 ['new'  'RuntimeException'  '('  '``'  'Could'  'not'  'create'  'TypeInformation'  'for'  'type'  '``'  '+'  'data'  '['  '0'  ']'  '.getClass'  '('  ')'  '.getName'  '('  ')'  '+'  '``'  ';'  'please'  'specify'  'the'  'TypeInformation'  'manually'  'via'  '``'  '+'  '``'  'ExecutionEnvironment'  '#'  'fromElements'  '('  'Collection'  ' '  'TypeInformation'  ')'  "''"  ')'] 
__label__1 ['keys.isEmpty'  '('  ')'] 
__label__1 ['IntrospectionSupport.setProperties'  '('  'jpa'  ' '  'options'  ')'] 
__label__0 hints.append ( LocalizationMessages.HINT_MSG ( error.getMessage ( ) ) ) 
__label__0 log.debug ( `` Error while closing command context '' , exception ) 
__label__0 config.setClientMappingCache ( model.get ( EJB3SubsystemModel.CLIENT_MAPPINGS_CACHE ) .asString ( ) ) 
__label__0 xtw.writeCData ( customProperty.getSimpleValue ( ) ) 
__label__1 ['DEFAULT_NUMBER_OF_READ_BUFFERS=128'] 
__label__1 ['result.expectedMessageCount'  '('  '3'  ')'] 
__label__1 ['mTfs.createFile'  '('  'new'  'TachyonURI'  '('  '``'  '/root/testFile1'  "''"  ')'  ')'] 
__label__1 ['agg.setBatchTimeout'  '('  '1000L'  ')'] 
__label__0 assertEquals ( `` One propagated header is expected . `` ,6 , headers.toArray ( ) .length ) 
__label__1 ['Calendar.getInstance'  '('  ')'] 
__label__0 LogUtils.initializeDefaultTestConsoleLogger ( ) 
__label__0 assertFalse ( found ) 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__1 ['writeUnlock'  '('  ')'] 
__label__0 new JavaScriptAggregatorFactory ( input , Arrays.asList ( input ) , fnAggregate , fnReset , fnCombine ) 
__label__0 LOG.debug ( `` Retrieving location for state= { } of job= { } from the key-value state location oracle . `` , queryableStateName , jobId ) 
__label__1 ['modulePath.split'  '('  'File.pathSeparator'  ')'  '['  '1'  ']'] 
__label__0 response == null || response.value == null 
__label__1 ['ImmutableList.of'  '('  'modules'  ')'] 
__label__0 methodName.startsWith ( `` save '' ) || methodName.startsWith ( `` create '' ) || methodName.startsWith ( `` update '' ) 
__label__1 ['targetActor.addListener'  '('  'listener'  ')'] 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__0 c.admin ( ) .indices ( ) .aliasesExist ( new IndicesGetAliasesRequest ( alias ) ) 
__label__0 XMLInputFactory.newInstance ( ) 
__label__0 context.var ( `` double '' ,2 ) 
__label__1 ['config.get'  '('  'CONFIG_KEY_READ_TIMEOUT'  ')'] 
__label__0 new PriorityTieredBrokerSelectorStrategy ( 0,1 ) 
__label__0 new IllegalStateException ( String.format ( `` File \ '' % 1 $ s\ '' has inconsistent comment on line % 2 $ d '' , aFileName , lineNumber ) ) 
__label__0 connection.hlen ( key ) 
__label__1 ['new'  'DirectDruidClient'  '('  'warehose'  ' '  'smileMapper'  ' '  'httpClient'  ' '  'server.getHost'  '('  ')'  ')'] 
__label__1 ['classResolver.resolveClass'  '('  'type'  ')'] 
__label__0 log.info ( message , exception ) 
__label__1 ['log.debug'  '('  '``'  'PID'  'contains'  'identifier'  'with'  'no'  'assigning'  'authority'  "''"  ')'] 
__label__1 ['file.getName'  '('  ')'  '.startsWith'  '('  '``'  'branched-'  "''"  ')'] 
__label__0 ! method.getName ( ) .equals ( methodToSearch ) || ! method.getReturnType ( ) .isAssignableFrom ( methodToFind.getReturnType ( ) ) || method.getParameterTypes ( ) .length ! = pTypes.length 
__label__1 ['new'  'StreamTaskException'  '('  'exceptionMessage'  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastSerialClassRunner.class'  ')'  '@'  'Category'  '('  'QuickTest.class'  ')'  'public'  'class'  'ReplicatedMapTest'  'extends'  'ReplicatedMapBaseTest'  '{'  '@'  'Test'  'public'  'void'  'testEmptyMapIsEmpty'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'HazelcastInstance'  'instance=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=instance.getReplicatedMap'  '('  'randomName'  '('  ')'  ')'  ';'  'assertTrue'  '('  '``'  'map'  'should'  'be'  'empty'  "''"  ' '  'map.isEmpty'  '('  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testNonEmptyMapIsNotEmpty'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'HazelcastInstance'  'instance=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=instance.getReplicatedMap'  '('  'randomName'  '('  ')'  ')'  ';'  'map.put'  '('  '1 1'  ')'  ';'  'assertFalse'  '('  '``'  'map'  'should'  'not'  'be'  'empty'  "''"  ' '  'map.isEmpty'  '('  ')'  ')'  ';'  '}'  '@'  'Test'  '('  'expected=IllegalArgumentException.class'  ')'  'public'  'void'  'testNegativeTtlThrowsException'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'HazelcastInstance'  'instance=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=instance.getReplicatedMap'  '('  'randomName'  '('  ')'  ')'  ';'  'map.put'  '('  '1 1'  ' '  '-1'  ' '  'TimeUnit.DAYS'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testAddObject'  '('  ')'  'throws'  'Exception'  '{'  'testAdd'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testAddBinary'  '('  ')'  'throws'  'Exception'  '{'  'testAdd'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testAdd'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testPutAllObject'  '('  ')'  'throws'  'Exception'  '{'  'testPutAll'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testPutAllBinary'  '('  ')'  'throws'  'Exception'  '{'  'testPutAll'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testPutAll'  '('  'Config'  'config'  ')'  'throws'  'TimeoutException'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'final'  'Map'  '<'  'String'  ' '  'String'  '>'  'mapTest=new'  'HashMap'  '<'  'String'  ' '  'String'  '>'  '('  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'mapTest.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'map1.putAll'  '('  'mapTest'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testClearObject'  '('  ')'  'throws'  'Exception'  '{'  'testClear'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testClearBinary'  '('  ')'  'throws'  'Exception'  '{'  'testClear'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testClear'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  'map1.clear'  '('  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertEquals'  '('  '0'  ' '  'map1.size'  '('  ')'  ')'  ';'  'assertEquals'  '('  '0'  ' '  'map2.size'  '('  ')'  ')'  ';'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testAddTtlObject'  '('  ')'  'throws'  'Exception'  '{'  'testAddTtl'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testAddTtlBinary'  '('  ')'  'throws'  'Exception'  '{'  'testAddTtl'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testAddTtl'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ' 10'  ' '  'TimeUnit.MINUTES'  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'record=getReplicatedRecord'  '('  'map1'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'record'  ')'  ';'  'assertNotEquals'  '('  '0'  ' '  'record.getTtlMillis'  '('  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'record=getReplicatedRecord'  '('  'map2'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'record'  ')'  ';'  'assertNotEquals'  '('  '0'  ' '  'record.getTtlMillis'  '('  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testUpdateObject'  '('  ')'  'throws'  'Exception'  '{'  'testUpdate'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testUpdateBinary'  '('  ')'  'throws'  'Exception'  '{'  'testUpdate'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testUpdate'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map2.put'  '('  'key'  ' '  "''"  'bar2'  "''"  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar2'  "''"  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'assertEquals'  '('  '``'  'bar2'  "''"  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testUpdateTtlObject'  '('  ')'  'throws'  'Exception'  '{'  'testUpdateTtl'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testUpdateTtlBinary'  '('  ')'  'throws'  'Exception'  '{'  'testUpdateTtl'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testUpdateTtl'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map2.put'  '('  'key'  ' '  "''"  'bar2'  "''"  ' 10'  ' '  'TimeUnit.MINUTES'  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar2'  "''"  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'record=getReplicatedRecord'  '('  'map1'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'record'  ')'  ';'  'assertTrue'  '('  'record.getTtlMillis'  '('  ')'  '>'  '0'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar2'  "''"  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  'ReplicatedRecord'  '<'  'String'  ' '  'String'  '>'  'record=getReplicatedRecord'  '('  'map2'  ' '  'key'  ')'  ';'  'assertNotNull'  '('  'record'  ')'  ';'  'assertTrue'  '('  'record.getTtlMillis'  '('  ')'  '>'  '0'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testRemoveObject'  '('  ')'  'throws'  'Exception'  '{'  'testRemove'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testRemoveBinary'  '('  ')'  'throws'  'Exception'  '{'  'testRemove'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testContainsKey_returnsFalse_onRemovedKeys'  '('  ')'  'throws'  'Exception'  '{'  'HazelcastInstance'  'node=createHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=node.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'map.put'  '('  '1'  ' '  'Integer.MAX_VALUE'  ')'  ';'  'map.remove'  '('  '1'  ')'  ';'  'assertFalse'  '('  'map.containsKey'  '('  '1'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testContainsKey_returnsFalse_onNonexistentKeys'  '('  ')'  'throws'  'Exception'  '{'  'HazelcastInstance'  'node=createHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=node.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'assertFalse'  '('  'map.containsKey'  '('  '1'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testContainsKey_returnsTrue_onExistingKeys'  '('  ')'  'throws'  'Exception'  '{'  'HazelcastInstance'  'node=createHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=node.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'map.put'  '('  '1'  ' '  'Integer.MAX_VALUE'  ')'  ';'  'assertTrue'  '('  'map.containsKey'  '('  '1'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testKeySet_notIncludes_removedKeys'  '('  ')'  'throws'  'Exception'  '{'  'HazelcastInstance'  'node=createHazelcastInstance'  '('  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=node.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'map.put'  '('  '1'  ' '  'Integer.MAX_VALUE'  ')'  ';'  'map.put'  '('  '2'  ' '  'Integer.MIN_VALUE'  ')'  ';'  'map.remove'  '('  '1'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'Set'  '<'  'Integer'  '>'  'keys=new'  'HashSet'  '<'  'Integer'  '>'  '('  'map.keySet'  '('  ')'  ')'  ';'  'assertFalse'  '('  'keys.contains'  '('  '1'  ')'  ')'  ';'  '}'  '}'  ' 20'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testEntrySet_notIncludes_removedKeys'  '('  ')'  'throws'  'Exception'  '{'  'HazelcastInstance'  'node=createHazelcastInstance'  '('  ')'  ';'  'final'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=node.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'map.put'  '('  '1'  ' '  'Integer.MAX_VALUE'  ')'  ';'  'map.put'  '('  '2'  ' '  'Integer.MIN_VALUE'  ')'  ';'  'map.remove'  '('  '1'  ')'  ';'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'Set'  '<'  'Entry'  '<'  'Integer'  ' '  'Integer'  '>'  '>'  'entries=map.entrySet'  '('  ')'  ';'  'for'  '('  'Entry'  '<'  'Integer'  ' '  'Integer'  '>'  'entry'  ':'  'entries'  ')'  '{'  'if'  '('  'entry.getKey'  '('  ')'  '.equals'  '('  '1'  ')'  ')'  '{'  'fail'  '('  'String.format'  '('  '``'  'We'  'do'  'not'  'expect'  'an'  'entry'  'which'  "'s"  'key'  'equals'  'to'  '%'  'd'  'in'  'entry'  'set'  "''"  ' 1'  ')'  ')'  ';'  '}'  '}'  '}'  '}'  ' 20'  ')'  ';'  '}'  'private'  'void'  'testRemove'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map1.get'  '('  'key'  ')'  ')'  ';'  'assertEquals'  '('  '``'  'bar'  "''"  ' '  'map2.get'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map2.remove'  '('  'key'  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertFalse'  '('  'map1.containsKey'  '('  'key'  ')'  ')'  ';'  'assertFalse'  '('  'map2.containsKey'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testSizeObject'  '('  ')'  'throws'  'Exception'  '{'  'testSize'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testSizeBinary'  '('  ')'  'throws'  'Exception'  '{'  'testSize'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testSize'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'final'  'SimpleEntry'  '<'  'String'  ' '  'String'  '>'  '['  ']'  'testValues=buildTestValues'  '('  'keys'  ')'  ';'  'int'  'half=testValues.length'  '/'  '2'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  'testValues.length'  ';'  'i++'  ')'  '{'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map=i'  '<'  'half'  '?'  'map1'  ':'  'map2'  ';'  'final'  'SimpleEntry'  '<'  'String'  ' '  'String'  '>'  'entry=testValues'  '['  'i'  ']'  ';'  'map.put'  '('  'entry.getKey'  '('  ')'  ' '  'entry.getValue'  '('  ')'  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertEquals'  '('  'keys.size'  '('  ')'  ' '  'map1.size'  '('  ')'  ')'  ';'  'assertEquals'  '('  'keys.size'  '('  ')'  ' '  'map2.size'  '('  ')'  ')'  ';'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testContainsKeyObject'  '('  ')'  'throws'  'Exception'  '{'  'testContainsKey'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testContainsKeyBinary'  '('  ')'  'throws'  'Exception'  '{'  'testContainsKey'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testContainsKey'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertTrue'  '('  'map1.containsKey'  '('  'key'  ')'  ')'  ';'  'assertTrue'  '('  'map2.containsKey'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testContainsValue_returnsFalse_onNonexistentValue'  '('  ')'  'throws'  'Exception'  '{'  'HazelcastInstance'  'node=createHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=node.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'assertFalse'  '('  'map.containsValue'  '('  '1'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testContainsValueObject'  '('  ')'  'throws'  'Exception'  '{'  'testContainsValue'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testContainsValueBinary'  '('  ')'  'throws'  'Exception'  '{'  'testContainsValue'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testContainsValue'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'int'  'half=keys.size'  '('  ')'  '/'  '2'  ' '  'i=0'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map=i++'  '<'  'half'  '?'  'map1'  ':'  'map2'  ';'  'map.put'  '('  'key'  ' '  'key'  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'assertTrue'  '('  'map1.containsValue'  '('  'key'  ')'  ')'  ';'  'assertTrue'  '('  'map2.containsValue'  '('  'key'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testValuesWithComparator'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'HazelcastInstance'  'instance=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=instance.getReplicatedMap'  '('  'randomName'  '('  ')'  ')'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  '100'  ';'  'i++'  ')'  '{'  'map.put'  '('  'i'  ' '  'i'  ')'  ';'  '}'  'Collection'  '<'  'Integer'  '>'  'values=map.values'  '('  'new'  'DescendingComparator'  '('  ')'  ')'  ';'  'int'  'v=100'  ';'  'for'  '('  'Integer'  'value'  ':'  'values'  ')'  '{'  'assertEquals'  '('  '--'  'v'  ' '  '('  'int'  ')'  'value'  ')'  ';'  '}'  '}'  '@'  'Test'  'public'  'void'  'testValuesObject'  '('  ')'  'throws'  'Exception'  '{'  'testValues'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testValuesBinary'  '('  ')'  'throws'  'Exception'  '{'  'testValues'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testValues'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'int'  'half=keys.size'  '('  ')'  '/'  '2'  ' '  'i=0'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map=i++'  '<'  'half'  '?'  'map1'  ':'  'map2'  ';'  'map.put'  '('  'key'  ' '  'key'  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertEquals'  '('  'keys'  ' '  'new'  'HashSet'  '<'  'String'  '>'  '('  'map1.values'  '('  ')'  ')'  ')'  ';'  'assertEquals'  '('  'keys'  ' '  'new'  'HashSet'  '<'  'String'  '>'  '('  'map2.values'  '('  ')'  ')'  ')'  ';'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testKeySetObject'  '('  ')'  'throws'  'Exception'  '{'  'testKeySet'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testKeySetBinary'  '('  ')'  'throws'  'Exception'  '{'  'testKeySet'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testKeySet'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'int'  'half=keys.size'  '('  ')'  '/'  '2'  ' '  'i=0'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map=i++'  '<'  'half'  '?'  'map1'  ':'  'map2'  ';'  'map.put'  '('  'key'  ' '  'key'  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertEquals'  '('  'keys'  ' '  'new'  'HashSet'  '<'  'String'  '>'  '('  'map1.keySet'  '('  ')'  ')'  ')'  ';'  'assertEquals'  '('  'keys'  ' '  'new'  'HashSet'  '<'  'String'  '>'  '('  'map2.keySet'  '('  ')'  ')'  ')'  ';'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testEntrySetObject'  '('  ')'  'throws'  'Exception'  '{'  'testEntrySet'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testEntrySetBinary'  '('  ')'  'throws'  'Exception'  '{'  'testEntrySet'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testEntrySet'  '('  'Config'  'config'  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'int'  'half=keys.size'  '('  ')'  '/'  '2'  ' '  'i=0'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map=i++'  '<'  'half'  '?'  'map1'  ':'  'map2'  ';'  'map.put'  '('  'key'  ' '  'key'  ')'  ';'  '}'  'assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'List'  '<'  'Entry'  '<'  'String'  ' '  'String'  '>'  '>'  'entrySet1=new'  'ArrayList'  '<'  'Entry'  '<'  'String'  ' '  'String'  '>'  '>'  '('  'map1.entrySet'  '('  ')'  ')'  ';'  'List'  '<'  'Entry'  '<'  'String'  ' '  'String'  '>'  '>'  'entrySet2=new'  'ArrayList'  '<'  'Entry'  '<'  'String'  ' '  'String'  '>'  '>'  '('  'map2.entrySet'  '('  ')'  ')'  ';'  'assertEquals'  '('  'keys.size'  '('  ')'  ' '  'entrySet1.size'  '('  ')'  ')'  ';'  'assertEquals'  '('  'keys.size'  '('  ')'  ' '  'entrySet2.size'  '('  ')'  ')'  ';'  'for'  '('  'Entry'  '<'  'String'  ' '  'String'  '>'  'e'  ':'  'entrySet1'  ')'  '{'  'assertTrue'  '('  'keys.contains'  '('  'e.getKey'  '('  ')'  ')'  ')'  ';'  '}'  'for'  '('  'Entry'  '<'  'String'  ' '  'String'  '>'  'e'  ':'  'entrySet2'  ')'  '{'  'assertTrue'  '('  'keys.contains'  '('  'e.getKey'  '('  ')'  ')'  ')'  ';'  '}'  '}'  '}'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testAddListenerObject'  '('  ')'  'throws'  'Exception'  '{'  'testAddEntryListener'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testAddListenerBinary'  '('  ')'  'throws'  'Exception'  '{'  'testAddEntryListener'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testAddEntryListener'  '('  'Config'  'config'  ')'  'throws'  'TimeoutException'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'SimpleEntryListener'  'listener=new'  'SimpleEntryListener'  '('  '1 0'  ')'  ';'  'map2.addEntryListener'  '('  'listener'  ' '  'keys.iterator'  '('  ')'  '.next'  '('  ')'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ')'  ';'  '}'  'assertOpenEventually'  '('  'listener.addLatch'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testEvictionObject'  '('  ')'  'throws'  'Exception'  '{'  'testEviction'  '('  'buildConfig'  '('  'InMemoryFormat.OBJECT'  ')'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testEvictionBinary'  '('  ')'  'throws'  'Exception'  '{'  'testEviction'  '('  'buildConfig'  '('  'InMemoryFormat.BINARY'  ')'  ')'  ';'  '}'  'private'  'void'  'testEviction'  '('  'Config'  'config'  ')'  'throws'  'TimeoutException'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '2'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'HazelcastInstance'  'instance2=nodeFactory.newHazelcastInstance'  '('  'config'  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'ReplicatedMap'  '<'  'String'  ' '  'String'  '>'  'map2=instance2.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'final'  'int'  'partitionCount=getPartitionService'  '('  'instance1'  ')'  '.getPartitionCount'  '('  ')'  ';'  'final'  'Set'  '<'  'String'  '>'  'keys=generateRandomKeys'  '('  'instance1'  ' '  'partitionCount'  ')'  ';'  'SimpleEntryListener'  'listener=new'  'SimpleEntryListener'  '('  '0 100'  ')'  ';'  'map2.addEntryListener'  '('  'listener'  ')'  ';'  'SimpleEntryListener'  'listenerKey=new'  'SimpleEntryListener'  '('  '0 1'  ')'  ';'  'map1.addEntryListener'  '('  'listenerKey'  ' '  'keys.iterator'  '('  ')'  '.next'  '('  ')'  ')'  ';'  'for'  '('  'String'  'key'  ':'  'keys'  ')'  '{'  'map1.put'  '('  'key'  ' '  "''"  'bar'  "''"  ' 3'  ' '  'TimeUnit.SECONDS'  ')'  ';'  '}'  'assertOpenEventually'  '('  'listener.evictLatch'  ')'  ';'  'assertOpenEventually'  '('  'listenerKey.evictLatch'  ')'  ';'  '}'  'private'  'class'  'SimpleEntryListener'  'extends'  'EntryAdapter'  '<'  'String'  ' '  'String'  '>'  '{'  'CountDownLatch'  'addLatch'  ';'  'CountDownLatch'  'evictLatch'  ';'  'SimpleEntryListener'  '('  'int'  'addCount'  ' '  'int'  'evictCount'  ')'  '{'  'addLatch=new'  'CountDownLatch'  '('  'addCount'  ')'  ';'  'evictLatch=new'  'CountDownLatch'  '('  'evictCount'  ')'  ';'  '}'  '@'  'Override'  'public'  'void'  'entryAdded'  '('  'EntryEvent'  'event'  ')'  '{'  'addLatch.countDown'  '('  ')'  ';'  '}'  '@'  'Override'  'public'  'void'  'entryEvicted'  '('  'EntryEvent'  'event'  ')'  '{'  'evictLatch.countDown'  '('  ')'  ';'  '}'  '}'  '@'  'Test'  '('  'expected=IllegalArgumentException.class'  ')'  'public'  'void'  'putNullKey'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Object'  ' '  'Object'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'map1.put'  '('  'null 1'  ')'  ';'  '}'  '@'  'Test'  '('  'expected=IllegalArgumentException.class'  ')'  'public'  'void'  'removeNullKey'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Object'  ' '  'Object'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'map1.remove'  '('  'null'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'removeEmptyListener'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Object'  ' '  'Object'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'assertFalse'  '('  'map1.removeEntryListener'  '('  '``'  '2'  "''"  ')'  ')'  ';'  '}'  '@'  'Test'  '('  'expected=IllegalArgumentException.class'  ')'  'public'  'void'  'removeNullListener'  '('  ')'  'throws'  'Exception'  '{'  'TestHazelcastInstanceFactory'  'nodeFactory=createHazelcastInstanceFactory'  '('  '1'  ')'  ';'  'HazelcastInstance'  'instance1=nodeFactory.newHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Object'  ' '  'Object'  '>'  'map1=instance1.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'map1.removeEntryListener'  '('  'null'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testSizeAfterRemove'  '('  ')'  'throws'  'Exception'  '{'  'HazelcastInstance'  'node=createHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Integer'  ' '  'Integer'  '>'  'map=node.getReplicatedMap'  '('  '``'  'default'  "''"  ')'  ';'  'map.put'  '('  '1'  ' '  'Integer.MAX_VALUE'  ')'  ';'  'map.remove'  '('  '1'  ')'  ';'  'assertTrue'  '('  'map.size'  '('  ')'  '=='  '0'  ')'  ';'  '}'  '@'  'Test'  'public'  'void'  'testDestroy'  '('  ')'  'throws'  'Exception'  '{'  'HazelcastInstance'  'instance=createHazelcastInstance'  '('  ')'  ';'  'ReplicatedMap'  '<'  'Object'  ' '  'Object'  '>'  'replicatedMap=instance.getReplicatedMap'  '('  'randomName'  '('  ')'  ')'  ';'  'replicatedMap.put'  '('  '1 1'  ')'  ';'  'replicatedMap.destroy'  '('  ')'  ';'  'Collection'  '<'  'DistributedObject'  '>'  'objects=instance.getDistributedObjects'  '('  ')'  ';'  'assertEquals'  '('  '0'  ' '  'objects.size'  '('  ')'  ')'  ';'  '}'  'class'  'DescendingComparator'  'implements'  'Comparator'  '<'  'Integer'  '>'  '{'  '@'  'Override'  'public'  'int'  'compare'  '('  'Integer'  'o1'  ' '  'Integer'  'o2'  ')'  '{'  'return'  'o1'  '=='  'o2'  '?'  '0'  ':'  'o1'  '>'  'o2'  '?'  '-1'  ':'  '1'  ';'  '}'  '}'  '}'] 
__label__0 logger.trace ( `` { } unsupported item type { } for item { } '' , LoggerConstants.TFMODELUPDATE , provider.getItem ( itemName ) , itemName ) 
__label__1 ['new'  'Whitelist'  '('  ')'  '.addTags'  '('  '``'  'a'  "''"  ' '  "''"  'b'  "''"  ' '  "''"  'blockquote'  "''"  ' '  "''"  'br'  "''"  ' '  "''"  'cite'  "''"  ' '  "''"  'code'  "''"  ' '  "''"  'dd'  "''"  ' '  "''"  'dl'  "''"  ' '  "''"  'dt'  "''"  ' '  "''"  'em'  "''"  ' '  "''"  'i'  "''"  ' '  "''"  'li'  "''"  ' '  "''"  'ol'  "''"  ' '  "''"  'p'  "''"  ' '  "''"  'pre'  "''"  ' '  "''"  'q'  "''"  ' '  "''"  'small'  "''"  ' '  "''"  'strike'  "''"  ' '  "''"  'strong'  "''"  ' '  "''"  'sub'  "''"  ' '  "''"  'sup'  "''"  ' '  "''"  'u'  "''"  ' '  "''"  'ul'  "''"  ')'] 
__label__0 getRegistry ( ) .bind ( `` hb '' , hb ) 
__label__0 private static final HBaseConfiguration config=new HBaseConfiguration ( ) ; 
__label__0 sExecutorService.shutdownNow ( ) 
__label__0 new StringBuilder ( 50 ) 
__label__1 ['Thread.sleep'  '('  '2000'  ')'] 
__label__1 ['QuotaCache.this.namespaceQuotaCache.contains'  '('  'ns'  ')'] 
__label__1 ['``'  'Notes'  "''"  '.equals'  '('  'subSectionName'  ')'  '||'  '``'  'Rule'  'Description'  "''"  '.equals'  '('  'subSectionName'  ')'] 
__label__1 ['GL20.glUniform4'  '('  'location'  ' '  'toFloatBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '<'  '<'  '2'  ')'  ')'] 
__label__0 promise.isDone ( ) || future.isCancelled ( ) 
__label__1 ['mBlockStream.remaining'  '('  ')'] 
__label__1 ['status.isDirectory'  '('  ')'] 
__label__0 transactionalMap.set ( key , value ) 
__label__0 initialCapacity < = capacity 
__label__1 ['mTableInfo.getTableName'  '('  ')'] 
__label__0 GlobalConfiguration.getBoolean ( MERGE_ITERATION_AUX_TASKS_KEY , false ) 
__label__1 ['routes.BufferResource'  '('  ')'] 
__label__1 ['m_data.getFixString'  '('  '('  'int'  ')'  'm_length'  ')'] 
__label__0 LOG.error ( result.getDescription ( ) , t ) 
__label__1 ['op.get'  '('  'OPERATION_HEADERS'  ')'  '.get'  '('  'ALLOW_RESOURCE_SERVICE_RESTART'  ')'  '.set'  '('  'true'  ')'] 
__label__1 ['@'  'Path'  '('  'PATH_NODE_INDEX_ID'  ')'] 
__label__0 pId + BASE_FILE_NUMBER 
__label__0 new IllegalStateException ( String.format ( `` File \ '' % 1 $ s\ '' has no indentation comment or its format `` + `` malformed . Error on line : % 2 $ d '' , aFileName , lineNumber ) ) 
__label__1 ['assertFalse'  '('  'jmsTemplate.isPubSubDomain'  '('  ')'  ')'] 
__label__1 ['columnType.equalsIgnoreCase'  '('  '``'  'long'  "''"  ')'] 
__label__1 ['instance.managementService.unregister'  '('  ')'] 
__label__1 ['typeSerializer.getClass'  '('  ')'] 
__label__0 context.registerSubsystem ( SUBSYSTEM_NAME,1,1 ) 
__label__1 ['jmsManager.destroyTopic'  '('  'name'  ')'] 
__label__1 ['v.getCreationTime'  '('  ')'  '+'  'timeToLive'  '>'  'now'] 
__label__1 ['pushExecutor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'Push'  'Headers'  '['  '%'  's'  ']'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'boolean'  'cancel=pushObserver.onHeaders'  '('  'streamId'  ' '  'requestHeaders'  ' '  'inFinished'  ')'  ';'  'try'  '{'  'if'  '('  'cancel'  ')'  'frameWriter.rstStream'  '('  'streamId'  ' '  'ErrorCode.CANCEL'  ')'  ';'  'if'  '('  'cancel'  '||'  'inFinished'  ')'  '{'  'synchronized'  '('  'SpdyConnection.this'  ')'  '{'  'currentPushRequests.remove'  '('  'streamId'  ')'  ';'  '}'  '}'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__0 AlluxioLogServerProcess.class 
__label__1 ['FilterRegistrationBean.class'] 
__label__0 logger.trace ( `` attempting to login '' ) 
__label__0 log.debug ( `` Checking bounds key : [ { } , { } ) & col : [ { } , { } ) ( expect { } keys ) '' , new Object [ ] { keyStart , keyEnd , startCol , endCol , expected.size ( ) } ) 
__label__1 ['new'  'InetSocketAddress'  '('  'configuration.getRestListenUri'  '('  ')'  '.getPort'  '('  ')'  ')'] 
__label__0 setPin ( file , true ) 
__label__0 c.content ( ) .readSlice ( CONTENT_LENGTH ) 
__label__0 LOG.debug ( `` Failed to get mount information : { } '' , e.getMessage ( ) ) 
__label__1 ['visitor.visitMethodInsn'  '('  'opCode.getOpCode'  '('  ')'  ' '  'target.getClassName'  '('  ')'  ' '  'name'  ' '  'getMethodDescription'  '('  ')'  ')'] 
__label__0 player.playSound ( location , soundArg , ( float ) minimumVolume , ( float ) pitch ) 
__label__1 ['node.executorManager.executeLocaly'  '('  'new'  'Runnable'  '('  ')'  '{'  'public'  'void'  'run'  '('  ')'  '{'  'MembershipEvent'  'membershipEvent=new'  'MembershipEvent'  '('  'ClusterImpl.this'  ' '  'cm'  ' '  'MembershipEvent.MEMBER_REMOVED'  ')'  ';'  'for'  '('  'MembershipListener'  'listener'  ':'  'listenerSet'  ')'  '{'  'listener.memberRemoved'  '('  'membershipEvent'  ')'  ';'  '}'  '}'  '}'  ')'] 
__label__1 ['/'  '*'  '*'  '*'  'Formatter'  'for'  'the'  'log'  'message'  '.'  '*'  '/'  'private'  'final'  'AuditEvemtFormatter'  'formatter'  ';'] 
__label__1 ['?'  'extends'  'Exception'] 
__label__1 ['logger.debug'  '('  '``'  'Invalid'  'Account'  'Credentials'  "''"  ')'] 
__label__1 ['InetAddress.getLocalHost'  '('  ')'] 
__label__0 clusterMap.set ( buildAttributeName ( entry.getKey ( ) ) , cacheEntry.value ) 
__label__0 request.getPathInfo ( ) 
__label__0 Tuple2.of ( timeoutPattern2,12L ) 
__label__1 ['return'  'softDepend'  ';'] 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__1 ['GL20.glUniform2'  '('  'location'  ' '  'toIntBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '<'  '<'  '1'  ')'  ')'] 
__label__0 registry.bind ( `` firehoseClient '' , amazonKinesisFirehoseClient ) 
__label__0 checkArgument ( keyGroupRange.contains ( keyGroup ) , '' % s does not contain key group % s '' , keyGroupRange , keyGroup ) 
__label__1 ['serverEnvironment.getLaunchType'  '('  ')'  '=='  'ServerEnvironment.LaunchType.DOMAIN'] 
__label__1 ['region.checkAndMutate'  '('  'row1'  ' '  'fam1'  ' '  'qf1'  ' '  'CompareOp.EQUAL'  ' '  'new'  'BinaryComparator'  '('  'val1'  ')'  ' '  'put'  ' '  'true'  ')'] 
__label__0 getTokenDisplayNames ( ) 
__label__0 SecurityAutoConfiguration.class 
__label__1 ['userStreamListener.onStatus'  '('  'new'  'StatusJSONImpl'  '('  'json'  ')'  ')'] 
__label__0 ImmutableList < SourceFile > 
__label__0 ServiceHelper.startService ( answer ) 
__label__1 ['setUnknownLabels'  '('  'binarized'  ' '  'mainLabel'  ')'] 
__label__0 sizeNeeded > items.length 
__label__0 connection.psubscribe ( jedisPubSub , patterns ) 
__label__0 uiAclHandler.permit ( reqContext , op , topoConf ) 
__label__1 ['order.isCurrent'  '('  ')'] 
__label__1 ['executionStats.getSplits'  '('  ')'] 
__label__0 GL20.glUniform1fv ( location , toFloatBuffer ( v , offset , count ) ) 
__label__1 ['('  'JobResponse'  ')'  'response'] 
__label__0 GL15.glGetBufferParameteriv ( target , pname , params ) 
__label__1 ['node.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 @ Message ( id=14151 , value= '' Could not find view % s for EJB % s '' ) IllegalStateException viewNotFound ( String viewClass , String ejbName ) ; 
__label__1 ['from'  '('  '``'  'direct'  ':'  'start'  "''"  ')'  '.recipientList'  '('  'header'  '('  '``'  'slip'  "''"  ')'  ')'  '.aggregationStrategy'  '('  'new'  'AggregationStrategy'  '('  ')'  '{'  'public'  'Exchange'  'aggregate'  '('  'Exchange'  'oldExchange'  ' '  'Exchange'  'newExchange'  ')'  '{'  'if'  '('  'oldExchange'  '=='  'null'  ')'  '{'  'return'  'newExchange'  ';'  '}'  'String'  'body=oldExchange.getIn'  '('  ')'  '.getBody'  '('  'String.class'  ')'  ';'  'oldExchange.getIn'  '('  ')'  '.setBody'  '('  'body'  '+'  'newExchange.getIn'  '('  ')'  '.getBody'  '('  'String.class'  ')'  ')'  ';'  'return'  'oldExchange'  ';'  '}'  '}'  ')'  '.parallelProcessing'  '('  ')'  '.timeout'  '('  '2000'  ')'] 
__label__1 ['clearFromMember.start'  '('  ')'] 
__label__1 ['logger.error'  '('  '``'  'Can'  'not'  'retrieve'  'item'  '{'  '}'  'for'  'widget'  '{'  '}'  "''"  ' '  'itemName'  ' '  'w.eClass'  '('  ')'  '.getInstanceTypeName'  '('  ')'  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  'path'  ')'] 
__label__0 VectorizationContext.isStringFamily ( outputType ) || outputType.equalsIgnoreCase ( `` binary '' ) 
__label__1 ['public'  'DerivedBuilder'  'setProxyPassword'  '('  'String'  'password'  ')'  '{'  'this.proxyPassword=password'  ';'  'return'  'this'  ';'  '}'] 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class ConditionBasicDistributedTest extends ConditionAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( ) { return createHazelcastInstanceFactory ( 2 ) .newInstances ( ) ; } } 
__label__0 ! isInTransform & & ! isUDTF & & child.getChildCount ( ) > 2 
__label__0 Arrays.asList ( `` ErrorResponse '' , '' Response '' , '' Int '' , '' Int32 '' , '' Int64 '' , '' Int64 '' , '' Float '' , '' Double '' , '' Bool '' , '' Void '' , '' String '' , '' Character '' , '' AnyObject '' , '' Any '' , '' Error '' , '' URL '' , '' class '' , '' Class '' , '' break '' , '' as '' , '' associativity '' , '' deinit '' , '' case '' , '' dynamicType '' , '' convenience '' , '' enum '' , '' continue '' , '' false '' , '' dynamic '' , '' extension '' , '' default '' , '' is '' , '' didSet '' , '' func '' , '' do '' , '' nil '' , '' final '' , '' import '' , '' else '' , '' self '' , '' get '' , '' init '' , '' fallthrough '' , '' Self '' , '' infix '' , '' internal '' , '' for '' , '' super '' , '' inout '' , '' let '' , '' if '' , '' true '' , '' lazy '' , '' operator '' , '' in '' , '' COLUMN '' , '' left '' , '' private '' , '' return '' , '' FILE '' , '' mutating '' , '' protocol '' , '' switch '' , '' FUNCTION '' , '' none '' , '' public '' , '' where '' , '' LINE '' , '' nonmutating '' , '' static '' , '' while '' , '' optional '' , '' struct '' , '' override '' , '' subscript '' , '' postfix '' , '' typealias '' , '' precedence '' , '' var '' , '' prefix '' , '' Protocol '' , '' required '' , '' right '' , '' set '' , '' Type '' , '' unowned '' , '' weak '' , '' Data '' ) 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['beansXml.createAlternatives'  '('  ')'] 
__label__0 this.vertices.containsKey ( node ) || this.chainedTasks.containsKey ( node ) || this.iterations.containsKey ( node ) 
__label__1 ['batteryVp'  '>'  '='  'full'] 
__label__1 ['new'  'IndexOutOfBoundsException'  '('  ')'] 
__label__1 ['selector.select'  '('  '500'  ')'] 
__label__0 JsonRecordHiveMapper.class 
__label__1 ['format'  '('  '``'  'RowBlock'  '{'  'SingleRowBlockWriter='  '%'  'd'  ' '  'fieldBlockBuilderReturned=true'  '}'  "''"  ')'] 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectoryAtParent.java '' ) 
__label__1 ['``'  'ppc64'  "''"  '.equals'  '('  'arch'  ')'  '||'  '``'  'ppc64le'  "''"  '.equals'  '('  'arch'  ')'] 
__label__1 ['new'  'SpdySessionStatus'  '('  '11'  ' '  "''"  'INTERNAL_ERROR'  "''"  ')'] 
__label__0 p.getFileSystem ( conf ) .delete ( p , true ) 
__label__0 configuration.addViewInterceptor ( method , factory , InterceptorOrder.View.COMPONENT_DISPATCHER ) 
__label__1 ['tokens.toString'  '('  ')'] 
__label__0 DefaultObjectNameFactory.class 
__label__1 ['@'  'SuppressWarnings'  '('  '``'  'unused'  "''"  ')'  'private'  'final'  'Object'  'strongReference'  ';'] 
__label__1 ['new'  'WordToSentenceProcessor'  '<'  'IN'  '>'  '('  ')'] 
__label__1 ['registerConsumer'  '('  'newUUIDString'  '('  ')'  ' '  'newUUIDString'  '('  ')'  ' '  'owner'  ' '  'attributes'  ')'] 
__label__1 ['TfsShell.convertMsToDate'  '('  'files'  '['  '2'  ']'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__1 ['new'  'HashSet'  '<'  'RecordReplicationInfo'  '>'  '('  ')'] 
__label__0 new BindException ( newConcept , '' concept '' ) 
__label__1 ['GL20.glGetVertexAttrib'  '('  'index'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 dic.buildRouterChain ( ) 
__label__1 ['log.error'  '('  '``'  'Error'  'while'  'closing'  'command'  'context'  "''"  ' '  'exception'  ')'] 
__label__1 ['ignoreUnknownFields=false'] 
__label__0 comparePartitionOwnership ( true , localMember , partition ) 
__label__0 GL20.glUniform4fv ( location , v ) 
__label__1 ['ExceptionUtils.getFullStackTrace'  '('  'th'  ')'] 
__label__0 `` false '' .equals ( showRelationships ) || result.hasErrors ( ) 
__label__1 ['registry.put'  '('  '``'  'sessionStateListener'  "''"  ' '  'new'  'SessionStateListener'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'onStateChange'  '('  'SessionState'  'arg0'  ' '  'SessionState'  'arg1'  ' '  'Session'  'arg2'  ')'  '{'  '}'  '}'  ')'] 
__label__1 ['new'  'AMQPProducer'  '('  'configuration'  ' '  'metricRegistry'  ')'] 
__label__1 ['preserve.toString'  '('  ')'] 
__label__1 ['assertEquals'  '('  '301'  ' '  'status.getStatusCode'  '('  ')'  ')'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 new MD5Renderer ( model , false , true ) 
__label__1 ['new'  'InetSocketAddress'  '('  'configuration.getRestListenUri'  '('  ')'  '.getPort'  '('  ')'  ')'] 
__label__1 ['server.getSegment'  '('  'segment.getIdentifier'  '('  ')'  ')'  '!'  '='  'null'  '&'  '&'  'peon.getSegmentsToLoad'  '('  ')'  '.contains'  '('  'segment'  ')'] 
__label__0 @ Override public ExtendedCell deepClone ( ) { byte [ ] copy=new byte [ this.length ] ; ByteBufferUtils.copyFromBufferToArray ( copy , this.buf , this.offset,0 , this.length ) ; KeyValue kv=new NoTagsKeyValue ( copy,0 , copy.length ) ; kv.setSequenceId ( this.getSequenceId ( ) ) ; return kv ; } 
__label__0 testerAnnotation.annotationType ( ) 
__label__1 ['mock.expectedHeaderReceived'  '('  'CaffeineConstants.ACTION_HAS_RESULT'  ' '  'false'  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['new'  'VariableInformation'  '('  '10'  ' '  "''"  'Total'  'operation'  'time'  'compressor'  "''"  ' '  'NibeDataType.S32'  ' '  'Type.Sensor'  ')'] 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/retweets/ '' + statusId+ `` .json '' , true ) ) 
__label__0 adapter.getCustomArgumentResolvers ( ) 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  ')'] 
__label__1 ['Lists.newArrayList'  '('  '``'  'timestamp'  "''"  ' '  "''"  'source'  "''"  ')'] 
__label__1 ['i'  '<'  '='  'repeatCount'] 
__label__1 ['message.getFormattedFields'  '('  ')'] 
__label__1 ['HiveConf.setLongVar'  '('  'conf'  ' '  'HiveConf.ConfVars.MAPREDMINSPLITSIZE'  ' '  'preferredSplitSize'  ')'] 
__label__0 new UnsupportedOperationException ( getClass ( ) .getName ( ) ) 
__label__0 GL20.glUniformMatrix3fv ( location , transpose , toFloatBuffer ( value , offset , count * 9 ) ) 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` redis '' ) 
__label__0 incomingMessage.getMessagePayloadByte ( 1 ) 
__label__1 ['TrustManagerFactory.getDefaultAlgorithm'  '('  ')'] 
__label__0 statistics.addGetTimeNanos ( System.nanoTime ( ) - start ) 
__label__0 new DeleteOptions.Builder ( ) 
__label__0 public void testWithDFS ( ) throws Exception { MiniDFSCluster dfs=null ; MiniMRCluster mr=null ; FileSystem fileSys=null ; try { final int taskTrackers=4 ; Configuration conf=new Configuration ( ) ; dfs=new MiniDFSCluster ( conf,4 , true , null ) ; fileSys=dfs.getFileSystem ( ) ; JobConf jtConf=new JobConf ( ) ; jtConf.setInt ( TTConfig.TT_MAP_SLOTS,1 ) ; jtConf.setInt ( TTConfig.TT_REDUCE_SLOTS,1 ) ; jtConf.setLong ( JTConfig.JT_TRACKER_EXPIRY_INTERVAL,10 * 1000 ) ; mr=new MiniMRCluster ( taskTrackers , fileSys.getUri ( ) .toString ( ) ,1 , null , null , jtConf ) ; testFailCommitter ( CommitterWithFailSetup.class , mr.createJobConf ( ) ) ; testFailCommitter ( CommitterWithFailCommit.class , mr.createJobConf ( ) ) ; testSetupAndCleanupKill ( mr , dfs , true ) ; fileSys.delete ( setupSignalFile , true ) ; fileSys.delete ( cleanupSignalFile , true ) ; testSetupAndCleanupKill ( mr , dfs , false ) ; } finally { if ( dfs ! = null ) { dfs.shutdown ( ) ; } if ( mr ! = null ) { mr.shutdown ( ) ; } } } 
__label__1 ['transform.setToRotation'  '('  'new'  'Vector3'  '('  '1 0 1'  ')'  '.nor'  '('  ')'  ' '  'angle'  ')'] 
__label__0 shift > 0 & & newroot.length == 1 
__label__1 ['22'  '*'  'ClassSize.REFERENCE'] 
__label__1 ['InetAddress.getLoopbackAddress'  '('  ')'] 
__label__0 createMessageConsumer ( session , destinationName , messageSelector , topic , durableSubscriptionId , false ) 
__label__0 ImmutableSet.copyOf ( modules ) 
__label__1 ['c.write'  '('  '``'  '['  'you'  ']'  '``'  '+'  'msg'  '+'  "'\\n"  "'"  ')'] 
__label__0 getTypeDeclaration ( swaggerModel.getAdditionalProperties ( ) ) 
__label__1 ['realPointerIndex'  '>'  'AndroidInput.NUM_TOUCHES'] 
__label__0 ! Values.WEBSOCKET.equalsIgnoreCase ( upgrade ) 
__label__0 graphModel.isMixed ( ) 
__label__0 from ( `` jms : queue : order '' ) .to ( `` bean : validateOrder '' ) .to ( `` mock : validate '' ) .threads ( 20 ) .unmarshal ( mySecureDataFormat ) .delay ( 500 ) 
__label__0 factory.get ( fResponseClass , NO_ANNOTATIONS , retrofit ) 
__label__0 localInputFuture.cancel ( mayInterruptIfRunning ) 
__label__1 ['IntrospectionSupport.setProperty'  '('  'jpa'  ' '  "''"  'timestamp'  "''"  ' '  'msg.getTimestamp'  '('  ')'  ')'] 
__label__0 Threads.sleep ( 3000 ) 
__label__1 ['pool.dealloc'  '('  ')'] 
__label__0 multiValueRow.get ( 0 ) 
__label__0 getRegistry ( ) .bind ( `` myFilter '' , new NotificationFilter ( ) { private static final long serialVersionUID=1L ; public boolean isNotificationEnabled ( Notification aNotification ) { boolean enabled=aNotification.getSequenceNumber ( ) % 2 == 0 ; if ( ! enabled ) { mRejected.add ( aNotification ) ; } return enabled ; } } ) 
__label__1 ['new'  'StringBuilder'  '('  '167'  ')'] 
__label__0 Assert.assertEquals ( 9300 , Utils.calculateHeapSize ( 10000 ) ) 
__label__0 DiagnosticType.error ( `` JSC_BAD_PRIVATE_GLOBAL_ACCESS '' , '' Access to private variable { 0 } not allowed outside file { 1 } . '' ) 
__label__1 ['notifierFuture.cancel'  '('  'true'  ')'] 
__label__0 new RetryDriver ( maxAttempts , minSleepTime , maxSleepTime , scaleFactor , maxRetryTime , exceptions ) 
__label__0 ( t instanceof MetaException ) & & t.getMessage ( ) .matches ( `` ( ? s ) . * ( JDO [ a-zA-Z ] * |TProtocol|TTransport ) Exception . * '' ) & & ! t.getMessage ( ) .contains ( `` java.sql.SQLIntegrityConstraintViolationException '' ) 
__label__0 logException ( exception ) 
__label__1 ['logger.info'  '('  '``'  'Normalizing'  "''"  ')'] 
__label__0 CompletableFuture < Void > 
__label__1 ['maxSize'  '('  'new'  'Fixed'  '('  'width'  ')'  ')'] 
__label__1 ['conceptToValidate.getConceptId'  '('  ')'] 
__label__0 mock.expectedMinimumMessageCount ( 3 ) 
__label__1 ['isDoubleA'  '&'  '&'  'isIntA'] 
__label__1 ['Arrays.asList'  '('  '``'  'bool'  "''"  ' '  "''"  'qint32'  "''"  ' '  "''"  'qint64'  "''"  ')'] 
__label__0 ServletTestSuite testSuite=new ServletTestSuite ( testClass ) ; 
__label__1 ['start.set'  '('  'Calendar.DAY_OF_MONTH'  ' '  'startMonth'  ')'] 
__label__1 ['getRequestMethod'  '=='  'null'] 
__label__1 ['WebSocketEventListener.class.cast'  '('  'l'  ')'  '.onMessage'  '('  'event'  ')'] 
__label__1 ['buffer.indexOf'  '('  'partToMatch'  ')'] 
__label__1 ['InputProcessor'  '['  ']'] 
__label__0 TimeUnit.SECONDS.toMillis ( timeoutSeconds ) 
__label__1 ['Integer'  'olderThan'] 
__label__1 ['registry.put'  '('  '``'  'groovyShellFactory'  "''"  ' '  'groovyShellFactory'  ')'] 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__0 meta.setContentType ( Mimetypes.MIMETYPE_OCTET_STREAM ) 
__label__1 ['this.getNotEmptyWaitThreadPeak'  '('  ')'] 
__label__1 ['BlockStoreContext.INSTANCE.hasLocalWorker'  '('  ')'] 
__label__1 ['VertexAttribute.Color'  '('  ')'] 
__label__0 new InetSocketAddress ( configuration.getRestListenUri ( ) .getHost ( ) , configuration.getRestListenUri ( ) .getPort ( ) ) 
__label__1 ['StatBuckets.prettyUptime'  '('  'secs'  ')'] 
__label__1 ['new'  'AnnotationRepositoryConfigurationSource'  '('  'metadata'  ' '  'getAnnotation'  '('  ')'  ' '  'this.environment'  ')'  '{'  '@'  'Override'  'public'  'java.lang.Iterable'  '<'  'String'  '>'  'getBasePackages'  '('  ')'  '{'  'return'  'AbstractRepositoryConfigurationSourceSupport.this.getBasePackages'  '('  ')'  ';'  '}'  '}'] 
__label__0 mTfs.delete ( mTfs.open ( path ) , true ) 
__label__0 expectedMinimumCount == -1 & & expectedCount < = 0 
__label__1 ['decodeLast'  '('  'ctx'  ' '  'e.getChannel'  '('  ')'  ' '  'cumulation'  ' '  'state'  ')'] 
__label__1 ['Bytes.toBytesBinary'  '('  'regionname'  ')'] 
__label__1 ['dict.put'  '('  'words'  '['  '0'  ']'  ' '  'words'  '['  '2'  ']'  ')'] 
__label__0 request.getServletPath ( ) 
__label__1 ['exportReturnCodes'  '('  'exporter'  ')'] 
__label__0 ssl.hasDefined ( CommonAttributes.CA_REVOCATION_URL ) 
__label__1 ['connection.subscribe'  '('  'jedisPubSub'  ' '  'patterns'  ')'] 
__label__0 LOCAL_OPTION.getLongOpt ( ) 
__label__1 ['new'  'ReadonlyMapELResolver'  '('  'beans'  ')'] 
__label__1 ['Optional.of'  '('  'Duration.seconds'  '('  '1'  ')'  ')'] 
__label__0 logger.debug ( `` Can not retrieve item { } for widget { } '' , itemName , w.eClass ( ) .getInstanceTypeName ( ) ) 
__label__1 ['node.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 getPositionForView ( switchView ) < getHeaderViewsCount ( ) || getPositionForView ( switchView ) > = ( getAdapter ( ) .getCount ( ) - getHeaderViewsCount ( ) - getFooterViewsCount ( ) ) 
__label__0 logger.fine ( `` Remove try/catch/finally '' ) 
__label__1 ['logger.error'  '('  'message'  ')'] 
__label__0 twitter4j.List.createListList ( get ( getApiBaseURL ( ) + V1 + user+ `` /lists.json ? cursor= '' + cursor , true ) ) 
__label__1 ['Assert.assertEquals'  '('  'e.getCause'  '('  ')'  '.getMessage'  '('  ')'  ' '  'getNotAllowedExceptionMessage'  '('  '``'  'helloForNone'  "''"  ')'  ')'] 
__label__0 registry.bind ( `` groovyShellFactory '' , groovyShellFactory ) 
__label__0 titleTable.getPrefWidth ( ) 
__label__0 assertEquals ( 8 , this.context.getBean ( FilterChainProxy.class ) .getFilterChains ( ) .size ( ) ) 
__label__1 ['world.add'  '('  '``'  'capsule'  "''"  ' 5f 2.125f 5f'  ')'] 
__label__1 ['new'  'Version'  '('  '1 0 0'  ')'] 
__label__0 new KafkaComponent ( context ) 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'exist'  "''"  ')'] 
__label__1 ['ctClass.toClass'  '('  ')'] 
__label__1 ['args.length'  '=='  '0'] 
__label__0 basicGraph.getShortestPath ( root , t , false ) 
__label__0 getLsResultStr ( `` /testRoot/testDir '' , files [ 1 ] .getCreationTimeMs ( ) ,1 , LsCommand.STATE_FOLDER , testUser , testUser , files [ 1 ] .getPermission ( ) , files [ 1 ] .isFolder ( ) ) 
__label__1 ['r.destination'  '!'  '='  'null'] 
__label__1 ['closeCode'  '<'  '1001'] 
__label__1 ['return'  'sinkMaxBufferSize'  ';'] 
__label__1 ['Arrays.asList'  '('  'CoreAnnotations.TextAnnotation.class'  ' '  'CoreAnnotations.TokensAnnotation.class'  ' '  'CoreAnnotations.CharacterOffsetBeginAnnotation.class'  ' '  'CoreAnnotations.CharacterOffsetEndAnnotation.class'  ')'] 
__label__0 emptyCheck.log ( 0 , '' msgKey '' ) 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS'  ')'] 
__label__1 ['fieldDeser.getPropertyValue'  '('  'currentObject'  ')'] 
__label__1 ['n.intValue'  '('  ')'] 
__label__1 ['request.getTaskDefinitionKey'  '('  ')'] 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__1 ['config.getCredentialsProvider'  '('  ')'  '=='  'null'] 
__label__0 LOG.debug ( `` Creating netty output stream for block { } @ { } from client { } '' , blockId , address , NetworkAddressUtils.getClientHostName ( ) ) 
__label__0 node.getLocalName ( ) 
__label__0 tfs.ls ( Constants.PATH_SEPARATOR , true ) 
__label__1 ['CommonUtils.randomString'  '('  'random.nextInt'  '('  '10'  ')'  ')'] 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  'exampleServletRegistration'  '('  ')'  ' '  'new'  'FilterRegistrationBean'  '('  'new'  'ExampleFilter'  '('  ')'  ')'  ')'] 
__label__1 ['ImmutableList'  '<'  'String'  '>'] 
__label__0 new IllegalArgumentException ( `` Could not lookup jndi name : `` + namespaceStrippedJndiName + `` in context : `` + jndiContext , ne ) 
__label__0 ElementsParser.isAlphaNumeric ( ch2 ) 
__label__1 ['config.isAutoRead'  '('  ')'] 
__label__1 ['new'  'GetExecutionVariableInstancesCmd'  '('  'executionId'  ' '  'variableNames'  ' '  'false'  ' '  'locale'  ' '  'withLocalizationFallback'  ')'] 
__label__0 LOG.error ( `` DataNode is out of memory . Will retry in 30 seconds . `` , ie ) 
__label__0 Sets. < Long > newHashSet ( ) 
__label__1 ['public'  'Integer'  'getOlderThan'  '('  ')'  '{'  'return'  'olderThan'  ';'  '}'] 
__label__1 ['Optional.of'  '('  'resourceManagement.getStats'  '('  ')'  ')'] 
__label__1 ['analysis.getTypeWithCoercions'  '('  'windowFunction'  ')'] 
__label__1 ['entry.getValue'  '('  ')'  '.getManagementInterfaceMinorVersion'  '('  ')'] 
__label__0 @ Override public Response schema ( Property property ) { throw new RuntimeException ( `` Not implemented '' ) ; } 
__label__1 ['singletonComponent'  '=='  'null'] 
__label__0 Time.currentTimeMillis ( ) 
__label__1 ['ch.unsafe'  '('  ')'  '.flushNow'  '('  ')'] 
__label__0 pushExecutor.execute ( new NamedRunnable ( `` OkHttp % s Push Request [ % s ] '' , hostName , streamId ) { @ Override public void execute ( ) { boolean cancel=pushObserver.onRequest ( streamId , requestHeaders ) ; try { if ( cancel ) { frameWriter.rstStream ( streamId , ErrorCode.CANCEL ) ; synchronized ( SpdyConnection.this ) { currentPushRequests.remove ( streamId ) ; } } } catch ( IOException ignored ) { } } } ) 
__label__1 ['MockReset.before'  '('  ')'] 
__label__1 ['config.properties'  '('  ')'  '.get'  '('  'REDIS_SHARED_POOL'  ')'  '=='  'null'] 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__0 probeParentLoaderLast=false 
__label__1 ['final'  'Prototype'  'testedPrototype'] 
__label__1 ['ImmutableList.of'  '('  'sourcesAsStrings'  ')'] 
__label__1 ['mSizeOnTier.containsKey'  '('  'tierAlias'  ')'  '?'  'mSizeOnTier.get'  '('  'tierAlias'  ')'  ':'  '0'] 
__label__1 ['queue.poll'  '('  '2'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__0 type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.INTERFACE_DEF 
__label__0 ! getPath ( tFile ) .startsWith ( MASTER_CONF.TEMPORARY_FOLDER ) 
__label__1 ['filteredMessage.add'  '('  'perRequestFilter'  '('  'r'  ' '  'new'  'Entry'  '('  'o'  ' '  'r'  ' '  'f'  ' '  'o'  ')'  ' '  'false'  ')'  ')'] 
__label__1 ['HashMap'  '<'  'String'  ' '  'Operator'  '<'  '?'  'extends'  'Serializable'  '>'  '>'] 
__label__1 ['options'  '!'  '='  'null'] 
__label__0 ! webSocket.resource ( ) .getAtmosphereResourceEvent ( ) .isSuspended ( ) 
__label__1 ['scanFeatures'  '('  'getCamelKarafFeatureUrl'  '('  ')'  ' '  "''"  'camel-core'  "''"  ' '  "''"  'camel-spring'  "''"  ' '  "''"  'camel-test'  "''"  ')'] 
__label__0 DirectMessage.createDirectMessageList ( get ( getBaseURL ( ) + `` direct_messages.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__1 ['keys.isEmpty'  '('  ')'] 
__label__0 grammar.getTokenDisplayNames ( ) 
__label__0 ! mkdirs ( mBaseDir ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__0 testWarning ( js , ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) 
__label__0 LinkedHashMap < String , ASTNode > 
__label__1 ['assertMockEndpointsSatisifed'  '('  ')'] 
__label__1 ['connection.hdel'  '('  'key'  ')'] 
__label__0 new InputStreamReader ( localStream , StandardCharsets.UTF_8 ) 
__label__1 ['GL20.glGetActiveUniform'  '('  'program'  ' '  'index 256'  ' '  'typeTmp'  ')'] 
__label__0 configuration.addViewInterceptor ( method , factory , InterceptorOrder.View.COMPONENT_DISPATCHER ) 
__label__0 dimensionsSpec.getDimensionNames ( ) 
__label__1 ['obj.getAcceptableTokens'  '('  ')'] 
__label__0 originalValue ! = null & & ! originalValue.equals ( `` -1 '' ) 
__label__1 ['logger.debug'  '('  '``'  'Mapped'  '{'  '}'  'to'  '{'  '}'  "''"  ' '  't'  ' '  'e.getValue'  '('  ')'  ')'] 
__label__1 ['factory.getProxy'  '('  ')'] 
__label__1 ['i'  '<'  'maxIndex'] 
__label__0 javaWriter.emitSingleLineComment ( `` foo '' ) 
__label__0 edge.setDirection ( EdgeDirection.UNDIRECTED ) 
__label__1 ['tFAgentStatMappter.map'  '('  'agentStatBo'  ')'] 
__label__1 ['assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'Collection'  '<'  'EventRegistration'  '>'  'regs1=eventService1.getRegistrations'  '('  'MapService.SERVICE_NAME'  ' '  'mapName'  ')'  ';'  'Collection'  '<'  'EventRegistration'  '>'  'regs2=eventService2.getRegistrations'  '('  'MapService.SERVICE_NAME'  ' '  'mapName'  ')'  ';'  'assertEquals'  '('  '``'  'there'  'should'  'be'  'only'  'one'  'registration'  "''"  ' 1'  ' '  'regs1.size'  '('  ')'  ')'  ';'  'assertEquals'  '('  '``'  'there'  'should'  'be'  'only'  'one'  'registration'  "''"  ' 1'  ' '  'regs2.size'  '('  ')'  ')'  ';'  '}'  '}'  ' 10'  ')'] 
__label__0 GL.glDrawArrays ( mode , first , count ) 
__label__0 contentType ! = null & & charset == null 
__label__0 Lists.newArrayListWithCapacity ( resultMessages.size ( ) ) 
__label__0 ! threads.isEmpty ( ) 
__label__0 ConditionalOnEnabledHealthIndicator.class 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['new'  'GrammaticalRelation'  '('  'Language.UniversalChinese'  ' '  "''"  'amod'  ':'  'ordmod'  "''"  ' '  "''"  'ordinal'  'numeric'  'modifier'  "''"  ' '  'ADJECTIVAL_MODIFIER'  ' '  "''"  'NP|QP'  "''"  ' '  'tregexCompiler'  ' '  "''"  'NP'  '<'  '('  'QP=target'  '<'  'OD'  '!'  '<'  'CLP'  ')'  "''"  ' '  "''"  'NP|QP'  '<'  '('  'DNP=target'  '<'  '('  'QP'  '<'  'OD'  '!'  '<'  'CD'  ')'  '!'  '<'  'JJ|ADJP'  '$'  '++'  'NP|QP'  ')'  "''"  ')'] 
__label__1 ['synchronized'  '('  'threadCount'  ')'  '{'  '--'  'threadCount'  ';'  'if'  '('  'threadCount'  '<'  '='  '0'  ')'  '{'  'try'  '{'  'session.close'  '('  ')'  ';'  '}'  'catch'  '('  'IOException'  'e'  ')'  '{'  'throw'  'new'  'DBException'  '('  'e'  ')'  ';'  '}'  '}'  '}'] 
__label__0 ImmutableSortedSet.of ( `` a '' , '' abbr '' , '' acronym '' , '' address '' , '' area '' , '' b '' , '' bdo '' , '' big '' , '' blockquote '' , '' br '' , '' caption '' , '' cite '' , '' code '' , '' colgroup '' , '' dd '' , '' del '' , '' div '' , '' dfn '' , '' dl '' , '' dt '' , '' em '' , '' fieldset '' , '' font '' , '' h1 '' , '' h2 '' , '' h3 '' , '' h4 '' , '' h5 '' , '' h6 '' , '' hr '' , '' i '' , '' img '' , '' ins '' , '' kbd '' , '' li '' , '' ol '' , '' p '' , '' pre '' , '' q '' , '' samp '' , '' small '' , '' span '' , '' strong '' , '' style '' , '' sub '' , '' sup '' , '' table '' , '' tbody '' , '' td '' , '' tfoot '' , '' th '' , '' thead '' , '' tr '' , '' tt '' , '' u '' , '' ul '' , '' var '' ) 
__label__0 EXPLICIT_NO_UNSAFE_CAUSE ! = null 
__label__1 ['c.setLong'  '('  '``'  'hbase.hregion.memstore.flush.size'  "''"  ' 100000'  ')'] 
__label__0 database.FindProduct ( node.getManufacturer ( ) , node.getDeviceType ( ) , node.getDeviceId ( ) , node.getApplicationVersion ( ) ) 
__label__1 ['new'  'PropertiesLoader'  '('  '``'  'classpath'  ':'  '/application.functional.properties'  "''"  ' '  "''"  'classpath'  ':'  '/application.functional-local.properties'  "''"  ')'] 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__0 override.asString ( ) 
__label__0 current.getLabel ( ) .startsWith ( `` ns '' ) & & ! pre.getLabel ( ) .startsWith ( `` ns '' ) & & ! pre.getValue ( ) .equals ( Predefine.TAG_BIGIN ) 
__label__0 servletPath.equals ( `` / '' ) || servletPath.equals ( `` / * '' ) 
__label__0 jniGetLocalAxisA ( addr , tmp ) 
__label__1 ['new'  'NullPointerException'  '('  '``'  'the'  'ast'  'is'  'null'  "''"  ')'] 
__label__1 ['Exception'  'exception'] 
__label__1 ['assertEquals'  '('  '2'  ' '  'possibleOutcomes.size'  '('  ')'  ')'] 
__label__1 ['Context.getEncounterService'  '('  ')'  '.createEncounter'  '('  'encounter'  ')'] 
__label__0 GL11.glGetTexParameteriv ( target , pname , params ) 
__label__1 ['UserGroupInformation.getCurrentUser'  '('  ')'  '.reloginFromKeytab'  '('  ')'] 
__label__0 logger.error ( `` Endpoint { } not found on node { } . Can not set command classes . `` , endpointId , this.getNode ( ) .getNodeId ( ) ) 
__label__1 ['Arrays.asList'  '('  '``'  'spring-boot-starter-tomcat-'  "''"  ' '  "''"  'tomcat-embed-core-'  "''"  ' '  "''"  'tomcat-embed-el-'  "''"  ' '  "''"  'tomcat-embed-logging-juli-'  "''"  ')'] 
__label__1 ['ParseUtils.parseHumidity'  '('  'S300TH_DATA_1'  ')'] 
__label__1 ['client.getVertx'  '('  ')'  '.setTimer'  '('  '1'  ' '  'id'  '-'  '>'  'checkExpired'  '('  ')'  ')'] 
__label__0 c.writeAndFlush ( `` [ you ] `` + msg + '\n ' ) 
__label__0 log.debug ( `` Can not scale anymore . Num workers = % d , Max num workers = % d '' , zkWorkers.size ( ) , workerSetupdDataRef.get ( ) .getMaxNumWorkers ( ) ) 
__label__1 ['0'  '-'  'originY'] 
__label__1 ['assertFalse'  '('  'runtimeOptions.isMonochrome'  '('  ')'  ')'] 
__label__1 ['Thread.currentThread'  '('  ')'  '.isInterrupted'  '('  ')'] 
__label__0 from ( `` direct : start '' ) .multicast ( new AggregationStrategy ( ) { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { if ( oldExchange == null ) { return newExchange ; } String body=oldExchange.getIn ( ) .getBody ( String.class ) ; oldExchange.getIn ( ) .setBody ( body + newExchange.getIn ( ) .getBody ( String.class ) ) ; return oldExchange ; } } ) .parallelProcessing ( ) .timeout ( 1000 ) 
__label__0 nioGroup.shutdownGracefully ( 0,10 , TimeUnit.SECONDS ) 
__label__1 ['mapper.getJsonFactory'  '('  ')'] 
__label__0 SavedSearch.createSavedSearchList ( get ( getBaseURL ( ) + `` saved_searches.json '' , true ) ) 
__label__1 ['public'  'DerivedBuilder'  'setConnectionTimeoutInMs'  '('  'int'  'connectionTimeuot'  ')'  '{'  'configBuilder.setConnectionTimeoutInMs'  '('  'connectionTimeuot'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['getRegistry'  '('  ')'  '.put'  '('  '``'  'myTable'  "''"  ' '  'ht'  ')'] 
__label__0 assertTrue ( `` Exit Statuses are supposed to be in : `` + exitStatuses + `` , but the actual exit status code is : `` + status.getExitStatus ( ) , exitStatuses.contains ( status.getExitStatus ( ) ) ) 
__label__1 ['Values.WEBSOCKET.equalsIgnoreCase'  '('  'upgrade'  ')'] 
__label__0 new CommandLineException ( `` Communication error '' , e ) 
__label__0 COUNT_DATABASE.put ( key , newVal ) 
__label__0 reg.getTimers ( transformFilter ( filter ) ) 
__label__1 ['registry.put'  '('  '``'  'dummy'  "''"  ' '  'new'  'ReactiveStreamsTestService'  '('  '``'  'from-registry'  "''"  ')'  ')'] 
__label__0 LOG.warn ( `` PriviledgedActionException as : '' + this + `` cause : '' + cause ) 
__label__1 ['invocation.logger.warning'  '('  '``'  'Asking'  'if'  'operation'  'execution'  'has'  'been'  'started'  ':'  '``'  '+'  'invocation'  ')'] 
__label__0 DefaultAlluxioWorker.class 
__label__0 Integer.parseInt ( sessionTTL ) 
__label__0 assertThat ( page3.pagination ( ) .getGlobalTotal ( ) ) .isEqualTo ( 5 ) 
__label__1 ['assertEquals'  '('  'counter 1'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/friends_timeline.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__0 handshakeStatus == HandshakeStatus.NOT_HANDSHAKING || handshakeStatus == HandshakeStatus.FINISHED 
__label__1 ['getCompletePredicate'  '('  ')'] 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__0 out.writeFloat ( ( Float ) obj ) 
__label__0 m_data.rewind ( ) .forward ( ( int ) key_offset ) .getFixString ( ( int ) key_length , charsetName ) 
__label__0 new JSONParseSpec ( timestampSpec , new DimensionsSpec ( dimensions , dimensionExclusions , spatialDimensions ) ) 
__label__0 map.set ( key , toStoreValue ( value ) ) 
__label__0 Long.parseLong ( timeout ) 
__label__1 ['List'  '<'  'String'  '>'] 
__label__1 ['LOGGER.debug'  '('  '``'  '{'  '}'  '-'  'Reset'  '('  '{'  '}'  ')'  'on'  'connection'  '{'  '}'  "''"  ' '  'resetBits'  '!'  '='  '0'  '?'  'stringFromResetBits'  '('  'resetBits'  ')'  ':'  '``'  'nothing'  "''"  ' '  'poolEntry.connection'  ')'] 
__label__0 / * * * This is the primary connection pool class that provides the basic pooling behavior for HikariCP . * @ author Brett Wooldridge * / public abstract class BaseHikariPool implements HikariPoolMXBean , IBagStateListener { protected final Logger LOGGER=LoggerFactory.getLogger ( getClass ( ) ) ; private static final long ALIVE_BYPASS_WINDOW=Long.getLong ( `` com.zaxxer.hikari.aliveBypassWindow '' ,1000L ) ; protected static final int POOL_RUNNING=0 ; protected static final int POOL_SUSPENDED=1 ; protected static final int POOL_SHUTDOWN=2 ; public final String catalog ; public final boolean isReadOnly ; public final boolean isAutoCommit ; public int transactionIsolation ; protected final PoolUtilities poolUtils ; protected final HikariConfig configuration ; protected final AtomicInteger totalConnections ; protected final ConcurrentBag < PoolBagEntry > connectionBag ; protected final ThreadPoolExecutor addConnectionExecutor ; protected final ThreadPoolExecutor closeConnectionExecutor ; protected final ScheduledThreadPoolExecutor houseKeepingExecutorService ; protected final boolean isUseJdbc4Validation ; protected final boolean isIsolateInternalQueries ; protected volatile int poolState ; protected volatile long connectionTimeout ; protected volatile long validationTimeout ; private final LeakTask leakTask ; private final DataSource dataSource ; private final GlobalPoolLock suspendResumeLock ; private final IConnectionCustomizer connectionCustomizer ; private final AtomicReference < Throwable > lastConnectionFailure ; private final String username ; private final String password ; private volatile MetricsTracker metricsTracker ; private volatile boolean isRecordMetrics ; / * * * Construct a HikariPool with the specified configuration . * @ param configuration a HikariConfig instance * / public BaseHikariPool ( HikariConfig configuration ) { this ( configuration , configuration.getUsername ( ) , configuration.getPassword ( ) ) ; } / * * * Construct a HikariPool with the specified configuration . We cache lots of configuration items in class-local final members for speed . * @ param configuration a HikariConfig instance * @ param username authentication username * @ param password authentication password * / public BaseHikariPool ( HikariConfig configuration , String username , String password ) { this.username=username ; this.password=password ; this.configuration=configuration ; this.poolUtils=new PoolUtilities ( configuration ) ; this.connectionBag=createConcurrentBag ( this ) ; this.totalConnections=new AtomicInteger ( ) ; this.connectionTimeout=configuration.getConnectionTimeout ( ) ; this.validationTimeout=configuration.getValidationTimeout ( ) ; this.lastConnectionFailure=new AtomicReference < Throwable > ( ) ; this.isReadOnly=configuration.isReadOnly ( ) ; this.isAutoCommit=configuration.isAutoCommit ( ) ; this.suspendResumeLock=configuration.isAllowPoolSuspension ( ) ? new GlobalPoolLock ( true ) : GlobalPoolLock.FAUX_LOCK ; this.catalog=configuration.getCatalog ( ) ; this.connectionCustomizer=initializeCustomizer ( ) ; this.transactionIsolation=getTransactionIsolation ( configuration.getTransactionIsolation ( ) ) ; this.isIsolateInternalQueries=configuration.isIsolateInternalQueries ( ) ; this.isUseJdbc4Validation=configuration.getConnectionTestQuery ( ) == null ; setMetricRegistry ( configuration.getMetricRegistry ( ) ) ; setHealthCheckRegistry ( configuration.getHealthCheckRegistry ( ) ) ; this.dataSource=poolUtils.initializeDataSource ( configuration.getDataSourceClassName ( ) , configuration.getDataSource ( ) , configuration.getDataSourceProperties ( ) , configuration.getDriverClassName ( ) , configuration.getJdbcUrl ( ) , username , password ) ; this.addConnectionExecutor=createThreadPoolExecutor ( configuration.getMaximumPoolSize ( ) , '' HikariCP connection filler ( pool `` + configuration.getPoolName ( ) + `` ) '' , configuration.getThreadFactory ( ) , new ThreadPoolExecutor.DiscardPolicy ( ) ) ; this.closeConnectionExecutor=createThreadPoolExecutor ( 4 , '' HikariCP connection closer ( pool `` + configuration.getPoolName ( ) + `` ) '' , configuration.getThreadFactory ( ) , new ThreadPoolExecutor.CallerRunsPolicy ( ) ) ; long delayPeriod=Long.getLong ( `` com.zaxxer.hikari.housekeeping.periodMs '' , TimeUnit.SECONDS.toMillis ( 30L ) ) ; ThreadFactory threadFactory=configuration.getThreadFactory ( ) ! = null ? configuration.getThreadFactory ( ) : new DefaultThreadFactory ( `` Hikari Housekeeping Timer ( pool `` + configuration.getPoolName ( ) + `` ) '' , true ) ; this.houseKeepingExecutorService=new ScheduledThreadPoolExecutor ( 1 , threadFactory , new ThreadPoolExecutor.DiscardPolicy ( ) ) ; this.houseKeepingExecutorService.scheduleAtFixedRate ( getHouseKeeper ( ) , delayPeriod , delayPeriod , TimeUnit.MILLISECONDS ) ; this.houseKeepingExecutorService.setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; this.leakTask= ( configuration.getLeakDetectionThreshold ( ) == 0 ) ? LeakTask.NO_LEAK : new LeakTask ( configuration.getLeakDetectionThreshold ( ) , houseKeepingExecutorService ) ; setRemoveOnCancelPolicy ( houseKeepingExecutorService ) ; poolUtils.setLoginTimeout ( dataSource , connectionTimeout ) ; registerMBeans ( configuration , this ) ; initializeConnections ( ) ; } / * * * Get a connection from the pool , or timeout after connectionTimeout milliseconds . * @ return a java.sql.Connection instance * @ throws SQLException thrown if a timeout occurs trying to obtain a connection * / public final Connection getConnection ( ) throws SQLException { return getConnection ( connectionTimeout ) ; } / * * * Get a connection from the pool , or timeout after the specified number of milliseconds . * @ param hardTimeout the maximum time to wait for a connection from the pool * @ return a java.sql.Connection instance * @ throws SQLException thrown if a timeout occurs trying to obtain a connection * / public final Connection getConnection ( final long hardTimeout ) throws SQLException { suspendResumeLock.acquire ( ) ; long timeout=hardTimeout ; final long start=System.currentTimeMillis ( ) ; final MetricsContext metricsContext= ( isRecordMetrics ? metricsTracker.recordConnectionRequest ( start ) : MetricsTracker.NO_CONTEXT ) ; try { do { final PoolBagEntry bagEntry=connectionBag.borrow ( timeout , TimeUnit.MILLISECONDS ) ; if ( bagEntry == null ) { break ; } final long now=System.currentTimeMillis ( ) ; if ( bagEntry.evicted || ( now - bagEntry.lastAccess > ALIVE_BYPASS_WINDOW & & ! isConnectionAlive ( bagEntry.connection ) ) ) { closeConnection ( bagEntry , '' ( connection evicted or dead ) '' ) ; timeout=hardTimeout - elapsedTimeMs ( start ) ; } else { metricsContext.setConnectionLastOpen ( bagEntry , now ) ; metricsContext.stop ( ) ; return ProxyFactory.getProxyConnection ( ( HikariPool ) this , bagEntry , leakTask.start ( bagEntry ) ) ; } } while ( timeout > 0L ) ; } catch ( InterruptedException e ) { throw new SQLException ( `` Interrupted during connection acquisition '' , e ) ; } finally { suspendResumeLock.release ( ) ; } logPoolState ( `` Timeout failure `` ) ; throw new SQLTimeoutException ( String.format ( `` Timeout after % dms of waiting for a connection . `` , elapsedTimeMs ( start ) ) , lastConnectionFailure.getAndSet ( null ) ) ; } / * * * Release a connection back to the pool , or permanently close it if it is broken . * @ param bagEntry the PoolBagEntry to release back to the pool * / public final void releaseConnection ( final PoolBagEntry bagEntry ) { metricsTracker.recordConnectionUsage ( bagEntry ) ; if ( bagEntry.evicted ) { LOGGER.debug ( `` Connection returned to pool { } is broken or evicted . Closing connection . `` , configuration.getPoolName ( ) ) ; closeConnection ( bagEntry , '' ( connection broken or evicted ) '' ) ; } else { connectionBag.requite ( bagEntry ) ; } } / * * * Shutdown the pool , closing all idle connections and aborting or closing active connections . * @ throws InterruptedException thrown if the thread is interrupted during shutdown * / public final void shutdown ( ) throws InterruptedException { if ( poolState ! = POOL_SHUTDOWN ) { poolState=POOL_SHUTDOWN ; LOGGER.info ( `` HikariCP pool { } is shutting down . `` , configuration.getPoolName ( ) ) ; logPoolState ( `` Before shutdown `` ) ; connectionBag.close ( ) ; softEvictConnections ( ) ; houseKeepingExecutorService.shutdown ( ) ; addConnectionExecutor.shutdownNow ( ) ; houseKeepingExecutorService.awaitTermination ( 5L , TimeUnit.SECONDS ) ; addConnectionExecutor.awaitTermination ( 5L , TimeUnit.SECONDS ) ; final ExecutorService assassinExecutor=createThreadPoolExecutor ( configuration.getMaximumPoolSize ( ) , '' HikariCP connection assassin '' , configuration.getThreadFactory ( ) , new ThreadPoolExecutor.CallerRunsPolicy ( ) ) ; final long start=System.currentTimeMillis ( ) ; do { softEvictConnections ( ) ; abortActiveConnections ( assassinExecutor ) ; } while ( getTotalConnections ( ) > 0 & & elapsedTimeMs ( start ) < TimeUnit.SECONDS.toMillis ( 5 ) ) ; assassinExecutor.shutdown ( ) ; assassinExecutor.awaitTermination ( 5L , TimeUnit.SECONDS ) ; closeConnectionExecutor.shutdown ( ) ; closeConnectionExecutor.awaitTermination ( 5L , TimeUnit.SECONDS ) ; logPoolState ( `` After shutdown `` ) ; unregisterMBeans ( configuration , this ) ; metricsTracker.close ( ) ; } } / * * * Evict a connection from the pool . * @ param proxyConnection the connection to evict * / public final void evictConnection ( IHikariConnectionProxy proxyConnection ) { closeConnection ( proxyConnection.getPoolBagEntry ( ) , '' ( connection evicted by user ) '' ) ; } / * * * Get the wrapped DataSource . * @ return the wrapped DataSource * / public final DataSource getDataSource ( ) { return dataSource ; } / * * * Get the pool configuration object . * @ return the { @ link HikariConfig } for this pool * / public final HikariConfig getConfiguration ( ) { return configuration ; } @ Override public String toString ( ) { return configuration.getPoolName ( ) ; } / * * * { @ inheritDoc } * / @ Override public final int getActiveConnections ( ) { return connectionBag.getCount ( STATE_IN_USE ) ; } / * * * { @ inheritDoc } * / @ Override public final int getIdleConnections ( ) { return connectionBag.getCount ( STATE_NOT_IN_USE ) ; } / * * * { @ inheritDoc } * / @ Override public final int getTotalConnections ( ) { return connectionBag.size ( ) - connectionBag.getCount ( STATE_REMOVED ) ; } / * * * { @ inheritDoc } * / @ Override public final int getThreadsAwaitingConnection ( ) { return connectionBag.getPendingQueue ( ) ; } / * * * { @ inheritDoc } * / @ Override public final void suspendPool ( ) { if ( suspendResumeLock == GlobalPoolLock.FAUX_LOCK ) { throw new IllegalStateException ( `` Pool `` + configuration.getPoolName ( ) + `` is not suspendable '' ) ; } else if ( poolState ! = POOL_SUSPENDED ) { suspendResumeLock.suspend ( ) ; poolState=POOL_SUSPENDED ; } } / * * * { @ inheritDoc } * / @ Override public final void resumePool ( ) { if ( poolState == POOL_SUSPENDED ) { poolState=POOL_RUNNING ; addBagItem ( ) ; suspendResumeLock.resume ( ) ; } } public void setMetricRegistry ( Object metricRegistry ) { this.isRecordMetrics=metricRegistry ! = null ; if ( isRecordMetrics ) { this.metricsTracker=new CodaHaleMetricsTracker ( this , ( MetricRegistry ) metricRegistry ) ; } else { this.metricsTracker=new MetricsTracker ( this ) ; } } public void setHealthCheckRegistry ( Object healthCheckRegistry ) { if ( healthCheckRegistry ! = null ) { CodahaleHealthChecker.registerHealthChecks ( this , ( HealthCheckRegistry ) healthCheckRegistry ) ; } } / * * * { @ inheritDoc } * / @ Override public Future < Boolean > addBagItem ( ) { FutureTask < Boolean > future=new FutureTask < Boolean > ( new Runnable ( ) { public void run ( ) { long sleepBackoff=200L ; final int minimumIdle=configuration.getMinimumIdle ( ) ; final int maxPoolSize=configuration.getMaximumPoolSize ( ) ; while ( poolState == POOL_RUNNING & & totalConnections.get ( ) < maxPoolSize & & getIdleConnections ( ) < = minimumIdle & & ! addConnection ( ) ) { quietlySleep ( sleepBackoff ) ; sleepBackoff=Math.min ( connectionTimeout / 2 , ( long ) ( ( double ) sleepBackoff * 1.5 ) ) ; } } } , true ) ; addConnectionExecutor.execute ( future ) ; return future ; } / * * * Create and add a single connection to the pool . * / protected final boolean addConnection ( ) { if ( totalConnections.incrementAndGet ( ) < = configuration.getMaximumPoolSize ( ) ) { Connection connection=null ; try { connection= ( username == null & & password == null ) ? dataSource.getConnection ( ) : dataSource.getConnection ( username , password ) ; if ( isUseJdbc4Validation & & ! poolUtils.isJdbc4ValidationSupported ( connection ) ) { throw new SQLException ( `` JDBC4 Connection.isValid ( ) method not supported , connection test query must be configured '' ) ; } final int originalTimeout=poolUtils.getAndSetNetworkTimeout ( connection , connectionTimeout ) ; transactionIsolation= ( transactionIsolation < 0 ? connection.getTransactionIsolation ( ) : transactionIsolation ) ; poolUtils.setupConnection ( connection , isAutoCommit , isReadOnly , transactionIsolation , catalog ) ; connectionCustomizer.customize ( connection ) ; poolUtils.executeSql ( connection , configuration.getConnectionInitSql ( ) , isAutoCommit ) ; poolUtils.setNetworkTimeout ( connection , originalTimeout ) ; connectionBag.add ( new PoolBagEntry ( connection , this ) ) ; lastConnectionFailure.set ( null ) ; return true ; } catch ( Exception e ) { lastConnectionFailure.set ( e ) ; if ( poolState == POOL_RUNNING ) { LOGGER.debug ( `` Connection attempt to database { } failed : { } '' , configuration.getPoolName ( ) , e.getMessage ( ) , e ) ; } poolUtils.quietlyCloseConnection ( connection , '' ( exception during connection creation ) '' ) ; } } totalConnections.decrementAndGet ( ) ; return false ; } / * * * Fill pool up from current idle connections ( as they are perceived at the point of execution ) to minimumIdle connections . * / protected void fillPool ( ) { final int connectionsToAdd=configuration.getMinimumIdle ( ) - getIdleConnections ( ) ; for ( int i=0 ; i < connectionsToAdd ; i++ ) { addBagItem ( ) ; } if ( connectionsToAdd > 0 & & LOGGER.isDebugEnabled ( ) ) { addConnectionExecutor.execute ( new Runnable ( ) { public void run ( ) { logPoolState ( `` After fill `` ) ; } } ) ; } } / * * * Permanently close the real ( underlying ) connection ( eat any exception ) . * @ param connectionProxy the connection to actually close * / protected abstract void closeConnection ( final PoolBagEntry bagEntry , final String closureReason ) ; / * * * Check whether the connection is alive or not . * @ param connection the connection to test * @ return true if the connection is alive , false if it is not alive or we timed out * / protected abstract boolean isConnectionAlive ( final Connection connection ) ; / * * * Attempt to abort ( ) active connections on Java7+ , or close ( ) them on Java6 . * @ param assassinExecutor * @ throws InterruptedException * / protected abstract void abortActiveConnections ( final ExecutorService assassinExecutor ) throws InterruptedException ; / * * * Create the JVM version-specific ConcurrentBag instance used by the pool . * @ param listener the IBagStateListener instance * @ return a ConcurrentBag instance * / protected abstract ConcurrentBag < PoolBagEntry > createConcurrentBag ( IBagStateListener listener ) ; / * * * Create the JVM version-specific Housekeeping runnable instance used by the pool . * @ return the HouseKeeper instance * / protected abstract Runnable getHouseKeeper ( ) ; / * * * Fill the pool up to the minimum size . * / private void initializeConnections ( ) { if ( configuration.isInitializationFailFast ( ) ) { try { try { if ( ! addConnection ( ) ) { shutdown ( ) ; throw new PoolInitializationException ( lastConnectionFailure.getAndSet ( null ) ) ; } ConnectionProxy connection= ( ConnectionProxy ) getConnection ( ) ; connection.getPoolBagEntry ( ) .evicted= ( configuration.getMinimumIdle ( ) == 0 ) ; connection.close ( ) ; } catch ( SQLException e ) { shutdown ( ) ; throw new PoolInitializationException ( e ) ; } } catch ( InterruptedException ie ) { throw new PoolInitializationException ( ie ) ; } } fillPool ( ) ; } / * * * Construct the user 's connection customizer , if specified . * @ return an IConnectionCustomizer instance * / @ SuppressWarnings ( `` deprecation '' ) private IConnectionCustomizer initializeCustomizer ( ) { if ( configuration.getConnectionCustomizerClassName ( ) ! = null ) { return createInstance ( configuration.getConnectionCustomizerClassName ( ) , IConnectionCustomizer.class ) ; } return configuration.getConnectionCustomizer ( ) ; } public final void logPoolState ( String ... prefix ) { if ( LOGGER.isDebugEnabled ( ) ) { LOGGER.debug ( `` { } pool stats { } ( total= { } , inUse= { } , avail= { } , waiting= { } ) '' , ( prefix.length > 0 ? prefix [ 0 ] : `` '' ) , configuration.getPoolName ( ) , getTotalConnections ( ) , getActiveConnections ( ) , getIdleConnections ( ) , getThreadsAwaitingConnection ( ) ) ; } } } 
__label__0 private final StringBuilder tmpSb=new StringBuilder ( ) ; 
__label__1 ['GatherGettersAndSetterProperties.update'  '('  'compiler'  ' '  'externs'  ' '  'root'  ')'] 
__label__1 ['FileSystem.getLocal'  '('  'conf'  ')'  '.delete'  '('  'localScratchDir'  ')'] 
__label__0 TestSuiteEnvironment.getHttpAddress ( ) 
__label__0 new Color ( 0xbfbfbfff ) 
__label__1 ['docData.charAt'  '('  '0'  ')'  '=='  '65279'] 
__label__1 ['pushExecutor.submit'  '('  'new'  'NamedRunnable'  '('  '``'  'OkHttp'  '%'  's'  'Push'  'Request'  '['  '%'  's'  ']'  "''"  ' '  'hostName'  ' '  'streamId'  ')'  '{'  '@'  'Override'  'public'  'void'  'execute'  '('  ')'  '{'  'boolean'  'cancel=pushObserver.onRequest'  '('  'streamId'  ' '  'requestHeaders'  ')'  ';'  'try'  '{'  'if'  '('  'cancel'  ')'  '{'  'frameWriter.rstStream'  '('  'streamId'  ' '  'ErrorCode.CANCEL'  ')'  ';'  'synchronized'  '('  'SpdyConnection.this'  ')'  '{'  'currentPushRequests.remove'  '('  'streamId'  ')'  ';'  '}'  '}'  '}'  'catch'  '('  'IOException'  'ignored'  ')'  '{'  '}'  '}'  '}'  ')'] 
__label__0 createPermissionsXmlAsset ( new SocketPermission ( `` * :10389 '' , '' connect , resolve '' ) , new RuntimePermission ( `` accessClassInPackage.com.sun.jndi.ldap '' ) , new RuntimePermission ( `` accessClassInPackage.com.sun.jndi.url.ldap '' ) ) 
__label__1 ['conf.getSearchBaseURL'  '('  ')'] 
__label__1 ['GL20.glUniformMatrix3'  '('  'location'  ' '  'transpose'  ' '  'value'  ')'] 
__label__1 ['getJSDocTypeWithBraces'  '('  'cp'  ')'] 
__label__1 ['ResponseImpl'  'description'  '('  'String'  'description'  ')'  ';'] 
__label__1 ['new'  'HiveTableTypeMapping'  '('  ')'] 
__label__0 ChronicleEngineEndpoint endpoint= ( ChronicleEngineEndpoint ) getEndpoint ( ) ; 
__label__0 GatherGetterAndSetterProperties.gather ( compiler , externsRoot ) 
__label__1 ['Generics.newHashMap'  '('  ')'] 
__label__0 websocketComponent.setMaxThreads ( 20 ) 
__label__0 NIO_GROUP.shutdownGracefully ( 0,10 , TimeUnit.SECONDS ) 
__label__1 ['standardSearchRequest'  '('  'query'  ' '  'IndexHelper.determineAffectedIndices'  '('  'indexRangeService'  ' '  'deflector'  ' '  'range'  ')'  ')'] 
__label__1 ['scanFeatures'  '('  'getKarafFeatureUrl'  '('  ')'  ' '  "''"  'spring'  "''"  ' '  "''"  'spring-dm'  "''"  ' '  "''"  'jetty'  "''"  ')'] 
__label__1 ['1'  '<'  'user.getListedCount'  '('  ')'] 
__label__1 ['channel.getPipeline'  '('  ')'  '.sendUpstream'  '('  'new'  'DefaultExceptionEvent'  '('  'channel'  ' '  'cause'  ')'  ')'] 
__label__0 ChronicleEngineEndpoint.class 
__label__0 node1.isEquivalentTo ( node2 ) 
__label__1 ['map.set'  '('  'key'  ' '  'toStoreValue'  '('  'value'  ')'  ' 0'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['logger.info'  '('  '``'  'Collapsed'  '``'  '+'  'numRenamedPropertyNames'  '+'  '``'  'properties'  'into'  '``'  '+'  'numNewPropertyNames+'  '``'  'and'  'skipped'  'renaming'  '``'  '+'  'numSkippedPropertyNames+'  '``'  'properties'  '.'  "''"  ')'] 
__label__1 ['DiagnosticType.warning'  '('  '``'  'JSC_REDECLARED_VARIABLE'  "''"  ' '  "''"  'Redeclared'  'variable'  ':'  '{'  '0'  '}'  "''"  ')'] 
__label__1 ['ShrinkWrap.create'  '('  'JavaArchive.class'  ')'  '.addAsManifestResource'  '('  'EmptyAsset.INSTANCE'  ' '  "''"  'beans.xml'  "''"  ')'] 
__label__0 AdviceWithTasks.removeByToString ( route , toString , selectFirst , selectLast , selectFrom , selectTo , maxDeep ) 
__label__1 ['new'  'RunnableAdapter'  '<'  'T'  '>'  '('  'task'  ' '  'result'  ')'] 
__label__0 connection.local ( ) .createStream ( toStreamId ( i ) , false ) 
__label__1 ['TimeUtils.nanoTime'  '('  ')'] 
__label__0 executeConnectAsync=true 
__label__0 newHighlyAvailableDatabaseBuilder ( path ) 
__label__1 ['HashMap'  '<'  'String'  ' '  'Operator'  '<'  '?'  'extends'  'Serializable'  '>'  '>'] 
__label__0 assertContains ( actualTables , expectedTables ) 
__label__1 ['RuntimeGlue'  'optionalGlue'] 
__label__0 new BindException ( newConcept , '' concept '' ) 
__label__0 sentencesFile ! = null 
__label__0 static void writeFile ( NameNode namenode , Configuration conf , Path name , short replication ) throws Exception { FileSystem fileSys=FileSystem.get ( conf ) ; SequenceFile.Writer writer=SequenceFile.createWriter ( fileSys , conf , name , BytesWritable.class , BytesWritable.class , CompressionType.NONE ) ; writer.append ( new BytesWritable ( ) , new BytesWritable ( ) ) ; writer.close ( ) ; fileSys.setReplication ( name , replication ) ; DFSTestUtil.waitReplication ( fileSys , name , replication ) ; } 
__label__1 ['statistics.addPutTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['container.getTimeFormat'  '('  ')'  '.equals'  '('  'TimeFormat.DATE'  ')'] 
__label__0 2 < statuses.size ( ) 
__label__0 mouseEvent.getModifiersEx ( ) 
__label__1 ['saveRunnable'  'instanceof'  'LongTask'] 
__label__1 ['assertFalse'  '('  'dr.isFailure'  '('  ')'  ')'] 
__label__1 ['new'  'UnsupportedOperationException'  '('  ')'] 
__label__1 ['status.isDirectory'  '('  ')'] 
__label__1 ['createMessageConsumer'  '('  'session'  ' '  'destinationName'  ' '  'null'  ' '  'false'  ' '  'null'  ' '  'true'  ')'] 
__label__0 clientInvocation.invokeUrgent ( ) .andThen ( new ExecutionCallback < ClientMessage > ( ) { @ Override public void onResponse ( ClientMessage response ) { if ( connection.isAlive ( ) ) { connection.onHeartbeatReceived ( ) ; } } @ Override public void onFailure ( Throwable t ) { if ( connection.isAlive ( ) ) { logger.warning ( `` Error receiving heartbeat for connection : `` + connection , t ) ; } } } , executionService.getInternalExecutor ( ) ) 
__label__0 getSSLContext ( ) .getSocketFactory ( ) .createSocket ( arg0 , arg1 , arg2 , true ) 
__label__0 globalExecutionStats.getStartedSplits ( ) 
__label__1 ['graphModel.isDirected'  '('  ')'] 
__label__1 ['asyncWriteFuture.cancel'  '('  'true'  ')'] 
__label__0 5 * Bytes.SIZEOF_BOOLEAN 
__label__0 log.error ( `` Multiple nodes are set , but execute ( ) was called . This is most likely a bug and you meant to call executeOnAll ( ) ! `` , new Throwable ( ) ) 
__label__0 BeanMapper.mapList ( books , BookDto.class ) 
__label__1 ['processEngineConfiguration.getCommandExecutorTxRequiresNew'  '('  ')'] 
__label__1 ['@'  'SuppressWarnings'  '('  '``'  'unused'  "''"  ')'  'private'  'final'  'Object'  'strongReference'  ';'] 
__label__1 ['this'  '=='  'NtiOnly'] 
__label__0 new PrestoException ( INVALID_CAST_ARGUMENT , '' Value can not be cast to timestamp : `` + value.toStringUtf8 ( ) , e ) 
__label__1 ['('  'uptime'  '-'  'days'  ')'  '*'  '60'] 
__label__1 ['Thread.sleep'  '('  '50'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweets_of_me.json'  "''"  ' '  'null'  ' '  'true'  ')'  ')'] 
__label__0 checkNoPlanNodeMatches ( exchange ( ) , '' Expected rules to be fired before 'AddExchanges ' optimizer '' ) 
__label__0 Calendar.getInstance ( JSON.defaultTimeZone , JSON.defaultLocale ) 
__label__0 cache.put ( new Element ( key , element ) ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__0 DefaultManagementMBeanAssembler.class 
__label__1 ['xAmount'  '>'  '0'] 
__label__0 registry.bind ( `` myConfigurer '' , configurer ) 
__label__1 ['rackIdToNodes.get'  '('  'rid'  ')'] 
__label__0 camelContext.getComponent ( component , false ) 
__label__1 ['FilterModifWord.modifResult'  '('  'result'  ')'] 
__label__0 raw.getOutParameters ( ) 
__label__0 TransactionMetadata : :setInactive 
__label__0 getUrl ( ) .getMethodPositiveParameter ( methodName , TIMEOUT_KEY , DEFAULT_TIMEOUT ) 
__label__1 ['logger.info'  '('  '``'  'Creating'  'extern'  'file'  'for'  'exports'  "''"  ')'] 
__label__0 PropertyValuesAnimationAdapter < T > 
__label__1 ['c.getDomain'  '('  ')'  '=='  'null'] 
__label__1 ['String.format'  '('  '``'  'Starting'  'audit'  '...'  '%'  'n'  "''"  '+'  'expectedPath'  '+'  '``'  ':3:14'  ':'  '``'  '+'  '``'  'warning'  ':'  'Name'  "'InputMain"  "'"  'must'  'match'  'pattern'  "'^"  '['  'a-z0-9'  ']'  '*'  '$'  "'."  '%'  'n'  "''"  '+'  'expectedPath+'  '``'  ':5:7'  ':'  '``'  '+'  '``'  'warning'  ':'  'Name'  "'InputMainInner"  "'"  'must'  'match'  'pattern'  "'^"  '['  'a-z0-9'  ']'  '*'  '$'  "'."  '%'  'n'  "''"  '+'  '``'  'Audit'  'done.'  '%'  'n'  "''"  ')'] 
__label__1 ['result.expectedMessageCount'  '('  '2'  ')'] 
__label__0 endpoint.getOrCreateConnectionFactory ( ) 
__label__0 Preconditions.checkNotNull ( mBlockIdsOnTiers , '' mBlockIdsOnTiers '' ) 
__label__1 ['in.readObject'  '('  ')'] 
__label__0 TestSuiteEnvironment.getHttpAddress ( ) 
__label__1 ['s.elapsedTime'  '('  'TimeUnit.NANOSECONDS'  ')'] 
__label__0 renderUpdate ( errorChannel , results ) 
__label__1 ['MockReset.before'  '('  ')'] 
__label__1 ['undertowHost.getServer'  '('  ')'  '.getListeners'  '('  ')'  '.get'  '('  '0'  ')'  '.getBinding'  '('  ')'  '.getValue'  '('  ')'  '.getPort'  '('  ')'] 
__label__1 ['SSLContext.setCertificateChainFile'  '('  'ctx'  ' '  'trustCertChainFile.getPath'  '('  ')'  ' '  'true'  ')'] 
__label__0 connections.get ( target ) 
__label__0 value.equals ( `` '' ) 
__label__1 ['Integer.valueOf'  '('  'st.nextToken'  '('  ')'  ')'] 
__label__0 / * * * Signal the maps/reduces to start . * / static void signalTasks ( MiniDFSCluster dfs , FileSystem fileSys , String mapSignalFile , String reduceSignalFile , int replication ) throws Exception { writeFile ( dfs.getNameNode ( ) , fileSys.getConf ( ) , new Path ( mapSignalFile ) , ( short ) replication ) ; writeFile ( dfs.getNameNode ( ) , fileSys.getConf ( ) , new Path ( reduceSignalFile ) , ( short ) replication ) ; } 
__label__1 ['new'  'JSONParseSpec'  '('  'new'  'TimestampSpec'  '('  '``'  'timestamp'  "''"  ' '  "''"  'auto'  "''"  ')'  ' '  'new'  'DimensionsSpec'  '('  'Arrays.asList'  '('  '``'  'dim1'  "''"  ' '  "''"  'dim2'  "''"  ')'  ' '  'null'  ' '  'null'  ')'  ' '  'JSONParseSpec.JSON'  ')'] 
__label__1 ['registration.registerOperationHandler'  '('  'CommonAttributes.ENABLE_CONTEXT'  ' '  'ModClusterEnableContext.INSTANCE'  ' '  'enableContext'  ' '  'false'  ')'] 
__label__1 ['assertEquals'  '('  'row.getField'  '('  '0'  ')'  ' 2L'  ')'] 
__label__0 Site.me ( ) .setRetryTimes ( 3 ) .setSleepTime ( 1000 ) 
__label__0 GL.glCopyTexSubImage2D ( target , level , xoffset , yoffset , x , y , width , height ) 
__label__0 @ Override public Response headers ( Map < String , Property > headers ) { this.headers=headers ; return this ; } 
__label__0 GatherGetterAndSetterProperties.gather ( compiler , mainRoot ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class ReliableTopicBasicLocalTest extends ReliableTopicAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 1 ) .newInstances ( config ) ; } } 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` favorites.json '' , '' page '' , String.valueOf ( page ) , true ) ) 
__label__0 Assert.assertEquals ( getNotAllowedExceptionMessage ( `` hello '' ) , e.getCause ( ) .getMessage ( ) ) 
__label__1 ['request.getContentType'  '('  ')'  '.equals'  '('  '``'  'application/x-www-form-urlencoded'  "''"  ')'] 
__label__0 attribute.getDefinition ( ) .getMarshaller ( ) 
__label__1 ['DEFAULT_MAX_QUERIES=3'] 
__label__0 new Texture ( file , format , TextureFilter.isMipMap ( min ) || TextureFilter.isMipMap ( max ) ? true : false ) 
__label__1 ['eq'  '('  'true'  ')'] 
__label__0 @ Path ( PATH_RELATIONSHIP_INDEX_ID ) 
__label__0 dumpErrorCountThreshold=2 
__label__0 file.getAbsolutePath ( ) 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__0 lookup= '' java : jboss/mail '' 
__label__0 websocketComponent.setMaxThreads ( 20 ) 
__label__0 connection.psubscribe ( jedisPubSub , patterns ) 
__label__0 oldOverride.addParameter ( `` enabled '' , '' enabled '' ) 
__label__1 ['edge.setType'  '('  'EdgeDirection.DIRECTED'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Async'  'Kafka'  'commit'  'failed'  '.'  '``'  ' '  'cause'  ')'] 
__label__0 new IllegalStateException ( String.format ( `` File \ '' % 1 $ s\ '' has incorrect indentation in comment . '' + `` Line % 2 $ d : comment : % 3 $ d , actual : % 4 $ d . `` , aFileName , lineNumber , indentInComment , actualIndent ) ) 
__label__0 / * * * Column number filter . * / private CsvFilter columnFilter ; 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__1 ['value='  '{'  'StringFilterAggregator.class'  '}'] 
__label__0 interceptorParamTypes.length - 3 
__label__1 ['HeartbeatScheduler.await'  '('  'HeartbeatContext.WORKER_FILESYSTEM_MASTER_SYNC 5'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['@'  'Override'  'public'  'Integer'  'call'  '('  ')'  'throws'  'Exception'  '{'  'MessageCountResponse'  'response=api.get'  '('  'MessageCountResponse.class'  ')'  '.path'  '('  '``'  '/count/total'  "''"  ')'  '.execute'  '('  ')'  ';'  'return'  'response.events'  ';'  '}'] 
__label__1 ['``'  'GET'  "''"  '.equals'  '('  'httpMethod'  ')'] 
__label__1 ['Arrays.asList'  '('  '``'  'spring-boot-starter-jetty-'  "''"  ' '  "''"  'jetty-continuation'  "''"  ' '  "''"  'jetty-util-'  "''"  ' '  "''"  'javax.servlet-'  "''"  ' '  "''"  'jetty-io-'  "''"  ' '  "''"  'jetty-http-'  "''"  ' '  "''"  'jetty-server-'  "''"  ' '  "''"  'jetty-security-'  "''"  ' '  "''"  'jetty-servlet-'  "''"  ' '  "''"  'jetty-servlets'  "''"  ' '  "''"  'jetty-webapp-'  "''"  ' '  "''"  'websocket-api'  "''"  ' '  "''"  'javax.annotation-api'  "''"  ' '  "''"  'jetty-plus'  "''"  ' '  "''"  'javax-websocket-server-impl-'  "''"  ' '  "''"  'asm-'  "''"  ' '  "''"  'javax.websocket-api-'  "''"  ' '  "''"  'asm-tree-'  "''"  ' '  "''"  'asm-commons-'  "''"  ' '  "''"  'websocket-common-'  "''"  ' '  "''"  'jetty-annotations-'  "''"  ' '  "''"  'javax-websocket-client-impl-'  "''"  ' '  "''"  'websocket-client-'  "''"  ' '  "''"  'websocket-server-'  "''"  ' '  "''"  'jetty-jndi-'  "''"  ' '  "''"  'jetty-xml-'  "''"  ' '  "''"  'websocket-servlet-'  "''"  ')'] 
__label__0 assertAbout ( javaSources ( ) ) .that ( ImmutableList.of ( javaFileObject , nestedJavaFileObject ) ) .withCompilerOptions ( `` -Xlint : -processing '' , '' -implicit : none '' ) 
__label__0 ( getSource ( ) .y ( ) + getTarget ( ) .y ( ) ) / 3f 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class AtomicLongBasicDistributedTest extends AtomicLongAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( ) { return createHazelcastInstanceFactory ( 2 ) .newInstances ( ) ; } } 
__label__0 assertEquals ( 6 , config.getMapConfigs ( ) .size ( ) ) 
__label__1 ['event.isResuming'  '('  ')'] 
__label__1 ['('  '('  'ExecutorService'  ')'  'executor'  ')'  '.isShutdown'  '('  ')'] 
__label__1 ['assertTrue'  '('  'found'  ')'] 
__label__0 / * * * Loads the import control file from a { @ link InputSource } . * @ param source the source to load from . * @ param uri uri of the source being loaded . * @ return the root { @ link PkgControl } object . * @ throws CheckstyleException if an error occurs . * / private static ImportControl load ( final InputSource source , final URI uri ) throws CheckstyleException { try { final ImportControlLoader loader=new ImportControlLoader ( ) ; loader.parseInputSource ( source ) ; return loader.getRoot ( ) ; } catch ( final ParserConfigurationException|SAXException ex ) { throw new CheckstyleException ( `` unable to parse `` + uri + `` - `` + ex.getMessage ( ) , ex ) ; } catch ( final IOException ex ) { throw new CheckstyleException ( `` unable to read `` + uri , ex ) ; } } 
__label__0 EnterpriseMapPublisherCreateCodec.decodeResponse ( response ) .response 
__label__0 logger.info ( getName ( ) + `` has been started '' ) 
__label__0 public class TimesNewRoman extends BasicFontMetrics { { maxCharHeight=717 ; widths [ 32 ] =250 ; widths [ 33 ] =333 ; widths [ 34 ] =408 ; widths [ 35 ] =500 ; widths [ 36 ] =500 ; widths [ 37 ] =833 ; widths [ 38 ] =777 ; widths [ 39 ] =180 ; widths [ 40 ] =333 ; widths [ 41 ] =333 ; widths [ 42 ] =500 ; widths [ 43 ] =563 ; widths [ 44 ] =250 ; widths [ 45 ] =333 ; widths [ 46 ] =250 ; widths [ 47 ] =277 ; widths [ 48 ] =500 ; widths [ 49 ] =500 ; widths [ 50 ] =500 ; widths [ 51 ] =500 ; widths [ 52 ] =500 ; widths [ 53 ] =500 ; widths [ 54 ] =500 ; widths [ 55 ] =500 ; widths [ 56 ] =500 ; widths [ 57 ] =500 ; widths [ 58 ] =277 ; widths [ 59 ] =277 ; widths [ 60 ] =563 ; widths [ 61 ] =563 ; widths [ 62 ] =563 ; widths [ 63 ] =443 ; widths [ 64 ] =920 ; widths [ 65 ] =722 ; widths [ 66 ] =666 ; widths [ 67 ] =666 ; widths [ 68 ] =722 ; widths [ 69 ] =610 ; widths [ 70 ] =556 ; widths [ 71 ] =722 ; widths [ 72 ] =722 ; widths [ 73 ] =333 ; widths [ 74 ] =389 ; widths [ 75 ] =722 ; widths [ 76 ] =610 ; widths [ 77 ] =889 ; widths [ 78 ] =722 ; widths [ 79 ] =722 ; widths [ 80 ] =556 ; widths [ 81 ] =722 ; widths [ 82 ] =666 ; widths [ 83 ] =556 ; widths [ 84 ] =610 ; widths [ 85 ] =722 ; widths [ 86 ] =722 ; widths [ 87 ] =943 ; widths [ 88 ] =722 ; widths [ 89 ] =722 ; widths [ 90 ] =610 ; widths [ 91 ] =333 ; widths [ 92 ] =277 ; widths [ 93 ] =333 ; widths [ 94 ] =469 ; widths [ 95 ] =500 ; widths [ 96 ] =333 ; widths [ 97 ] =443 ; widths [ 98 ] =500 ; widths [ 99 ] =443 ; widths [ 100 ] =500 ; widths [ 101 ] =443 ; widths [ 102 ] =333 ; widths [ 103 ] =500 ; widths [ 104 ] =500 ; widths [ 105 ] =277 ; widths [ 106 ] =277 ; widths [ 107 ] =500 ; widths [ 108 ] =277 ; widths [ 109 ] =777 ; widths [ 110 ] =500 ; widths [ 111 ] =500 ; widths [ 112 ] =500 ; widths [ 113 ] =500 ; widths [ 114 ] =333 ; widths [ 115 ] =389 ; widths [ 116 ] =277 ; widths [ 117 ] =500 ; widths [ 118 ] =500 ; widths [ 119 ] =722 ; widths [ 120 ] =500 ; widths [ 121 ] =500 ; widths [ 122 ] =443 ; widths [ 123 ] =479 ; widths [ 124 ] =200 ; widths [ 125 ] =479 ; widths [ 126 ] =541 ; } } 
__label__1 ['ctx.sendDownstream'  '('  'e'  ')'] 
__label__1 ['calendar.getTimeZone'  '('  ')'  '.getDSTSavings'  '('  ')'] 
__label__1 ['j.getConfiguration'  '('  ')'  '.get'  '('  '``'  'mapred.task.id'  "''"  ' '  "''"  "''"  ')'  '.equals'  '('  '``'  "''"  ')'  '&'  '&'  '!'  '('  '``'  'true'  "''"  '.equals'  '('  'j.getConfiguration'  '('  ')'  '.get'  '('  '``'  'pig.illustrating'  "''"  ')'  ')'  ')'] 
__label__1 ['processEngineConfiguration.getCommandExecutorTxRequiresNew'  '('  ')'] 
__label__0 log.trace ( `` Failed to deploy ! ! `` , res2.cause ( ) ) 
__label__0 processor.open ( w , request , AtmosphereResponse.newInstance ( framework.getAtmosphereConfig ( ) , request , w ) ) 
__label__1 ['logger.debug'  '('  '``'  'myq'  'ReturnCode'  ':'  '{'  '}'  "''"  ' '  'returnCode'  ')'] 
__label__0 LOG.error ( `` clear parameter error '' , ex ) 
__label__0 assertContains ( actualTables , expectedTables ) 
__label__1 ['chain.filter'  '('  'exchange'  ')'  '.compose'  '('  '('  'call'  ')'  '-'  '>'  'filter'  '('  'exchange'  ' '  'call'  ')'  ')'] 
__label__0 Preconditions.checkState ( hasInstanceType ( ) , '' Expected a constructor ; got % s '' , this ) 
__label__0 / * * * Returns a duplicate of this resource record . * / @ Override public DnsResource duplicate ( ) { return new DnsResource ( name ( ) , type ( ) , dnsClass ( ) , ttl , content.duplicate ( ) ) ; } 
__label__0 ctx.write ( msg , promise ) 
__label__0 `` Using bind address : `` + bindAddress 
__label__0 ctx.writeAndFlush ( `` Welcome to `` + InetAddress.getLocalHost ( ) .getHostName ( ) + `` secure chat service ! \n '' ) 
__label__1 ['new'  'DynamicAwareEntry'  '('  '``'  'https'  ':'  '//localhost:443/test'  "''"  ' '  'null'  ' '  'null'  ')'] 
__label__0 options ! = null & & options.getChildCount ( ) > 0 
__label__1 ['AdviceWithTasks.removeByToString'  '('  'route'  ' '  'toString'  ' '  'selectLast'  ' '  'selectFirst'  ' '  'selectFrom'  ' '  'selectTo'  ' '  'maxDeep'  ')'] 
__label__1 ['Preconditions.checkNotNull'  '('  'object'  ')'] 
__label__0 CopyOnWriteArrayList < EntryListener < ? , ? > > 
__label__0 from ( `` direct : start '' ) .multicast ( new AggregationStrategy ( ) { public Exchange aggregate ( Exchange oldExchange , Exchange newExchange ) { if ( oldExchange == null ) { return newExchange ; } String body=oldExchange.getIn ( ) .getBody ( String.class ) ; oldExchange.getIn ( ) .setBody ( body + newExchange.getIn ( ) .getBody ( String.class ) ) ; return oldExchange ; } } ) .parallelProcessing ( ) .timeout ( 1000 ) 
__label__1 ['eventJournalConfig.getMapName'  '('  ')'] 
__label__0 Configuration.getMs ( PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS ) 
__label__0 Bytes.toBytes ( tableNameOrRegionName ) 
__label__1 ['new'  'InputStreamReader'  '('  'in'  ')'] 
__label__0 HMSHANDLERATTEMPTS ( `` hive.hmshandler.retry.attempts '' ,10 , '' The number of times to retry a HMSHandler call if there were a connection error . '' ) 
__label__0 new IllegalStateException ( ) 
__label__1 ['Class.forName'  '('  'name'  ')'] 
__label__1 ['closedChannelException'  '!'  '='  'null'] 
__label__1 ['functionJSDocInfo'  '!'  '='  'null'] 
__label__0 DiagnosticType.disabled ( `` JSC_GOOG_MODULE_IN_NON_MODULE '' , '' goog.module ( ) call must be the first statement in a module . '' ) 
__label__1 ['new'  'Whitelist'  '('  ')'  '.addTags'  '('  '``'  'a'  "''"  ' '  "''"  'b'  "''"  ' '  "''"  'blockquote'  "''"  ' '  "''"  'br'  "''"  ' '  "''"  'caption'  "''"  ' '  "''"  'cite'  "''"  ' '  "''"  'code'  "''"  ' '  "''"  'col'  "''"  ' '  "''"  'colgroup'  "''"  ' '  "''"  'dd'  "''"  ' '  "''"  'div'  "''"  ' '  "''"  'dl'  "''"  ' '  "''"  'dt'  "''"  ' '  "''"  'em'  "''"  ' '  "''"  'h1'  "''"  ' '  "''"  'h2'  "''"  ' '  "''"  'h3'  "''"  ' '  "''"  'h4'  "''"  ' '  "''"  'h5'  "''"  ' '  "''"  'h6'  "''"  ' '  "''"  'i'  "''"  ' '  "''"  'img'  "''"  ' '  "''"  'li'  "''"  ' '  "''"  'ol'  "''"  ' '  "''"  'p'  "''"  ' '  "''"  'pre'  "''"  ' '  "''"  'q'  "''"  ' '  "''"  'small'  "''"  ' '  "''"  'strike'  "''"  ' '  "''"  'strong'  "''"  ' '  "''"  'sub'  "''"  ' '  "''"  'sup'  "''"  ' '  "''"  'table'  "''"  ' '  "''"  'tbody'  "''"  ' '  "''"  'td'  "''"  ' '  "''"  'tfoot'  "''"  ' '  "''"  'th'  "''"  ' '  "''"  'thead'  "''"  ' '  "''"  'tr'  "''"  ' '  "''"  'u'  "''"  ' '  "''"  'ul'  "''"  ')'] 
__label__0 `` Using bind address : `` + bindAddress 
__label__1 ['params.getInt'  '('  '``'  'numPages'  "''"  ')'] 
__label__0 clusterService.getIndexerFailures ( 1,0 ) 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( value= { QuickTest.class , ParallelTest.class } ) public class ReplicatedMapAntiEntropyTest extends ReplicatedMapAbstractTest { @ After public void cleanup ( ) { System.clearProperty ( `` hazelcast.serialization.custom.override '' ) ; } @ Test public void testMapConvergesToSameValueWhenMissingReplicationUpdate ( ) throws Exception { Config config=new Config ( ) ; SerializationConfig serializationConfig=new SerializationConfig ( ) ; SerializerConfig serializerConfig=new SerializerConfig ( ) ; serializerConfig.setTypeClassName ( PutOperation.class.getName ( ) ) ; serializerConfig.setImplementation ( new PutOperationWithNoReplicationSerializer ( ) ) ; serializationConfig.addSerializerConfig ( serializerConfig ) ; config.setSerializationConfig ( serializationConfig ) ; System.setProperty ( `` hazelcast.serialization.custom.override '' , '' true '' ) ; String mapName=randomMapName ( ) ; TestHazelcastInstanceFactory factory=createHazelcastInstanceFactory ( ) ; HazelcastInstance instance1=factory.newHazelcastInstance ( config ) ; HazelcastInstance instance2=factory.newHazelcastInstance ( config ) ; HazelcastInstance instance3=factory.newHazelcastInstance ( config ) ; final ReplicatedMap < Object , Object > map1=instance1.getReplicatedMap ( mapName ) ; final ReplicatedMap < Object , Object > map2=instance2.getReplicatedMap ( mapName ) ; final ReplicatedMap < Object , Object > map3=instance3.getReplicatedMap ( mapName ) ; final String key=generateKeyOwnedBy ( instance2 ) ; final String value=randomString ( ) ; map1.put ( key , value ) ; assertEquals ( value , map1.get ( key ) ) ; assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { assertEquals ( value , map2.get ( key ) ) ; assertEquals ( value , map3.get ( key ) ) ; } } ) ; } public class PutOperationWithNoReplicationSerializer implements StreamSerializer < PutOperation > { @ Override public void write ( ObjectDataOutput out , PutOperation object ) throws IOException { object.writeData ( out ) ; } @ Override public PutOperation read ( ObjectDataInput in ) throws IOException { final PutOperationWithNoReplication operation=new PutOperationWithNoReplication ( ) ; operation.readData ( in ) ; return operation ; } @ Override public int getTypeId ( ) { return 8778 ; } @ Override public void destroy ( ) { } } class PutOperationWithNoReplication extends PutOperation { public PutOperationWithNoReplication ( ) { } @ Override protected Collection < Address > getMemberAddresses ( ) { return Collections.emptyList ( ) ; } } } 
__label__1 ['logger.info'  '('  '``'  'Session'  'destroyed'  "''"  ')'] 
__label__0 new RuntimeException ( `` to length : '' + to.length + `` from length : '' + from.length ) 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['Long'  'autoCommitInterval'] 
__label__0 resource ( ) ! = null & & resource ( ) .transport ( ) ! = AtmosphereResource.TRANSPORT.WEBSOCKET 
__label__1 ['absEdge.getTarget'  '('  ')'] 
__label__0 buffer.rewind ( ) .forward ( ( int ) n ) .getFixString ( ( int ) str_len , charsetName ) 
__label__1 ['finishChannel'  '('  'channel.getPipeline'  '('  ')'  '.getContext'  '('  'NettyAsyncHttpProvider.class'  ')'  ')'] 
__label__0 ( ( StringLiteral ) literal ) .getValue ( ) 
__label__0 TimeUnit.SECONDS.toMillis ( 4 ) 
__label__0 DirectMessage.createDirectMessageList ( http.get ( `` http : //yusuke.homeip.net/twitter4j/en/testcases/statuses/friends/T4J_hudson.json '' ) ) 
__label__1 ['logger.debug'  '('  '``'  'defineClass'  'pluginClass'  ':'  '{'  '}'  'cl'  ':'  '{'  '}'  "''"  ' '  'className'  ' '  'classLoader'  ')'] 
__label__1 ['XMLInputFactory.newFactory'  '('  ')'] 
__label__1 ['logger.debug'  '('  '``'  'Received'  'MyQ'  'JSON'  ':'  '{'  '}'  "''"  ' '  'dataString'  ')'] 
__label__1 ['DefaultBroadcaster.class.cast'  '('  'resource.getBroadcaster'  '('  ')'  ')'  '.broadcasterCache.addToCache'  '('  'resource'  ' '  'msg'  ')'] 
__label__0 expiresOn.getTime ( ) 
__label__0 exportStatusCounts ( exporter ) 
__label__1 ['expiresOn.getTime'  '('  ')'] 
__label__1 ['b.getTopicId'  '('  ')'] 
__label__0 put.getWriteToWAL ( ) 
__label__0 lockMode == InodeTree.LockMode.READ 
__label__0 ConnectionFactory connectionFactory 
__label__0 obj.getRequiredTokens ( ) 
__label__1 ['Assert.assertEquals'  '('  '``'  'Recall'  'outside'  'target'  'range'  "''"  ' 0.6924'  ' '  'r 0.001'  ')'] 
__label__0 environmentVariableMode=2 
__label__1 ['histogram.getCount'  '('  ')'] 
__label__0 model.calculateBoundingBox ( bbox ) 
__label__1 ['deploymentUnit.getParent'  '('  ')'  '=='  'null'] 
__label__0 new SSL ( ( short ) MIN_SSL_OPTIONS , ( short ) 0 , ( short ) sslPort ) 
__label__1 ['ctx.sendDownstream'  '('  'e'  ')'] 
__label__1 ['ShrinkWrap.create'  '('  'WebArchive.class'  ')'  '.addClass'  '('  'MyBatchlet.class'  ')'  '.addAsWebInfResource'  '('  'EmptyAsset.INSTANCE'  ' '  'ArchivePaths.create'  '('  '``'  'beans.xml'  "''"  ')'  ')'  '.addAsManifestResource'  '('  '``'  'META-INF/batch-jobs/myJob.xml'  "''"  ' '  "''"  'batch-jobs/myJob.xml'  "''"  ')'] 
__label__0 TEST_UTIL.waitUntilAllRegionsAssigned ( tableName ) 
__label__0 ! super.equals ( obj ) 
__label__0 assertClusterSizeEventually ( 2 , nodes [ 0 ] ) 
__label__0 context.addStep ( response , operation , new NewStepHandler ( ) { public void execute ( final NewOperationContext context , final ModelNode operation ) { if ( context.completeStep ( ) == NewOperationContext.ResultAction.KEEP & & context.isModelAffected ( ) ) { } } } , NewOperationContext.Stage.VERIFY ) 
__label__1 ['memoryReservation.getAndAdd'  '('  'bytes'  ')'] 
__label__1 ['StatBuckets.prettyUptime'  '('  'secs'  ')'] 
__label__0 `` Content-Type '' .equalsIgnoreCase ( name ) 
__label__0 mRecomputeLauncherService.shutdown ( ) 
__label__0 registry.bind ( `` curator '' , client ) 
__label__1 ['uncompressedProto.length'  '<'  '2560000'] 
__label__0 setBytes ( index , data,0 , length ) 
__label__1 ['response.getHeader'  '('  'Exchange.CONTENT_TYPE'  ')'  '!'  '='  'null'] 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__1 ['``'  'Searching'  'class'  'for'  'device'  'type'  '``'  '+'  'deviceAddress'] 
__label__0 asyncResult.cause ( ) 
__label__1 ['reportMissingOverride.isOn'  '('  ')'  '&'  '&'  '!'  'declaredOverride'  '&'  '&'  'interfaceHasProperty'] 
__label__0 ReactiveHelper.scheduleSync ( ( ) - > processor.process ( exchange , done - > { if ( exchange.getException ( ) ! = null ) { getExceptionHandler ( ) .handleException ( `` Error processing aggregated exchange '' , exchange , exchange.getException ( ) ) ; } else { log.trace ( `` Processing aggregated exchange : { } complete . `` , exchange ) ; } } ) , '' sending aggregated exchange '' ) 
__label__0 logger.fine ( `` Strip code '' ) 
__label__0 new WebApplicationException ( e , serverError ( e ) ) 
__label__1 ['ArrayList'  '<'  'EntryListener'  '<'  '?'  ' '  '?'  '>'  '>'] 
__label__1 ['Thread.sleep'  '('  '100'  ')'] 
__label__0 mTfs.delete ( mTfs.open ( new TachyonURI ( dirPath ) ) , true ) 
__label__0 value.equals ( values [ i ] ) 
__label__0 complete.expectedBodiesReceivedInAnyOrder ( `` finish '' , '' stop '' , '' faulted '' , '' except '' ) 
__label__1 ['buildPages.getTypes'  '('  ')'] 
__label__1 ['resultEndpoint.assertIsNotSatisfied'  '('  ')'] 
__label__1 ['name.length'  '('  ')'  '>'  '2'] 
__label__1 ['f.cancel'  '('  'true'  ')'] 
__label__1 ['group'  '=='  'null'] 
__label__1 ['ImmutableSortedSet.of'  '('  '``'  'p'  "''"  ' '  "''"  'br'  "''"  ' '  "''"  'li'  "''"  ' '  "''"  'dt'  "''"  ' '  "''"  'dd'  "''"  ' '  "''"  'td'  "''"  ' '  "''"  'hr'  "''"  ' '  "''"  'img'  "''"  ' '  "''"  'tr'  "''"  ' '  "''"  'th'  "''"  ' '  "''"  'td'  "''"  ')'] 
__label__1 ['configElements'  '['  '1'  ']'] 
__label__1 ['stats.getLastUpdateTime'  '('  ')'  '>'  'lastUpdateTime'] 
__label__0 scanFeatures ( getCamelKarafFeatureUrl ( ) , '' xml-specs-api '' , '' camel-core '' , '' camel-spring '' , '' camel-test '' ) 
__label__0 WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS ( Name.WORKER_BLOCK_HEARTBEAT_TIMEOUT_MS,60000 ) 
__label__0 runtime.minus ( provided ) 
__label__1 ['Optional'  '<'  'T'  '>'] 
__label__1 ['cached.get'  '('  'columnNames'  ')'] 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__0 pushExecutor.execute ( new NamedRunnable ( `` OkHttp % s Push Headers [ % s ] '' , hostName , streamId ) { @ Override public void execute ( ) { boolean cancel=pushObserver.onHeaders ( streamId , requestHeaders , inFinished ) ; try { if ( cancel ) frameWriter.rstStream ( streamId , ErrorCode.CANCEL ) ; if ( cancel || inFinished ) { synchronized ( SpdyConnection.this ) { currentPushRequests.remove ( streamId ) ; } } } catch ( IOException ignored ) { } } } ) 
__label__1 ['private'  'CSVFilter'  'filter'  ';'] 
__label__0 LinkedHashSet < String > 
__label__1 ['processor.open'  '('  'w'  ' '  'request'  ')'] 
__label__0 IOConverter.toString ( out , null ) 
__label__1 ['DiagnosticType.disabled'  '('  '``'  'JSC_MISPLACED_TYPE_ANNOTATION'  "''"  ' '  "''"  'Type'  'annotations'  'are'  'not'  'allowed'  'here.'  '``'  '+'  '``'  'Are'  'you'  'missing'  'parentheses'  '?'  "''"  ')'] 
__label__1 ['ObjectConverter.toBoolean'  '('  'scriptValue'  ')'] 
__label__0 LOG.warn ( `` Error invoking metrics timer '' , e ) 
__label__1 ['out.writeObject'  '('  'entry.getValue'  '('  ')'  ')'] 
__label__1 ['args.length'  '<'  '1'] 
__label__1 ['ImmutableSet'  '<'  'ImplemetationMethodDescriptor'  '>'] 
__label__0 Short.parseShort ( value.toString ( ) ) 
__label__1 ['mTfs.createFile'  '('  'new'  'TachyonURI'  '('  '``'  '/root/testFile1'  "''"  ')'  ')'] 
__label__1 ['idGenerator.generateId'  '('  ')'] 
__label__1 ['applicationStatistics.incrUpdateUserTimes'  '('  ')'] 
__label__1 ['this'  '('  'maxFrameLength'  ' '  'lengthFieldOffset'  ' '  'lengthFieldOffset'  ' '  'lengthAdjustment'  ' '  'initialBytesToStrip'  ' '  'false'  ')'  ';'] 
__label__0 connectPromise.tryFailure ( t ) 
__label__0 internalExecutor.submit ( futureTask ) 
__label__0 new PercentType ( percent ) 
__label__1 ['connection.hdel'  '('  'key'  ')'] 
__label__1 ['HashMap'  '<'  'String'  ' '  'Operator'  '<'  '?'  'extends'  'Serializable'  '>'  '>'] 
__label__0 logger.trace ( `` Requsting URL { } '' , url ) 
__label__1 ['Arrays.asList'  '('  'CoreAnnotations.TextAnnotation.class'  ' '  'CoreAnnotations.TokensAnnotation.class'  ' '  'CoreAnnotations.CharacterOffsetBeginAnnotation.class'  ' '  'CoreAnnotations.CharacterOffsetEndAnnotation.class'  ' '  'CoreAnnotations.BeforeAnnotation.class'  ' '  'CoreAnnotations.AfterAnnotation.class'  ' '  'CoreAnnotations.TokenBeginAnnotation.class'  ' '  'CoreAnnotations.TokenEndAnnotation.class'  ' '  'CoreAnnotations.PositionAnnotation.class'  ' '  'CoreAnnotations.IndexAnnotation.class'  ' '  'CoreAnnotations.OriginalTextAnnotation.class'  ' '  'CoreAnnotations.ValueAnnotation.class'  ' '  'CoreAnnotations.IsNewlineAnnotation.class'  ')'] 
__label__1 ['saHooks'  '!'  '='  'null'] 
__label__0 historicState ( item , timestamp , serviceName ) 
__label__1 ['Preconditions.checkNotNull'  '('  'blockWorker'  ')'] 
__label__1 ['JSError.make'  '('  'ModuleLoader.MODULE_CONFLICT'  ' '  'file.toString'  '('  ')'  ')'] 
__label__0 new ChannelInboundHandlerAdapter ( ) { @ Override public void channelWritabilityChanged ( ChannelHandlerContext ctx ) throws Exception { buf.append ( ctx.channel ( ) .isWritable ( ) ) ; buf.append ( ' ' ) ; } } 
__label__1 ['GL11.glTexParameter'  '('  'target'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 SSOTestBase.executeNoAuthSingleSignOnTest ( baseURLNoAuth , baseURLNoAuth , log ) 
__label__0 DEFAULT_RM_ACL_ENABLE=true 
__label__1 ['MetricMonitorValues.getMetric'  '('  'metrics'  ' '  'TRANSACTION_UNSAMPLED_NEW'  ' '  'UNSUPPORTED_GAUGE'  ')'] 
__label__1 ['``'  'value'  "''"  '.equals'  '('  'key'  ')'] 
__label__1 ['DatabaseDescriptor.getListenAddress'  '('  ')'  '.getHostName'  '('  ')'] 
__label__1 ['config.getStorageImpl'  '('  ')'] 
__label__1 ['Map'  '<'  'Integer'  ' '  'Object'  '>'] 
__label__1 ['n.getNodeData'  '('  ')'  '.getLabel'  '('  ')'  '.toLowerCase'  '('  ')'  '.contains'  '('  'str'  ')'] 
__label__0 details.setProperty ( CONFIG_HASH_KEY , currentConfigHash ) 
__label__0 idAnnotation ! = null & & ! method.isBridge ( ) 
__label__1 ['stores.contains'  '('  'name'  ')'] 
__label__1 ['exchange.addRequestHeader'  '('  'HttpHeaders.AUTHORIZATION'  ' '  "''"  'OAuth'  '``'  '+'  'currentToken'  ')'] 
__label__1 ['client.getState'  '('  ')'  '.setCredentials'  '('  'new'  'AuthScope'  '('  'null'  ' '  '-1'  ' '  'AuthScope.ANY_REALM'  ')'  ' '  'defaultcreds'  ')'] 
__label__1 ['checkNotNull'  '('  'jobName'  ' '  "''"  'The'  'data'  'sink'  'must'  'not'  'be'  'null'  '.'  "''"  ')'] 
__label__1 ['websocketComponent.setMaxThreads'  '('  '11'  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['client.srandmember'  '('  'key'  ')'] 
__label__0 fields.put ( PERMISSIONS , perms ) 
__label__0 getConnectTimeout ( ) 
__label__0 CxfSpringEndpointBean.class 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__0 assertTrueEventually ( new AssertTask ( ) { @ Override public void run ( ) throws Exception { Collection < EventRegistration > regs1=eventService1.getRegistrations ( MapService.SERVICE_NAME , mapName ) ; Collection < EventRegistration > regs2=eventService2.getRegistrations ( MapService.SERVICE_NAME , mapName ) ; assertEquals ( `` there should be only one registration '' ,1 , regs1.size ( ) ) ; assertEquals ( `` there should be only one registration '' ,1 , regs2.size ( ) ) ; } } ) 
__label__1 ['DiagnosticGroups.registerGroup'  '('  '``'  'oldCheckTypes'  "''"  ' '  'TypeValidator.ALL_DIAGNOSTICS'  ' '  'TypeCheck.ALL_DIAGNOSTICS'  ')'] 
__label__1 ['TEST_UTIL.getHBaseAdmin'  '('  ')'] 
__label__1 ['('  'byte'  ')'  '0xdf'] 
__label__1 ['removeBlockInternal'  '('  'sessionId'  ' '  'blockId'  ' '  'BlockStoreLocation.anyTier'  '('  ')'  ')'] 
__label__0 logger.trace ( `` rapidRefreshFutureEnd stopping '' ) 
__label__1 ['context.getLogger'  '('  ')'  '.logAttributeWarning'  '('  'address'  ' '  'SLOT_ATTRIBUTE_NAME'  ' '  'MESSAGES.invalidJSFSlotValue'  '('  'slot.asString'  '('  ')'  ')'  ')'] 
__label__0 mock.expectedMinimumMessageCount ( 2 ) 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['DiagnosticType.disabled'  '('  '``'  'JSC_GOOG_MODULE_IN_NON_MODULE'  "''"  ' '  "''"  'goog.module'  '('  ')'  'call'  'must'  'be'  'the'  'first'  'statement'  'in'  'a'  'module'  '.'  "''"  ')'] 
__label__0 file.getAbsolutePath ( ) 
__label__1 ['200000'  '*'  '4'  '*'  '4'] 
__label__0 rj.reduceProgress ( ) 
__label__0 hz1.getLifecycleService ( ) .shutdown ( ) 
__label__1 ['/'  '*'  '*'  '*'  'Retrieves'  'X'  '.'  '*'  '@'  'return'  'a'  'value'  '*'  '/'  'public'  'T'  'getX'  '('  ')'  '{'  'return'  'null'  ';'  '}'] 
__label__0 assertFalse ( isBufferCopyNeededForWrite ( byteBuf.asReadOnly ( ) ) ) 
__label__1 ['partitionContainer.getRecordStore'  '('  'name'  ')'] 
__label__0 ! handle.parent ( ) .exists ( ) 
__label__1 ['StringBuilder'  'sb=new'  'StringBuilder'  '('  '64'  ')'  ';'] 
__label__1 ['outputBatchSize=25'] 
__label__0 Assert.assertEquals ( getNotAllowedExceptionMessage ( `` helloForNone '' ) , e.getCause ( ) .getMessage ( ) ) 
__label__1 ['body.transferTo'  '('  'position'  ' '  'Long.MAX_VALUE'  ' '  'target'  ')'] 
__label__0 HiveConf.setLongVar ( jobConf , HiveConf.ConfVars.MAPREDMINSPLITSIZE , preferredSplitSize ) 
__label__0 node.getLocalName ( ) 
__label__0 soLingerTime.toMilliseconds ( ) 
__label__1 ['typeTmp.get'  '('  '0'  ')'] 
__label__1 ['new'  'UnsupportedOperationException'  '('  ')'] 
__label__0 synchronized ( CONFIG ) { -- threadCount ; if ( threadCount < = 0 ) { try { session.close ( ) ; } catch ( IOException e ) { throw new DBException ( e ) ; } } } 
__label__0 logger.trace ( `` Retreiveing door data '' ) 
__label__1 ['new'  'JedisClusterCommand'  '<'  'Long'  '>'  '('  'connectionHandler'  ' '  'timeout'  ' '  'maxRedirections'  ')'  '{'  '@'  'Override'  'public'  'Long'  'execute'  '('  'Jedis'  'connection'  ')'  '{'  'return'  'connection.persist'  '('  'key'  ')'  ';'  '}'  '}'] 
__label__0 camelContext.getExecutorServiceManager ( ) .shutdownNow ( timeoutCheckerExecutorService ) 
__label__1 ['('  'short'  ')'  '777'] 
__label__1 ['lock.lock'  '('  ')'] 
__label__1 ['GL20.glUniform2'  '('  'location'  ' '  'v'  ')'] 
__label__0 Preconditions.checkNotNull ( manager , '' manager '' ) 
__label__1 ['IOConverter.toInputStream'  '('  's'  ')'] 
__label__0 clientConfig.property ( ClientProperties.READ_TIMEOUT,2000 ) 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__1 ['InetAddress.getLocalHost'  '('  ')'] 
__label__1 ['await'  '('  ')'  '.atMost'  '('  '5'  ' '  'TimeUnit.SECONDS'  ')'] 
__label__1 ['REMOVALS_UPDATER.compareAndSet'  '('  'this'  ' '  'nanos'  ' '  'nanos'  '+'  'duration'  ')'] 
__label__0 Size.kilobytes ( 16 ) 
__label__0 historicState ( item , timestamp , serviceName ) 
__label__1 ['offset=e.startOffset'] 
__label__1 ['StringUtils.subString'  '('  'url'  ' '  "''"  'weburi-'  "''"  ' '  "''"  '.json'  "''"  ')'] 
__label__1 ['checkArgument'  '('  'keyGroupRange.contains'  '('  'keyGroup'  ')'  ')'] 
__label__1 ['WebAppUtils.getResolvedRMWebAppURLWithoutScheme'  '('  'new'  'Configuration'  '('  ')'  ')'] 
__label__1 ['return'  'false'  ';'] 
__label__0 TestSuiteEnvironment.getServerAddressNode1 ( ) 
__label__1 ['form'  'instanceof'  'IObj'  '&'  '&'  '('  '('  'IObj'  ')'  'form'  ')'  '.meta'  '('  ')'  '!'  '='  'null'] 
__label__0 response.get ( ROLLED_BACK ) 
__label__1 ['builder.put'  '('  'columnHandle 0L'  ')'] 
__label__1 ['Double.valueOf'  '('  'value.toString'  '('  ')'  ')'] 
__label__0 new SSL ( ( short ) MIN_SSL_OPTIONS , ( short ) 0 , ( short ) sslPort ) 
__label__0 CommandUtils.convertMsToDate ( files [ 2 ] .getCreationTimeMs ( ) ) 
__label__1 ['location.belongTo'  '('  'BlockStoreLocation.anyDirInTier'  '('  'tierAlias'  ')'  ')'] 
__label__0 logger.debug ( `` Error connecting to Plex '' , e ) 
__label__1 ['new'  'RuntimeException'  '('  '``'  'error'  'initializing'  'deserializer'  ':'  '``'  '+'  'deserializer.getClass'  '('  ')'  '.getName'  '('  ')'  ')'] 
__label__1 ['mLockMode'  '=='  'InodeTree.LockMode.READ'] 
__label__1 ['Metric'  '<'  'Long'  '>'] 
__label__0 logger.fine ( `` Normalizing '' ) 
__label__0 Primitive.longObjectMap ( 8 ) 
__label__1 ['4'  '*'  'Bytes.SIZEOF_BOOLEAN'] 
__label__1 ['AbstractRanking.refreshMinMax'  '('  'this'  ' '  'graph'  ')'] 
__label__1 ['new'  'BinaryWebSocketFrame'  '('  'payload'  ')'] 
__label__1 ['@'  'GwtIncompatible'  '('  '``'  'ObjectInputStream'  "''"  ')'  'public'  'void'  'restoreState'  '('  'InputStream'  'inputStream'  ')'  'throws'  'Exception'  '{'  'try'  '('  'final'  'ObjectInputStream'  'objectInputStream=new'  'ObjectInputStream'  '('  'inputStream'  ')'  ')'  '{'  'CompilerState'  'compilerState=runInCompilerThread'  '('  'new'  'Callable'  '<'  'CompilerState'  '>'  '('  ')'  '{'  '@'  'Override'  'public'  'CompilerState'  'call'  '('  ')'  'throws'  'Exception'  '{'  'return'  '('  'CompilerState'  ')'  'objectInputStream.readObject'  '('  ')'  ';'  '}'  '}'  ')'  ';'  'externs=compilerState.externs'  ';'  'inputs=compilerState.inputs'  ';'  'inputsById.clear'  '('  ')'  ';'  'inputsById.putAll'  '('  'compilerState.inputsById'  ')'  ';'  'typeRegistry=compilerState.typeRegistry'  ';'  'externAndJsRoot=compilerState.externAndJsRoot'  ';'  'externsRoot=compilerState.externsRoot'  ';'  'jsRoot=compilerState.jsRoot'  ';'  'mostRecentTypechecker=compilerState.mostRecentTypeChecker'  ';'  'synthesizedExternsInput=compilerState.synthesizedExternsInput'  ';'  'synthesizedExternsInputAtEnd=compilerState.synthesizedExternsInputAtEnd'  ';'  'injectedLibraries.clear'  '('  ')'  ';'  'injectedLibraries.putAll'  '('  'compilerState.injectedLibraries'  ')'  ';'  'lastInjectedLibrary=compilerState.lastInjectedLibrary'  ';'  'globalRefMap=compilerState.globalRefMap'  ';'  'symbolTable=compilerState.symbolTable'  ';'  'hasRegExpGlobalReferences=compilerState.hasRegExpGlobalReferences'  ';'  'typeValidator=compilerState.typeValidator'  ';'  'setLifeCycleStage'  '('  'compilerState.lifeCycleStage'  ')'  ';'  'externProperties=compilerState.externProperties'  ';'  '}'  'initWarningsGuard'  '('  'options.getWarningsGuard'  '('  ')'  ')'  ';'  'maybeSetTracker'  '('  ')'  ';'  '}'] 
__label__0 getResponse ( `` GET '' , '' /books/ '' + bookId , null ) 
__label__0 retVal.setProperty ( p.getKey ( ) , p.getValue ( ) ) 
__label__0 OpenmrsProfileWithoutMissingModule.class 
__label__0 GL20.glUniform2fv ( location , v ) 
__label__0 assertEquals ( fc2 , fc ) 
__label__0 Response schema ( Property property ) ; 
__label__1 ['this.setAutoCommitOnClose'  '('  'false'  ')'] 
__label__0 idleTimeout < 30000 & & idleTimeout ! = 0 
__label__0 new ArrayList < > ( 1 ) 
__label__1 ['http2c.setInitialStreamSendWindow'  '('  'initialStreamSendWindow'  ')'] 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__1 ['hz1.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__0 endTracksTo ( `` main '' ) 
__label__1 ['authentication.hasDefined'  '('  'USERS'  ')'] 
__label__1 ['objects'  '=='  'null'] 
__label__1 ['getBinaryTupledSet'  '('  ')'] 
__label__0 fullName.split ( `` [ / @ ] '' ,3 ) 
__label__0 assertThat ( response ) .isEqualTo ( `` Ok.\n '' ) 
__label__0 `` Using bind address : `` + bindAddress 
__label__1 ['new'  'JedisClusterCommand'  '<'  'Set'  '<'  'String'  '>'  '>'  '('  'connectionHandler'  ' '  'timeout'  ' '  'maxRedirections'  ')'  '{'  '@'  'Override'  'public'  'Set'  '<'  'String'  '>'  'execute'  '('  'Jedis'  'connection'  ')'  '{'  'return'  'connection.spop'  '('  'key'  ' '  'count'  ')'  ';'  '}'  '}'] 
__label__0 / * * * Checkstyle frame model . * / private final transient MainFrameModel model=new MainFrameModel ( ) ; 
__label__0 System.currentTimeMillis ( ) 
__label__1 ['mock.expectedBodiesReceived'  '('  '``'  'Hello'  'World'  '2'  "''"  ')'] 
__label__0 logger.trace ( `` Invalid Account Credentials '' ) 
__label__0 assertTrue ( predicate.apply ( pickleEvent ) ) 
__label__1 ['analysis.getType'  '('  'aggregate'  ')'] 
__label__1 ['pairs'  '!'  '='  'null'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__0 Byte.parseByte ( value.toString ( ) ) 
__label__0 barrier.await ( 2 , TimeUnit.SECONDS ) 
__label__1 ['assertRemoveSubsystemResources'  '('  'servicesA'  ')'] 
__label__0 Class.forName ( className.replace ( '/ ' , ' . ' ) , true , Thread.currentThread ( ) .getContextClassLoader ( ) ) 
__label__0 / * * * Tests setup and cleanup attempts getting killed from command-line and lost tracker * @ param mr * @ param dfs * @ param commandLineKill if true , test with command-line killelse , test with lost tracker * @ throws IOException * / private void testSetupAndCleanupKill ( MiniMRCluster mr , MiniDFSCluster dfs , boolean commandLineKill ) throws Exception { RunningJob job=launchJobWithWaitingSetupAndCleanup ( mr ) ; JobTracker jt=mr.getJobTrackerRunner ( ) .getJobTracker ( ) ; JobInProgress jip=jt.getJob ( job.getID ( ) ) ; TaskAttemptID setupID=getRunningTaskID ( jip.getTasks ( TaskType.JOB_SETUP ) ) ; if ( commandLineKill ) { killTaskFromCommandLine ( job , setupID , jt ) ; } else { killTaskWithLostTracker ( mr , setupID ) ; } UtilsForTests.writeFile ( dfs.getNameNode ( ) , dfs.getFileSystem ( ) .getConf ( ) , setupSignalFile , ( short ) 3 ) ; while ( job.reduceProgress ( ) ! = 1.0f ) { try { Thread.sleep ( 100 ) ; } catch ( InterruptedException ie ) { } } TaskAttemptID cleanupID=getRunningTaskID ( jip.getTasks ( TaskType.JOB_CLEANUP ) ) ; if ( commandLineKill ) { killTaskFromCommandLine ( job , cleanupID , jt ) ; } else { killTaskWithLostTracker ( mr , cleanupID ) ; } UtilsForTests.writeFile ( dfs.getNameNode ( ) , dfs.getFileSystem ( ) .getConf ( ) , cleanupSignalFile , ( short ) 3 ) ; job.waitForCompletion ( ) ; assertEquals ( JobStatus.SUCCEEDED , job.getJobState ( ) ) ; assertEquals ( TaskStatus.State.KILLED , jt.getTaskStatus ( setupID ) .getRunState ( ) ) ; assertEquals ( TaskStatus.State.KILLED , jt.getTaskStatus ( cleanupID ) .getRunState ( ) ) ; } 
__label__0 properties.length > 4 
__label__1 ['new'  'IntRangeValidator'  '('  '1'  ' '  'true'  ')'] 
__label__0 addKeys ( externalClasses , DATE , '' org.joda.time.LocalDate '' , '' java.time.LocalDate '' ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__1 ['mesh.getNumVertices'  '('  ')'  '/'  '2'] 
__label__1 ['EnumValidator.create'  '('  'Target.class'  ' '  'false'  ' '  'false'  ')'] 
__label__1 ['lookup'  '('  'parseName'  '('  'name'  ')'  ')'] 
__label__1 ['out.writeObject'  '('  'function'  ')'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__1 ['getSession'  '('  'false'  ')'] 
__label__1 ['Assert.assertTrue'  '('  'System.currentTimeMillis'  '('  ')'  '-'  'now'  '<'  '5000'  ')'] 
__label__0 trimmedLine.contains ( delimiter ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ConditionBasicDistributedTest'  'extends'  'ConditionBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '2'  ')'  '.newInstances'  '('  ')'  ';'  '}'  '}'] 
__label__1 ['new'  'IncrementalIndexSegment'  '('  'rtIndex'  ')'] 
__label__0 pieces.length < = tagColumn 
__label__0 logger.fine ( `` Normalizing '' ) 
__label__1 ['new'  'PulsarComponent'  '('  ')'] 
__label__1 ['logger.warn'  '('  '``'  'gave'  'up'  'waiting'  'for'  'query'  'reply'  'from'  'device'  '{'  '}'  "''"  ' '  'm_address'  ')'] 
__label__0 ImmutableList < SuggestedFix > 
__label__1 ['prop.getParamName'  '('  ')'] 
__label__1 ['assertEquals'  '('  'expectedResponse'  ' '  'orig.getResponse'  '('  ')'  ')'] 
__label__1 ['zkWorker.getWorker'  '('  ')'] 
__label__1 ['LOGGER.warn'  '('  '``'  '{'  '}'  '-'  'Failed'  'to'  'execute'  'isValid'  '('  ')'  'for'  'connection'  ' '  'configure'  'connection'  'test'  'query'  '.'  '('  '{'  '}'  ')'  "''"  ' '  'poolName'  ' '  'e.getMessage'  '('  ')'  ')'] 
__label__0 type.getDataFormat ( routeContext ) 
__label__0 visitStatement ( node , context ) 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__1 ['servletClass'  '!'  '='  'null'  '&'  '&'  'filterClass'  '!'  '='  'null'] 
__label__0 AsteriskActionEnum.valueOf ( action ) 
__label__1 ['attribute.split'  '('  '``'  '\\\\'  '.'  "''"  ')'] 
__label__1 ['dbCollection.save'  '('  'clusterEvent'  ')'] 
__label__1 ['mapper.getJsonFactory'  '('  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '246'  ')'] 
__label__1 ['IRON_GOLEM'  '('  '``'  'VillagerGolem'  "''"  ' '  'IronGolem.class 98'  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 addr.isAnyLocalAddress ( ) || addr.isLoopbackAddress ( ) 
__label__0 new MethodInjectionTarget ( methodInfo.declaringClass ( ) .name ( ) .toString ( ) , methodName , methodInfo.args ( ) [ 0 ] .name ( ) .toString ( ) ) 
__label__0 toBeRemovedKeys.removeAll ( keysToDelete ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 assertThat ( page1.pagination ( ) .getGlobalTotal ( ) ) .isEqualTo ( 5 ) 
__label__1 ['/'  '*'  '*'  '*'  'Matches'  'no'  'characters'  '.'  '*'  '/'  'public'  'static'  'final'  'FastMatcher'  'NONE=new'  'FastMatcher'  '('  ')'  '{'  '@'  'Override'  'public'  'boolean'  'matches'  '('  'char'  'c'  ')'  '{'  'return'  'false'  ';'  '}'  '@'  'Override'  'public'  'String'  'replaceFrom'  '('  'CharSequence'  'sequence'  ' '  'CharSequence'  'replacement'  ')'  '{'  'checkNotNull'  '('  'replacement'  ')'  ';'  'return'  'sequence.toString'  '('  ')'  ';'  '}'  'private'  'void'  'checkNotNull'  '('  'CharSequence'  'replacement'  ')'  '{'  '}'  '@'  'Override'  'public'  'String'  'collapseFrom'  '('  'CharSequence'  'sequence'  ' '  'char'  'replacement'  ')'  '{'  'return'  'sequence.toString'  '('  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'trimTrailingFrom'  '('  'CharSequence'  'sequence'  ')'  '{'  'return'  'sequence.toString'  '('  ')'  ';'  '}'  '}'  ';'] 
__label__0 `` A task is in the ABORTED state but stage is `` + currentState 
__label__0 ctx.sendUpstream ( e ) 
__label__0 responseModels.entrySet ( ) 
__label__1 ['getBinaryTupledSet'  '('  ')'] 
__label__0 DiagnosticType.error ( `` AMBIGUOUS_FUNCTION_DECL '' , '' Ambiguous use of a named function : { 0 } . '' ) 
__label__0 getConnectTimeout ( ) 
__label__1 ['Assert.notNull'  '('  'groupId'  ' '  "''"  'ArtifactId'  'must'  'not'  'be'  'null'  "''"  ')'] 
__label__0 view.getClusteredLayerDegree ( absNode ) 
__label__0 Long.valueOf ( p.getProperty ( `` numberid.id '' ) ) 
__label__1 ['expectedCountsForADoc'  '('  'weights'  ' '  'ind'  ')'] 
__label__1 ['routes.BufferResource'  '('  ')'] 
__label__0 GL20.glGetActiveAttrib ( program , index,256 , size , typeTmp ) 
__label__0 assertEquals ( someName , actualPattern.pattern ( ) ) 
__label__1 ['ctx.sendDownstream'  '('  'e'  ')'] 
__label__0 ObjectConverter.toBool ( scriptValue ) 
__label__1 ['LOG.warn'  '('  '``'  'clear'  'parameter'  'error'  "''"  ' '  'ex'  ')'] 
__label__0 LOG.debug ( `` Requesting TaskManager 's path for query services failed . `` , throwable ) 
__label__1 ['tableMetadataBuilder'  '('  'TPCH_SCHEMA_NAME'  ' '  'TPCH_ORDERS_NAME'  ')'  '.column'  '('  '``'  'orderkey'  "''"  ' '  'LONG'  ')'  '.column'  '('  '``'  'custkey'  "''"  ' '  'LONG'  ')'  '.column'  '('  '``'  'orderstatus'  "''"  ' '  'STRING'  ')'  '.column'  '('  '``'  'totalprice'  "''"  ' '  'DOUBLE'  ')'  '.column'  '('  '``'  'orderdate'  "''"  ' '  'STRING'  ')'  '.column'  '('  '``'  'orderpriority'  "''"  ' '  'STRING'  ')'  '.column'  '('  '``'  'clerk'  "''"  ' '  'STRING'  ')'  '.column'  '('  '``'  'shippriority'  "''"  ' '  'STRING'  ')'] 
__label__0 DirectMessage.createDirectMessageList ( get ( getBaseURL ( ) + `` direct_messages.json '' , true ) ) 
__label__0 executionListenerContextCloseListener.addCloseFailedExecutionListener ( executionListener , execution , executionVariablesToUse , customPropertiesMapToUse ) 
__label__1 ['private'  'final'  'String'  'mPortKey'  ';'] 
__label__0 LOG.debug ( `` Creating netty input stream for block { } @ { } from client { } '' , blockId , address , NetworkAddressUtils.getClientHostName ( ) ) 
__label__0 NettyCometSupport.class 
__label__0 entry.getCreateStore ( ) 
__label__1 ['callTimeoutMs=5000'] 
__label__1 ['new'  'IncrementalIndexSegment'  '('  'TestIndex.getIncrementalTestIndex'  '('  ')'  ')'] 
__label__1 ['camelContext.getExecutorServiceManager'  '('  ')'  '.shutdown'  '('  'timeoutCheckerExecutorService'  ')'] 
__label__0 this ( true,16 , arrayType ) ; 
__label__1 ['Assert.assertEquals'  '('  '1'  ' '  'intValue'  ')'] 
__label__1 ['options.setLanguageIn'  '('  'LanguageMode.ECMASCRIPT5'  ')'] 
__label__1 ['new'  'ArrayList'  '<'  '>'  '('  '4'  ')'] 
__label__0 req.getSession ( ) .getMaxInactiveInterval ( ) * 1000L 
__label__0 MAX_USER_NAME_LENGTH=64 
__label__1 ['primitiveType'  '!'  '='  'GL10.GL_POINTS'] 
__label__1 ['doAnswer'  '('  'new'  'Answer'  '<'  'Object'  '>'  '('  ')'  '{'  '@'  'Override'  'public'  'Object'  'answer'  '('  'InvocationOnMock'  'invocation'  ')'  'throws'  'Throwable'  '{'  'sem.release'  '('  ')'  ';'  'return'  'null'  ';'  '}'  '}'  ')'  '.when'  '('  'loggerMock'  ')'  '.warn'  '('  'anyString'  '('  ')'  ' '  'any'  '('  'Exception.class'  ')'  ')'] 
__label__1 ['('  '('  'Number'  ')'  's.first'  '('  ')'  ')'  '.intValue'  '('  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'get'  'next'  'entry'  'from'  '``'  '+'  'jarFileName'  '+'  '``'  ':'  '``'  '+'  'ioEx'  ')'] 
__label__0 lookup= '' java : /ConnectionFactory '' 
__label__0 assertEquals ( row.getField ( 0 ) ,2L ) 
__label__0 Integer.parseInt ( options.getMaxKeys ( ) ) 
__label__0 sendTo ( `` direct : foo '' ) 
__label__0 mTfs.mkdirs ( path , true ) 
__label__0 propEditor ! = null & & ! type.isArray ( ) 
__label__1 ['ObjectTypeAttributeDefinition.Builder.of'  '('  'ModelKeys.REMOTE_SERVER'  ' '  'OUTBOUND_SOCKET_BINDING'  ')'  '.setAllowNull'  '('  'true'  ')'] 
__label__0 classResolver.resolveMandatoryClass ( type ) 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['ChronicleEngineEnpoint'  'endpoint='  '('  'ChronicleEngineEnpoint'  ')'  'getEndpoint'  '('  ')'  ';'] 
__label__0 CompletableFuture < Void > 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['error.expectedMessageCount'  '('  '1'  ')'] 
__label__0 entry.getCheckName ( ) .equalsIgnoreCase ( checkAlias ) 
__label__1 ['return'  'false'  ';'] 
__label__0 BlockStoreContext.releaseBlockWorkerThriftClientHeartbeat ( mRpcAddress , client ) 
__label__0 filters= { XSSHtmlFilter.class } 
__label__0 fireMessageReceived ( ctx , completeMessage , e.getRemoteAddress ( ) ) 
__label__0 Thread.sleep ( 2500 ) 
__label__0 new DefaultPropertyNamePatternsMatcher ( EXACT_DELIMITERS , true , names ) 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/friends_timeline.json'  "''"  ' '  'true'  ')'  ')'] 
__label__0 obj.setContentType ( Mimetypes.MIMETYPE_BINARY_OCTET_STREAM ) 
__label__1 ['createPermissionsXmlAsset'  '('  'new'  'JndiPermission'  '('  '``'  '*'  "''"  ' '  "''"  'lookup'  "''"  ')'  ')'] 
__label__1 ['logger.debug'  '('  '``'  '{'  '}'  '{'  '}'  "''"  ' '  'errorCode'  ' '  'message'  ')'] 
__label__1 ['is'  '('  '``'  '/home/source'  "''"  ')'] 
__label__1 ['tiled'  '!'  '='  'null'] 
__label__0 serversByLoad.firstKey ( ) 
__label__0 ImmutableList < ConformanceConfig > 
__label__1 ['URIStatus'  ':'  ':getBlockSizeBytes'] 
__label__0 interceptors.addLast ( newAInterceptor ( a ) ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/public_timeline.json '' , false ) ) 
__label__1 ['cf.getCompressionType'  '('  ')'  '=='  'null'] 
__label__0 setMinHeight ( minHeight ) 
__label__0 logger.debug ( `` Could not send module un-availability notification of module `` + deploymentModuleIdentifier + `` to channel `` + this.channel , e ) 
__label__0 new StringBuilder ( 256 ) 
__label__1 ['System.identityHashCode'  '('  'this'  ')'] 
__label__1 ['getTimeout'  '('  ')'] 
__label__0 config.getMaxQueryMemoryPerNode ( ) .toBytes ( ) < = maxMemory.toBytes ( ) 
__label__1 ['/'  '*'  '*'  '*'  '@'  'see'  'org.openmrs.api.db.ConceptDAO'  '#'  'getCountOfConceptReferenceTerms'  '('  'java.lang.String'  ' '  'boolean'  ')'  '*'  '/'  '@'  'Override'  'public'  'Integer'  'getCountOfConceptReferenceTerms'  '('  'String'  'query'  ' '  'ConceptSource'  'conceptSource'  ' '  'boolean'  'includeRetired'  ')'  'throws'  'DAOException'  '{'  'Criteria'  'criteria=createConceptReferenceTermCriteria'  '('  'query'  ' '  'conceptSource'  ' '  'includeRetired'  ')'  ';'  'criteria.setProjection'  '('  'Projections.rowCount'  '('  ')'  ')'  ';'  'return'  '('  'Integer'  ')'  'criteria.uniqueResult'  '('  ')'  ';'  '}'] 
__label__0 new ImportControl ( stack.peek ( ) , name , regex ) 
__label__1 ['AttributeUtils.getDefault'  '('  ')'  '.getMin'  '('  'column'  ' '  'valuesArray'  ')'] 
__label__1 ['Iterable'  '<'  'TypedVar'  '>'] 
__label__1 ['UserGroupInformation.getCurrentUser'  '('  ')'  '.reloginFromKeytab'  '('  ')'] 
__label__0 log.info ( `` activitiy or FailedJobRetryTimerCycleValue is null in job `` + jobId + `` ' . only decrementing retries . '' ) 
__label__1 ['/'  '*'  '*'  '*'  '<'  'code'  '>'  'CONCAT_AGG'  '<'  '/code'  '>'  'aggregate'  'function'  '.'  '*'  '/'  'public'  'static'  'final'  'SqlConcatAggFunction'  'CONCAT_AGG=new'  'SqlConcatAggFunction'  '('  ')'  ';'] 
__label__1 ['buffer.getInt8'  '('  ')'] 
__label__1 ['bean.getCollectionCount'  '('  ')'] 
__label__0 ConfigUtils.absoluteStormLocalDir ( stormConf ) 
__label__1 ['items'  '['  '27'  ']'] 
__label__1 ['outputBatchSize=5000'] 
__label__1 ['ResponseBody.create'  '('  'MediaType.get'  '('  '``'  'text/plain'  "''"  ')'  ' '  'new'  'byte'  '['  '0'  ']'  ')'] 
__label__1 ['root.toURL'  '('  ')'] 
__label__0 authentication.has ( USERS ) 
__label__0 element.getLocalName ( ) 
__label__0 logger.trace ( `` rapidRefreshFutureEnd stopping '' ) 
__label__1 ['addListenerMethod1.addScopedInterceptor'  '('  'NettyConstants.INTERCEPTOR_CHANNEL_PROMISE_ADD_LISTENER'  ' '  'NettyConstants.SCOPE'  ' '  'ExecutionPolicy.BOUNDARY'  ')'] 
__label__0 maxLifetime < 120000 & & maxLifetime ! = 0 
__label__1 ['supportSession=true'] 
__label__0 c.writeAndFlush ( `` [ `` + ctx.channel ( ) .remoteAddress ( ) + `` ] `` + msg+ '\n ' ) 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__1 ['boundary.startsWith'  '('  '``'  '\\'  "''"  "''"  ')'] 
__label__1 ['IllegalArgumentException'  'e'] 
__label__0 GL20.glGetProgramiv ( program , pname , params ) 
__label__0 WebAppUtils.getResolvedRMWebAppURLWithScheme ( new Configuration ( ) ) 
__label__0 authentication.has ( USERS ) 
__label__1 ['twitter4j.List.constructListOfLists'  '('  'get'  '('  'getApiBaseURL'  '('  ')'  '+'  'V1'  '+'  'user+'  '``'  '/lists.json'  '?'  'cursor='  "''"  '+'  'cursor'  ' '  'true'  ')'  ')'] 
__label__1 ['list.isEmpty'  '('  ')'] 
__label__1 ['ObjectMapper.class'] 
__label__1 ['log.warn'  '('  'e'  ' '  "''"  'Graceful'  'shutdown'  'of'  'task'  '['  '%'  's'  ']'  'aborted'  'with'  'exception'  '.'  "''"  ')'] 
__label__1 ['processor.open'  '('  'w'  ' '  'request'  ')'] 
__label__1 ['ProcessorDefinition'  '<'  'ProcessorDefinition'  '>'] 
__label__1 ['LOG.fatal'  '('  '``'  'Could'  'not'  'append'  '.'  'Requesting'  'close'  'of'  'wal'  "''"  ' '  'e'  ')'] 
__label__1 ['fields.contains'  '('  'name'  ')'] 
__label__0 serverEnvironment.getLaunchType ( ) ! = ServerEnvironment.LaunchType.DOMAIN 
__label__1 ['Iterable'  '<'  'Symbol'  '>'] 
__label__1 ['Integer.valueOf'  '('  'quantifier'  ')'] 
__label__1 ['new'  'NullPointerException'  '('  '``'  'the'  'ast'  'is'  'null'  "''"  ')'] 
__label__1 ['nameDefinitionMultimap.keys'  '('  ')'] 
__label__0 CommandUtils.convertMsToDate ( files [ 3 ] .getCreationTimeMs ( ) ) 
__label__0 webSocketConnection.getRemote ( ) .sendBytesByFuture ( ByteBuffer.wrap ( b , offset , length ) ) 
__label__1 ['new'  'Interval'  '('  'startTime'  ' '  'endTime'  ')'] 
__label__0 event.isResuming ( ) || event.isCancelled ( ) 
__label__0 client.getVertx ( ) .setTimer ( 1000 , id - > checkExpired ( ) ) 
__label__0 mock.expectedMinimumMessageCount ( 10 ) 
__label__0 new WordToSentenceProcessor < IN > ( WordToSentenceProcessor.NewlineIsSentenceBreak.ALWAYS ) 
__label__1 ['Primitive.longObjectMap'  '('  '32'  ')'] 
__label__1 ['sanitizedName'  '('  'name'  ')'] 
__label__1 ['Outcome.match'  '('  '``'  'missing'  'database'  'driver'  '``'  '+'  'driverClassName'  ')'] 
__label__0 pId + BASE_FILE_NUMBER 
__label__1 ['sleepAtLeastMillis'  '('  '1'  ')'] 
__label__0 ! mapServiceContext.hasRegisteredListener ( mapName ) 
__label__1 ['GL.glBindTextureEXT'  '('  'target'  ' '  'texture'  ')'] 
__label__0 28 * ClassSize.REFERENCE 
__label__1 ['in.readObject'  '('  ')'] 
__label__1 ['mListView.getChildAt'  '('  'index'  ')'] 
__label__1 ['factory.get'  '('  'sResponseWildcard'  ' '  'NO_ANNOTATIONS'  ' '  'retrofit'  ')'] 
__label__1 ['assertMockEndpointsSatisifed'  '('  ')'] 
__label__1 ['@'  'InputIntMethodAnnotation'  '('  'value=-45'  ')'] 
__label__1 ['address.getHostText'  '('  ')'] 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['options.setLanguageIn'  '('  'LanguageMode.ECMASCRIPT5'  ')'] 
__label__0 { MAGIC_HIGH , MAGIC_LOW,0x02,20,0,0,0,0,0,0,0,0,0,0,0,0 } 
__label__1 ['!'  'plugin.isEnabled'  '('  ')'] 
__label__0 newHighlyAvailableDatabaseBuilder ( path ) 
__label__1 ['oldestNode'  '=='  'null'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 CompletableFuture < Void > 
__label__1 ['prev.getPrevProp'  '('  ')'] 
__label__0 ReferenceCountUtil.release ( holder ) 
__label__1 ['new'  'byte'  '['  '10'  ']'] 
__label__1 ['Thread.sleep'  '('  '5000'  ')'] 
__label__1 ['Map'  '<'  'Integer'  ' '  'Object'  '>'] 
__label__0 WeakSafeReadWriteLock strongReference 
__label__1 ['Exception'  'exception'] 
__label__1 ['this.thrown.equals'  '('  '``'  'File'  'must'  'exist'  "''"  ')'] 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` elasticsearch '' ) 
__label__1 ['floatBuffer.clear'  '('  ')'] 
__label__1 ['adapter.getArgumentResolvers'  '('  ')'] 
__label__0 new ServletException ( `` non-HTTP request or response '' , e ) 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/public_timeline.json'  "''"  ' '  'false'  ')'  ')'] 
__label__0 c.getPath ( ) == null & & getPath ( ) ! = null 
__label__0 `` ppc64 '' .equals ( arch ) || `` ppc64le '' .equals ( arch ) || `` aarch64 '' .equals ( arch ) 
__label__1 ['plugin.isEnabled'  '('  ')'] 
__label__1 ['generator.generateX509Certificate'  '('  'signedByKeyPair.getPrivate'  '('  ')'  ')'] 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/user_timeline.json'  "''"  ' '  'null'  ' '  'paging.asPostParameterList'  '('  ')'  ' '  'true'  ')'  ')'] 
__label__1 ['``'  'Content-Type'  "''"  '.equals'  '('  'name'  ')'] 
__label__1 ['redirectUri'  '=='  'null'] 
__label__0 StatBuckets.prettyUptimeStr ( secs ) 
__label__0 processor.open ( w , request , AtmosphereResponse.newInstance ( framework.getAtmosphereConfig ( ) , request , w ) ) 
__label__0 routes.InputTypesResource ( ) 
__label__1 ['result.expectedMessageCount'  '('  '3'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'freeSpace'  ':'  'No'  'StorageDirView'  'has'  'enough'  'capacity'  'of'  '{'  '}'  'bytes'  "''"  ' '  'availableBytes'  ')'] 
__label__0 javaClass.addNestedType ( ) .setPackagePrivate ( ) 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['logger.info'  '('  '``'  'Calimero'  'library'  'version'  '{'  '}'  "''"  ' '  'Settings.getLibraryVersion'  '('  ')'  ')'] 
__label__0 LOG.warn ( `` calculatedMaxSteps : { } for loadbalancer 's stochastic walk is larger than `` + `` maxSteps : { } . Hence load balancing may not work well . Setting parameter `` + `` \ '' hbase.master.balancer.stochastic.runMaxSteps\ '' to true can overcome this issue . `` + `` ( This config change does not require service restart ) '' , calculatedMaxSteps , maxSteps ) 
__label__0 topicRegistrations == null || topicRegistrations.isEmpty ( ) 
__label__0 Preconditions.checkNotNull ( timer , '' timer '' ) 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__0 checkArgument ( ! `` / '' .equals ( resourcePath ) , '' % s is the classpath root '' , resourcePath ) 
__label__1 ['obj.setContentEncoding'  '('  'Mimetypes.MIMETYPE_BINARY_OCTET_STREAM'  ')'] 
__label__0 this.traceHandlers.remove ( traceHandler ) 
__label__0 headerFilterStrategy.applyFilterToExternalHeaders ( entry.getKey ( ) , entry.getValue ( ) , camelExchange ) 
__label__0 ROOT_LOGGER.errorContextModuleNotFound ( consoleSlot == null ? `` main '' : consoleSlot ) 
__label__0 ( this.getExecContext ( ) .getLocalWork ( ) ! = null & & this.getExecContext ( ) .getLocalWork ( ) .getInputFileChangeSensitive ( ) ) & & mapJoinTables ! = null 
__label__1 ['new'  'DynamicAwareEntry'  '('  '``'  'https4'  ':'  '//localhost/test'  "''"  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['attribute.getDefinition'  '('  ')'  '.getAttributeMarshaller'  '('  ')'] 
__label__0 getUrl ( ) .getMethodPositiveParameter ( methodName , TIMEOUT_KEY , DEFAULT_TIMEOUT ) 
__label__0 configList == null || configList.size ( ) == 0 
__label__1 ['IOException.class'] 
__label__0 getTokenDisplayNames ( ) 
__label__0 this.thrown.expectMessage ( `` File must exist '' ) 
__label__0 logger.debug ( `` NODE { } : Retry timout : Advancing '' , node.getNodeId ( ) ) 
__label__0 handleSecurityPermissionEndpoints ( child , permConfig ) 
__label__1 ['RuntimeException.class'] 
__label__1 ['``'  'Deleting'  'existing'  'file'  ':'  '``'  '+'  'tempTarget'] 
__label__0 private final ExecutionHandler executionHandler ; 
__label__0 Thread.sleep ( 2000 ) 
__label__0 twitter4j.List.createListList ( get ( getApiBaseURL ( ) + V1 + user+ `` /lists.json ? cursor= '' + cursor , true ) ) 
__label__1 ['nodeEngine.getService'  '('  'LockService.SERVICE_NAME'  ')'] 
__label__1 ['!'  'mShowsDialog'] 
__label__0 bar.setResultWaitTime ( 3500 ) 
__label__0 new NetAddress ( resolvedHost , -1 , resolvedPort ) 
__label__1 ['serverService.getIncomingInterceptors'  '('  ')'] 
__label__1 ['JSError.make'  '('  'ModuleLoader.MODULE_CONFLICT'  ' '  "''"  'my/js.js'  "''"  ')'] 
__label__1 ['assertTrue'  '('  'latch.await'  '('  '5'  ' '  'TimeUnit.MINUTES'  ')'  ')'] 
__label__1 ['getPath'  '('  '``'  'InputPackageDeclarationDiffDirectoryAtSubpackage.java'  "''"  ')'] 
__label__1 ['USER_UFS_DELEGATION_ENABLED'  '('  'Name.USER_UFS_DELEGATION_ENABLED'  ' '  'false'  ')'] 
__label__1 ['cache.remove'  '('  'key'  ' '  'null'  ')'] 
__label__1 ['http2.setInitialStreamSendWindow'  '('  'initialStreamSendWindow'  ')'] 
__label__1 ['timeout'  '('  '1000'  ')'] 
__label__0 target == null || target.getNumFields ( ) < this.mappings.size ( ) + 1 
__label__1 ['GL20.glUniform1'  '('  'location'  ' '  'v'  ')'] 
__label__1 ['result.expectedMessageCount'  '('  '1'  ')'] 
__label__1 ['synchronized'  '('  'this'  ')'  '{'  'if'  '('  'transformed'  '!'  '='  'null'  ')'  '{'  'if'  '('  'transformed'  'instanceof'  'List'  ')'  '{'  '@'  'SuppressWarnings'  '('  '``'  'unchecked'  "''"  ')'  'List'  '<'  'T'  '>'  'casted='  '('  'List'  '<'  'T'  '>'  ')'  'transformed'  ';'  'return'  'casted'  ';'  '}'  'else'  '{'  'throw'  'new'  'InitializationTypeConflictException'  '('  'transformed.getClass'  '('  ')'  ')'  ';'  '}'  '}'  'else'  '{'  'return'  'data'  ';'  '}'  '}'] 
__label__0 defaultCometSupport ( defaultToBlocking ) 
__label__1 ['Calendar.getInstance'  '('  'JSON.defaultLocale'  ')'] 
__label__0 ( uptime - days ) * 24 
__label__0 new RefProperty ( modelName ) 
__label__0 writeMethod2.addScopedInterceptor ( NettyConstants.INTERCEPTOR_CHANNEL_PIPELINE_WRITE , NettyConstants.SCOPE_WRITE , ExecutionPolicy.BOUNDARY ) 
__label__0 ctx.sendUpstream ( e ) 
__label__1 ['status'  '('  ')'  '.isMovedTemporarily'  '('  ')'] 
__label__1 ['factory.getEmbdeddedServletContainer'  '('  ')'] 
__label__0 logger.trace ( `` Return Object { } now at size { } '' , b , count.getAndDecrement ( ) ) 
__label__1 ['path'  '('  '11'  ')'] 
__label__1 ['Bytes.toBytesBinary'  '('  'tableNameOrRegionName'  ')'] 
__label__0 dateOfBirth == null || dateOfBirth.getTime ( ) == null || dateOfBirth.getTime ( ) .getValue ( ) == null 
__label__0 mTestStream.getFlushedBytes ( ) 
__label__1 ['new'  'WebApplicationException'  '('  'serverError'  '('  'e'  ')'  ')'] 
__label__0 NONCONFORMING_LR_RULE ( 169 , '' rule < arg > is left recursive but does n't conform to a pattern ANTLR can handle '' , ErrorSeverity.ERROR ) 
__label__1 ['c.getDeclaredConstructors'  '('  ')'] 
__label__0 failureDesc.contains ( `` 14807 '' ) || failureDesc.contains ( `` 14883 '' ) || failureDesc.contains ( `` 13456 '' ) || failureDesc.contains ( `` 11340 '' ) 
__label__1 ['InputProcessor'  '['  ']'] 
__label__1 ['Thread.sleep'  '('  '50'  ')'] 
__label__1 ['InputProcessor'  '['  ']'] 
__label__1 ['connection.pexpire'  '('  'key'  ' '  'millisecondsTimestamp'  ')'] 
__label__1 ['new'  'RuntimeException'  '('  '``'  'Could'  'not'  'create'  'TypeInformation'  'for'  'type'  '``'  '+'  'data'  '['  '0'  ']'  '.getClass'  '('  ')'  '.getName'  '('  ')'  '+'  '``'  ';'  'please'  'specify'  'the'  'TypeInformation'  'manually'  'via'  '``'  '+'  '``'  'StreamExecutionEnvironment'  '#'  'fromElements'  '('  'Collection'  ' '  'TypeInformation'  ')'  "''"  ')'] 
__label__1 ['ObjectConverter.toBoolean'  '('  'scriptValue'  ')'] 
__label__0 instance.connect ( null , null , '' localhost '' , '' graylog2test '' , Integer.valueOf ( 27017 ) , '' false '' , null ) 
__label__1 ['ImplemetationMethodDescriptor'  'methodDescriptor'] 
__label__1 ['Exception'  'exception'] 
__label__1 ['new'  'Packet'  '('  'data'  ' '  'operation.getPartitionId'  '('  ')'  ' '  'serializationService.getPortableContext'  '('  ')'  ')'] 
__label__0 new PrestoException ( INVALID_CAST_ARGUMENT , '' Value can not be cast to date : `` + value.toStringUtf8 ( ) , e ) 
__label__1 ['public'  'DerivedBuilder'  'setScheduledExecutorService'  '('  'ScheduledExecutorService'  'reaper'  ')'  '{'  'configBuilder.setScheduledExecutorService'  '('  'reaper'  ')'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['assertEquals'  '('  'JavadocTagInfo.VERSION.getType'  '('  ')'  ' '  'JavadocTagInfo.Type.BLOCK'  ')'] 
__label__1 ['new'  'InputStreamReader'  '('  'in'  ')'] 
__label__0 from ( Constants.PARALLEL_LOANBROKER_URI ) .process ( new CreditScoreProcessor ( Constants.CREDITAGENCY_ADDRESS ) ) .multicast ( new BankResponseAggregationStrategy ( ) ) .parallelProcessing ( true ) 
__label__1 ['new'  'UnsupportedOperationException'  '('  '``'  'This'  'should'  'never'  'happen'  '.'  "''"  ')'] 
__label__0 Optional.fromNullable ( resourceManagementScheduler ) 
__label__1 ['3'  '<'  'buf.length'  '-'  'count'] 
__label__0 request.getContentType ( ) .startsWith ( `` application/x-www-form-urlencoded '' ) 
__label__0 new UnsupportedOperationException ( getClass ( ) .getName ( ) ) 
__label__1 ['configure'  '('  'COMPONENT'  ')'] 
__label__1 ['Collections.sort'  '('  'runningJobs'  ' '  'njec'  ')'] 
__label__1 ['CalciteTests.createMockSystemSchema'  '('  'druidSchema'  ' '  'walker'  ')'] 
__label__0 Configuration.getMs ( PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS ) 
__label__1 ['``'  'source'  "''"  '.equals'  '('  'key'  ')'  '||'  '``'  'target'  "''"  '.equals'  '('  'key'  ')'  '||'  '``'  'value'  "''"  '.equals'  '('  'key'  ')'  '||'  '``'  'label'  "''"  '.equals'  '('  'key'  ')'] 
__label__1 ['stopwatch.elapsedMillis'  '('  ')'] 
__label__0 hints.append ( LocalizationMessages.HINT_MSG ( error.getMessage ( ) ) ) 
__label__1 ['ProcedureTestingUtility.waitNoProcedureRunning'  '('  'master.getMasterProcedureExecutor'  '('  ')'  ')'] 
__label__1 ['GL20.glUniform3'  '('  'location'  ' '  'toIntBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '*'  '3'  ')'  ')'] 
__label__1 ['config.getStorageImpl'  '('  ')'] 
__label__0 / * * * Represents the formatter for log message which is used in UTs . Message format is : filePath : lineNo : columnNo : message . * @ author Andrei Selkin * / public class AuditEventUtFormatter implements AuditEventFormatter { / * * * Length of all separators . * / private static final int LENGTH_OF_ALL_SEPARATORS=4 ; @ Override public String format ( AuditEvent event ) { final String fileName=event.getFileName ( ) ; final String message=event.getMessage ( ) ; final int bufLen=event.getFileName ( ) .length ( ) + event.getMessage ( ) .length ( ) + LENGTH_OF_ALL_SEPARATORS ; final StringBuilder sb=new StringBuilder ( bufLen ) ; sb.append ( fileName ) .append ( ' : ' ) .append ( event.getLine ( ) ) ; if ( event.getColumn ( ) > 0 ) { sb.append ( ' : ' ) .append ( event.getColumn ( ) ) ; } sb.append ( `` : `` ) .append ( message ) ; return sb.toString ( ) ; } } 
__label__1 ['shouldBackup=false'] 
__label__1 ['new'  'SimpleAttributeDefinitionBuilder'  '('  'CommonAttributes.NAME'  ' '  'ModelType.STRING'  ' '  'false'  ')'  '.setXmlName'  '('  'Attribute.NAME.getLocalName'  '('  ')'  ')'  '.setAllowExpression'  '('  'true'  ')'] 
__label__0 assertEquals ( fc2 , fc ) 
__label__0 TEST_UTIL.getAdmin ( ) 
__label__1 ['getTokenNames'  '('  ')'] 
__label__1 ['BlockMasterClient'  'masterClientMock=PowerMockito.mock'  '('  'BlockMasterClient.class'  ')'  ';'] 
__label__0 prop.getParamValue ( ) 
__label__0 getExpressionTypesFromInput ( session , metadata , SQL_PARSER , INPUT_TYPES , ImmutableList.of ( translatedProjection ) , ImmutableList.of ( ) ) 
__label__0 deserialze ( parser , type , fieldName,0 ) 
__label__0 connection.search ( searchBase , filter , SearchScope.SUBTREE , groupIdAttribute , displayNameAttribute , '' dn '' , '' uid '' , '' userPrincipalName '' , '' mail '' , '' rfc822Mailbox '' , '' memberOf '' , '' isMemberOf '' ) 
__label__1 ['registry.put'  '('  '``'  'sessionStateListener'  "''"  ' '  'new'  'SessionStateListener'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'onStateChange'  '('  'SessionState'  'arg0'  ' '  'SessionState'  'arg1'  ' '  'Session'  'arg2'  ')'  '{'  '}'  '}'  ')'] 
__label__0 graphStack.push ( lockingTx ) 
__label__1 ['typeConverter.convertTo'  '('  'XMLStreamReader.class'  ' '  'stream'  ')'] 
__label__0 typeSerializer.getDeserializedType ( ) 
__label__1 ['AstUtils.hasLeastOneAnnotation'  '('  'classNode'  ' '  "''"  'Controller'  "''"  ' '  "''"  'EnableWebMvc'  "''"  ')'] 
__label__1 ['Long.valueOf'  '('  'args'  '['  '2'  ']'  ')'] 
__label__1 ['propResource.get'  '('  'BOOT_TIME'  ')'  '.asBoolean'  '('  ')'] 
__label__1 ['return'  'true'  ';'] 
__label__0 edge.setDirection ( type ) 
__label__1 ['columnType.equalsIgnoreCase'  '('  '``'  'date'  "''"  ')'] 
__label__1 ['getClientConfig'  '('  ')'  '.getAddressList'  '('  ')'] 
__label__0 topicRegistrations == null || topicRegistrations.isEmpty ( ) 
__label__1 ['ImmutableSet'  '<'  'ImplemetationMethodDescriptor'  '>'] 
__label__1 ['log.error'  '('  'error'  ' '  'cause'  ')'] 
__label__0 parent.incrementPrioritizableForTree0 ( amt , oldParent ) 
__label__0 getMockEndpoint ( `` mock : test.after.1 '' ) .expectedMessageCount ( 10 ) 
__label__0 LOGGER.debug ( `` no property for `` + type + `` , `` + format ) 
__label__1 ['UnderFileSystemUtils.deleteFileIfExists'  '('  'mUfs'  ' '  'mCheckpointPath'  ')'] 
__label__1 ['MathUtils.PI'  '*'  '('  'this.width'  '*'  'this.height'  ')'  '/'  '2'] 
__label__1 ['/'  '*'  '*'  '*'  '@'  'see'  'ConceptService'  '#'  'getCountOfConceptReferenceTerms'  '('  'String'  ' '  'ConceptSource'  ' '  'boolean'  ')'  '*'  '/'  'public'  'Integer'  'getCountOfConceptReferenceTerms'  '('  'String'  'query'  ' '  'ConceptSource'  'conceptSource'  ' '  'boolean'  'includeRetired'  ')'  'throws'  'DAOException'  ';'] 
__label__0 prevNerEndIndex ! = ( start - 1 ) & & nextNerStartIndex ! = end 
__label__0 ObjectHelper.isNotEmpty ( configuration.getClusterService ( ) ) 
__label__0 HttpServletResponse.class.cast ( response ) .sendError ( 501 , '' Websocket protocol not supported '' ) 
__label__0 util.getDataTestDirOnTestFS ( table ) 
__label__1 ['new'  'WordToSentenceProcessor'  '<'  'IN'  '>'  '('  ')'] 
__label__1 ['assertFalse'  '('  'predicate.apply'  '('  'pickleEvent'  ')'  ')'] 
__label__0 historicState ( item , timestamp , serviceName ) 
__label__0 log.debug ( `` Error while closing command context '' , exception ) 
__label__1 ['('  '('  'StringLiteral'  ')'  'literal'  ')'  '.getSlice'  '('  ')'] 
__label__0 Arrays.asList ( `` Int '' , '' Float '' , '' Double '' , '' Bool '' , '' Void '' , '' String '' , '' Character '' , '' AnyObject '' ) 
__label__1 ['getTimeout'  '('  ')'] 
__label__1 ['log.error'  '('  '``'  'Multiple'  'nodes'  'are'  'set'  ' '  'but'  'execute'  '('  ')'  'was'  'called'  '.'  'This'  'is'  'most'  'likely'  'a'  'bug'  'and'  'you'  'meant'  'to'  'call'  'executeOnAll'  '('  ')'  '!'  "''"  ')'] 
__label__1 ['this'  '=='  'OtiOnly'] 
__label__0 executeCommand ( `` EXPLAIN OPTIONAL MATCH ( n ) RETURN n ; '' , '' No data returned '' ) 
__label__0 GL20.glUniform2fv ( location , v ) 
__label__0 request.getPathInfo ( ) 
__label__0 element.getLocalName ( ) 
__label__0 DaggerAutoFactoryProcessorComponent.builder ( ) 
__label__0 assertEquals ( 12 , visitor.getConditions ( ) .size ( ) ) 
__label__0 config.getBroadcasterFactory ( ) .lookup ( m.broadcaster ( ) , path , true ) 
__label__0 lookup= '' java : /queue/myAwesomeQueue '' 
__label__0 cacheScaled5.setColors ( red ) 
__label__1 ['logger.error'  '('  '``'  "''"  ' '  'ex'  ')'] 
__label__1 ['targetActor.addListener'  '('  'listener'  ')'] 
__label__1 ['data.limit'  '('  ')'] 
__label__1 ['DiagnosticType.disabled'  '('  '``'  'JSC_MISPLACED_TYPE_ANNOTATION'  "''"  ' '  "''"  'Type'  'annotations'  'are'  'not'  'allowed'  'here.'  '``'  '+'  '``'  'Are'  'you'  'missing'  'parentheses'  '?'  "''"  ')'] 
__label__1 ['ProcedureTestingUtility.waitNoProcedureRunning'  '('  'master.getMasterProcedureExecutor'  '('  ')'  ')'] 
__label__0 new StringBuilder ( 734 ) 
__label__0 LOG.debug ( `` Failed to get mount information : { } '' , e.getMessage ( ) ) 
__label__1 ['processInstance.getId'  '('  ')'] 
__label__1 ['coreThreads.asString'  '('  ')'] 
__label__1 ['LoopContextStepRetrieval'  'retrievalToAdapt'] 
__label__1 ['new'  'IllegalStateException'  '('  ')'] 
__label__1 ['DataStream'  '<'  'OUT'  '>'] 
__label__0 deployOneTaskTestProcess ( ) 
__label__1 ['Bytes.toBytesBinary'  '('  'tableNameOrRegionName'  ')'] 
__label__0 currentPath == null || currentPath.isEmpty ( ) 
__label__0 ( Integer ) strategy.getOrNull ( third ) 
__label__1 ['logger.debug'  '('  '``'  'Trying'  'to'  'map'  '{'  '}'  'to'  '{'  '}'  "''"  ' '  't'  ' '  'path'  ')'] 
__label__1 ['new'  'ServletException'  '('  '``'  'non-HTTP'  'request'  'or'  'response'  "''"  ')'] 
__label__0 authManager.refresh ( conf , new HBasePolicyProvider ( ) ) 
__label__0 annotations.remove ( node ) 
__label__1 ['sExecutorService.shutdown'  '('  ')'] 
__label__0 war.setWebXML ( SimpleWebTestCase.class.getPackage ( ) , '' web.xml '' ) 
__label__1 ['inputPath=args'  '['  '1'  ']'] 
__label__0 Arrays.asList ( STANFORD_TOKENIZE , STANFORD_SSPLIT , STANFORD_POS , STANFORD_LEMMA , STANFORD_NER ) 
__label__0 cacheConfig.isUseCache ( ) 
__label__1 ['new'  'Duration'  '('  '2'  ' '  'SECONDS'  ')'] 
__label__1 ['littleEndian.order'  '('  ')'] 
__label__1 ['new'  'Duration'  '('  '2'  ' '  'SECONDS'  ')'] 
__label__0 ObjectConverter.toBool ( scriptValue ) 
__label__0 c.getDomain ( ) == null & & getDomain ( ) ! = null 
__label__1 ['op.getIDLName'  '('  ')'] 
__label__1 ['JavaAssistUtils.getParameterType'  '('  'parameterTypes'  ')'] 
__label__1 ['ImmutableSortedSet.of'  '('  '``'  'a'  "''"  ' '  "''"  'abbr'  "''"  ' '  "''"  'acronym'  "''"  ' '  "''"  'address'  "''"  ' '  "''"  'area'  "''"  ' '  "''"  'b'  "''"  ' '  "''"  'bdo'  "''"  ' '  "''"  'big'  "''"  ' '  "''"  'blockquote'  "''"  ' '  "''"  'br'  "''"  ' '  "''"  'caption'  "''"  ' '  "''"  'cite'  "''"  ' '  "''"  'code'  "''"  ' '  "''"  'colgroup'  "''"  ' '  "''"  'dd'  "''"  ' '  "''"  'del'  "''"  ' '  "''"  'div'  "''"  ' '  "''"  'dfn'  "''"  ' '  "''"  'dl'  "''"  ' '  "''"  'dt'  "''"  ' '  "''"  'em'  "''"  ' '  "''"  'fieldset'  "''"  ' '  "''"  'font'  "''"  ' '  "''"  'h1'  "''"  ' '  "''"  'h2'  "''"  ' '  "''"  'h3'  "''"  ' '  "''"  'h4'  "''"  ' '  "''"  'h5'  "''"  ' '  "''"  'h6'  "''"  ' '  "''"  'hr'  "''"  ' '  "''"  'i'  "''"  ' '  "''"  'img'  "''"  ' '  "''"  'ins'  "''"  ' '  "''"  'kbd'  "''"  ' '  "''"  'li'  "''"  ' '  "''"  'ol'  "''"  ' '  "''"  'p'  "''"  ' '  "''"  'pre'  "''"  ' '  "''"  'q'  "''"  ' '  "''"  'samp'  "''"  ' '  "''"  'small'  "''"  ' '  "''"  'span'  "''"  ' '  "''"  'strong'  "''"  ' '  "''"  'style'  "''"  ' '  "''"  'sub'  "''"  ' '  "''"  'sup'  "''"  ' '  "''"  'table'  "''"  ' '  "''"  'tbody'  "''"  ' '  "''"  'td'  "''"  ' '  "''"  'tfoot'  "''"  ' '  "''"  'th'  "''"  ' '  "''"  'thead'  "''"  ' '  "''"  'tr'  "''"  ' '  "''"  'tt'  "''"  ' '  "''"  'ul'  "''"  ')'] 
__label__1 ['timeout'  '('  '1000'  ')'] 
__label__0 lockMode == InodeTree.LockMode.READ 
__label__0 logger.debug ( `` gave up waiting for query reply from device { } '' , m_address ) 
__label__0 QuotaCache.this.tableQuotaCache.containsKey ( table ) 
__label__1 ['assertTrue'  '('  'isBufferCopyNeededForWrite'  '('  'byteBuf.asReadOnly'  '('  ')'  ')'  ')'] 
__label__1 ['getNonCompilablePath'  '('  '``'  'InputDefaultConfig.java'  "''"  ')'] 
__label__1 ['getData'  '('  ')'  '^'  '0x8'] 
__label__1 ['System.currentTimeMillis'  '('  ')'  '+'  'start'] 
__label__1 ['config.getMaxRedirects'  '('  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 UndertowWebServer.class 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweets_of_me.json'  "''"  ' '  'null'  ' '  'true'  ')'  ')'] 
__label__0 LOG.warn ( `` Failed to freeSpace : No StorageDirView has enough capacity of { } bytes '' , availableBytes ) 
__label__1 ['from.getClass'  '('  ')'] 
__label__1 ['serverSocket'  '=='  'null'] 
__label__1 ['public'  'Integer'  'getRequestRequiredAcks'  '('  ')'  '{'  'return'  'configuration.getRequestRequiredAcks'  '('  ')'  ';'  '}'] 
__label__1 ['inputFuture.cancel'  '('  'mayInterruptIfRunning'  ')'] 
__label__1 ['logger.info'  '('  '``'  'Skipped'  'renaming'  '``'  '+'  'instancesSkipped'  '+'  '``'  'invalidated'  '``'  '+'  '``'  'properties'  ' '  '``'  '+'  'propsSkipped+'  '``'  'instances'  'of'  'properties'  '``'  '+'  '``'  'that'  'were'  'skipped'  'for'  'specific'  'types'  'and'  '``'  '+'  'singleTypeProps+'  '``'  'properties'  'that'  'were'  'referenced'  'from'  'only'  'one'  'type'  '.'  "''"  ')'] 
__label__0 ugi.checkTGTAndReloginFromKeytab ( ) 
__label__1 ['startServer'  '('  ')'] 
__label__0 stopwatch.elapsed ( MILLISECONDS ) 
__label__0 context.getLogger ( ) .logAttributeWarning ( address , MESSAGES.invalidJSFSlotValue ( slot.asString ( ) ) , SLOT_ATTRIBUTE_NAME ) 
__label__1 ['WORKER_SESSION_TIMEOUT_MS'  '('  'Name.WORKER_SESSION_TIMEOUT_MS 10000'  ')'] 
__label__0 public Integer getAutoCommitInterval ( ) { return this.autoCommitInterval ; } 
__label__1 ['mapEntry.getValue'  '('  ')'  '.isSame'  '('  'source'  ')'] 
__label__0 public Builder setScheduledExecutorService ( ScheduledExecutorService reaper ) { configBuilder.setScheduledExecutorService ( reaper ) ; return this ; } 
__label__1 ['assertTrue'  '('  'model.getUniqueItems'  '('  ')'  ')'] 
__label__0 removeBlock ( sessionId , blockId , BlockStoreLocation.anyTier ( ) ) 
__label__0 database.FindProduct ( node.getManufacturer ( ) , node.getDeviceType ( ) , node.getDeviceId ( ) , node.getApplicationVersion ( ) ) 
__label__1 ['@'  'IntMethodAnnotation'  '('  '42'  ')'] 
__label__0 Arrays.asList ( `` bash '' , command ) 
__label__1 ['connection.remote'  '('  ')'  '.nextStreamId'  '('  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__0 map.lock ( key,1 , TimeUnit.SECONDS ) 
__label__1 ['cal.set'  '('  '1900 1 1'  ' '  'hour'  ' '  'minute'  ' '  'second'  ')'] 
__label__0 ServiceLoader.load ( WorkerFactory.class , WorkerFactory.class.getClassLoader ( ) ) 
__label__0 getCamelContext ( ) .getTypeConverter ( ) .convertTo ( int.class , timeout ) 
__label__1 ['reg.put'  '('  '``'  'localhost'  ':'  "''"  '+'  'port'  ' '  'env'  ')'] 
__label__1 ['Short.valueOf'  '('  'value.toString'  '('  ')'  ')'] 
__label__0 mListView.getListChildAt ( index ) 
__label__0 clusterProperties.getMaxRedirects ( ) 
__label__0 new CancelJobSupervisorOperation ( name , jobId ) 
__label__0 fieldDeser.getPropertyValueDirect ( currentObject ) 
__label__1 ['/'  '*'  '*'  '*'  'Change'  'the'  'permission'  'of'  'a'  'file'  'or'  'directory'  'specified'  'by'  'args'  '.'  '*'  '/'  'public'  'final'  'class'  'ChmodCommand'  'extends'  'AbstractACLCommand'  '{'  'public'  'ChmodCommand'  '('  'TachyonConf'  'conf'  ' '  'TachyonFileSystem'  'tfs'  ')'  '{'  'super'  '('  'conf'  ' '  'tfs'  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'getCommandName'  '('  ')'  '{'  'return'  '``'  'chmod'  "''"  ';'  '}'  '@'  'Override'  'protected'  'int'  'getNumOfArgs'  '('  ')'  '{'  'return'  '2'  ';'  '}'  '@'  'Override'  'public'  'void'  'run'  '('  'String'  '...'  'args'  ')'  'throws'  'IOException'  '{'  'String'  'modeStr=args'  '['  '0'  ']'  ';'  'TachyonURI'  'path=new'  'TachyonURI'  '('  'args'  '['  '1'  ']'  ')'  ';'  'chmod'  '('  'path'  ' '  'modeStr'  ' '  'false'  ')'  ';'  '}'  '@'  'Override'  'public'  'String'  'getUsage'  '('  ')'  '{'  'return'  '``'  'chmod'  '<'  'mode'  '>'  '<'  'path'  '>'  "''"  ';'  '}'  '}'] 
__label__0 conceptAnswer.getAnswerConcept ( ) 
__label__0 ReferenceCountUtil.release ( holder ) 
__label__1 ['redeliveryDelay'  '>'  'maximumRedeliveryDelay'] 
__label__0 Preconditions.checkNotNull ( timer , '' timer '' ) 
__label__0 conf.getRestBaseURL ( ) 
__label__1 ['logger.info'  '('  '``'  'Collapsed'  '``'  '+'  'numRenamedPropertyNames'  '+'  '``'  'properties'  'into'  '``'  '+'  'numNewPropertyNames+'  '``'  'and'  'skipped'  'renaming'  '``'  '+'  'numSkippedPropertyNames+'  '``'  'properties'  '.'  "''"  ')'] 
__label__0 GL20.glUniform3iv ( location , toIntBuffer ( v , offset , count * 3 ) ) 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS'  ')'] 
__label__1 ['getPreferences'  '('  ')'  '.setProperty'  '('  'key'  ' '  'value'  ')'] 
__label__1 ['context.startRoute'  '('  '``'  'consumer'  "''"  ')'] 
__label__0 out.writeData ( function ) 
__label__1 ['GL.glGenTexturesEXT'  '('  'n'  ' '  'toBuffer'  '('  'textures'  ' '  'offset'  ')'  ' 0'  ')'] 
__label__0 broadcasterFactoryClassName ! = null & & broadcasterFactory == null 
__label__0 currentStage ! = NodeStage.DONE & & sendMessage ( ) == false 
__label__1 ['attributes'  '=='  'null'] 
__label__1 ['uri.toString'  '('  ')'  '.equalsIgnoreCase'  '('  'future.getURI'  '('  ')'  '.toString'  '('  ')'  ')'] 
__label__0 Cli.buildCli ( `` presto '' , Runnable.class ) .withDefaultCommand ( Server.class ) .withCommand ( Server.class ) .withCommand ( Execute.class ) .withCommand ( Console.class ) .withCommand ( Help.class ) 
__label__1 ['new'  'Duration'  '('  '2'  ' '  'SECONDS'  ')'] 
__label__1 ['option'  '=='  'JOptionPane.CANCEL_OPTION'] 
__label__1 ['logger.info'  '('  '``'  'Expanding'  'Jquery'  'Aliases'  "''"  ')'] 
__label__1 ['SingleServerInventoryProvider.class'] 
__label__1 ['jarName.endsWith'  '('  '``'  '.jar'  "''"  ')'] 
__label__1 ['TimeUnit.SECONDS.toNanos'  '('  'timeoutSeconds'  ')'] 
__label__1 ['planNode.getPlanNodeCpuTime'  '('  ')'] 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'Cell'  'clonedBaseCell='  '('  '('  'ExtendedCell'  ')'  'this.cell'  ')'  '.deepClone'  '('  ')'  ';'  'if'  '('  'clonedBaseCell'  'instanceof'  'ByteBufferCell'  ')'  '{'  'return'  'new'  'TagRewriteByteBufferCell'  '('  '('  'ByteBufferCell'  ')'  'clonedBaseCell'  ' '  'this.tags'  ')'  ';'  '}'  'return'  'new'  'TagRewriteCell'  '('  'clonedBaseCell'  ' '  'this.tags'  ')'  ';'  '}'] 
__label__0 factory.get ( fBodyWildcard , NO_ANNOTATIONS , retrofit ) 
__label__1 ['Short.valueOf'  '('  'value.toString'  '('  ')'  ')'] 
__label__0 cacheScaled5.setColors ( red ) 
__label__0 new CamelExchangeException ( `` JettyClient failed with state `` + exchangeState , exchange , exchange.getException ( ) ) 
__label__1 ['error'  '('  '``'  'Unable'  'to'  'connect'  'due'  'to'  'unrecognised'  'server'  'certificate'  "''"  ')'] 
__label__1 ['public'  'DerivedBuilder'  'setProxyPort'  '('  'int'  'port'  ')'  '{'  'this.proxyPort=port'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['nodeColumn.getIndex'  '('  ')'] 
__label__0 Integer.parseInt ( quantifier ) 
__label__1 ['input.size'  '('  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__0 Thread.sleep ( 1000 ) 
__label__0 logger.trace ( `` Creating Object { } '' , count.getAndIncrement ( ) ) 
__label__0 / * * * Represents black * / BLACK ( ' 0',0x00 ) 
__label__0 assertThat ( `` Unexpected error : \n '' + cli.getErrorOutput ( ) , cli.getErrorOutput ( ) .length ( ) , equalTo ( 0 ) ) 
__label__1 ['context.getStreamCachingStrategy'  '('  ')'  '.getSpoolChiper'  '('  ')'] 
__label__0 LOG.warn ( `` Block of ID `` + getCurrentBlockId ( ) + `` could not be cached into Tachyon '' ) 
__label__1 ['/'  '*'  '*'  '*'  'Exception'  'thrown'  'if'  'the'  'session-type'  'of'  'a'  'session'  'bean'  'is'  'not'  'specified'  '*'  '/'  '@'  'Message'  '('  'id=14551'  ' '  'value='  "''"  '<'  'session-type'  '>'  'not'  'specified'  'for'  'ejb'  '%'  's'  '.'  'This'  'must'  'be'  'present'  'in'  'ejb-jar.xml'  "''"  ')'  'IllegalStateException'  'sessionTypeNotSpecified'  '('  'String'  'bean'  ')'  ';'] 
__label__0 refreshableViewWrapper.addView ( newEmptyView ) 
__label__1 ['IRON_SWORD'  '('  '267 1 59'  ')'] 
__label__0 reg.bind ( `` localhost : '' + port , env ) 
__label__0 req.getServletPath ( ) 
__label__0 stats.getLastAccessTime ( ) > = lastAccessTime 
__label__1 ['new'  'PooledCFAttribute'  '('  'LOAD_BALANCING_CLASS_NAME'  ' '  'LOAD_BALANCE_POLICY_CLASS_NAME_METHOD'  ')'] 
__label__1 ['GL15.glGetBufferParameter'  '('  'target'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 AstUtils.hasAtLeastOneAnnotation ( classNode , '' Controller '' , '' EnableWebMvc '' ) 
__label__0 InternalAttribute attribute= ( InternalAttribute ) o ; 
__label__0 Assert.notNull ( artifactId , '' ArtifactId must not be null '' ) 
__label__1 ['testWarning'  '('  'js'  ' '  'VariableReferenceCheck.REDECLARED_VARIABLE'  ')'] 
__label__0 checkArgument ( child.parent == null , '' Can not add already-owned child node.\nChild : % s\nExisting parent : % s\nNew parent : % s '' , child , parent , this ) 
__label__0 new Interval ( timeList.get ( 0 ) .getValue ( ) .getMinTime ( ) .getMillis ( ) , timeList.get ( 0 ) .getValue ( ) .getMaxTime ( ) .getMillis ( ) , ISOChronology.getInstanceUTC ( ) ) 
__label__0 jedis.sadd ( getSetKey ( task ) , request.getUrl ( ) ) == 0 
__label__0 deployment.addServletContainerInitializer ( new ServletContainerInitializerInfo ( Initializer.class , new ImmediateInstanceFactory < ServletContainerInitializer > ( initializer ) , NO_CLASSES ) ) 
__label__1 ['knownType'  '!'  '='  'null'] 
__label__1 ['new'  'PeepholeSubstituteAlternateSyntax'  '('  'true'  ')'] 
__label__0 LOGGER.log ( Level.SEVERE , LocalizationMessages.ERROR_COMMITTING_OUTPUT_STREAM ( ) , e ) 
__label__0 initialCapacity > 1 < < 30 
__label__1 ['n.intValue'  '('  ')'] 
__label__1 ['ImmutableSet.of'  '('  '``'  'testStringRepresentation'  "''"  ')'] 
__label__1 ['GL20.glGetProgram'  '('  'program'  ' '  'pname'  ' '  'params'  ')'] 
__label__0 new GenericAggregationFunction ( NAME , inputTypes , intermediateType , BIGINT , true , false , factory ) 
__label__0 / * * * Loads the import control file from a file . * @ param uri the uri of the file to load . * @ return the root { @ link PkgControl } object . * @ throws CheckstyleException if an error occurs . * / public static ImportControl load ( final URI uri ) throws CheckstyleException { final InputStream inputStream ; try { inputStream=uri.toURL ( ) .openStream ( ) ; } catch ( final MalformedURLException ex ) { throw new CheckstyleException ( `` syntax error in url `` + uri , ex ) ; } catch ( final IOException ex ) { throw new CheckstyleException ( `` unable to find `` + uri , ex ) ; } final InputSource source=new InputSource ( inputStream ) ; return load ( source , uri ) ; } 
__label__1 ['message'  '+'  'END'] 
__label__1 ['NoObjectType'  'noResolvedType=new'  'NoResolvedType'  '('  'this'  ')'  ';'] 
__label__1 ['node.getNodeName'  '('  ')'] 
__label__0 Long.parseLong ( args [ 2 ] ) 
__label__0 conf.getRestBaseURL ( ) 
__label__1 ['TimeUnit.SECONDS.toNanos'  '('  '5'  ')'] 
__label__0 GL20.glGetActiveUniform ( program , index,256 , size , typeTmp ) 
__label__0 CalciteTests.createMockSystemSchema ( druidSchema , walker , plannerConfig ) 
__label__0 new BindException ( newConcept , '' concept '' ) 
__label__1 ['new'  'AuthenticationException'  '('  '``'  'Error'  'validating'  'LDAP'  'user'  "''"  ')'] 
__label__0 Context.getProviderService ( ) .getAllProviderAttributeTypes ( true ) 
__label__1 ['cacheDirectory.exists'  '('  ')'] 
__label__1 ['simple.getFromSentDate'  '('  ')'] 
__label__0 isStarted ( ) || isStarting ( ) 
__label__0 globalSecurityDomain ! = null & & ! globalSecurityDomain.isEmpty ( ) 
__label__1 ['analysis.getTypeWithCoercions'  '('  'aggregate'  ')'] 
__label__1 ['it.next'  '('  ')'  '.hasFinished'  '('  ')'] 
__label__1 ['maxSize'  '>'  '('  'used'  '/'  '1024'  '/'  '1024'  ')'] 
__label__1 ['capacity'  '>'  '1'  '<'  '<'  '30'] 
__label__1 ['field.getFieldName'  '('  ')'  '.equals'  '('  's'  ')'] 
__label__0 Calendar.getInstance ( JSON.defaultTimeZone , JSON.defaultLocale ) 
__label__1 ['engine.execute'  '('  'query'  ')'  '.toString'  '('  ')'] 
__label__1 ['final'  'PkgControl'  'root=ImportControlLoader.load'  '('  'new'  'URI'  '('  '``'  'aaa'  ':'  '//'  "''"  '+'  'getPath'  '('  '``'  'import-control_complete.xml'  "''"  ')'  ')'  ')'  ';'] 
__label__1 ['PostgreSQLConnector.class'] 
__label__0 response.addHeader ( WWW_AUTHENTICATE , value ) 
__label__1 ['group'  '!'  '='  'null'] 
__label__1 ['logger.debug'  '('  '``'  'rapidRefreshFutureEnd'  'stopping'  "''"  ')'] 
__label__1 ['getLock'  '('  'address'  ')'] 
__label__0 Bytes.toBytes ( regionname ) 
__label__1 ['@'  'UriParam'  '('  'label='  "''"  'producer'  "''"  ' '  'defaultValue='  "''"  '1'  "''"  ')'  'private'  'Integer'  'requestRequiredAcks=1'  ';'] 
__label__1 ['1'  '<'  '<'  '20'] 
__label__1 ['implemetationMethodDescriptors.build'  '('  ')'] 
__label__1 ['request.getServletPath'  '('  ')'] 
__label__1 ['cache5.setColor'  '('  'red'  ')'] 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['putInternal'  '('  'mapService.getMapServiceContext'  '('  ')'  '.toData'  '('  'entry.getKey'  '('  ')'  ' '  'partitionStrategy'  ')'  ' '  'mapService.getMapServiceContext'  '('  ')'  '.toData'  '('  'entry.getValue'  '('  ')'  ')'  ' '  '-1'  ' '  'TimeUnit.MILLISECONDS'  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Creating'  'short'  'circuit'  'output'  'stream'  'for'  'block'  '{'  '}'  '@'  '{'  '}'  "''"  ' '  'blockId'  ' '  'address'  ')'] 
__label__0 hashSymbols.values ( ) 
__label__1 ['assertThat'  '('  'page1.pagination'  '('  ')'  '.getGlobalTotal'  '('  ')'  ')'  '.isEqualTo'  '('  '7'  ')'] 
__label__1 ['DiagnosticType.warning'  '('  '``'  'JSC_REDECLARED_VARIABLE'  "''"  ' '  "''"  'Redeclared'  'variable'  ':'  '{'  '0'  '}'  "''"  ')'] 
__label__0 invocation.addAttachments ( context ) 
__label__1 ['fullName.split'  '('  '``'  '['  '/'  '@'  ']'  "''"  ' 2'  ')'] 
__label__0 stopwatch.elapsed ( MILLISECONDS ) 
__label__1 ['createRecord'  '('  'value'  ' '  'expiryTime'  ')'] 
__label__1 ['getClientConfig'  '('  ')'  '.getAddressList'  '('  ')'] 
__label__1 ['logger.debug'  '('  '``'  'Requsting'  'URL'  '{'  '}'  "''"  ' '  'url'  ')'] 
__label__1 ['new'  'LinkedHashMap'  '<'  'String'  ' '  'Object'  '>'  '('  'whileListMaxSize 0.75f'  ' '  'true'  ')'] 
__label__0 DiagnosticType.warning ( `` JSC_MISPLACED_TYPE_ANNOTATION '' , '' Type annotations are not allowed here. `` + `` Are you missing parentheses ? '' ) 
__label__0 public class XpathRegressionNestedIfDepthTest extends XpathTestSupport { @ Test public void testCorrect ( ) throws Exception { final String checkName=NestedIfDepthCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionNestedIfDepth.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( NestedIfDepthCheck.class ) ; final String [ ] expectedViolation= { `` 10:17 : `` + getCheckMessage ( NestedIfDepthCheck.class , NestedIfDepthCheck.MSG_KEY,2,1 ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionNestedIfDepth ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='test ' ] /SLIST/LITERAL_IF/SLIST/LITERAL_IF/SLIST/LITERAL_IF '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['SSOBaseCase.executeFormAuthSingleSignOnTest'  '('  'baseURLNoAuth'  ' '  'baseURLNoAuth'  ' '  'log'  ')'] 
__label__0 `` Segment initialized with too large address : `` + offHeapAddress + `` ; Max allowed address is `` + ( Long.MAX_VALUE - Integer.MAX_VALUE - 1 ) 
__label__0 public abstract class AbstractHikariConfig implements HikariConfigMXBean { private static final Logger LOGGER=LoggerFactory.getLogger ( HikariConfig.class ) ; private static final long CONNECTION_TIMEOUT=TimeUnit.SECONDS.toMillis ( 30 ) ; private static final long VALIDATION_TIMEOUT=TimeUnit.SECONDS.toMillis ( 5 ) ; private static final long IDLE_TIMEOUT=TimeUnit.MINUTES.toMillis ( 10 ) ; private static final long MAX_LIFETIME=TimeUnit.MINUTES.toMillis ( 30 ) ; private static int poolNumber ; private static boolean unitTest ; private volatile long connectionTimeout ; private volatile long validationTimeout ; private volatile long idleTimeout ; private volatile long leakDetectionThreshold ; private volatile long maxLifetime ; private volatile int maxPoolSize ; private volatile int minIdle ; private String catalog ; private String connectionCustomizerClassName ; private String connectionInitSql ; private String connectionTestQuery ; private String dataSourceClassName ; private String dataSourceJndiName ; private String driverClassName ; private String jdbcUrl ; private String password ; private String poolName ; private String transactionIsolationName ; private String username ; private boolean isAutoCommit ; private boolean isReadOnly ; private boolean isInitializationFailFast ; private boolean isIsolateInternalQueries ; private boolean isRegisterMbeans ; private boolean isAllowPoolSuspension ; private DataSource dataSource ; private Properties dataSourceProperties ; private IConnectionCustomizer customizer ; private ThreadFactory threadFactory ; private Object metricRegistry ; private Object healthCheckRegistry ; private Properties healthCheckProperties ; / * * * Default constructor * / public AbstractHikariConfig ( ) { dataSourceProperties=new Properties ( ) ; healthCheckProperties=new Properties ( ) ; connectionTimeout=CONNECTION_TIMEOUT ; validationTimeout=VALIDATION_TIMEOUT ; idleTimeout=IDLE_TIMEOUT ; isAutoCommit=true ; isInitializationFailFast=true ; minIdle=-1 ; maxPoolSize=10 ; maxLifetime=MAX_LIFETIME ; customizer=new IConnectionCustomizer ( ) { @ Override public void customize ( Connection connection ) throws SQLException { } } ; String systemProp=System.getProperty ( `` hikaricp.configurationFile '' ) ; if ( systemProp ! = null ) { loadProperties ( systemProp ) ; } } / * * * Construct a HikariConfig from the specified properties object . * @ param properties the name of the property file * / public AbstractHikariConfig ( Properties properties ) { this ( ) ; PropertyBeanSetter.setTargetFromProperties ( this , properties ) ; } / * * * Construct a HikariConfig from the specified property file name . < code > propertyFileName < /code > will first be treated as a path in the file-system , and if that fails the ClassLoader.getResourceAsStream ( propertyFileName ) will be tried . * @ param propertyFileName the name of the property file * / public AbstractHikariConfig ( String propertyFileName ) { this ( ) ; loadProperties ( propertyFileName ) ; } / * * * Get the default catalog name to be set on connections . * @ return the default catalog name * / public String getCatalog ( ) { return catalog ; } / * * * Set the default catalog name to be set on connections . * @ param catalog the catalog name , or null * / public void setCatalog ( String catalog ) { this.catalog=catalog ; } / * * * Get the name of the connection customizer class to instantiate and execute on all new connections . * @ return the name of the customizer class , or null * / @ Deprecated public String getConnectionCustomizerClassName ( ) { return connectionCustomizerClassName ; } / * * * Set the name of the connection customizer class to instantiate and execute on all new connections . * @ param connectionCustomizerClassName the name of the customizer class * / @ Deprecated public void setConnectionCustomizerClassName ( String connectionCustomizerClassName ) { this.connectionCustomizerClassName=connectionCustomizerClassName ; LOGGER.warn ( `` The connectionCustomizerClassName property has been deprecated and may be removed in a future release '' ) ; } / * * * Get the customizer instance specified by the user . * @ return an instance of IConnectionCustomizer * / @ Deprecated public IConnectionCustomizer getConnectionCustomizer ( ) { return customizer ; } / * * * Set the connection customizer to be used by the pool . * @ param customizer an instance of IConnectionCustomizer * / @ Deprecated public void setConnectionCustomizer ( IConnectionCustomizer customizer ) { this.customizer=customizer ; LOGGER.warn ( `` The connectionCustomizer property has been deprecated and may be removed in a future release '' ) ; } / * * * Get the SQL query to be executed to test the validity of connections . * @ return the SQL query string , or null * / public String getConnectionTestQuery ( ) { return connectionTestQuery ; } / * * * Set the SQL query to be executed to test the validity of connections . Using the JDBC4 < code > Connection.isValid ( ) < /code > method to test connection validity can be more efficient on some databases and is recommended . See { @ link HikariConfig # setJdbc4ConnectionTest ( boolean ) } . * @ param connectionTestQuery a SQL query string * / public void setConnectionTestQuery ( String connectionTestQuery ) { this.connectionTestQuery=connectionTestQuery ; } / * * * Get the SQL string that will be executed on all new connections when they are created , before they are added to the pool . * @ return the SQL to execute on new connections , or null * / public String getConnectionInitSql ( ) { return connectionInitSql ; } / * * * Set the SQL string that will be executed on all new connections when they are created , before they are added to the pool . If this query fails , it will be treated as a failed connection attempt . * @ param connectionInitSql the SQL to execute on new connections * / public void setConnectionInitSql ( String connectionInitSql ) { this.connectionInitSql=connectionInitSql ; } / * * * { @ inheritDoc } * / @ Override public long getConnectionTimeout ( ) { return connectionTimeout ; } / * * * { @ inheritDoc } * / @ Override public void setConnectionTimeout ( long connectionTimeoutMs ) { if ( connectionTimeoutMs == 0 ) { this.connectionTimeout=Integer.MAX_VALUE ; } else if ( connectionTimeoutMs < 1000 ) { throw new IllegalArgumentException ( `` connectionTimeout can not be less than 1000ms '' ) ; } else { this.connectionTimeout=connectionTimeoutMs ; } } / * * * { @ inheritDoc } * / @ Override public long getValidationTimeout ( ) { return validationTimeout ; } / * * * { @ inheritDoc } * / @ Override public void setValidationTimeout ( long validationTimeoutMs ) { if ( validationTimeoutMs < 1000 ) { throw new IllegalArgumentException ( `` validationTimeout can not be less than 1000ms '' ) ; } else { this.validationTimeout=validationTimeoutMs ; } } / * * * Get the { @ link DataSource } that has been explicitly specified to be wrapped by thepool . * @ return the { @ link DataSource } instance , or null * / public DataSource getDataSource ( ) { return dataSource ; } / * * * Set a { @ link DataSource } for the pool to explicitly wrap . This setter is notavailable through property file based initialization . * @ param dataSource a specific { @ link DataSource } to be wrapped by the pool * / public void setDataSource ( DataSource dataSource ) { this.dataSource=dataSource ; } public String getDataSourceClassName ( ) { return dataSourceClassName ; } public void setDataSourceClassName ( String className ) { this.dataSourceClassName=className ; } public void addDataSourceProperty ( String propertyName , Object value ) { dataSourceProperties.put ( propertyName , value ) ; } public String getDataSourceJNDI ( ) { return this.dataSourceJndiName ; } public void setDataSourceJNDI ( String jndiDataSource ) { this.dataSourceJndiName=jndiDataSource ; } public Properties getDataSourceProperties ( ) { return dataSourceProperties ; } public void setDataSourceProperties ( Properties dsProperties ) { dataSourceProperties.putAll ( dsProperties ) ; } public String getDriverClassName ( ) { return driverClassName ; } public void setDriverClassName ( String driverClassName ) { try { Class < ? > driverClass=this.getClass ( ) .getClassLoader ( ) .loadClass ( driverClassName ) ; driverClass.newInstance ( ) ; this.driverClassName=driverClassName ; } catch ( Exception e ) { throw new RuntimeException ( `` driverClassName specified class ' '' + driverClassName + `` ' could not be loaded '' , e ) ; } } / * * * { @ inheritDoc } * / @ Override public long getIdleTimeout ( ) { return idleTimeout ; } / * * * { @ inheritDoc } * / @ Override public void setIdleTimeout ( long idleTimeoutMs ) { if ( idleTimeoutMs < 0 ) { throw new IllegalArgumentException ( `` idleTimeout can not be negative '' ) ; } this.idleTimeout=idleTimeoutMs ; } public String getJdbcUrl ( ) { return jdbcUrl ; } public void setJdbcUrl ( String jdbcUrl ) { this.jdbcUrl=jdbcUrl ; } / * * * Get the default auto-commit behavior of connections in the pool . * @ return the default auto-commit behavior of connections * / public boolean isAutoCommit ( ) { return isAutoCommit ; } / * * * Set the default auto-commit behavior of connections in the pool . * @ param isAutoCommit the desired auto-commit default for connections * / public void setAutoCommit ( boolean isAutoCommit ) { this.isAutoCommit=isAutoCommit ; } / * * * Get the pool suspension behavior ( allowed or disallowed ) . * @ return the pool suspension behavior * / public boolean isAllowPoolSuspension ( ) { return isAllowPoolSuspension ; } / * * * Set whether or not pool suspension is allowed . There is a performance impact when pool suspension is enabled . Unless you need it ( for a redundancy system for example ) do not enable it . * @ param isAllowPoolSuspension the desired pool suspension allowance * / public void setAllowPoolSuspension ( boolean isAllowPoolSuspension ) { this.isAllowPoolSuspension=isAllowPoolSuspension ; } / * * * Get whether or not the construction of the pool should throw an exception if the minimum number of connections can not be created . * @ return whether or not initialization should fail on error immediately * / public boolean isInitializationFailFast ( ) { return isInitializationFailFast ; } / * * * Set whether or not the construction of the pool should throw an exception if the minimum number of connections can not be created . * @ param failFast true if the pool should fail if the minimum connections can not be created * / public void setInitializationFailFast ( boolean failFast ) { isInitializationFailFast=failFast ; } public boolean isIsolateInternalQueries ( ) { return isIsolateInternalQueries ; } public void setIsolateInternalQueries ( boolean isolate ) { this.isIsolateInternalQueries=isolate ; } @ Deprecated public boolean isJdbc4ConnectionTest ( ) { return false ; } @ Deprecated public void setJdbc4ConnectionTest ( boolean useIsValid ) { LOGGER.warn ( `` The jdbcConnectionTest property is now deprecated , see the documentation for connectionTestQuery '' ) ; } / * * * Get the Codahale MetricRegistry , could be null . * @ return the codahale MetricRegistry instance * / public Object getMetricRegistry ( ) { return metricRegistry ; } / * * * Set a Codahale MetricRegistry to use for HikariCP . * @ param metricRegistry the Codahale MetricRegistry to set * / public void setMetricRegistry ( Object metricRegistry ) { if ( metricRegistry ! = null ) { if ( metricRegistry instanceof String ) { try { InitialContext initCtx=new InitialContext ( ) ; metricRegistry= ( MetricRegistry ) initCtx.lookup ( ( String ) metricRegistry ) ; } catch ( NamingException e ) { throw new IllegalArgumentException ( e ) ; } } if ( ! ( metricRegistry instanceof MetricRegistry ) ) { throw new IllegalArgumentException ( `` Class must be an instance of com.codahale.metrics.MetricRegistry '' ) ; } } this.metricRegistry=metricRegistry ; } / * * * Get the Codahale HealthCheckRegistry , could be null . * @ return the Codahale HealthCheckRegistry instance * / public Object getHealthCheckRegistry ( ) { return healthCheckRegistry ; } / * * * Set a Codahale HealthCheckRegistry to use for HikariCP . * @ param healthCheckRegistry the Codahale HealthCheckRegistry to set * / public void setHealthCheckRegistry ( Object healthCheckRegistry ) { if ( healthCheckRegistry ! = null ) { if ( healthCheckRegistry instanceof String ) { try { InitialContext initCtx=new InitialContext ( ) ; healthCheckRegistry= ( HealthCheckRegistry ) initCtx.lookup ( ( String ) healthCheckRegistry ) ; } catch ( NamingException e ) { throw new IllegalArgumentException ( e ) ; } } if ( ! ( healthCheckRegistry instanceof HealthCheckRegistry ) ) { throw new IllegalArgumentException ( `` Class must be an instance of com.codahale.metrics.health.HealthCheckRegistry '' ) ; } } this.healthCheckRegistry=healthCheckRegistry ; } public Properties getHealthCheckProperties ( ) { return healthCheckProperties ; } public void setHealthCheckProperties ( Properties healthCheckProperties ) { this.healthCheckProperties.putAll ( healthCheckProperties ) ; } public void addHealthCheckProperty ( String key , String value ) { healthCheckProperties.setProperty ( key , value ) ; } public boolean isReadOnly ( ) { return isReadOnly ; } public void setReadOnly ( boolean readOnly ) { this.isReadOnly=readOnly ; } public boolean isRegisterMbeans ( ) { return isRegisterMbeans ; } public void setRegisterMbeans ( boolean register ) { this.isRegisterMbeans=register ; } / * * * { @ inheritDoc } * / @ Override public long getLeakDetectionThreshold ( ) { return leakDetectionThreshold ; } / * * * { @ inheritDoc } * / @ Override public void setLeakDetectionThreshold ( long leakDetectionThresholdMs ) { this.leakDetectionThreshold=leakDetectionThresholdMs ; } / * * * { @ inheritDoc } * / @ Override public long getMaxLifetime ( ) { return maxLifetime ; } / * * * { @ inheritDoc } * / @ Override public void setMaxLifetime ( long maxLifetimeMs ) { this.maxLifetime=maxLifetimeMs ; } / * * * { @ inheritDoc } * / @ Override public int getMaximumPoolSize ( ) { return maxPoolSize ; } / * * * { @ inheritDoc } * / @ Override public void setMaximumPoolSize ( int maxPoolSize ) { if ( maxPoolSize < 1 ) { throw new IllegalArgumentException ( `` maxPoolSize can not be less than 1 '' ) ; } this.maxPoolSize=maxPoolSize ; } / * * * { @ inheritDoc } * / @ Override public int getMinimumIdle ( ) { return minIdle ; } / * * * { @ inheritDoc } * / @ Override public void setMinimumIdle ( int minIdle ) { if ( minIdle < 0 ) { throw new IllegalArgumentException ( `` minimumIdle can not be negative '' ) ; } this.minIdle=minIdle ; } / * * * Get the default password to use for DataSource.getConnection ( username , password ) calls . * @ return the password * / public String getPassword ( ) { return password ; } / * * * Set the default password to use for DataSource.getConnection ( username , password ) calls . * @ param password the password * / public void setPassword ( String password ) { this.password=password ; } / * * * { @ inheritDoc } * / @ Override public String getPoolName ( ) { return poolName ; } / * * * Set the name of the connection pool . This is primarily used for the MBean to uniquely identify the pool configuration . * @ param poolName the name of the connection pool to use * / public void setPoolName ( String poolName ) { this.poolName=poolName ; } public String getTransactionIsolation ( ) { return transactionIsolationName ; } / * * * Set the default transaction isolation level . The specified value is the constant name from the < code > Connection < /code > class , eg . < code > TRANSACTION_REPEATABLE_READ < /code > . * @ param isolationLevel the name of the isolation level * / public void setTransactionIsolation ( String isolationLevel ) { this.transactionIsolationName=isolationLevel ; } / * * * Get the default username used for DataSource.getConnection ( username , password ) calls . * @ return the username * / public String getUsername ( ) { return username ; } / * * * Set the default username used for DataSource.getConnection ( username , password ) calls . * @ param username the username * / public void setUsername ( String username ) { this.username=username ; } / * * * Get the thread factory used to create threads . * @ return the thread factory ( may be null , in which case the default thread factory is used ) * / public ThreadFactory getThreadFactory ( ) { return threadFactory ; } / * * * Set the thread factory to be used to create threads . * @ param threadFactory the thread factory ( setting to null causes the default thread factory to be used ) * / public void setThreadFactory ( ThreadFactory threadFactory ) { this.threadFactory=threadFactory ; } public void validate ( ) { Logger logger=LoggerFactory.getLogger ( getClass ( ) ) ; validateNumerics ( ) ; if ( connectionCustomizerClassName ! = null ) { try { getClass ( ) .getClassLoader ( ) .loadClass ( connectionCustomizerClassName ) ; } catch ( Exception e ) { logger.warn ( `` connectionCustomizationClass specified class ' '' + connectionCustomizerClassName + `` ' could not be loaded '' , e ) ; connectionCustomizerClassName=null ; } } if ( driverClassName ! = null & & jdbcUrl == null ) { logger.error ( `` when specifying driverClassName , jdbcUrl must also be specified '' ) ; throw new IllegalStateException ( `` when specifying driverClassName , jdbcUrl must also be specified '' ) ; } else if ( driverClassName ! = null & & dataSourceClassName ! = null ) { logger.error ( `` both driverClassName and dataSourceClassName are specified , one or the other should be used '' ) ; throw new IllegalStateException ( `` both driverClassName and dataSourceClassName are specified , one or the other should be used '' ) ; } else if ( jdbcUrl ! = null ) { } else if ( dataSource == null & & dataSourceClassName == null ) { logger.error ( `` one of either dataSource , dataSourceClassName , or jdbcUrl and driverClassName must be specified '' ) ; throw new IllegalArgumentException ( `` one of either dataSource or dataSourceClassName must be specified '' ) ; } else if ( dataSource ! = null & & dataSourceClassName ! = null ) { logger.warn ( `` both dataSource and dataSourceClassName are specified , ignoring dataSourceClassName '' ) ; } if ( transactionIsolationName ! = null ) { UtilityElf.getTransactionIsolation ( transactionIsolationName ) ; } if ( poolName == null ) { poolName= '' HikariPool- '' + poolNumber++ ; } if ( LOGGER.isDebugEnabled ( ) || unitTest ) { logConfiguration ( ) ; } } private void validateNumerics ( ) { Logger logger=LoggerFactory.getLogger ( getClass ( ) ) ; if ( validationTimeout > connectionTimeout & & connectionTimeout ! = 0 ) { logger.warn ( `` validationTimeout is greater than connectionTimeout , setting validationTimeout to connectionTimeout . `` ) ; validationTimeout=connectionTimeout ; } if ( minIdle < 0 || minIdle > maxPoolSize ) { minIdle=maxPoolSize ; } if ( maxLifetime < 0 ) { logger.error ( `` maxLifetime can not be negative . `` ) ; throw new IllegalArgumentException ( `` maxLifetime can not be negative . `` ) ; } else if ( maxLifetime > 0 & & maxLifetime < TimeUnit.SECONDS.toMillis ( 30 ) ) { logger.warn ( `` maxLifetime is less than 30000ms , using default { } ms. '' , MAX_LIFETIME ) ; maxLifetime=MAX_LIFETIME ; } if ( idleTimeout ! = 0 & & idleTimeout < TimeUnit.SECONDS.toMillis ( 10 ) ) { logger.warn ( `` idleTimeout is less than 10000ms , using default { } ms. '' , IDLE_TIMEOUT ) ; idleTimeout=IDLE_TIMEOUT ; } else if ( idleTimeout > maxLifetime & & maxLifetime > 0 ) { logger.warn ( `` idleTimeout is greater than maxLifetime , setting to maxLifetime . `` ) ; idleTimeout=maxLifetime ; } if ( leakDetectionThreshold ! = 0 & & leakDetectionThreshold < TimeUnit.SECONDS.toMillis ( 2 ) & & ! unitTest ) { logger.warn ( `` leakDetectionThreshold is less than 2000ms , setting to minimum 2000ms . `` ) ; leakDetectionThreshold=2000L ; } } private void logConfiguration ( ) { LOGGER.debug ( `` HikariCP pool { } configuration : '' , poolName ) ; final Set < String > propertyNames=new TreeSet < String > ( PropertyBeanSetter.getPropertyNames ( HikariConfig.class ) ) ; for ( String prop : propertyNames ) { try { Object value=PropertyBeanSetter.getProperty ( prop , this ) ; if ( `` dataSourceProperties '' .equals ( prop ) ) { Properties dsProps=PropertyBeanSetter.copyProperties ( dataSourceProperties ) ; dsProps.setProperty ( `` password '' , '' < masked > '' ) ; value=dsProps ; } value= ( prop.contains ( `` password '' ) ? `` < masked > '' : value ) ; LOGGER.debug ( ( prop + `` ................................................ '' ) .substring ( 0,32 ) + ( value ! = null ? value : `` '' ) ) ; } catch ( Exception e ) { continue ; } } } abstract protected void loadProperties ( String propertyFileName ) ; public void copyState ( AbstractHikariConfig other ) { for ( Field field : AbstractHikariConfig.class.getDeclaredFields ( ) ) { if ( ! Modifier.isFinal ( field.getModifiers ( ) ) ) { field.setAccessible ( true ) ; try { field.set ( other , field.get ( this ) ) ; } catch ( Exception e ) { throw new RuntimeException ( `` Exception copying HikariConfig state : `` + e.getMessage ( ) , e ) ; } } } } } 
__label__0 boundary.endsWith ( `` \ '' '' ) 
__label__1 ['Class.forName'  '('  'name'  ')'] 
__label__1 ['mock.expectedBodiesReceived'  '('  '``'  'Hello'  'World'  '2'  "''"  ')'] 
__label__1 ['assertFalse'  '('  'model.getUniqueItems'  '('  ')'  ')'] 
__label__1 ['version'  '=='  'null'] 
__label__0 touchEventPool.freeAll ( touchEvents ) 
__label__1 ['new'  'Path'  '('  'bucketPath'  ' '  "''"  'test-'  "''"  '+'  'i'  '+'  "'-'+"  'j'  ')'  '.toString'  '('  ')'] 
__label__1 ['getCamelContext'  '('  ')'  '.getTypeConverter'  '('  ')'  '.convertTo'  '('  'int.class'  ' '  'dataTimeout'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'I/O'  'error'  'when'  'running'  'rpc'  "''"  ' '  'e'  ')'] 
__label__0 version.getUpdate ( ) .getAsInt ( ) > = 151 
__label__0 name ! = null & & name.length ( ) > 2 
__label__0 Sets. < Long > newHashSet ( ) 
__label__1 ['UnderFileSystem.get'  '('  'tmpFolder'  ')'] 
__label__0 testError ( js , VariableReferenceCheck.REDECLARED_VARIABLE ) 
__label__0 UserGroupInformation.getCurrentUser ( ) .checkTGTAndReloginFromKeytab ( ) 
__label__1 ['Character.toLowerCase'  '('  'ch'  ')'] 
__label__1 ['Color.fromRGB'  '('  '0xC354CD'  ')'] 
__label__1 ['event.getColumns'  '('  ')'] 
__label__0 request.getPathInfo ( ) 
__label__0 Bytes.toBytes ( regionname ) 
__label__0 toObject ( dataValue ) 
__label__1 ['context.addStep'  '('  'prepareStep'  ' '  'NewOperationContext.Stage.MODEL'  ')'] 
__label__1 ['inner.deletedNodes'  '('  ')'] 
__label__1 ['UndertowServletWebServer.class'] 
__label__1 ['('  'byte'  ')'  '0xff'] 
__label__1 ['!'  'type.isAnonymousClass'  '('  ')'  '&'  '&'  '!'  'type.isInterface'  '('  ')'] 
__label__1 ['d.addWelcomePages'  '('  'welcomeFiles'  ')'] 
__label__0 DataStreamSink < OUT > 
__label__1 ['executionStats.getSplits'  '('  ')'] 
__label__0 assertResultsPresentInDataResponse ( url , asyncJob.getId ( ) , timerJob.getId ( ) ) 
__label__1 ['AnnotatedElementUtils.isAnnotated'  '('  'type'  ' '  'Validated.class'  ')'] 
__label__1 ['super.getClass'  '('  ')'] 
__label__0 JSError.make ( member , CONFLICTING_GETTER_SETTER_TYPE , member.getString ( ) ) 
__label__1 ['invoke'  '('  'args.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  '('  'args=args.rest'  '('  ')'  ')'  '.first'  '('  ')'  ' '  'args.rest'  '('  ')'  ')'] 
__label__1 ['new'  'InputStreamReader'  '('  'is'  ')'] 
__label__0 new String ( bytes2 , '' UTF8 '' ) 
__label__0 caught.isArrayPattern ( ) 
__label__1 ['messageHandler.serverAcceptor'  '('  ')'] 
__label__0 DirectMessage.createDirectMessageList ( get ( getBaseURL ( ) + `` direct_messages/sent.json '' , new PostParameter [ 0 ] , true ) ) 
__label__0 public Builder setSSLEngineFactory ( SSLEngineFactory sslEngineFactory ) { configBuilder.setSSLEngineFactory ( sslEngineFactory ) ; return this ; } 
__label__0 Assert.assertEquals ( getNotAllowedExceptionMessage ( `` helloForNone '' ) , e.getCause ( ) .getMessage ( ) ) 
__label__1 ['args.length'  '=='  '3'] 
__label__1 ['newState.score'  '('  ')'] 
__label__1 ['assertThat'  '('  'response'  ')'  '.isEqualToIgnoringCase'  '('  '``'  'Woop'  'woop'  '.'  'yay\\n'  "''"  ')'] 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class ListBasicLocalTest extends ListAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 1 ) .newInstances ( config ) ; } } 
__label__1 ['rsWrap.getMobFileCacheAccessCount'  '('  ')'] 
__label__0 conf.getRestBaseURL ( ) 
__label__1 ['assertEquals'  '('  'id3'  ' '  'new'  'Twitter'  '('  'id3'  ' '  'pass3'  ')'  '.verifyCredentials'  '('  ')'  '.getName'  '('  ')'  ')'] 
__label__0 mapper.getFactory ( ) 
__label__1 ['buffer.nextOneRow'  '('  'changeColumns'  ')'] 
__label__0 new RuntimeException ( `` Could not create TypeInformation for type `` + first.getClass ( ) + `` ; please specify the TypeInformation manually via `` + `` StreamExecutionEnvironment # fromElements ( Collection , TypeInformation ) '' , e ) 
__label__1 ['req.startAsync'  '('  ')'] 
__label__1 ['final'  'string'  'clientSecret='  "''"  'your'  'client'  'secret'  "''"  ';'] 
__label__0 GL20.glUniformMatrix3fv ( location , transpose , value ) 
__label__0 additionalProperties.put ( DATE_FORMAT , defaultDateFormat ) 
__label__1 ['conceptAnswer.getConcept'  '('  ')'] 
__label__1 ['Thread.sleep'  '('  '50'  ')'] 
__label__0 FileInStream.create ( status , options.toInStreamOptions ( ) , mFileSystemContext ) 
__label__0 expiresOn.getTime ( ) 
__label__0 testWarning ( js , VariableReferenceCheck.REDECLARED_VARIABLE ) 
__label__0 ! serialNumber.equals ( null ) 
__label__1 ['assertTrue'  '('  'CompressionTest.testCompression'  '('  '``'  'SNAPPY'  "''"  ')'  ')'] 
__label__1 ['new'  'JavaScriptAggregatorFactory'  '('  'name'  ' '  'Arrays.asList'  '('  'input'  ')'  ' '  'fnAggregate'  ' '  'fnReset'  ' '  'fnCombine'  ')'] 
__label__1 ['('  'short'  ')'  '0644'] 
__label__0 put.getWriteToWAL ( ) 
__label__0 this.getDefaultReadOnly ( ) 
__label__1 ['GatherGettersAndSetterProperties.gather'  '('  'compiler'  ' '  'externsRoot'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  ')'] 
__label__1 ['('  '('  'Number'  ')'  's.first'  '('  ')'  ')'  '.intValue'  '('  ')'] 
__label__1 ['config.getBroadcasterFactory'  '('  ')'  '.lookup'  '('  'a.broadcaster'  '('  ')'  ' '  'true'  ')'] 
__label__0 log.warn ( `` Unexpected exception on closing transaction . Cause : `` + e ) 
__label__0 LOG.info ( `` Unable to parse HTTP response content '' , e ) 
__label__1 ['item.getClass'  '('  ')'] 
__label__1 ['finishChannel'  '('  'channel.getPipeline'  '('  ')'  '.getContext'  '('  'NettyAsyncHttpProvider.class'  ')'  ')'] 
__label__0 Integer.parseInt ( parts [ 1 ] ,16 ) 
__label__1 ['getOrCreateContainer'  '('  ')'  '.unlock'  '('  'dataKey'  ' '  'caller'  ' '  'threadId'  ')'] 
__label__1 ['ImplemetationMethodDescriptor'  'methodDescriptor'] 
__label__1 ['taken'  '>'  '190'] 
__label__0 logger.warn ( `` Failed to set channel option ' { } ' with value ' { } ' for channel ' { } ' '' , option , value , channel , t ) 
__label__1 ['maxActiveSessions'  '=='  'null'] 
__label__0 return facebookProperties ; 
__label__1 ['QUEUE_TRANSACTION_LOG_RECORD=43'] 
__label__1 ['CONCURRENT_THREAD_COUNT=300'] 
__label__0 DataStreamSink < OUT > 
__label__0 runPartialSorter ( sorter , NUM_RECORDS,25 ) 
__label__0 DbSegmentPublisher.class 
__label__1 ['count'  '<'  '='  '0'] 
__label__1 ['ObjectHelper.isEmpty'  '('  'configuration.getClusterService'  '('  ')'  ')'] 
__label__0 logger.warn ( `` Configuration for influxdb not yet loaded or broken . '' ) 
__label__0 LOG.warn ( `` Failed to get files from `` + baseDirectory.getAbsolutePath ( ) ) 
__label__0 initialCapacity > 1 < < 30 
__label__0 latch.await ( 20 , SECONDS ) 
__label__1 ['endTrack'  '('  '``'  'main'  "''"  ')'] 
__label__1 ['TIMEOUT_SECONDS=5'] 
__label__1 ['format'  '('  'conf'  ' '  'true'  ')'] 
__label__0 ImmutableList.of ( bang , qmark ) 
__label__0 ImmutableList < String > 
__label__1 ['logger.error'  '('  '``'  'InfluxDB'  'is'  'not'  'yet'  'connected'  "''"  ')'] 
__label__0 assertEquals ( row.getField ( 0 ) ,3L ) 
__label__1 ['``'  'maxHeaderSize'  'must'  'be'  'a'  'positive'  'integer'  ':'  '``'  '+'  'maxChunkSize'] 
__label__1 ['500'  '*'  '1000000L'] 
__label__0 new MethodInjectionTarget ( methodInfo.declaringClass ( ) .name ( ) .toString ( ) , methodName , methodInfo.returnType ( ) .name ( ) .toString ( ) ) 
__label__0 MESSAGES.persistenceUnitNotFound ( absolutePath , puName , current ) 
__label__1 ['executor.scheduleWithFixedDelay'  '('  'this'  ' '  'period'  ' '  'period'  ' '  'unit'  ')'] 
__label__0 LOG.warn ( `` Syslog message is missing date or date could not be parsed . ( Possibly set { } to true ) `` + `` Not further handling . Message was : { } '' , SyslogInputBase.CK_ALLOW_OVERRIDE_DATE , new String ( msg.getRaw ( ) ) ) 
__label__0 assertTrue ( `` reuse-address '' , networkConfig.isReuseAddress ( ) ) 
__label__0 testError ( `` class Foo extends BaseFoo { constructor ( ) { Foo.base ( this ) ; } } '' , BASE_CLASS_ERROR ) 
__label__1 ['ImmutableSet.of'  '('  '``'  'reportUnknownTypes'  "''"  ')'] 
__label__0 findDelegateForNewObject ( name ) 
__label__0 selector.select ( 10 ) 
__label__0 nodeEngine.getSharedService ( LockService.SERVICE_NAME ) 
__label__1 ['connection.subscribe'  '('  'jedisPubSub'  ' '  'patterns'  ')'] 
__label__0 Assert.assertTrue ( rule.appliesTo ( builder.interval ( new Interval ( `` 0500-01-01/2100-12-31 '' ) ) .build ( ) , now ) ) 
__label__0 new JSONParseSpec ( new TimestampSpec ( `` timestamp '' , '' iso '' ) , new DimensionsSpec ( Arrays.asList ( DIMENSIONS ) , Arrays. < String > asList ( ) , null ) ) 
__label__1 ['overrideDeploymentConfig'] 
__label__1 ['visitor.visit'  '('  'this'  ')'] 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__1 ['new'  'GenerationException'  '('  'e'  ')'] 
__label__1 ['buffer.append'  '('  'KEY_NODE_ID'  '+'  '``'  '='  "''"  ')'  '.append'  '('  'id'  ')'] 
__label__0 new StringBuilder ( 1024 ) 
__label__1 ['controller.handleSubmission'  '('  'request'  ' '  'new'  'MockHttpSession'  '('  ')'  ' '  'new'  'ModelMap'  '('  ')'  ' '  "''"  'Save'  'User'  "''"  ' '  "''"  'pass123'  "''"  ' '  "''"  'pass123'  "''"  ' '  'new'  'String'  '['  '0'  ']'  ' '  'user'  ' '  'new'  'BindException'  '('  'user'  ' '  "''"  'user'  "''"  ')'  ')'] 
__label__0 getClientConfig ( ) .getAddresses ( ) 
__label__1 ['javaWriter.emitSingleLineCOmment'  '('  '``'  'foo'  "''"  ')'] 
__label__1 ['ArrayList'  '<'  'Class'  '<'  '?'  '>'  '>'] 
__label__1 ['s.setMaxVersions'  '('  ')'] 
__label__0 mLocalAlluxioClusterResource.get ( ) .getWorker ( ) 
__label__0 mf.filter ( r , originalMessage , transformed.message ( ) ) 
__label__1 ['logger.info'  '('  '``'  'Calimero'  'library'  'version'  '{'  '}'  "''"  ' '  'Settings.getLibraryVersion'  '('  ')'  ')'] 
__label__1 ['('  'getSource'  '('  ')'  '.y'  '('  ')'  '+'  'getTarget'  '('  ')'  '.y'  '('  ')'  ')'  '/'  '2f'] 
__label__1 ['log.info'  '('  '``'  'Can'  'not'  'scale'  'anymore'  '.'  'Num'  'workers'  '='  '%'  'd'  ' '  'Max'  'num'  'workers'  '='  '%'  'd'  "''"  ' '  'zkWorkers.size'  '('  ')'  ' '  'workerSetupdDataRef.get'  '('  ')'  '.getMaxNumWorkers'  '('  ')'  ')'] 
__label__0 getPreferences ( ) .save ( fos , '' '' ) 
__label__0 Math.max ( 1000L , connectionTimeout ) 
__label__1 ['/'  '*'  '*'  '*'  'Service'  'invocation'  'retry'  'times'  '*'  '@'  'see'  'Constants'  '#'  'DEFAULT_RETRIES'  '*'  '/'  'int'  'retries'  '('  ')'  'default'  '0'  ';'] 
__label__0 ! shouldFollowLinksIn ( webURL ) || robotstxtServer.allows ( webURL ) 
__label__0 jmsTemplate.setPubSubDomain ( true ) 
__label__0 this.transactionsRepository.getTransaction ( this.xidTransactionID ) 
__label__1 ['p'  '+'  '``'  '.'  "''"  '+'  'M_ITERATOR'] 
__label__1 ['s.count'  '('  ')'] 
__label__1 ['el.className'  '('  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ListBasicLocalTest'  'extends'  'ListBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '1'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__1 ['InvalidPathException.class'] 
__label__1 ['connection.subscribe'  '('  'jedisPubSub'  ' '  'patterns'  ')'] 
__label__0 Sets.newHashSet ( BUFFERS_READ , FIELDNAMES_READ , INDEXERCLUSTER_READ , INPUTS_READ , JVMSTATS_READ , MESSAGECOUNT_READ , MESSAGES_READ , METRICS_READ , SYSTEM_READ , THROUGHPUT_READ , SAVEDSEARCHES_CREATE , SAVEDSEARCHES_EDIT , SAVEDSEARCHES_READ ) 
__label__0 assertEquals ( 300d , fStopwatch.runtime ( MILLISECONDS ) ,100d ) 
__label__1 ['System.arraycopy'  '('  'value 0'  ' '  'value'  ' '  'length'  ' '  'value.length'  ')'] 
__label__1 ['itemActionLayout'  '>'  '='  '0'] 
__label__1 ['logger.info'  '('  '``'  'Future'  'response'  'is'  'already'  'set'  '!'  'Current'  'response'  ':'  '``'  '+'  'response'  '+'  '``'  ' '  'Offered'  'response'  ':'  '``'  '+'  'offeredResponse+'  '``'  ' '  'Invocation'  ':'  '``'  '+'  'invocation'  ')'] 
__label__0 log.trace ( `` Failed to deploy ! ! `` , res2.cause ( ) ) 
__label__1 ['String'  'retval='  "''"  "''"  ';'] 
__label__1 ['Preconditions.checkNotNull'  '('  'path'  ')'] 
__label__1 ['requestContext.getUri'  '('  ')'  '.getPath'  '('  ')'] 
__label__0 cc.getScalaPlan ( verticesPath , edgesPath , resultPath , maxIterations ) 
__label__1 ['GeneralError.modify'  '('  'httpResponse'  ' '  'body'  ' '  'requestWrapper'  ' '  'responseWrapper'  ' '  'generalException'  ')'] 
__label__0 registration.registerOperationHandler ( CommonAttributes.STOP_CONTEXT , ModClusterStopContext.INSTANCE , stopContext , false , runtimeOnlyFlags ) 
__label__0 ! ( topicParts.length > 2 ) || ! topicParts [ 0 ] .equals ( TOPIC_PREFIX ) 
__label__1 ['setTimeToLiveSeconds'  '('  'Long.valueOf'  '('  '('  'String'  ')'  'cacheSettings.get'  '('  '``'  'timeToIdleSeconds'  "''"  ')'  ')'  '.longValue'  '('  ')'  ')'] 
__label__1 ['implemetationMethodDescriptors.build'  '('  ')'] 
__label__0 int retries ( ) default 2 ; 
__label__1 ['msg.offset'  '('  ')'] 
__label__0 OperandTypes.or ( OperandTypes.NILADIC , OperandTypes.family ( SqlTypeFamily.STRING ) , OperandTypes.family ( SqlTypeFamily.STRING , SqlTypeFamily.STRING ) ) 
__label__0 reg.getHistograms ( transformFilter ( filter ) ) 
__label__1 ['testError'  '('  'js'  ' '  'VariableReferenceCheck.REDECLARED_VARIABLE'  ')'] 
__label__1 ['arguments'  '['  '2'  ']'] 
__label__0 this.thrown.expectMessage ( `` File must exist '' ) 
__label__1 ['Color.fromRGB'  '('  '0x6689D3'  ')'] 
__label__0 ! webSocketProcessorName.equalsIgnoreCase ( WebSocketProcessor.class.getName ( ) ) 
__label__1 ['public'  'class'  'Arial'  'extends'  'FontMetrics'  '{'  '{'  'maxCharHeight=781'  ';'  'widths'  '['  '32'  ']'  '=277'  ';'  'widths'  '['  '33'  ']'  '=277'  ';'  'widths'  '['  '34'  ']'  '=354'  ';'  'widths'  '['  '35'  ']'  '=556'  ';'  'widths'  '['  '36'  ']'  '=556'  ';'  'widths'  '['  '37'  ']'  '=889'  ';'  'widths'  '['  '38'  ']'  '=666'  ';'  'widths'  '['  '39'  ']'  '=190'  ';'  'widths'  '['  '40'  ']'  '=333'  ';'  'widths'  '['  '41'  ']'  '=333'  ';'  'widths'  '['  '42'  ']'  '=389'  ';'  'widths'  '['  '43'  ']'  '=583'  ';'  'widths'  '['  '44'  ']'  '=277'  ';'  'widths'  '['  '45'  ']'  '=333'  ';'  'widths'  '['  '46'  ']'  '=277'  ';'  'widths'  '['  '47'  ']'  '=277'  ';'  'widths'  '['  '48'  ']'  '=556'  ';'  'widths'  '['  '49'  ']'  '=556'  ';'  'widths'  '['  '50'  ']'  '=556'  ';'  'widths'  '['  '51'  ']'  '=556'  ';'  'widths'  '['  '52'  ']'  '=556'  ';'  'widths'  '['  '53'  ']'  '=556'  ';'  'widths'  '['  '54'  ']'  '=556'  ';'  'widths'  '['  '55'  ']'  '=556'  ';'  'widths'  '['  '56'  ']'  '=556'  ';'  'widths'  '['  '57'  ']'  '=556'  ';'  'widths'  '['  '58'  ']'  '=277'  ';'  'widths'  '['  '59'  ']'  '=277'  ';'  'widths'  '['  '60'  ']'  '=583'  ';'  'widths'  '['  '61'  ']'  '=583'  ';'  'widths'  '['  '62'  ']'  '=583'  ';'  'widths'  '['  '63'  ']'  '=556'  ';'  'widths'  '['  '64'  ']'  '=1015'  ';'  'widths'  '['  '65'  ']'  '=666'  ';'  'widths'  '['  '66'  ']'  '=666'  ';'  'widths'  '['  '67'  ']'  '=722'  ';'  'widths'  '['  '68'  ']'  '=722'  ';'  'widths'  '['  '69'  ']'  '=666'  ';'  'widths'  '['  '70'  ']'  '=610'  ';'  'widths'  '['  '71'  ']'  '=777'  ';'  'widths'  '['  '72'  ']'  '=722'  ';'  'widths'  '['  '73'  ']'  '=277'  ';'  'widths'  '['  '74'  ']'  '=500'  ';'  'widths'  '['  '75'  ']'  '=666'  ';'  'widths'  '['  '76'  ']'  '=556'  ';'  'widths'  '['  '77'  ']'  '=833'  ';'  'widths'  '['  '78'  ']'  '=722'  ';'  'widths'  '['  '79'  ']'  '=777'  ';'  'widths'  '['  '80'  ']'  '=666'  ';'  'widths'  '['  '81'  ']'  '=777'  ';'  'widths'  '['  '82'  ']'  '=722'  ';'  'widths'  '['  '83'  ']'  '=666'  ';'  'widths'  '['  '84'  ']'  '=610'  ';'  'widths'  '['  '85'  ']'  '=722'  ';'  'widths'  '['  '86'  ']'  '=666'  ';'  'widths'  '['  '87'  ']'  '=943'  ';'  'widths'  '['  '88'  ']'  '=666'  ';'  'widths'  '['  '89'  ']'  '=666'  ';'  'widths'  '['  '90'  ']'  '=610'  ';'  'widths'  '['  '91'  ']'  '=277'  ';'  'widths'  '['  '92'  ']'  '=277'  ';'  'widths'  '['  '93'  ']'  '=277'  ';'  'widths'  '['  '94'  ']'  '=469'  ';'  'widths'  '['  '95'  ']'  '=556'  ';'  'widths'  '['  '96'  ']'  '=333'  ';'  'widths'  '['  '97'  ']'  '=556'  ';'  'widths'  '['  '98'  ']'  '=556'  ';'  'widths'  '['  '99'  ']'  '=500'  ';'  'widths'  '['  '100'  ']'  '=556'  ';'  'widths'  '['  '101'  ']'  '=556'  ';'  'widths'  '['  '102'  ']'  '=277'  ';'  'widths'  '['  '103'  ']'  '=556'  ';'  'widths'  '['  '104'  ']'  '=556'  ';'  'widths'  '['  '105'  ']'  '=222'  ';'  'widths'  '['  '106'  ']'  '=222'  ';'  'widths'  '['  '107'  ']'  '=500'  ';'  'widths'  '['  '108'  ']'  '=222'  ';'  'widths'  '['  '109'  ']'  '=833'  ';'  'widths'  '['  '110'  ']'  '=556'  ';'  'widths'  '['  '111'  ']'  '=556'  ';'  'widths'  '['  '112'  ']'  '=556'  ';'  'widths'  '['  '113'  ']'  '=556'  ';'  'widths'  '['  '114'  ']'  '=333'  ';'  'widths'  '['  '115'  ']'  '=500'  ';'  'widths'  '['  '116'  ']'  '=277'  ';'  'widths'  '['  '117'  ']'  '=556'  ';'  'widths'  '['  '118'  ']'  '=500'  ';'  'widths'  '['  '119'  ']'  '=722'  ';'  'widths'  '['  '120'  ']'  '=500'  ';'  'widths'  '['  '121'  ']'  '=500'  ';'  'widths'  '['  '122'  ']'  '=500'  ';'  'widths'  '['  '123'  ']'  '=333'  ';'  'widths'  '['  '124'  ']'  '=259'  ';'  'widths'  '['  '125'  ']'  '=333'  ';'  'widths'  '['  '126'  ']'  '=583'  ';'  '}'  '}'] 
__label__1 ['('  '!'  'client.isFailed'  '('  ')'  ')'  '&'  '&'  '('  '!'  'client.isGone'  '('  ')'  ')'] 
__label__1 ['assertFalse'  '('  'model.getUniqueItems'  '('  ')'  ')'] 
__label__1 ['clientConfig.property'  '('  'ClientProperties.READ_TIMEOUT 1000'  ')'] 
__label__0 Math.max ( aggregateData.getAvgColLen ( ) , newData.getAvgColLen ( ) ) 
__label__0 log.debug ( `` Performing lookup : % s -- > % s '' , ips , retVal ) 
__label__0 provider.isInBound ( itemName ) & & credentialsMatch ( provider , itemName , oauthCredentials ) & & thermostats.containsKey ( provider.getThermostatIdentifier ( itemName ) ) 
__label__1 ['new'  'CustomChangeException'  '('  '``'  'Failed'  'to'  'insert'  'one'  'or'  'more'  'concept'  'map'  'types'  "''"  ')'] 
__label__1 ['RawUDPInput.class'] 
__label__1 ['AbstactStoreHandler'  '<'  'DelayedEntry'  '>'] 
__label__1 ['DEFAULT_USER_AS_DEFAULT_QUEUE=false'] 
__label__1 ['simple.getFromSentDate'  '('  ')'] 
__label__0 private final ReplayingDecoderByteBuf replayable=new ReplayingDecoderByteBuf ( ) ; 
__label__0 JSError.make ( AbstractCompiler.READ_ERROR , getName ( ) , e.getMessage ( ) ) 
__label__1 ['uri.getPath'  '('  ')'] 
__label__0 addOrGetIndex ( definition.getKey ( ) , definition.getValue ( ) , partitionStoreAdapter ) 
__label__1 ['System.getProperty'  '('  '``'  'RecoveryEnvironmentBean.expiryScannerClassNames'  "''"  ')'  '!'  '='  'null'] 
__label__0 cache.putRecord ( key , record ) 
__label__1 ['@'  'SuppressWarnings'  '('  '``'  'unused'  "''"  ')'  'private'  'final'  'Object'  'strongReference'  ';'] 
__label__0 distinctValues.put ( slice , distinct ) 
__label__1 ['constructor.getTypeParameters'  '('  ')'] 
__label__1 ['socket'  '=='  'null'] 
__label__1 ['badLine.getMessage'  '('  ')'] 
__label__0 LOG.warn ( rootPath + `` is not a directory '' ) 
__label__1 ['assertThat'  '('  'xml'  ')'  '.isEqualTo'  '('  'expectedContent'  ')'] 
__label__1 ['http2.setInitialStreamSendWindow'  '('  'initialStreamSendWindow'  ')'] 
__label__0 PlatformDependent.getByte ( array , index ) 
__label__1 ['response.getStatus'  '('  ')'  '.getCode'  '('  ')'  '/'  '200'] 
__label__0 new ArrayList < FileInputSplit > ( ) 
__label__0 initialCapacity > 1 < < 30 
__label__0 ImplementationMethodDescriptor methodDescriptor 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__1 ['ChannelInboundHandlerAdapter'  'handler=new'  'ChannelDuplexHandler'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'channelActive'  '('  'ChannelHandlerContext'  'ctx'  ')'  'throws'  'Exception'  '{'  'ctx.fireChannelActive'  '('  ')'  ';'  'peerRef.exchange'  '('  'ctx.channel'  '('  ')'  ' 1L'  ' '  'SECONDS'  ')'  ';'  '}'  '@'  'Override'  'public'  'void'  'channelRead'  '('  'ChannelHandlerContext'  'ctx'  ' '  'Object'  'msg'  ')'  '{'  'latch.countDown'  '('  ')'  ';'  'ctx.read'  '('  ')'  ';'  '}'  '@'  'Override'  'public'  'void'  'exceptionCaught'  '('  'ChannelHandlerContext'  'ctx'  ' '  'Throwable'  'cause'  ')'  '{'  'causeRef.set'  '('  'cause'  ')'  ';'  '}'  '}'  ';'] 
__label__0 read ( buffer,0 , ( int ) Math.min ( buffer.length , len ) ) 
__label__1 ['ActionsEnum.valueOf'  '('  'action'  ')'] 
__label__0 private final PropertyKey mHostNameKey ; 
__label__1 ['LinkedList'  '<'  '>'] 
__label__0 assertEquals ( 11 , lm.getFields ( ) .size ( ) ) 
__label__0 dis.readFully ( serializedData,0 , length ) 
__label__1 ['new'  'StringBuilder'  '('  '561'  ')'] 
__label__1 ['assertEquals'  '('  'response.getResponseBody'  '('  ')'  '.length'  '('  ')'  ' 3876'  ')'] 
__label__0 logger.trace ( `` Mapped { } to { } '' , t , e.getValue ( ) ) 
__label__1 ['Preconditions.checkNotNull'  '('  'mBlockIdsOnTiers'  ')'] 
__label__0 var.setValueType ( guessType ( value ) ) 
__label__0 new SslContextBuilder ( false ) 
__label__1 ['Arrays.asList'  '('  '``'  'Int'  "''"  ' '  "''"  'Float'  "''"  ' '  "''"  'Double'  "''"  ' '  "''"  'Bool'  "''"  ' '  "''"  'Void'  "''"  ' '  "''"  'String'  "''"  ' '  "''"  'Character'  "''"  ')'] 
__label__1 ['c.content'  '('  ')'  '.readBytes'  '('  'CONTENT_LENGTH'  ')'] 
__label__1 ['configElements'  '['  '1'  ']'] 
__label__0 endpoint.setDataSource ( target ) 
__label__0 getCode ( ) .split ( `` \n '' , -1 ) 
__label__0 contentType ! = null & & charset == null 
__label__0 tsr.getReturnCode ( ) ! = AbstractTaskResult.ReturnCode.SUCCESS & & tsr.getReturnCode ( ) ! = AbstractTaskResult.ReturnCode.TASK_NOT_FOUND 
__label__0 { 189084,192250.913,195456.774,198696.946,201977.762,205294.444,208651.754,212042.099,215472.269,218941.91,222443.912,225996.845,229568.199,233193.568,236844.457,240543.233,244279.475,248044.27,251854.588,255693.2,259583.619,263494.621,267445.385,271454.061,275468.769,279549.456,283646.446,287788.198,291966.099,296181.164,300431.469,304718.618,309024.004,313393.508,317760.803,322209.731,326675.061,331160.627,335654.47,340241.442,344841.833,349467.132,354130.629,358819.432,363574.626,368296.587,373118.482,377914.93,382782.301,387680.669,392601.981,397544.323,402529.115,407546.018,412593.658,417638.657,422762.865,427886.169,433017.167,438213.273,443441.254,448692.421,453937.533,459239.049,464529.569,469910.083,475274.03,480684.473,486070.26,491515.237,496995.651,502476.617,507973.609,513497.19,519083.233,524726.509,530305.505,535945.728,541584.404,547274.055,552967.236,558667.862,564360.216,570128.148,575965.08,581701.952,587532.523,593361.144,599246.128,605033.418,610958.779,616837.117,622772.818,628672.04,634675.369,640574.831,646585.739,652574.547,658611.217,664642.684,670713.914,676737.681,682797.313,688837.897,694917.874,701009.882,707173.648,713257.254,719415.392,725636.761,731710.697,737906.209,744103.074,750313.39,756504.185,762712.579,768876.985,775167.859,781359,787615.959,793863.597,800245.477,806464.582,812785.294,819005.925,825403.057,831676.197,837936.284,844266.968,850642.711,856959.756,863322.774,869699.931,876102.478,882355.787,888694.463,895159.952,901536.143,907872.631,914293.672,920615.14,927130.974,933409.404,939922.178,946331.47,952745.93,959209.264,965590.224,972077.284,978501.961,984953.19,991413.271,997817.479,1004222.658,1010725.676,1017177.138,1023612.529,1030098.236,1036493.719,1043112.207,1049537.036,1056008.096,1062476.184,1068942.337,1075524.95,1081932.864,1088426.025,1094776.005,1101327.448,1107901.673,1114423.639,1120884.602,1127324.923,1133794.24,1140328.886,1146849.376,1153346.682,1159836.502,1166478.703,1172953.304,1179391.502,1185950.982,1192544.052,1198913.41,1205430.994,1212015.525,1218674.042,1225121.683,1231551.101,1238126.379,1244673.795,1251260.649,1257697.86,1264320.983,1270736.319,1277274.694,1283804.95,1290211.514,1296858.568,1303455.691 } 
__label__1 ['Exception'  'exception'] 
__label__0 hashFunction.newHasher ( ) .putBytes ( bigEndian ) 
__label__0 LOG.debug ( `` Creating short circuit input stream for block { } @ { } '' , blockId , address ) 
__label__0 minIdle < 0 || minIdle > maxPoolSize 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'db'  "''"  ')'] 
__label__1 ['AdviceWithTasks.removeByType'  '('  'route'  ' '  'type'  ' '  'selectFirst'  ' '  'selectFirst'  ' '  'selectFrom'  ' '  'selectTo'  ' '  'maxDeep'  ')'] 
__label__1 ['defaultCometSupport'  '('  'useServlet30Async'  ')'] 
__label__0 / * * * Represents the default formatter for log message . Default log message format is : [ SEVERITY LEVEL ] filePath : lineNo : columnNo : message . [ CheckName ] * @ author Andrei Selkin * / public class AuditEventDefaultFormatter implements AuditEventFormatter { / * * * Length of all separators . * / private static final int LENGTH_OF_ALL_SEPARATORS=10 ; / * * * Suffix of module names like XXXXCheck . * / private static final String SUFFIX= '' Check '' ; @ Override public String format ( AuditEvent event ) { final String fileName=event.getFileName ( ) ; final String message=event.getMessage ( ) ; final SeverityLevel severityLevel=event.getSeverityLevel ( ) ; final String severityLevelName ; if ( severityLevel == SeverityLevel.WARNING ) { severityLevelName= '' WARN '' ; } else { severityLevelName=severityLevel.getName ( ) .toUpperCase ( Locale.US ) ; } final int bufLen=calculateBufferLength ( event , severityLevelName.length ( ) ) ; final StringBuilder sb=new StringBuilder ( bufLen ) ; sb.append ( ' [ ' ) .append ( severityLevelName ) .append ( `` ] `` ) .append ( fileName ) .append ( ' : ' ) .append ( event.getLine ( ) ) ; if ( event.getColumn ( ) > 0 ) { sb.append ( ' : ' ) .append ( event.getColumn ( ) ) ; } sb.append ( `` : `` ) .append ( message ) ; final String checkShortName=getCheckShortName ( event ) ; sb.append ( `` [ `` ) .append ( checkShortName ) .append ( ' ] ' ) ; return sb.toString ( ) ; } / * * * Returns the length of the buffer for StringBuilder . bufferLength = fileNameLength + messageLength + lengthOfAllSeparators + + severityNameLength + checkNameLength . * @ param event audit event . * @ param severityLevelNameLength length of severity level name . * @ return the length of the buffer for StringBuilder . * / private static int calculateBufferLength ( AuditEvent event , int severityLevelNameLength ) { return LENGTH_OF_ALL_SEPARATORS + event.getFileName ( ) .length ( ) + event.getMessage ( ) .length ( ) + severityLevelNameLength+ getCheckShortName ( event ) .length ( ) ; } / * * * Returns check name without 'Check ' suffix . * @ param event audit ivent . * @ return check name without 'Check ' suffix . * / private static String getCheckShortName ( AuditEvent event ) { final String checkFullName=event.getSourceName ( ) ; final String checkShortName ; final int lastDotIndex=checkFullName.lastIndexOf ( ' . ' ) ; if ( lastDotIndex == -1 ) { if ( checkFullName.endsWith ( SUFFIX ) ) { checkShortName=checkFullName.substring ( 0 , checkFullName.lastIndexOf ( SUFFIX ) ) ; } else { checkShortName=checkFullName.substring ( 0 , checkFullName.length ( ) ) ; } } else { if ( checkFullName.endsWith ( SUFFIX ) ) { checkShortName=checkFullName.substring ( lastDotIndex + 1 , checkFullName.lastIndexOf ( SUFFIX ) ) ; } else { checkShortName=checkFullName.substring ( lastDotIndex + 1 , checkFullName.length ( ) ) ; } } return checkShortName ; } } 
__label__1 ['i'  '<'  '='  'repeatCount'] 
__label__0 new OptiqSemanticException ( generateErrorMessage ( tabref , '' Schema of both sides of union should match : Column `` + field + `` is of type `` + lInfo.getType ( ) .getTypeName ( ) + `` on first table and type `` + rInfo.getType ( ) .getTypeName ( ) + `` on second table '' ) ) 
__label__1 ['filteredSearchRequest'  '('  'query'  ' '  'filter'  ' '  'IndexHelper.determineAffectedIndices'  '('  'indexRangeService'  ' '  'deflector'  ' '  'range'  ')'  ')'] 
__label__1 ['handles'  '['  'i'  ']'] 
__label__0 twitter.getDailyTrends ( ) 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'TransactionalSetBasicDistributedTest'  'extends'  'TransactionalSetBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  'Config'  'config'  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '2'  ')'  '.newInstances'  '('  'config'  ')'  ';'  '}'  '}'] 
__label__1 ['entry.getKey'  '('  ')'  '.isEmpty'  '('  ')'] 
__label__0 assertTrue ( runtimeOptions.isMonochrome ( ) ) 
__label__1 ['dateOfBirth'  '=='  'null'] 
__label__1 ['path'  '('  '11'  ')'] 
__label__1 ['!'  'tableLayoutHandle.getPartitions'  '('  ')'  '.isPresent'  '('  ')'] 
__label__0 Arrays.asList ( CoreAnnotations.TextAnnotation.class , CoreAnnotations.TokensAnnotation.class , CoreAnnotations.CharacterOffsetBeginAnnotation.class , CoreAnnotations.CharacterOffsetEndAnnotation.class , CoreAnnotations.IsNewlineAnnotation.class ) 
__label__1 ['uiAclHandler.permit'  '('  'reqContext'  ' '  'op'  ' '  'conf'  ')'] 
__label__0 Assert.assertEquals ( `` Recall outside target range '' ,0.691 , r,0.001 ) 
__label__1 ['assertEquals'  '('  '6358481'  ' '  'received.get'  '('  '0'  ')'  '['  '1'  ']'  ')'] 
__label__1 ['Context.getPersonService'  '('  ')'  '.getRelationships'  '('  'Context.getPersonService'  '('  ')'  '.getPerson'  '('  'personId'  ')'  ')'] 
__label__1 ['from'  '('  '``'  'direct'  ':'  'start'  "''"  ')'  '.transform'  '('  'body'  '('  ')'  '.append'  '('  '``'  'World'  "''"  ')'  ')'  '.async'  '('  ')'  '.waitForTaskToComplete'  '('  'WaitForTaskToComplete.IfReplyExpected'  ')'  '.to'  '('  '``'  'mock'  ':'  'foo'  "''"  ')'  '.delay'  '('  '500'  ')'] 
__label__0 factory.getEmbeddedServletContainer ( initializers [ 0 ] , initializers [ 1 ] ) 
__label__1 ['version'  '=='  'null'] 
__label__0 g.tool.errMgr.grammarError ( ErrorType.EMPTY_STRINGS_AND_SETS_NOT_ALLOWED , g.fileName , tree.token , '' '' '' ) 
__label__1 ['assertEquals'  '('  '0'  ' '  'counter.get'  '('  ')'  ')'] 
__label__0 new PoolBagEntry ( null,0 , pool ) 
__label__1 ['string.length'  '('  ')'  '>'  '='  '0'] 
__label__1 ['methodsToImplement'  '('  'methods'  ')'] 
__label__1 ['alluxioUri.getPath'  '('  ')'] 
__label__0 meta.setContentType ( Mimetypes.MIMETYPE_OCTET_STREAM ) 
__label__0 new CustomChangeException ( `` Failed to insert one or more concept map types '' , be ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/friends_timeline.json '' , null , paging.asPostParameterList ( ) , true ) ) 
__label__0 / * * * Make sure we do n't attempt to recover inline ; if the parser successfully recovers , it wo n't throw an exception . * / @ Override public Token recoverInline ( BaseRecognizer recognizer ) throws RecognitionException { throw new RuntimeException ( new InputMismatchException ( recognizer ) ) ; } 
__label__1 ['keys.isEmpty'  '('  ')'] 
__label__0 public Builder setRealmUsePreemptiveAuth ( boolean usePreemptiveAuth ) { realm ( ) .setUsePreemptiveAuth ( usePreemptiveAuth ) ; return this ; } 
__label__1 ['log.error'  '('  '``'  'Checking'  'bounds'  'key'  ':'  '['  '{'  '}'  ' '  '{'  '}'  ')'  '&'  'col'  ':'  '['  '{'  '}'  ' '  '{'  '}'  ')'  '('  'expect'  '{'  '}'  'keys'  ')'  "''"  ' '  'new'  'Object'  '['  ']'  '{'  'keyStart'  ' '  'keyEnd'  ' '  'startCol'  ' '  'endCol'  ' '  'expected.size'  '('  ')'  '}'  ')'] 
__label__1 ['DiagnosticType.error'  '('  '``'  'JSC_REDECLARED_VARIABLE'  "''"  ' '  "''"  'Redeclared'  'variable'  ':'  '{'  '0'  '}'  "''"  ')'] 
__label__1 ['stopTimeNs'  '-'  'responseStartTimeNs'] 
__label__0 new StringLengthValidator ( 1 , Integer.MAX_VALUE , true , false ) 
__label__0 conceptAnswer.getAnswerConcept ( ) 
__label__1 ['saveTask'  '('  'taskDefinition'  ')'] 
__label__1 ['List'  '<'  'Integer'  '>'] 
__label__1 ['path.toString'  '('  ')'] 
__label__1 ['intbuf.get'  '('  ')'] 
__label__1 ['logger.warn'  '('  '``'  'Failed'  'to'  'set'  'channel'  'option'  "'"  '{'  '}'  "'"  'with'  'value'  "'"  '{'  '}'  "'"  'for'  'channel'  "'"  '{'  '}'  "'"  "''"  ' '  'option'  ' '  'channel'  ' '  'channel'  ' '  't'  ')'] 
__label__0 BufferedReader is=IOUtils.readerFromString ( languagePropertiesFile ) 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__1 ['serversByLoad.lastKey'  '('  ')'] 
__label__1 ['mWorkerId'  '+'  'BASE_FILE_NUMBER'] 
__label__0 tJvmGcDetailed.getJvmGcNewTime ( ) 
__label__0 filter.setPageSize ( 1000 ) 
__label__0 StatBuckets.prettyUptimeStr ( secs ) 
__label__0 twitter1.checkUserListMembership ( id1.screenName , userList.getId ( ) , id2.id ) 
__label__0 javaWriter.emitSingleLineComment ( `` foo '' ) 
__label__0 UserGroupInformation.getLoginUser ( ) .checkTGTAndReloginFromKeytab ( ) 
__label__1 ['mTfs.ls'  '('  'Constants.PATH_SEPARATOR'  ' '  'true'  ')'] 
__label__0 incomingMessage.getMessagePayloadByte ( 1 ) 
__label__1 ['new'  'StoreFile'  '('  'this.fs'  ' '  'linkFilePath'  ' '  'conf'  ' '  'cacheConf'  ' '  'BloomType.NONE'  ' '  'NoOpDataBlockEncoder.INSTANCE'  ')'] 
__label__0 assertThat ( context ) .getBeans ( HandlerMapping.class ) .hasSize ( 5 ) 
__label__0 assertThat ( response ) .isEqualTo ( `` Woop woop . yay\n '' ) 
__label__0 logger.debug ( `` Could not send module un-availability notification of module `` + deploymentModuleIdentifier + `` to channel `` + this.channel , e ) 
__label__0 SocketUtils.findAvailableTcpPort ( 41000 ) 
__label__0 getMockEndpoint ( `` mock : test.after.1 '' ) .expectedMessageCount ( 10 ) 
__label__1 ['connection.zrangeByLex'  '('  'key'  ' '  'max'  ' '  'min'  ')'] 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__0 ssl.hasDefined ( CommonAttributes.CIPHER_SUITE ) 
__label__0 dests.size ( ) == 1 & & joinTree.getNoOuterJoin ( ) 
__label__1 ['servletPath.equals'  '('  '``'  '/'  "''"  ')'] 
__label__0 i < = getATN ( ) .maxTokenType 
__label__0 page=DATABASE_TABLES_AND_USER 
__label__1 ['waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs'  '('  '10000 200'  ')'] 
__label__0 strategiesBuilder : :customMessageWriter 
__label__1 ['getter.getRawReturnType'  '('  ')'] 
__label__1 ['left.getQualifierLength'  '('  ')'] 
__label__1 ['ApiConsumerHelper.findMethod'  '('  'endpoint'  ' '  'this'  ' '  'log'  ')'] 
__label__1 ['LinkedList'  '<'  '>'] 
__label__1 ['database.FindProduct'  '('  'node.getManufacturer'  '('  ')'  ' '  'node.getDeviceType'  '('  ')'  ' '  'node.getDeviceId'  '('  ')'  ')'] 
__label__1 ['('  'UndeclaredThrowableException'  ')'  'wrapped'] 
__label__1 ['loadRunnable'  'instanceof'  'LongTask'] 
__label__0 gl.glDeleteRenderbuffer ( depthStencilPackedBufferHandle ) 
__label__1 ['LOG.error'  '('  '``'  'Could'  "n't"  'upload'  'logs'  'for'  '``'  '+'  'containerId'  '+'  '``'  '.'  'Skipping'  'this'  'container'  '.'  "''"  ')'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__0 request.getPathInfo ( ) 
__label__1 ['statistics.addGetTimeNano'  '('  'System.nanoTime'  '('  ')'  '-'  'start'  ')'] 
__label__1 ['toHeapData'  '('  'key'  ')'] 
__label__1 ['this.logDirsSelector.getLocalPathForWrite'  '('  'appIdStr'  '+'  'Path.SEPARATOR'  '+'  'containerIdStr'  ' '  'LocalDirAllocator.SIZE_UNKNOWN'  ' '  'this.conf'  ')'] 
__label__0 ProcedureTestingUtility.waitAllProcedures ( master.getMasterProcedureExecutor ( ) ) 
__label__0 response.get ( ROLLED_BACK ) 
__label__0 propertiesComponent == null || propertiesComponent.isDefaultCreated ( ) 
__label__1 ['Integer.valueOf'  '('  'p.getProperty'  '('  '``'  'numberid.id'  "''"  ')'  ')'] 
__label__1 ['new'  'NullPointerException'  '('  '``'  'the'  'name'  'is'  'null'  "''"  ')'] 
__label__0 msg.getType ( ) == Message.Type.error || msg.getBody ( ) == null 
__label__0 wrappersToPrimitives.put ( wrapperType , primitiveType ) 
__label__0 DiagnosticType.warning ( `` JSC_NAME_REFERENCE_IN_EXTERNS '' , '' accessing name { 0 } in externs has no effect '' ) 
__label__0 binder.bindConstant ( ) .annotatedWith ( Names.named ( `` tlsServicePort '' ) ) .to ( 8291 ) 
__label__0 LOG.warn ( `` Ignoring duplicate class `` + className ) 
__label__0 ImplementationMethodDescriptor methodDescriptor 
__label__1 ['LOG.debug'  '('  '``'  'Retrieving'  'location'  'for'  'state='  '{'  '}'  'of'  'job='  '{'  '}'  'from'  'the'  'key-value'  'state'  'location'  'oracle'  '.'  '``'  ' '  'jobId'  ' '  'queryableStateName'  ')'] 
__label__1 ['conceptAnswer.getConcept'  '('  ')'] 
__label__1 ['ImmutableList.of'  '('  'result'  ')'] 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'rabbit'  "''"  ')'] 
__label__1 ['hz1.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__1 ['setAttributeInternal'  '('  'tempInodePath'  ' '  'true'  ' '  'opTimeMs'  ' '  'options'  ')'] 
__label__1 ['size'  '*'  '1.75f'] 
__label__0 new File ( value ) .toPath ( ) 
__label__0 ! consumer.endpoint.isAutoAck ( ) 
__label__0 assertEquals ( 300d , fStopwatch.runtime ( MILLISECONDS ) ,100d ) 
__label__0 mRecomputeLauncherService.shutdown ( ) 
__label__0 stat.st_mtim.tv_nsec.longValue ( ) 
__label__1 ['mock.expectedMessageCount'  '('  '2'  ')'] 
__label__0 currentModelTransform=renderable.modelTransform 
__label__1 ['new'  'PartitionsStatsRequest'  '('  'databaseName'  ' '  'tableName'  ' '  'columnNames'  ' '  'partitionValues'  ')'] 
__label__0 logError ( rcurly , '' rcurly '' , expandedTabsColumnNo ( rcurly ) , curlyLevel ( ) ) 
__label__1 ['registry.put'  '('  '``'  'params'  "''"  ' '  'params'  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'ConditionBasicLocalTest'  'extends'  'ConditionBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '1'  ')'  '.newInstances'  '('  ')'  ';'  '}'  '}'] 
__label__1 ['path.lastIndexOf'  '('  '``'  '/'  "''"  ')'  '=='  '0'] 
__label__1 ['logger.debug'  '('  '``'  'MyQ'  'binding'  'received'  'command'  "'"  '{'  '}'  "'"  'for'  'item'  "'"  '{'  '}'  "'"  "''"  ' '  'command'  ' '  'itemName'  ')'] 
__label__0 logger.trace ( `` { } unsupported item type { } for item { } '' , LoggerConstants.TFMODELUPDATE , provider.getItem ( itemName ) , itemName ) 
__label__0 new ModelNode ( ) .set ( 5000L ) 
__label__1 ['log.debug'  '('  '``'  'Error'  'while'  'closing'  'command'  'context'  "''"  ' '  'exception'  ')'] 
__label__1 ['Context.getEncounterService'  '('  ')'  '.canViewAllEncounterTypes'  '('  'Context.getAuthenticatedUser'  '('  ')'  ')'] 
__label__1 ['bindingGroup.get'  '('  'PORT_OFFSET'  ')'  '.asInt'  '('  ')'  '>'  '='  '0'] 
__label__1 ['Sets.'  '<'  'Integer'  '>'  'newHashSet'  '('  ')'] 
__label__1 ['System.getProperty'  '('  '``'  'RecoveryEnvironmentBean.expiryScannerClassNames'  "''"  ')'  '!'  '='  'null'] 
__label__1 ['table'  '!'  '='  'null'] 
__label__0 Status.createStatuseList ( http.get ( `` http : //yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json '' ) ) 
__label__0 @ UriParam ( label= '' producer '' , defaultValue= '' true '' ) 
__label__1 ['loadResourceAsURL'  '('  'name'  ')'] 
__label__0 mHeartbeatExecutor ! = null 
__label__1 ['new'  'CopyableValueComparator'  '('  'sortOrderAscending'  ' '  'type'  ')'] 
__label__0 MetricRegistry localRegistry 
__label__0 mock.expectedMinimumMessageCount ( 2 ) 
__label__0 RequestTokenFactory.createOAuth2Request ( null , '' foo '' , null , false , Collections.singleton ( `` ns_admin : read '' ) , null , null , null , null ) 
__label__0 registrar.checkExisting ( added ) 
__label__0 new TestResultPrinter ( new PrintStream ( output ) ) { public void printErrors ( TestResult result ) { getWriter ( ) .println ( `` Errors here '' ) ; } } 
__label__1 ['stopWatch.taken'  '('  ')'  '<'  '100'] 
__label__1 ['Thread.sleep'  '('  '1000'  ')'] 
__label__1 ['assertEquals'  '('  'fStopwatch.runtime'  '('  'MILLISECONDS'  ')'  ' 300d 100d'  ')'] 
__label__1 ['new'  'MockEnvironment'  '('  '``'  'MockTask'  "''"  ' 3'  '*'  '1024'  '*'  '1024'  ' '  'new'  'MockInputSplitProvider'  '('  ')'  ' 1024'  ' '  'new'  'Configuration'  '('  ')'  ' '  'new'  'ExecutionConfig'  '('  ')'  ' '  'maxParallelism'  ' '  'numSubtasks'  ' '  'subtaskIndex'  ')'] 
__label__1 ['from'  '('  '``'  'jms'  ':'  'queue2'  ':'  'parallelLoanRequestQueue'  "''"  ')'  '.process'  '('  'new'  'CreditAgency'  '('  ')'  ')'  '.multicast'  '('  'new'  'BankResponseAggregationStrategy'  '('  ')'  '.setAggregatingOutMessage'  '('  'true'  ')'  ')'  '.setParallelProcessing'  '('  'true'  ')'] 
__label__0 @ RunWith ( HazelcastParallelClassRunner.class ) @ Category ( { QuickTest.class , ParallelTest.class } ) public class ListBasicDistributedTest extends ListAbstractTest { @ Override protected HazelcastInstance [ ] newInstances ( Config config ) { return createHazelcastInstanceFactory ( 2 ) .newInstances ( config ) ; } } 
__label__0 HIVE_TABLE_OFFLINE ( 2 , USER_ERROR ) 
__label__1 ['mock.expectedBodiesReceived'  '('  '``'  'Hello'  'World'  '3'  "''"  ')'] 
__label__0 Integer.parseInt ( matcher.group ( 1 ) ) 
__label__1 ['DEFAULT_ROW_FLUSH_BOUNDARY=80000'] 
__label__0 details.setProperty ( fileName , Long.toString ( timestamp ) ) 
__label__0 LOG.error ( `` failed to send { } messages to { } : { } '' , numMessages , dstAddressPrefixedName , future.getCause ( ) ) 
__label__1 ['assertTrueEventually'  '('  'new'  'AssertTask'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'run'  '('  ')'  'throws'  'Exception'  '{'  'assertFalse'  '('  'lock.isLocked'  '('  ')'  ')'  ';'  '}'  '}'  ' 5'  ')'] 
__label__1 ['DiagnosticType.disabled'  '('  '``'  'JSC_GOOG_MODULE_IN_NON_MODULE'  "''"  ' '  "''"  'goog.module'  '('  ')'  'call'  'must'  'be'  'the'  'first'  'statement'  'in'  'a'  'module'  '.'  "''"  ')'] 
__label__0 Response description ( String description ) ; 
__label__1 ['globalExecutionStats.getSplits'  '('  ')'] 
__label__0 type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF || type == TokenTypes.ANNOTATION_DEF 
__label__1 ['SingleServerInventoryProvider.class'] 
__label__1 ['getConnectionFactory'  '('  ')'] 
__label__1 ['report'  '('  'n'  ' '  'MISPLACED_ANNOTATION'  ')'] 
__label__0 ( int ) timeoutMs / 1000 
__label__1 ['configureAtmosphereInterceptor'  '('  'sc'  ')'] 
__label__0 Bytes.toBytes ( tableOrRegionName ) 
__label__1 ['data.limit'  '('  ')'] 
__label__1 ['uuid'  '!'  '='  'null'] 
__label__1 ['routerChain.notifyFullInvokers'  '('  'groupInvokers'  ' '  'getUrl'  '('  ')'  ')'] 
__label__0 / * * * Changes the owner of a file or directory specified by args . * / public final class ChownCommand extends AbstractAclCommand { public ChownCommand ( TachyonConf conf , TachyonFileSystem tfs ) { super ( conf , tfs ) ; } @ Override public String getCommandName ( ) { return `` chown '' ; } @ Override protected int getNumOfArgs ( ) { return 2 ; } @ Override public void run ( String ... args ) throws IOException { String owner=args [ 0 ] ; TachyonURI path=new TachyonURI ( args [ 1 ] ) ; chown ( path , owner , false ) ; } @ Override public String getUsage ( ) { return `` chown < owner > < path > '' ; } } 
__label__1 ['JsonProcessingExceptionMapper.class'] 
__label__0 new PutBackupOperation ( name , dataKey , dataValue , replicationInfo , true , false ) 
__label__0 clearFromMember.join ( ) 
__label__0 progress.start ( 0.29f ) 
__label__0 assertRemoveSubsystemResources ( servicesB ) 
__label__0 new Path ( testBucket.getParent ( ) , '' .test-2.inprogress '' ) .getPath ( ) 
__label__1 ['QuotaCache.this.tableQuotaCache.contains'  '('  'table'  ')'] 
__label__1 ['LOG.error'  '('  '``'  'Can'  'not'  'resolve'  'the'  'host'  'name'  'for'  '``'  '+'  'regionAddress'  '+'  '``'  'because'  'of'  '``'  '+'  'e'  ')'] 
__label__0 Thread.sleep ( 3000 ) 
__label__1 ['LOG.warn'  '('  '``'  'Promotion'  'of'  'block'  '``'  '+'  'blockId'  '+'  '``'  'failed'  '.'  '``'  ' '  'ioe'  ')'] 
__label__0 List < DelayedEntry > 
__label__0 assertThat ( context.getBeansOfType ( WebServerFactoryCustomizer.class ) ) .hasSize ( 2 ) 
__label__1 ['user.hasPrivilege'  '('  'OpenmrsConstants.PRIV_EDIT_USERS'  ')'] 
__label__0 DiagnosticType.warning ( `` JSC_MISPLACED_TYPE_ANNOTATION '' , '' Type annotations are not allowed here. `` + `` Are you missing parentheses ? '' ) 
__label__1 ['taskService.createTaskQuery'  '('  ')'  '.orderByTaskId'  '('  ')'] 
__label__0 nameDefinitionMultimap.keySet ( ) 
__label__1 ['parent.getRegionName'  '('  ')'] 
__label__1 ['ctx.write'  '('  '``'  'Welcome'  'to'  '``'  '+'  'InetAddress.getLocalHost'  '('  ')'  '.getHostName'  '('  ')'  '+'  '``'  'secure'  'chat'  'service'  '!'  '\\n'  "''"  ')'] 
__label__0 registry.bind ( `` connectionFactoryMock '' , connectionFactoryMock ) 
__label__0 assertEquals ( 512f , i,20f ) 
__label__1 ['TEST_UTIL.waitTableEnabled'  '('  'TEST_TABLE.getTableName'  '('  ')'  ')'] 
__label__0 CommandUtils.convertMsToDate ( files [ 1 ] .getCreationTimeMs ( ) ) 
__label__0 4 > = buf.length - count 
__label__1 ['clusterMap.put'  '('  'buildAttributeName'  '('  'entry.getKey'  '('  ')'  ')'  ' '  'cacheEntry.value'  ')'] 
__label__1 ['getCurrentRequestId'  '('  ')'] 
__label__0 ! Values.WEBSOCKET.equalsIgnoreCase ( upgrade ) 
__label__1 ['Thread.sleep'  '('  '50'  ')'] 
__label__1 ['new'  'StringBuilder'  '('  '730'  ')'] 
__label__1 ['analysis.getTypeWithCoercions'  '('  'aggregate'  ')'] 
__label__0 new GetExecutionVariableInstancesCmd ( executionId , variableNames , true ) 
__label__0 executor.execute ( new NamedRunnable ( `` OkHttp % s ping % 08x % 08x '' , hostName , payload1 , payload2 ) { @ Override public void execute ( ) { try { writePing ( reply , payload1 , payload2 , ping ) ; } catch ( IOException ignored ) { } } } ) 
__label__0 getLsNoAclResultStr ( `` /testRoot/testDir '' , files [ 1 ] .getCreationTimeMs ( ) ,1 , LsCommand.STATE_FOLDER ) 
__label__0 DEFAULT_SHUFFLE_PORT=13562 
__label__1 ['page=TESTING_AUTHENTICATION_SETUP'] 
__label__1 ['?'  'extends'  'Exception'] 
__label__1 ['hashFunction.hashBytes'  '('  'littleEndian'  ')'] 
__label__1 ['NoopChatHandlerProvider.class'] 
__label__0 patientState.getState ( ) .getUuid ( ) 
__label__0 setLowHighExpected ( lowResults , highResults , expectedResults , BCUBED_TP,12440,12451.87,12451.87 ) 
__label__0 CommandUtils.convertMsToDate ( mTfs.getInfo ( mTfs.open ( tUri ) ) .getCreationTimeMs ( ) ) 
__label__0 lookupLink ( parseName ( name ) ) 
__label__0 version == null || version.equals ( `` '' ) 
__label__0 endFunction ( `` delete_column_statistics_by_table : `` , ret ! = false , null ) 
__label__0 MBeanInfoAssembler.class 
__label__1 ['LOG.error'  '('  '``'  'Unable'  'to'  'read'  'HTTP'  'response'  'content'  "''"  ' '  'e'  ')'] 
__label__0 CommandUtils.convertMsToDate ( files [ 2 ] .getCreationTimeMs ( ) ) 
__label__0 processInstance.getProcessDefinitionId ( ) 
__label__0 dic.buildRouterChain ( ) 
__label__0 absEdge.getTarget ( view.getViewId ( ) ) 
__label__1 ['final'  'AuditEvemtFormatter'  'formatter=new'  'AuditEventDefaultFormatter'  '('  ')'  ';'] 
__label__1 ['DefaultManagementAgent.class'] 
__label__0 ! expr.isGetProp ( ) || ! expr.isQualifiedName ( ) || ! expr.getLastChild ( ) .getString ( ) .equals ( `` bind '' ) 
__label__0 assertEquals ( SIZE * COUNTDOWN , c1.counts + c2.counts ) 
__label__0 Sets.difference ( queryIdsSnapshot , liveQueries ) 
__label__0 controller ! = null & & controller.getState ( ) ! = ServiceController.State.UP 
__label__0 Optional < RemoteInterfaceType > 
__label__1 ['``'  'Content-Type'  "''"  '.equals'  '('  'name'  ')'] 
__label__1 ['camera.setMatrices'  '('  'app.getGraphics'  '('  ')'  ')'] 
__label__1 ['System.currentTimeMillis'  '('  ')'] 
__label__0 getPath ( `` checks/javadoc/Input_02.java '' ) 
__label__1 ['Status.constructStatuses'  '('  'get'  '('  'getBaseURL'  '('  ')'  '+'  '``'  'statuses/retweeted_by_me.json'  "''"  ' '  'null'  ' '  'true'  ')'  ')'] 
__label__0 configureWebDotXmlAtmosphereHandler ( scFacade ) 
__label__1 ['response'  '=='  'null'] 
__label__0 Context.getVisitService ( ) .getAllVisitTypes ( ) 
__label__0 websocketComponent.setMaxThreads ( 20 ) 
__label__0 CellUtil.estimatedHeapSizeOfWithoutTags ( cell ) 
__label__1 ['assertTrue'  '('  'predicate.apply'  '('  'pickleEvent'  ')'  ')'] 
__label__1 ['m_data.rewind'  '('  ')'  '.forward'  '('  '('  'int'  ')'  'key_offset'  ')'  '.getFixString'  '('  '('  'int'  ')'  'key_length'  ')'] 
__label__0 directoryUrl.getParameter ( Constants.GROUP_KEY , '' '' ) 
__label__1 ['database.FindProduct'  '('  'node.getManufacturer'  '('  ')'  ' '  'node.getDeviceType'  '('  ')'  ' '  'node.getDeviceId'  '('  ')'  ')'] 
__label__1 ['serverSocket'  '=='  'null'] 
__label__0 fieldNameNode.getCharno ( ) 
__label__1 ['ZWaveSwithcAllCommandClass.class'] 
__label__0 assertEquals ( 512f , i,20f ) 
__label__0 entry.getValue ( ) .accessibleNodeLabels 
__label__1 ['option.getType'  '('  ')'] 
__label__1 ['columnType.equalsIgnoreCase'  '('  '``'  'string'  "''"  ')'] 
__label__1 ['collisionPoints.get'  '('  '2'  ')'] 
__label__0 setNetworkTimeout ( connection , originalTimeout ) 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'look'  'for'  'classes'  'in'  '``'  '+'  'jarFileName'  '+'  '``'  ':'  '``'  '+'  'ioEx'  ')'] 
__label__1 ['mFixedExecutionService.shutdown'  '('  ')'] 
__label__1 ['yamlFactory.createJsonParser'  '('  'input'  ')'] 
__label__1 ['timeMillis'  '-'  'MILLIS_IN'] 
__label__0 legacyValue.isDefined ( ) 
__label__1 ['this.isDefaultAutoCommit'  '('  ')'] 
__label__0 logger.trace ( `` attempting to login '' ) 
__label__1 ['region.getRegionId'  '('  ')'] 
__label__0 loadTask instanceof LongTask 
__label__1 ['new'  'DefaultPropertyNamePatternsMatcher'  '('  'TARGET_NAME_DELIMETERS'  ' '  'this.targetName'  ')'] 
__label__1 ['KafkaEightDruidModule.class'] 
__label__1 ['localX2'  '*'  'cos'] 
__label__1 ['new'  'IllegalArgumentException'  '('  ')'] 
__label__1 ['logger.debug'  '('  '``'  'Item'  'not'  'found'  'error'  'while'  'generating'  'chart'  '.'  "''"  ')'] 
__label__0 prePassivates ! = null 
__label__0 attribute.getDefinition ( ) .getMarshaller ( ) 
__label__1 ['rs.getString'  '('  'columnName'  ')'] 
__label__1 ['Exception'  'exception'] 
__label__1 ['hotRestartState'  '!'  '='  'null'] 
__label__1 ['connection.setFollowRedirects'  '('  'httpRequest.getFollowRedirects'  '('  ')'  ')'] 
__label__0 LOG.error ( `` Halting process : ShellBolt died . `` , exception ) 
__label__0 newCount < = reservoirSize 
__label__1 ['node.actor.getY'  '('  ')'  '<'  '='  'high'] 
__label__0 filteredMessage.addLast ( perRequestFilter ( r , new Entry ( o , r , f , o ) , false ) ) 
__label__1 ['bc.getExecutorService'  '('  ')'] 
__label__0 AstUtils.hasAtLeastOneAnnotation ( classNode , '' Controller '' , '' EnableWebMvc '' ) 
__label__1 ['LoopContextStepRetrieval'  'retrievalToAdapt'] 
__label__0 conf.getRestBaseURL ( ) 
__label__1 ['indexOutURI.getPath'  '('  ')'] 
__label__1 ['5'  '*'  '60'  '*'  '100'] 
__label__1 ['inputFuture.cancel'  '('  'mayInterruptIfRunning'  ')'] 
__label__0 routes.InputTypesResource ( ) 
__label__1 ['mockRegionInfo.isMetaRegion'  '('  ')'] 
__label__0 item.annotationType ( ) 
__label__1 ['config.getOrcMaxBufferSize'  '('  ')'] 
__label__0 uncompressedProto.length < 1100000 
__label__0 Utils.javaDeserialize ( _boltSer , IBatchBolt.class ) 
__label__1 ['Wt.getSlice'  '('  'slice'  ')'  '.mult'  '('  'Wt.getSlice'  '('  'slice'  ')'  '.transpose'  '('  ')'  ')'] 
__label__1 ['GL20.glUniform3'  '('  'location'  ' '  'toFloatBuffer'  '('  'v'  ' '  'offset'  ' '  'count'  '*'  '3'  ')'  ')'] 
__label__1 ['getMockEndpoint'  '('  '``'  'mock'  ':'  "''"  '+'  'i'  ')'  '.expectedMessageCount'  '('  '1000'  ')'] 
__label__1 ['connection.setFollowRedirects'  '('  'httpRequest.getFollowRedirects'  '('  ')'  ')'] 
__label__1 ['setTimeToLiveSeconds'  '('  'Long.valueOf'  '('  '('  'String'  ')'  'cacheSettings.get'  '('  '``'  'diskExpiryThreadIntervalSeconds'  "''"  ')'  ')'  '.longValue'  '('  ')'  ')'] 
__label__0 filteredSearchRequest ( query , filter , IndexHelper.determineAffectedIndices ( indexRangeService , deflector , range ) , range ) 
__label__1 ['HazelcastInstanceFactory.terminateAll'  '('  ')'] 
__label__1 ['targetActor.addCaptureListener'  '('  'listener'  ')'] 
__label__1 ['new'  'EnumValidator'  '('  'ParticipantStatus.class'  ' '  'false'  ' '  'false'  ')'] 
__label__1 ['StringUtils.hasLength'  '('  'secretQuestion'  ')'  '||'  'StringUtils.hasLength'  '('  'secretAnswer'  ')'] 
__label__1 ['this.getNotEmptyWaitThreadPeak'  '('  ')'] 
__label__0 new DefaultPropertyNamePatternsMatcher ( TARGET_NAME_DELIMITERS , this.targetName ) 
__label__1 ['container.getTimeFormat'  '('  ')'  '.equals'  '('  'TimeFormat.DATE'  ')'] 
__label__0 Color.fromRGB ( 0x253192 ) 
__label__1 ['CompletableFuture'  '<'  'Boolean'  '>'] 
__label__0 ImmutableList < SourceFile > 
__label__1 ['mHeartbeat'  '!'  '='  'null'] 
__label__0 instance2.getLifecycleService ( ) .shutdown ( ) 
__label__0 new DataSegment ( `` test '' , new Interval ( `` 2012-02-01/2012-02-02 '' ) , new DateTime ( ) .toString ( ) , Maps. < String , Object > newHashMap ( ) , Lists. < String > newArrayList ( ) , Lists. < String > newArrayList ( ) , new NoneShardSpec ( ) ,1,0 ) 
__label__1 ['Ints.min'  '('  'startedSplits.get'  '('  ')'  ' '  'completedSplits.get'  '('  ')'  ' '  'splits'  ')'] 
__label__1 ['endpoint.getCamelContext'  '('  ')'  '.getClassResolver'  '('  ')'  '.resolveClass'  '('  'endpoint.getConfiguration'  '('  ')'  '.getTargetModel'  '('  ')'  ')'] 
__label__1 ['CONFIG_REFRESH.equals'  '('  'configKey'  ')'  '||'  '``'  'service.pid'  "''"  '.equals'  '('  'configKey'  ')'] 
__label__1 ['level'  '<'  '='  'RF_STATUS_FULL_SIGNAL'] 
__label__1 ['registration.registerOperationHandler'  '('  'CommonAttributes.DISABLE_CONTEXT'  ' '  'ModClusterDisableContext.INSTANCE'  ' '  'disableContext'  ' '  'false'  ')'] 
__label__1 ['resetTimeInSeconds'  '*'  '1000'] 
__label__1 ['entry.getValue'  '('  ')'  '.getManagementInterfaceMinorVersion'  '('  ')'] 
__label__0 outputBufferProcessors=3 
__label__1 ['rs.getString'  '('  'columnIndex'  ')'] 
__label__1 ['dfa'  '=='  'null'] 
__label__1 ['callerPrincipalCallback'  '=='  'null'] 
__label__1 ['ReactiveHelper.scheduleLast'  '('  'runnable'  ' '  "''"  'Multicast'  'next'  'step'  "''"  ')'] 
__label__1 ['new'  'UDFArgumentTypeException'  '('  '2'  ' '  "''"  'The'  'first'  'and'  'seconds'  'arguments'  'of'  'function'  'NLV'  'should'  'have'  'the'  'same'  'type'  ' '  '``'  '+'  '``'  'but'  'they'  'are'  'different'  ':'  '\\'  "''"  "''"  '+'  'arguments'  '['  '0'  ']'  '.getTypeName'  '('  ')'  '+'  '``'  '\\'  "''"  'and'  '\\'  "''"  "''"  '+'  'arguments'  '['  '1'  ']'  '.getTypeName'  '('  ')'  '+'  '``'  '\\'  "''"  "''"  ')'] 
__label__1 ['msg.getType'  '('  ')'  '=='  'Message.Type.error'] 
__label__1 ['protocol.read'  '('  'inputStream'  ')'] 
__label__1 ['``'  'access-control/default'  'is'  'missing'  'operations'  ':'  '``'  '+'  'accessControl'] 
__label__1 ['gauge.getValue'  '('  ')'  'instanceof'  'Long'] 
__label__1 ['is'  '('  '``'  '/home/source'  "''"  ')'] 
__label__0 item.annotationType ( ) 
__label__0 new UnsupportedOperationException ( getClass ( ) .getName ( ) ) 
__label__0 Validate.notEmpty ( name , '' Cookie name must not be empty '' ) 
__label__1 ['Values.WEBSOCKET.equalsIgnoreCase'  '('  'upgrade'  ')'] 
__label__1 ['Integer.valueOf'  '('  'p.getProperty'  '('  '``'  'numberid.id'  "''"  ')'  ')'] 
__label__0 TypeScriptJqueryClientCodegen.class 
__label__0 new Interval ( startTime , endTime , ISOChronology.getInstanceUTC ( ) ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__0 GL.glPolygonOffset ( factor , units ) 
__label__0 GL.glPolygonOffset ( factor , units ) 
__label__0 lexer.token ( ) == ( Token.SELECT ) || lexer.token ( ) == ( Token.SEL ) 
__label__1 ['new'  'Histogram'  '('  '10 100 1000 10'  '*'  '1000 100'  '*'  '1000'  ')'] 
__label__1 ['StatBuckets.prettyUptime'  '('  'secs'  ')'] 
__label__1 ['new'  'UnsupportedOperationException'  '('  ')'] 
__label__1 ['synchronized'  '('  'threadCount'  ')'  '{'  '++threadCount'  ';'  'if'  '('  'session'  '=='  'null'  ')'  '{'  'try'  '{'  'options=BigtableOptionsFactory.fromConfiguration'  '('  'CONFIG'  ')'  ';'  'session=new'  'BigtableSession'  '('  'options'  ')'  ';'  'client=session.getDataClient'  '('  ')'  ';'  '}'  'catch'  '('  'IOException'  'e'  ')'  '{'  'throw'  'new'  'DBException'  '('  '``'  'Error'  'loading'  'options'  'from'  'config'  ':'  '``'  ' '  'e'  ')'  ';'  '}'  '}'  'else'  '{'  'client=session.getDataClient'  '('  ')'  ';'  '}'  'if'  '('  'clientSideBuffering'  ')'  '{'  'heapSizeManager=new'  'HeapSizeManager'  '('  'Long.parseLong'  '('  'getProperties'  '('  ')'  '.getProperty'  '('  'ASYNC_MUTATOR_MAX_MEMORY'  ' '  'Long.toString'  '('  'AsyncExecutor.ASYNC_MUTATOR_MAX_MEMORY_DEFAULT'  ')'  ')'  ')'  ' '  'Integer.parseInt'  '('  'getProperties'  '('  ')'  '.getProperty'  '('  'ASYNC_MAX_INFLIGHT_RPCS'  ' '  'Integer.toString'  '('  'AsyncExecutor.MAX_INFLIGHT_RPCS_DEFAULT'  ')'  ')'  ')'  ')'  ';'  'asyncExecutor=new'  'AsyncExecutor'  '('  'client'  ' '  'heapSizeManager'  ')'  ';'  '}'  '}'] 
__label__0 new TransactionOptions ( ) .setDurability ( 0 ) .setTimeout ( 30 , TimeUnit.SECONDS ) 
__label__1 ['Assert.fail'  '('  ')'] 
__label__1 ['System.nanoTime'  '('  ')'] 
__label__0 generator.generate ( signedByKeyPair.getPrivate ( ) ) 
__label__0 resultEndpoint.setResultWaitTime ( 5000 ) 
__label__1 ['Namespace.CURRENT.toString'  '('  ')'] 
__label__1 ['logger.warn'  '('  '``'  'Could'  'not'  'send'  'module'  'un-availability'  'notification'  'of'  'module'  '``'  '+'  'deploymentModuleIdentifier'  '+'  '``'  'to'  'channel'  '``'  '+'  'this.channel'  ' '  'e'  ')'] 
__label__0 nodeEngine.getClusterService ( ) 
__label__1 ['edge.setType'  '('  'EdgeDirection.UNDIRECTED'  ')'] 
__label__0 lineageInfo.getChildren ( ) 
__label__0 `` Content-Type '' .equalsIgnoreCase ( name ) 
__label__1 ['getNonCompilablePath'  '('  '``'  'InputGenericWhitespaceEndsTheLine.java'  "''"  ')'] 
__label__0 mapEntry.getValue ( ) .equals ( source ) 
__label__1 ['is'  '('  '``'  '/home/source'  "''"  ')'] 
__label__1 ['KeyValueHolder'  '<'  'RouteContext'  ' '  'Processor'  '>'] 
__label__1 ['GL20.glGetActiveUniform'  '('  'program'  ' '  'index 256'  ' '  'typeTmp'  ')'] 
__label__1 ['Ints.min'  '('  'completedSplits.get'  '('  ')'  ' '  'splits'  ')'] 
__label__1 ['conf.setInt'  '('  '``'  'hbase.hregion.memstore.block.multiplier'  "''"  ' 10'  ')'] 
__label__1 ['incomingMessage.getMessagePayloadByte'  '('  '0'  ')'] 
__label__0 logger.debug ( `` NODE { } : BATTERY LOW ! `` , this.getNode ( ) .getNodeId ( ) ) 
__label__1 ['maxSize'  '>'  '('  'used'  '/'  'total'  ')'] 
__label__1 ['gl.glDeleteBuffer'  '('  'depthStencilPackedBufferHandle'  ')'] 
__label__1 ['calendar.set'  '('  'Calendar.YEAR 2200'  ')'] 
__label__0 final Integer firstLineKey=lines.firstKey ( ) ; 
__label__1 ['Assert.assertEquals'  '('  'configs.size'  '('  ')'  ' 1'  ')'] 
__label__1 ['NettyAsyncHttpProvider.class'] 
__label__0 logger.error ( `` { } is already cancelled '' , impl.uuid ( ) ) 
__label__1 ['DeleteOptions.defaults'  '('  ')'  '.setRecursive'  '('  'true'  ')'  '.setAlluxioOnly'  '('  'false'  ')'  '.setUnchecked'  '('  'false'  ')'] 
__label__1 ['new'  'RetryDriver'  '('  'maxRetryAttempts'  ' '  'minSleepTime'  ' '  'maxSleepTime'  ' '  'scaleFactor'  ' '  'maxRetryTime'  ' '  'exceptionWhiteList'  ')'] 
__label__1 ['order.getInstructions'  '('  ')'] 
__label__0 Class.forName ( injectorSourceClassName , true , Thread.currentThread ( ) .getContextClassLoader ( ) ) 
__label__0 System.err.format ( `` Tier % d : Not enough space on % s . % n '' + `` Desired quota : % s % n '' + `` Used in tiered storage : % s % n '' + `` Available : % s % n '' , level , storageEntry.getKey ( ) , FormatUtils.getSizeFromBytes ( quota ) , FormatUtils.getSizeFromBytes ( used ) , FormatUtils.getSizeFromBytes ( available ) , FormatUtils.getSizeFromBytes ( quota - used - available ) ) 
__label__1 ['GL20.glUniformMatrix3'  '('  'location'  ' '  'transpose'  ' '  'toFloatBuffer'  '('  'value'  ' '  'offset'  ' '  'count'  '*'  '9'  ')'  ')'] 
__label__1 ['Iterable'  '<'  'ObjectType'  '>'] 
__label__1 ['public'  'QueryRunner'  'printPlan'  '('  ')'  '{'  'printPlan=true'  ';'  'return'  'this'  ';'  '}'] 
__label__1 ['public'  'class'  'XpathRegressionNestedTryDepthTest'  'extends'  'AbstractXpathTestSupport'  '{'  '@'  'Test'  'public'  'void'  'testCorrect'  '('  ')'  'throws'  'Exception'  '{'  'final'  'String'  'checkName=NestedTryDepthCheck.class.getSimpleName'  '('  ')'  ';'  'final'  'File'  'fileToProcess=new'  'File'  '('  'getPath'  '('  'checkName'  ' '  "''"  'SuppressionXpathRegressionNestedTryDepth.java'  "''"  ')'  ')'  ';'  'final'  'DefaultConfiguration'  'moduleConfig=createModuleConfig'  '('  'NestedTryDepthCheck.class'  ')'  ';'  'final'  'String'  '['  ']'  'expectedViolation='  '{'  '``'  '7:17'  ':'  '``'  '+'  'getCheckMessage'  '('  'NestedTryDepthCheck.class'  ' '  'NestedTryDepthCheck.MSG_KEY 2 1'  ')'  '}'  ';'  'final'  'List'  '<'  'String'  '>'  'expectedXpathQueries=Collections.singletonList'  '('  '``'  '/CLASS_DEF'  '['  '@'  "text='SuppressionXpathRegressionNestedTryDepth"  "'"  ']'  '/OBJBLOCK'  "''"  '+'  '``'  '/METHOD_DEF'  '['  '@'  "text='test"  "'"  ']'  '/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY/SLIST/LITERAL_TRY'  "''"  ')'  ';'  'runVerifications'  '('  'moduleConfig'  ' '  'fileToProcess'  ' '  'expectedViolation'  ' '  'expectedXpathQueries'  ')'  ';'  '}'  '}'] 
__label__1 ['new'  'SimpleCanalConnector'  '('  'address'  ' '  'username'  ' '  'password'  ' '  'destination'  ' '  'null'  ')'] 
__label__1 ['Exception'  'cause'] 
__label__1 ['ssl.has'  '('  'CommonAttributes.CERTIFICATE_KEY_FILE'  ')'] 
__label__0 System.currentTimeMillis ( ) 
__label__1 ['JsonObject.createObjectMapper'  '('  ')'  '.getJsonFactory'  '('  ')'] 
__label__1 ['@'  'Path'  '('  'PATH_NODE_INDEX_ID'  ')'] 
__label__0 websocketComponent.setMaxThreads ( 20 ) 
__label__1 ['request.getRequestURI'  '('  ')'] 
__label__0 implementationMethodDescriptors.build ( ) 
__label__0 mockRegionInfo.isMetaTable ( ) 
__label__0 maxSize < ( used / 1024 / 1024 ) 
__label__1 ['Configuration.getLong'  '('  'PropertyKey.USER_NETWORK_NETTY_TIMEOUT_MS'  ')'] 
__label__0 request.getRemoteAddr ( ) 
__label__0 new DatagramDnsQuery ( null , addr,1 ) 
__label__1 ['getClusterMap'  '('  ')'  '.put'  '('  'buildAttributeName'  '('  'name'  ')'  ' '  'value'  ')'] 
__label__1 ['call.getRpcTimeout'  '('  ')'] 
__label__1 ['Objects.isNull'  '('  'value'  ')'] 
__label__0 public Builder setRequestCompressionLevel ( int requestCompressionLevel ) { configBuilder.setRequestCompressionLevel ( requestCompressionLevel ) ; return this ; } 
__label__1 ['Status.constructStatuses'  '('  'http.get'  '('  '``'  'http'  ':'  '//yusuke.homeip.net/twitter4j/en/testcases/statuses/public_timeline.json'  "''"  ')'  ')'] 
__label__1 ['List'  '<'  'String'  '>'] 
__label__0 HttpURLConnection.setFollowRedirects ( httpRequest.getFollowRedirects ( ) ) 
__label__0 Bytes.toBytes ( tableNameOrRegionName ) 
__label__0 NoResolvedType noResolvedType=new NoResolvedType ( this ) ; 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__0 calendar.set ( Calendar.YEAR,2030 ) 
__label__1 ['assertEquals'  '('  '2'  ' '  'props.getDisabledPlugins'  '('  ')'  '.length 2'  ')'] 
__label__0 CompletableFuture < Void > 
__label__0 Assert.assertEquals ( new InetSocketAddress ( defaultHostname , defaultPort ) , workerAddress ) 
__label__0 AsyncHttpClientConfig.class 
__label__0 v.executeBlocking ( fut - > { try { v.simulateKill ( ) ; fut.complete ( ) ; } catch ( Exception e ) { fut.fail ( e ) ; } } , false , ar - > { if ( ! ar.succeeded ( ) ) { fail ( ar.cause ( ) ) ; } } ) 
__label__1 ['Assert.assertFalse'  '('  'rule.appliesTo'  '('  'builder.interval'  '('  'new'  'Interval'  '('  '``'  '0500-01-01/2100-12-31'  "''"  ')'  ')'  '.build'  '('  ')'  ' '  'now'  ')'  ')'] 
__label__1 ['new'  'BindException'  '('  'concept'  ' '  "''"  'concept'  "''"  ')'] 
__label__1 ['Nd4j.getAffinityManager'  '('  ')'  '.getDeviceForThread'  '('  'Thread.currentThread'  '('  ')'  ')'] 
__label__1 ['new'  'ConnectorTableLayout'  '('  'handle'  ')'] 
__label__1 ['getSrcPath'  '('  '``'  'checks/javadoc/Input_01.java'  "''"  ')'] 
__label__1 ['JavaConversions.asIterable'  '('  'kafkaLog.logSegments'  '('  'committedOffset'  ' '  'Long.MAX_VALUE'  ')'  ')'] 
__label__0 expectedCountsForADoc ( weights , e4Update , ind ) 
__label__1 ['mock.message'  '('  '0'  ')'  '.outBody'  '('  'String.class'  ')'] 
__label__1 ['@'  'RunWith'  '('  'HazelcastParallelClassRunner.class'  ')'  '@'  'Category'  '('  '{'  'QuickTest.class'  ' '  'ParallelTest.class'  '}'  ')'  'public'  'class'  'AtomicReferenceBasicLocalTest'  'extends'  'AtomicReferenceBasicTest'  '{'  '@'  'Override'  'protected'  'HazelcastInstance'  '['  ']'  'newInstances'  '('  ')'  '{'  'return'  'createHazelcastInstanceFactory'  '('  '1'  ')'  '.newInstances'  '('  ')'  ';'  '}'  '}'] 
__label__1 ['new'  'PrestoException'  '('  'INVALID_CAST_ARGUMENT'  ' '  'e'  ')'] 
__label__0 memoryMap.getInt ( `` mappedWithJournal '' , -1 ) 
__label__1 ['public'  'class'  'CourierNew'  'extends'  'FontMetrics'  '{'  '{'  'maxCharHeight=678'  ';'  'for'  '('  'int'  'i=0'  ';'  'i'  '<'  '128'  ';'  'i++'  ')'  'widths'  '['  'i'  ']'  '=600'  ';'  '}'  '}'] 
__label__1 ['delayer'  '!'  '='  'null'] 
__label__0 SCHEMA ( 35 , false ) 
__label__0 GatherGetterAndSetterProperties.update ( compiler , externs , root ) 
__label__0 hz1.getLifecycleService ( ) .shutdown ( ) 
__label__1 ['new'  'KernelStatement'  '('  'mock'  '('  'KernelTransactionImplementation.class'  ')'  ' '  'mock'  '('  'IndexReaderFactory.class'  ')'  ' '  'scanStore'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ')'] 
__label__1 ['ServiceLoader.load'  '('  'MasterFactory.class'  ')'] 
__label__1 ['defaults.jackson2Decoder'  '('  'new'  'Jackson2JsonDecoder'  '('  'objectMapper'  ' '  'EMPTY_MIME_TYPES'  ')'  ')'] 
__label__1 ['colorModeClass.equals'  '('  '``'  'ProportionalSizeMode'  "''"  ')'] 
__label__0 handshakeFuture == null 
__label__0 commandLineArguments.isLocal ( ) || commandLineArguments.isDebug ( ) 
__label__0 block.useSourceInfoIfMissingFromForTree ( exprRoot ) 
__label__1 ['broadcasterClassName.equalsIgnoreCase'  '('  'DefaultBroadcaster.class.getName'  '('  ')'  ')'] 
__label__1 ['in.read'  '('  'serCondition'  ')'] 
__label__1 ['assertEquals'  '('  '5'  ' '  'AccessControlClient.getUserPermissions'  '('  'systemUserConnection'  ' '  'TEST_TABLE.toString'  '('  ')'  ')'  '.size'  '('  ')'  ')'] 
__label__0 cluster.getRexBuilder ( ) .makeCall ( retType , calciteOp , childRexNodeLst ) 
__label__1 ['trimmedLine.endsWith'  '('  'delimiter'  ')'] 
__label__1 ['SpringApplication.class'] 
__label__0 start.set ( Calendar.DAY_OF_MONTH , startDay ) 
__label__0 InputLaunchResponse.class 
__label__0 getEndpoint ( ) .getConfig ( ) .getIndexType ( ) 
__label__0 incomingMessage.getMessagePayloadByte ( 0 ) 
__label__0 Status.createStatuseList ( get ( getBaseURL ( ) + `` statuses/public_timeline.json '' , false ) ) 
__label__0 sanitizeName ( name ) 
__label__1 ['('  'long'  ')'  'y'  '&'  '0xFFFFFFFL'] 
__label__1 ['targetDirectory.directory'  '('  '``'  'unwritable'  "''"  ')'] 
__label__0 Runnable t=new RunAfterTester ( new DisconnectionBehavior ( h2 , h1 ) , new QueueCallBuilder ( h2 ) ) ; 
__label__1 ['getWrappedEngine'  '('  ')'  '.release'  '('  ')'] 
__label__1 ['from'  '('  '``'  'direct'  ':'  'start'  "''"  ')'  '.multicast'  '('  'new'  'AggregationStrategy'  '('  ')'  '{'  'public'  'Exchange'  'aggregate'  '('  'Exchange'  'oldExchange'  ' '  'Exchange'  'newExchange'  ')'  '{'  'if'  '('  'oldExchange'  '=='  'null'  ')'  '{'  'return'  'newExchange'  ';'  '}'  'String'  'body=oldExchange.getIn'  '('  ')'  '.getBody'  '('  'String.class'  ')'  ';'  'oldExchange.getIn'  '('  ')'  '.setBody'  '('  'body'  '+'  'newExchange.getIn'  '('  ')'  '.getBody'  '('  'String.class'  ')'  ')'  ';'  'return'  'oldExchange'  ';'  '}'  '}'  ')'  '.parallelProcessing'  '('  ')'  '.timeout'  '('  '2000'  ')'] 
__label__1 ['users.size'  '('  ')'  '>'  '90'] 
__label__1 ['memoryReservation.getAndAdd'  '('  'bytes'  ')'] 
__label__1 ['deployOneTaskProcess'  '('  ')'] 
__label__1 ['assertSpnegoWorkflow'  '('  'uri'  ' '  'mechTypes'  ' '  'kerberosToken'  ' '  'kerberosToken'  ' '  'true'  ' '  'true'  ')'] 
__label__0 / * * * Tests for { @ link Es6SortedDependencies } * / public class Es6SortedDependenciesTest extends SortedDependenciesTestHelper { @ Override public SortedDependencies < SimpleDependencyInfo > createSortedDependencies ( List < SimpleDependencyInfo > shuffled ) throws CircularDependencyException { return new Es6SortedDependencies < > ( shuffled ) ; } @ Override public boolean handlesCycles ( ) { return true ; } } 
__label__0 node.getLifecycleService ( ) .shutdown ( ) 
__label__0 var.setValueType ( guessType ( value ) ) 
__label__0 engine.execute ( query ) .dumpToString ( ) 
__label__1 ['writeLock'  '('  ')'] 
__label__1 ['@'  'Override'  'public'  'Object'  'getValue'  '('  ')'  '{'  'return'  'getThreadCount'  '('  'state'  ')'  ';'  '}'] 
__label__1 ['selector.select'  '('  '500'  ')'] 
__label__0 params.getInt ( `` numPages '' , PageRankData.getNumberOfPages ( ) ) 
__label__0 bundleContext.getBundle ( ) .getResource ( uri ) 
__label__1 ['tblObj.getDataLocation'  '('  ')'] 
__label__1 ['row'  '('  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ' '  'null'  ')'] 
__label__0 DataStreamSink < OUT > 
__label__0 Assert.assertEquals ( new InetSocketAddress ( defaultHostname , defaultPort ) , masterAddress ) 
__label__0 new ArrayList < > ( 3 ) 
__label__1 ['progress.start'  '('  '0.45f'  ')'] 
__label__0 getNonCompilablePath ( `` InputPackageDeclarationDiffDirectoryAtSubpackage.java '' ) 
__label__1 ['FiltersTopComponent.findInstance'  '('  ')'  '.getUiModel'  '('  ')'  '.getSelectedQuery'  '('  ')'] 
__label__1 ['final'  'PkgControl'  'root=ImportControlLoader.load'  '('  'new'  'File'  '('  'getPath'  '('  '``'  'import-control_complete.xml'  "''"  ')'  ')'  '.toURI'  '('  ')'  ')'  ';'] 
__label__0 context.var ( `` long '' ,2 ) 
__label__1 ['stateHolder.reloadVariables'  '('  ')'] 
__label__1 ['assertEquals'  '('  '0'  ' '  'localReplicatedMapStats.getOwnedEntryMemoryCost'  '('  ')'  ')'] 
__label__0 targetDescription.getDeclaredValueClassName ( ) 
__label__1 ['from'  '('  '``'  'direct'  ':'  'tap'  "''"  ')'  '.delay'  '('  '100'  ')'] 
__label__0 endFunction ( `` get_column_statistics_by_table : `` , statsObj ! = null , null ) 
__label__0 stackTrace.length < = depth 
__label__1 ['from'  '('  '``'  'direct'  ':'  'start'  "''"  ')'  '.multicast'  '('  'new'  'AggregationStrategy'  '('  ')'  '{'  'public'  'Exchange'  'aggregate'  '('  'Exchange'  'oldExchange'  ' '  'Exchange'  'newExchange'  ')'  '{'  'if'  '('  'oldExchange'  '=='  'null'  ')'  '{'  'return'  'newExchange'  ';'  '}'  'String'  'body=oldExchange.getIn'  '('  ')'  '.getBody'  '('  'String.class'  ')'  ';'  'oldExchange.getIn'  '('  ')'  '.setBody'  '('  'body'  '+'  'newExchange.getIn'  '('  ')'  '.getBody'  '('  'String.class'  ')'  ')'  ';'  'return'  'oldExchange'  ';'  '}'  '}'  ')'  '.parallelProcessing'  '('  ')'  '.timeout'  '('  '2000'  ')'] 
__label__1 ['new'  'EnumValidator'  '<'  'TransactionMode'  '>'  '('  'TransactionMode.class'  ' '  'true'  ' '  'false'  ')'] 
__label__1 ['response.set'  '('  'ROLLED_BACK'  ')'] 
__label__0 i > 0 & & glyphPositions [ i ] - x < = x - glyphPositions [ i - 1 ] 
__label__1 ['LOG.error'  '('  '``'  'Failed'  'to'  'freeSpace'  ':'  'No'  'StorageDirView'  'has'  'enough'  'capacity'  'of'  '{'  '}'  'bytes'  "''"  ' '  'availableBytes'  ')'] 
__label__0 findDelegateForNewObject ( name ) 
__label__1 ['target.setField'  '('  '1'  ' '  'edge'  ')'] 
__label__1 ['field.getRawType'  '('  ')'] 
__label__0 combine ( getDefaultCamelKarafOptions ( ) , provision ( TinyBundles.bundle ( ) .add ( `` META-INF/persistence.xml '' , BlobStoreBlueprintRouteTest.class.getResource ( `` /META-INF/persistence.xml '' ) ) .add ( `` OSGI-INF/blueprint/test.xml '' , BlobStoreBlueprintRouteTest.class.getResource ( `` blueprintCamelContext.xml '' ) ) .set ( Constants.BUNDLE_SYMBOLICNAME , '' CamelBlueprintJcloudsTestBundle '' ) .set ( Constants.DYNAMICIMPORT_PACKAGE , '' * '' ) .set ( `` Meta-Persistence '' , '' META-INF/persistence.xml '' ) .build ( ) ) , bundle ( TinyBundles.bundle ( ) .add ( `` OSGI-INF/blueprint/test.xml '' , BlobStoreBlueprintRouteTest.class.getResource ( `` blueprintBlobStoreService.xml '' ) ) .set ( Constants.BUNDLE_SYMBOLICNAME , '' org.apache.camel.jclouds.blobstore.service '' ) .set ( Constants.BUNDLE_VERSION , '' 1.0.0 '' ) .set ( Constants.DYNAMICIMPORT_PACKAGE , '' * '' ) .build ( ) ) .start ( ) , loadCamelFeatures ( `` camel-blueprint '' , '' camel-jclouds '' ) , workingDirectory ( `` target/paxrunner/ '' ) ) 
__label__0 getClientConfig ( ) .getAddresses ( ) 
__label__1 ['publisher.publishWanReplicationUpdate'  '('  'name'  ' '  'view'  ')'] 
__label__0 rejectRemoteInitiatedRenegotiation & & ! isDestroyed ( ) & & SSL.getHandshakeCount ( ssl ) > 1 
__label__1 ['('  'Object'  ')'  'y'] 
__label__0 public class XpathRegressionOneStatementPerLineTest extends XpathTestSupport { @ Test public void testOne ( ) throws Exception { final String checkName=OneStatementPerLineCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionOneStatementPerLineOne.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( OneStatementPerLineCheck.class ) ; final String [ ] expectedViolation= { `` 4:17 : `` + getCheckMessage ( OneStatementPerLineCheck.class , OneStatementPerLineCheck.MSG_KEY ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionOneStatementPerLineOne ' ] /OBJBLOCK '' + `` /VARIABLE_DEF [ @ text= ' j ' ] /SEMI '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } @ Test public void testTwo ( ) throws Exception { final String checkName=OneStatementPerLineCheck.class.getSimpleName ( ) ; final File fileToProcess=new File ( getPath ( checkName , '' SuppressionXpathRegressionOneStatementPerLineTwo.java '' ) ) ; final DefaultConfiguration moduleConfig=createModuleConfig ( OneStatementPerLineCheck.class ) ; final String [ ] expectedViolation= { `` 9:39 : `` + getCheckMessage ( OneStatementPerLineCheck.class , OneStatementPerLineCheck.MSG_KEY ) } ; final List < String > expectedXpathQueries=Collections.singletonList ( `` /CLASS_DEF [ @ text='SuppressionXpathRegressionOneStatementPerLineTwo ' ] /OBJBLOCK '' + `` /METHOD_DEF [ @ text='foo5 ' ] /SLIST/LITERAL_FOR/SLIST/SEMI '' ) ; runVerifications ( moduleConfig , fileToProcess , expectedViolation , expectedXpathQueries ) ; } } 
__label__1 ['is'  '('  '``'  '/home/source'  "''"  ')'] 
__label__0 LOGGER.error ( `` { } - Failed to execute connection test query . ( { } ) '' , poolName , e.getMessage ( ) ) 
__label__0 ImmutableList < TypedVar > 
__label__1 ['new'  'UnsafeBasedStringCharProvider'  '('  'UNSAFE'  ' '  'stringValueFieldOffset'  ' '  'str'  ')'] 
__label__0 mSizeOnTier.containsKey ( tierAlias ) ? mSizeOnTier.get ( tierAlias ) : 0L 
__label__1 ['@'  'Override'  'public'  'ResponseImpl'  'description'  '('  'String'  'description'  ')'  '{'  'throw'  'new'  'RuntimeException'  '('  '``'  'Not'  'implemented'  "''"  ')'  ';'  '}'] 
__label__0 new JedisClusterCommand < Long > ( connectionHandler , maxRedirections ) { @ Override public Long execute ( Jedis connection ) { return connection.persist ( key ) ; } } 
__label__1 ['resultEndpoint.assertIsSatisfied'  '('  '5000'  ')'] 
__label__0 cSet.getConceptSet ( ) 
__label__0 new JSONOrderedObject ( ) 
__label__1 ['AvailablePortFinder.getNextAvailable'  '('  ')'] 
__label__0 @ Override public ExtendedCell deepClone ( ) { Cell clonedBaseCell= ( ( ExtendedCell ) this.cell ) .deepClone ( ) ; return new TagRewriteCell ( clonedBaseCell , this.tags ) ; } 
__label__0 pId + BASE_FILE_NUMBER 
__label__0 connection.zrevrangeByLex ( key , max , min ) 
__label__0 nodeManager.getWorkerNodes ( ) 
__label__0 assertPlanEquals ( expectedPlan , actualPlan ) 
__label__1 ['header.writeBytes'  '('  'mask'  ')'] 
__label__1 ['sizeNeeded'  '>'  '='  'items.length'] 
__label__1 ['new'  'ClientBuilderImpl'  '('  ')'  '.serviceUrl'  '('  'getPulsarBrokerUrl'  '('  ')'  ')'  '.ioThreads'  '('  '2'  ')'] 
__label__0 Assert.assertEquals ( 256 , intValue ) 
__label__1 ['buffer.capacity'  '('  ')'] 
__label__1 ['clazz.isPrimitive'  '('  ')'  '||'  'clazz.isArray'  '('  ')'] 
__label__1 ['GL20.glGetProgram'  '('  'program'  ' '  'pname'  ' '  'params'  ')'] 
__label__1 ['info.getRegionName'  '('  ')'] 
__label__1 ['node.getLifecycleService'  '('  ')'  '.terminate'  '('  ')'] 
__label__1 ['Arrays.asList'  '('  '``'  'Java'  "''"  ' '  "''"  'CSharp'  "''"  ')'] 
__label__0 new StringBuilder ( 256 ) 
__label__0 new TableException ( String.format ( `` Unable to generate a string representation of the serializer snapshot of ' % s ' `` + `` describing the class ' % s ' for the ANY type . `` , serializer.getClass ( ) .getName ( ) , clazz.toString ( ) ) , e ) 
__label__1 ['op.get'  '('  '``'  'address'  "''"  ')'  '.set'  '('  '``'  'host'  "''"  ' '  'host'  ')'] 
__label__1 ['bean.getCollectionCount'  '('  ')'] 
__label__1 ['@'  'Override'  'public'  'Cell'  'deepClone'  '('  ')'  '{'  'byte'  '['  ']'  'copy=Bytes.copy'  '('  'this.bytes'  ' '  'this.offset'  ' '  'this.length'  ')'  ';'  'KeyValue'  'kv=new'  'KeyValue'  '('  'copy 0'  ' '  'copy.length'  ')'  ';'  'kv.setSequenceId'  '('  'this.getSequenceId'  '('  ')'  ')'  ';'  'return'  'kv'  ';'  '}'] 
__label__0 Assert.assertTrue ( rule.appliesTo ( builder.interval ( new Interval ( now.minusDays ( 1 ) , now.plusDays ( 1 ) ) ) .build ( ) , now ) ) 
__label__1 ['LOG.error'  '('  '``'  'Error'  'in'  'response'  'for'  'blockId'  ':'  '``'  '+'  'recvMsg.getBlockId'  '('  ')'  '+'  '``'  'message'  ':'  '``'  '+'  'recvMsg.getStatus'  '('  ')'  '.getMessage'  '('  ')'  ')'] 
__label__1 ['logger.error'  '('  '``'  '['  '{'  '}'  ']'  ':'  'Websocket'  'error'  ':'  '{'  '}'  "''"  ' '  'connection.getHost'  '('  ')'  ' '  'e.getMessage'  '('  ')'  ')'] 
__label__0 new InetSocketAddress ( configuration.getRestListenUri ( ) .getHost ( ) , configuration.getRestListenUri ( ) .getPort ( ) ) 
__label__0 Assert.assertTrue ( `` reload-required '' .equals ( result.get ( RESPONSE_HEADERS ) .get ( PROCESS_STATE ) .asString ( ) ) ) 
__label__1 ['view.getCurrentMode'  '('  ')'] 
__label__1 ['val.get'  '('  'key'  ')'] 
__label__1 ['LOG.warn'  '('  '``'  'Requesting'  'paths'  'for'  'query'  'services'  'failed'  '.'  '``'  ' '  'throwable'  ')'] 
__label__0 uncompressedProto.length < 1800000 
__label__1 ['Optional.of'  '('  'resourceManagementScheduler'  ')'] 
__label__0 FlinkKafkaProducer011.class 
__label__1 ['assertEquals'  '('  'expectedPlan'  ' '  'actualPlan'  ')'] 
__label__1 ['new'  'ArrayList'  '<'  '>'  '('  ')'] 
__label__1 ['findDelegate'  '('  'name'  ')'] 
__label__1 ['Arrays.equals'  '('  'oldVal'  ' '  'val'  ')'] 
__label__0 JSError.make ( file.toString ( ) , -1 , -1 , ModuleLoader.MODULE_CONFLICT , file.toString ( ) ) 
__label__1 ['new'  'Exception'  '('  ')'] 
__label__1 ['Mockito.doThrow'  '('  'EXCEPTION'  ')'  '.when'  '('  'mFileSystemMasterClient'  ')'  '.mount'  '('  'alluxioPath'  ' '  'ufsPath'  ')'] 
__label__0 DynamicAttributeRanking.refreshMinMax ( this , graph ) 
__label__0 @ ConditionalOnEnabledHealthIndicator ( `` mongo '' ) 
__label__0 getMockEndpoint ( `` mock : '' + i ) .expectedMessageCount ( 200 ) 
__label__0 messageHandler.responder ( ) 
__label__1 ['ast.atnState'  '!'  '='  'null'] 
__label__1 ['new'  'StringBuilder'  '('  '239'  ')'] 
__label__0 final P testedPrototype 
__label__0 Boolean.getBoolean ( `` java.awt.headless '' ) || System.getProperty ( `` os.name '' ) .startsWith ( `` Mac OS '' ) & & System.getProperty ( `` user.name '' ) .equals ( `` cruise '' ) 
__label__1 ['before'  '!'  '='  'after'] 
__label__1 ['collisionPoints.get'  '('  '2'  ')'] 
__label__1 ['return'  'false'  ';'] 
__label__0 this.transactionsRepository.getTransaction ( this.xidTransactionID ) 
__label__1 ['@'  'ConditionalOnEnablednHealthIndicator'  '('  '``'  'elasticsearch'  "''"  ')'] 
__label__1 ['new'  'ChannelHandlerAdapter'  '('  ')'  '{'  '@'  'Override'  'public'  'void'  'channelWritabilityChanged'  '('  'ChannelHandlerContext'  'ctx'  ')'  'throws'  'Exception'  '{'  'buf.append'  '('  'ctx.channel'  '('  ')'  '.isWritable'  '('  ')'  ')'  ';'  'buf.append'  '('  "'"  "'"  ')'  ';'  '}'  '}'] 
__label__0 optionsOverride.getLambdaRole ( ) 
__label__1 ['logger.info'  '('  '``'  'Return'  'Object'  '{'  '}'  'now'  'at'  'size'  '{'  '}'  "''"  ' '  'b'  ' '  'count.getAndDecrement'  '('  ')'  ')'] 
__label__1 ['applicationContext'  '!'  '='  'null'] 
__label__0 new ImportControl ( pkg , regex ) 
__label__1 ['('  'outputFolder'  '+'  'File.separator'  '+'  'modelFolder'  ')'  '.replaceAll'  '('  '``'  '/'  "''"  ' '  'File.separator'  ')'] 
__label__1 ['methodName.startsWith'  '('  '``'  'save'  "''"  ')'] 
__label__0 bean.getCollectionTime ( ) 
__label__1 ['assertMockEndpointsSatisifed'  '('  ')'] 
__label__0 lookup= '' java : comp/ds '' 
__label__1 ['TfsShell.convertMsToDate'  '('  'files'  '['  '3'  ']'  '.getCreationTimeMs'  '('  ')'  ')'] 
__label__0 LogUtils.initializeDefaultTestConsoleLogger ( ) 
__label__0 new File ( value ) .toPath ( ) 
__label__1 ['file.getFileName'  '('  ')'] 
__label__1 ['stackTrace.length'  '<'  'depth'] 
__label__0 doInvoke ( args.first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , ( args=args.rest ( ) ) .first ( ) , args.rest ( ) ) 
__label__1 ['type.toUpperCase'  '('  'ENGLISH'  ')'] 
__label__0 checkArgument ( partitionColumns.size ( ) == values.size ( ) , '' Partition value count does not match the partition column count '' ) 
__label__1 ['TailArraySchema'  'schema=new'  'TailArraySchema'  '('  ')'  ';'] 
__label__1 ['dataFormatModel.setLabel'  '('  'row.get'  '('  '``'  'description'  "''"  ')'  ')'] 
__label__1 ['getRegistry'  '('  ')'  '.put'  '('  '``'  'hb'  "''"  ' '  'hb'  ')'] 
__label__0 ! file.getName ( ) .startsWith ( `` branched- '' ) 
__label__1 ['this.contextRunner.withUserConfiguration'  '('  'TestSecurityConfiguration.class'  ' '  'JwtDecoderConfiguration.class'  ')'] 
__label__0 endsWith ( `` /home/source '' ) 
__label__1 ['DiagnosticType.error'  '('  '``'  'JSC_GOOG_MODULE_IN_NON_MODULE'  "''"  ' '  "''"  'goog.module'  '('  ')'  'call'  'must'  'be'  'the'  'first'  'statement'  'in'  'a'  'module'  '.'  "''"  ')'] 
__label__1 ['Foundation.NSLog'  '('  '``'  '['  'info'  ']'  '``'  '+'  'tag'  '+'  '``'  ':'  '``'  '+'  'message'  ')'] 
__label__0 public Object getBean ( ) throws NoBeanAvailableException { Object value=lookupBean ( ) ; if ( value == null ) { throw new NoBeanAvailableException ( name ) ; } if ( value ! = bean ) { bean=value ; processor=null ; if ( ! ObjectHelper.equal ( ObjectHelper.type ( bean ) , ObjectHelper.type ( value ) ) ) { beanInfo=null ; } } return value ; } 
__label__1 ['http2.setInitialStreamSendWindow'  '('  'initialStreamSendWindow'  ')'] 
__label__0 encounter.getObsAtTopLevel ( true ) 
__label__1 ['jarName.endsWith'  '('  '``'  '.jar'  "''"  ')'] 
__label__0 assertMockEndpointsSatisfied ( ) 
__label__1 ['new'  'PrestoException'  '('  'INVALID_CAST_ARGUMENT'  ' '  'e'  ')'] 
__label__0 mockRegionInfo.isMetaTable ( ) 
__label__1 ['hazelcastFactory.newHazelcastClient'  '('  ')'] 
__label__0 assertEquals ( orig.getResponse ( ) , expectedResponse ) 
__label__0 timelineObjectHolder.getObject ( ) .getChunk ( 0 ) .getObject ( ) .getMetrics ( ) 
__label__1 ['littleEndian.order'  '('  ')'] 
__label__1 ['return'  'true'  ';'] 
__label__0 UIPasteboard.getGeneralPasteboard ( ) 
__label__1 ['logger.info'  '('  '``'  'Session'  'created'  "''"  ')'] 
__label__0 log.err ( `` Could not annotate via server ! Trying to annotate locally ... '' , t ) 
__label__0 ! undirected & & vizConfig.isShowArrows ( ) & & ! edge.isSelfLoop ( ) & & edge.isDirected ( ) 
__label__1 ['request.getTaskDefinitionKey'  '('  ')'] 
__label__0 ASSERT.about ( javaSource ( ) ) .that ( file ) .processedWith ( new AutoFactoryProcessor ( ) ) .failsToCompile ( ) .withErrorContaining ( `` AutoFactory does not support generic types '' ) .in ( file ) .onLine ( 21 ) 
__label__0 start.expectedMessageCount ( 7 ) 
__label__1 ['name.substring'  '('  '0'  ' '  'name.length'  '('  ')'  '-'  '1'  ')'] 
__label__1 ['LOG.info'  '('  '``'  'Building'  'gRPC'  'server'  'on'  '<'  'any'  'address'  '>'  "''"  '+'  '``'  ':'  "''"  '+'  'configuration.getPort'  '('  ')'  ')'] 
__label__1 ['assertEquals'  '('  '2'  ' '  'map.size'  '('  ')'  ')'] 
__label__0 a.getBoolean ( R.styleable.DragSortListView_use_default_controller , true ) 
__label__1 ['ticket.notify'  '('  ')'] 
__label__0 mapper.setFilterProvider ( new SimpleFilterProvider ( ) .addFilter ( CGLIB_FILTER_ID , new CglibBeanPropertyFilter ( ) ) ) 
__label__0 Bytes.toString ( qualifierName , start , end ) 
__label__0 new JSONParseSpec ( new TimestampSpec ( `` timestamp '' , '' auto '' ) , new DimensionsSpec ( Arrays.asList ( `` dim1 '' , '' dim2 '' ) , null , null ) ) 
__label__1 ['r.getRequest'  '('  ')'] 
__label__1 ['collection'  '('  'StreamImpl.class'  ')'  '.update'  '('  'match'  ' '  'modify'  ')'] 
__label__0 indexOutURI.toString ( ) 
__label__0 getTablename ( ) .getName ( ) 
__label__0 bundleContext.getBundle ( ) .getResource ( uri ) 
__label__0 assertEquals ( 3 , historyService.createHistoricActivityInstanceQuery ( ) .executionId ( processInstance.getId ( ) ) .list ( ) .size ( ) ) 
__label__0 log.error ( `` Error while closing command context '' , exception ) 
__label__0 zwaveCommandClass.handleApplicationCommandRequest ( serialMessage , offset + 2,0 ) 
__label__0 new BadRequestException ( `` Field `` + field + `` is not of a numeric type and the cardinality could not be calculated either . `` , e1 ) 
__label__1 ['Map'  '<'  'String'  ' '  'Integer'  '>'] 
__label__0 xtw.writeCData ( customProperty.getSimpleValue ( ) ) 
__label__1 ['className.indexOf'  '('  '``'  'org.openmrs'  '.'  "''"  ')'] 
__label__0 -Float.parseFloat ( position.getChildByName ( `` Y '' ) .getText ( ) ) 
__label__0 JavaConversions.asJavaIterable ( logManager.allLogs ( ) ) 
__label__1 ['calendar.get'  '('  'HOUR'  ')'] 
__label__1 ['clockSource.elapsedMillis'  '('  'startTime'  ' '  'now'  ')'] 
__label__0 waitUntil ( ( ) - > externalNodesStarted.get ( ) == NODE_COUNT,60_000 ) 
__label__0 options.checkProvides.isOn ( ) || options.enables ( DiagnosticGroups.MISSING_PROVIDE ) 
__label__0 minSize ( new Fixed ( width ) , new Fixed ( height ) ) 
__label__0 this.thrown.expectMessage ( `` File must not be null '' ) 
__label__1 ['elementName=options.get'  '('  'ARRAY_NAME'  ')'] 
__label__1 ['values'  '=='  'null'] 
__label__1 ['Thread.sleep'  '('  '200'  ')'] 
__label__0 nameTextField.getText ( ) 
__label__1 ['new'  'StringBuilder'  '('  '247'  ')'] 
__label__0 inputProcessor.touchDragged ( event.x , event.y , event.pointer ) 
__label__0 times + BASE_FILE_NUMBER 
__label__0 target.addTaskAndWakeup ( task ) 
__label__1 ['getEndpoint'  '('  ')'  '.getConfig'  '('  ')'  '.getIndexName'  '('  ')'] 
